
flight_control.elf:     file format elf32-littlenios2
flight_control.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001aca0 memsz 0x0001aca0 flags r-x
    LOAD off    0x0001bcc0 vaddr 0x0001acc0 paddr 0x0001cb3c align 2**12
         filesz 0x00001e7c memsz 0x00001e7c flags rw-
    LOAD off    0x0001e9b8 vaddr 0x0001e9b8 paddr 0x0001e9b8 align 2**12
         filesz 0x00000000 memsz 0x000172d8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a0f8  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000980  0001a340  0001a340  0001b340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e7c  0001acc0  0001cb3c  0001bcc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000172d8  0001e9b8  0001e9b8  0001e9b8  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00035c90  00035c90  0001db3c  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0001db3c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001db3c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d00  00000000  00000000  0001db60  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023683  00000000  00000000  0001e860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008494  00000000  00000000  00041ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b96d  00000000  00000000  0004a377  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003370  00000000  00000000  00055ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000520b  00000000  00000000  00059054  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00014bb3  00000000  00000000  0005e25f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00072e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013e8  00000000  00000000  00072e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00079535  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0007953b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00079540  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00079541  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00079542  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00079546  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007954a  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007954e  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00079557  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00079560  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  00079569  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003e  00000000  00000000  00079578  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d201d  00000000  00000000  000795b6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0001a340 l    d  .rodata	00000000 .rodata
0001acc0 l    d  .rwdata	00000000 .rwdata
0001e9b8 l    d  .bss	00000000 .bss
00035c90 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../flight_control_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 flight_control.c
0000036c l     F .text	00000060 create_tasks
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001a766 l     O .rodata	00000010 zeroes.4389
0001a776 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
00003f80 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 impure.c
0001acc0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001b104 l     O .rwdata	00000020 lc_ctype_charset
0001b0e4 l     O .rwdata	00000020 lc_message_charset
0001b124 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
0001a7a8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001a8dc l     O .rodata	00000010 blanks.4332
0001a8cc l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
0000c90c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001ca98 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001ca9c l     O .rwdata	00000004 lockid
0001ea14 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001caa0 l     O .rwdata	00000004 lockid
0001ea1c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000e464 l     F .text	00000048 OS_InitMisc
0000e4ac l     F .text	0000006c OS_InitRdyList
0000e618 l     F .text	000000e4 OS_InitTCBList
0000e384 l     F .text	000000e0 OS_InitEventList
0000e518 l     F .text	00000080 OS_InitTaskIdle
0000e598 l     F .text	00000080 OS_InitTaskStat
0000e888 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00010608 l     F .text	000000f4 OS_FlagTaskRdy
000103c8 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
000160c8 l     F .text	0000003c OSTmr_Lock
00015b98 l     F .text	0000006c OSTmr_Alloc
00016104 l     F .text	00000034 OSTmr_Unlock
00015fd4 l     F .text	000000f4 OSTmr_Unlink
00015c04 l     F .text	0000009c OSTmr_Free
00015e8c l     F .text	00000148 OSTmr_Link
00015e0c l     F .text	00000080 OSTmr_InitTask
00016138 l     F .text	00000108 OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
00016240 l     F .text	00000034 alt_dev_reg
0001b564 l     O .rwdata	0000106c JTAG_UART
0001c5d0 l     O .rwdata	00000030 AV_Config
0001c600 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001c630 l     O .rwdata	0000002c Char_LCD_16x2
0001c65c l     O .rwdata	0000002c IrDA
0001c688 l     O .rwdata	00000038 PS2_Port
0001c6c0 l     O .rwdata	00000038 PS2_Port_Dual
0001c6f8 l     O .rwdata	0000002c Serial_Port
0001c724 l     O .rwdata	00000034 USB
0001c758 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0001c7b4 l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
0001c810 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
0001c86c l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
0001c8b0 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00016eb8 l     F .text	000002a8 altera_avalon_jtag_uart_irq
00017160 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001793c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00018e18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00018f44 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00018f70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000191d4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00019494 l     F .text	0000003c alt_get_errno
000194d0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
0001eaa0 l     O .bss	00000002 OSTmrCtr
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001eaa4 g     O .bss	00000004 alt_instruction_exception_handler
0001e9bc g     O .bss	00000004 inbound_dsp_queue
000071a0 g     F .text	00000074 _mprec_log10
0001caee g     O .rwdata	00000002 OSTaskNameSize
0000728c g     F .text	0000008c __any_on
0001a7b4 g     O .rodata	00000028 __mprec_tinytens
0000c9f8 g     F .text	000000bc alt_main
0001e9c0 g     O .bss	00000001 row_swap
0001ea24 g     O .bss	00000004 OSTmrFreeList
00035b90 g     O .bss	00000100 alt_irq
000184f8 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
000118f0 g     F .text	000000cc OS_MemInit
00001bec g     F .text	00000080 VGA_clear_character
0001cb3c g       *ABS*	00000000 __flash_rwdata_start
00015120 g     F .text	00000060 OSTimeSet
00017aa0 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000b438 g     F .text	00000088 .hidden __eqdf2
000309d0 g     O .bss	00000010 OSTmrWheelTbl
0000d0d4 g     F .text	00000610 OSEventPendMulti
00035c90 g       *ABS*	00000000 __alt_heap_start
00019b40 g     F .text	00000024 OSTaskCreateHook
0001e9c4 g     O .bss	00000004 expired_sem
0001cac6 g     O .rwdata	00000002 OSMboxEn
0000d740 g     F .text	0000004c OSIntEnter
0001e9c8 g     O .bss	00000004 callback_sem
00018310 g     F .text	00000034 read_CE_bit
0001cad6 g     O .rwdata	00000002 OSQEn
00005808 g     F .text	0000007c _setlocale_r
0000cda8 g     F .text	000000cc __malloc_unlock
00019ba8 g     F .text	00000020 OSTaskStatHook
00018698 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
00018b8c g     F .text	00000090 alt_up_rs232_read_fd
000003cc g     F .text	00000960 flight_task
0001ea28 g     O .bss	00000001 OSLockNesting
0001ea2c g     O .bss	00000004 OSTmrSemSignal
0001cb14 g     O .rwdata	00000002 OSDataSize
0001ea30 g     O .bss	00000001 OSRunning
00008e58 g     F .text	0000015c memmove
00019c14 g     F .text	00000024 OSInitHookBegin
0001cb0c g     O .rwdata	00000002 OSTmrSize
0000631c g     F .text	000000a8 _Balloc
0001e9cc g     O .bss	00000004 in_expire_mailbox
0001ea34 g     O .bss	00000004 OSIdleCtr
0000b4c0 g     F .text	000000dc .hidden __gtdf2
00000fd4 g     F .text	000008f4 input_task
000198f0 g     F .text	00000024 altera_nios2_gen2_irq_init
000199c0 g       .text	00000000 OSStartTsk
00017a2c g     F .text	00000074 get_DDRAM_addr
0000ebc8 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0001ea38 g     O .bss	00000002 OSTmrUsed
0001cb12 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001cab2 g     O .rwdata	00000002 OSEventSize
0001ea3a g     O .bss	00000001 OSPrioHighRdy
00019b64 g     F .text	00000024 OSTaskDelHook
0001ea04 g     O .bss	00000004 errno
000199a0 g       .text	00000000 OSStartHighRdy
00013bbc g     F .text	000001e4 OSTaskCreateExt
00007724 g     F .text	0000123c ___svfiprintf_internal_r
0000ff10 g     F .text	00000060 OSFlagPendGetFlagsRdy
0001caf2 g     O .rwdata	00000002 OSTaskStatStkSize
0000f08c g     F .text	00000308 OSFlagAccept
00011f28 g     F .text	000000b8 OSQFlush
000119bc g     F .text	00000140 OSQAccept
0001ea0c g     O .bss	00000004 alt_argv
00024a84 g       *ABS*	00000000 _gp
00013a10 g     F .text	000001ac OSTaskCreate
00013520 g     F .text	000004f0 OSTaskChangePrio
0001ea20 g     O .bss	00000004 alt_heapsem
0000ee9c g     F .text	000001f0 OSDebugInit
00013da0 g     F .text	00000344 OSTaskDel
0001ead0 g     O .bss	00000680 display_data
0001c904 g     O .rwdata	00000180 alt_fd_list
000309e0 g     O .bss	00000630 OSFlagTbl
0000e164 g     F .text	000000b8 OS_EventTaskRemove
00019110 g     F .text	00000090 alt_find_dev
000061d4 g     F .text	00000148 memcpy
0001cadc g     O .rwdata	00000002 OSRdyTblSize
00017c48 g     F .text	00000050 alt_up_character_lcd_write_fd
00031010 g     O .bss	00000750 OSTmrTbl
0000c724 g     F .text	000000dc .hidden __floatsidf
00019298 g     F .text	0000007c alt_io_redirect
0000b59c g     F .text	000000f4 .hidden __ltdf2
0001a340 g       *ABS*	00000000 __DTOR_END__
000181e0 g     F .text	00000090 alt_up_irda_write_fd
00018b18 g     F .text	00000074 alt_up_rs232_read_data
00019f10 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000ce74 g     F .text	00000120 OSEventNameGet
0001f150 g     O .bss	00010000 flight_stack
0001cac0 g     O .rwdata	00000002 OSFlagMax
00007318 g     F .text	00000074 __fpclassifyd
000070fc g     F .text	000000a4 __ratio
0000d78c g     F .text	000000f8 OSIntExit
0001cafa g     O .rwdata	00000002 OSTCBSize
0001ea3b g     O .bss	00000001 OSPrioCur
00017fdc g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
000173bc g     F .text	000002bc altera_avalon_jtag_uart_read
0000a1e8 g     F .text	00000064 .hidden __udivsi3
0001cae0 g     O .rwdata	00000002 OSStkWidth
0001a804 g     O .rodata	000000c8 __mprec_tens
0001cad4 g     O .rwdata	00000002 OSPtrSize
00005884 g     F .text	0000000c __locale_charset
0001cab4 g     O .rwdata	00000002 OSEventTblSize
00017f7c g     F .text	00000060 alt_up_irda_disable_read_interrupt
00019914 g       .text	00000000 OSCtxSw
00019e80 g     F .text	00000090 alt_icache_flush
0001ea00 g     O .bss	00000004 __malloc_top_pad
0001ea3c g     O .bss	00000004 OSTCBList
00015b60 g     F .text	00000038 OSTmrSignal
0001ea90 g     O .bss	00000004 alt_fd_list_lock
0001ca8c g     O .rwdata	00000004 __mb_cur_max
000058b4 g     F .text	0000000c _localeconv_r
0001e9d0 g     O .bss	00000001 inboundCount
00006728 g     F .text	0000003c __i2b
00031760 g     O .bss	00000c30 OSMemTbl
0001ea40 g     O .bss	00000001 OSTickStepState
0001e9d4 g     O .bss	00000004 expired_ack_sem
0000738c g     F .text	00000054 _sbrk_r
0001cad8 g     O .rwdata	00000002 OSQMax
00032390 g     O .bss	00000800 OSTaskStatStk
0001152c g     F .text	000000f0 OSMemNameGet
0001cab8 g     O .rwdata	00000002 OSFlagEn
0001cafe g     O .rwdata	00000002 OSTimeTickHookEn
000106fc g     F .text	000000a4 OS_FlagUnlink
000123d8 g     F .text	00000168 OSQPost
0001cb28 g     O .rwdata	00000004 alt_max_fd
00018a94 g     F .text	00000044 alt_up_rs232_check_parity
0000e750 g     F .text	00000068 OS_MemCopy
0000e7b8 g     F .text	000000d0 OS_Sched
0001143c g     F .text	000000f0 OSMemGet
00011158 g     F .text	00000110 OSMboxQuery
000143cc g     F .text	000001b4 OSTaskNameSet
00018344 g     F .text	00000030 read_num_bytes_available
0001e9fc g     O .bss	00000004 __malloc_max_sbrked_mem
0001ea44 g     O .bss	00000004 OSCtxSwCtr
00019bc8 g     F .text	0000004c OSTimeTickHook
00019314 g     F .text	00000180 alt_irq_register
0001cac2 g     O .rwdata	00000002 OSFlagNameSize
000182ac g     F .text	00000034 read_RI_bit
0000e21c g     F .text	00000100 OS_EventTaskRemoveMulti
0000a2a4 g     F .text	000008ac .hidden __adddf3
0000e014 g     F .text	00000150 OS_EventTaskWaitMulti
00006ea4 g     F .text	0000010c __b2d
0001cada g     O .rwdata	00000002 OSQSize
00009bb8 g     F .text	00000538 .hidden __umoddi3
00012e88 g     F .text	0000020c OSSemPend
0001ca84 g     O .rwdata	00000004 _global_impure_ptr
000090dc g     F .text	00000564 _realloc_r
0001cac4 g     O .rwdata	00000002 OSLowestPrio
00035c90 g       *ABS*	00000000 __bss_end
00019c78 g     F .text	00000024 OSTCBInitHook
0001cb0a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
000197e8 g     F .text	00000108 alt_tick
00010eec g     F .text	00000110 OSMboxPost
00009640 g     F .text	00000578 .hidden __udivdi3
0001caac g     O .rwdata	00000002 OSEventEn
0001a7dc g     O .rodata	00000028 __mprec_bigtens
0000650c g     F .text	00000104 __s2b
0001cb06 g     O .rwdata	00000002 OSTmrCfgNameSize
0000c800 g     F .text	000000a8 .hidden __floatunsidf
00006be4 g     F .text	00000060 __mcmp
000183a8 g     F .text	0000002c read_data_byte
0002f150 g     O .bss	00000100 inbound_dsp_messages
0001ea48 g     O .bss	00000002 OSTmrFree
0001e9d8 g     O .bss	00000001 outboundCount
00010528 g     F .text	000000e0 OS_FlagInit
0001974c g     F .text	0000009c alt_alarm_stop
00001b08 g     F .text	00000068 VGA_pixel
0001533c g     F .text	00000138 OSTmrDel
000182e0 g     F .text	00000030 read_RE_bit
0001cae8 g     O .rwdata	00000002 OSTaskIdleStkSize
0001ea94 g     O .bss	00000004 alt_irq_active
00012ac0 g     F .text	000000b0 OSSemAccept
000019bc g     F .text	00000094 VGA_text
00011730 g     F .text	000000d8 OSMemPut
00011268 g     F .text	000001d4 OSMemCreate
0001ea4c g     O .bss	00000004 OSIdleCtrMax
0001801c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0001c8dc g     O .rwdata	00000028 alt_dev_null
0001cafc g     O .rwdata	00000002 OSTicksPerSec
00017ee8 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
00019914 g       .text	00000000 OSIntCtxSw
00018558 g     F .text	00000074 alt_up_ps2_write_data_byte
00018f24 g     F .text	00000020 alt_dcache_flush_all
00006610 g     F .text	00000068 __hi0bits
0000c6a4 g     F .text	00000080 .hidden __fixdfsi
0001ea50 g     O .bss	00000004 OSTCBFreeList
0001cb3c g       *ABS*	00000000 __ram_rwdata_end
00013094 g     F .text	0000016c OSSemPendAbort
0001cb20 g     O .rwdata	00000008 alt_dev_list
0001cb00 g     O .rwdata	00000002 OSVersionNbr
0001acc0 g       *ABS*	00000000 __ram_rodata_end
00018c1c g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000b59c g     F .text	000000f4 .hidden __ledf2
000155ac g     F .text	000001b0 OSTmrRemainGet
0001caa8 g     O .rwdata	00000004 OSEndiannessTest
0000695c g     F .text	00000140 __pow5mult
0001e9f4 g     O .bss	00000004 __nlocale_changed
0000a24c g     F .text	00000058 .hidden __umodsi3
0001caba g     O .rwdata	00000002 OSFlagGrpSize
00000d2c g     F .text	000002a8 display_task
0001575c g     F .text	000000e4 OSTmrStateGet
00035c90 g       *ABS*	00000000 end
00018888 g     F .text	00000098 alt_up_ps2_write_fd
00018058 g     F .text	00000044 alt_up_irda_check_parity
0002f250 g     O .bss	00000800 input_stack
00016d7c g     F .text	0000013c altera_avalon_jtag_uart_init
0000ea20 g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0001a340 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
000179b8 g     F .text	00000074 alt_avalon_timer_sc_init
0000c8a8 g     F .text	00000064 .hidden __clzsi2
00017678 g     F .text	000002c4 altera_avalon_jtag_uart_write
00015ca0 g     F .text	0000016c OSTmr_Init
000060f0 g     F .text	000000e4 memchr
0000e6fc g     F .text	00000054 OS_MemClr
00017b54 g     F .text	0000007c alt_up_character_lcd_write
000199e4 g     F .text	0000015c OSTaskStkInit
00001ce4 g     F .text	00000058 _sprintf_r
00008b48 g     F .text	00000310 _free_r
00005890 g     F .text	00000010 __locale_mb_cur_max
0000dd6c g     F .text	00000198 OS_EventTaskRdy
0001a18c g     F .text	00000180 __call_exitprocs
0001ea54 g     O .bss	00000001 OSCPUUsage
0001e9f0 g     O .bss	00000004 __mlocale_changed
0001ca90 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0001ea98 g     O .bss	00000004 _alt_tick_rate
00011fe0 g     F .text	0000028c OSQPend
00014c8c g     F .text	00000104 OSTimeDly
00001c84 g     F .text	00000060 rand
00006a9c g     F .text	00000148 __lshift
0001ea9c g     O .bss	00000004 _alt_nticks
000162ac g     F .text	0000096c alt_sys_init
00017d98 g     F .text	0000008c alt_up_character_lcd_shift_display
00007554 g     F .text	000001d0 __ssprint_r
0001a074 g     F .text	00000118 __register_exitproc
0001ea55 g     O .bss	00000001 OSTaskCtr
000187a4 g     F .text	00000058 alt_up_ps2_clear_fifo
00018a58 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00001a50 g     F .text	000000b8 VGA_box
00014d90 g     F .text	00000160 OSTimeDlyHMSM
00006764 g     F .text	000001f8 __multiply
00017e24 g     F .text	0000008c alt_up_character_lcd_erase_pos
00017264 g     F .text	00000068 altera_avalon_jtag_uart_close
0001acc0 g       *ABS*	00000000 __ram_rwdata_start
0001a340 g       *ABS*	00000000 __ram_rodata_start
0001eaa8 g     O .bss	00000028 __malloc_current_mallinfo
0001caae g     O .rwdata	00000002 OSEventMax
00006fb0 g     F .text	0000014c __d2b
00013200 g     F .text	00000110 OSSemPost
00001924 g     F .text	00000098 clear_bg
0000d910 g     F .text	000000dc OSSchedUnlock
00016c18 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00019da4 g     F .text	000000dc alt_get_fd
0001ea58 g     O .bss	00000004 OSMemFreeList
0000da5c g     F .text	000000b0 OSStatInit
00010304 g     F .text	000000c4 OSFlagQuery
0001cae4 g     O .rwdata	00000002 OSTaskCreateExtEn
0001e9dc g     O .bss	00000004 sim_state
00019ff8 g     F .text	0000007c memcmp
0000dd4c g     F .text	00000020 OS_Dummy
00016cd8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00035c90 g       *ABS*	00000000 __alt_stack_base
00016d28 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00017f20 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00032b90 g     O .bss	000001e0 OSQTbl
0000ab50 g     F .text	000008e8 .hidden __divdf3
00007214 g     F .text	00000078 __copybits
0001b15c g     O .rwdata	00000408 __malloc_av_
0001ea5c g     O .bss	00000004 OSTCBHighRdy
0000b690 g     F .text	00000718 .hidden __muldf3
0001ea60 g     O .bss	00000004 OSQFreeList
000189b8 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00019c9c g     F .text	00000108 alt_find_file
00018fac g     F .text	000000a4 alt_dev_llist_insert
0000cc88 g     F .text	00000120 __malloc_lock
0000cab4 g     F .text	000000b0 sbrk
00001da8 g     F .text	000021d8 ___svfprintf_internal_r
0000cf94 g     F .text	00000140 OSEventNameSet
00008960 g     F .text	000000c4 _calloc_r
0001ea64 g     O .bss	00000001 OSRdyGrp
00015840 g     F .text	00000140 OSTmrStart
0001e9b8 g       *ABS*	00000000 __bss_start
00008fb4 g     F .text	00000128 memset
00000284 g     F .text	000000e8 main
0001ea10 g     O .bss	00000004 alt_envp
0001e9f8 g     O .bss	00000004 __malloc_max_total_mem
00016c78 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00001c6c g     F .text	00000018 srand
0001a9fc g     O .rodata	00000100 OSUnMapTbl
0001cade g     O .rwdata	00000002 OSSemEn
00017d0c g     F .text	0000008c alt_up_character_lcd_shift_cursor
0000ff70 g     F .text	00000394 OSFlagPost
04000000 g       *ABS*	00000000 __alt_heap_limit
0000df04 g     F .text	00000110 OS_EventTaskWait
00018734 g     F .text	00000070 alt_up_ps2_read_data_byte
0000eafc g     F .text	000000cc OS_TaskStatStkChk
000140e4 g     F .text	00000150 OSTaskDelReq
00004180 g     F .text	00001688 _dtoa_r
000058e4 g     F .text	0000080c _malloc_r
0001e9e0 g     O .bss	00000004 runway_sem
0001cb2c g     O .rwdata	00000004 alt_errno
0000d9ec g     F .text	00000070 OSStart
0000cc28 g     F .text	00000060 __env_unlock
00014580 g     F .text	000001d4 OSTaskResume
00011808 g     F .text	000000e8 OSMemQuery
0001caf0 g     O .rwdata	00000002 OSTaskStatEn
0001809c g     F .text	00000040 alt_up_irda_write_data
0001caca g     O .rwdata	00000002 OSMemMax
00012540 g     F .text	00000170 OSQPostFront
00018920 g     F .text	0000003c alt_up_ps2_open_dev
0000a0f0 g     F .text	00000084 .hidden __divsi3
0001ea65 g     O .bss	00000006 OSRdyTbl
0001caa4 g     O .rwdata	00000002 OSDebugEn
00017b18 g     F .text	0000003c alt_up_character_lcd_open_dev
00008a24 g     F .text	00000124 _malloc_trim_r
0001849c g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0001a340 g       *ABS*	00000000 __CTOR_END__
0001cabc g     O .rwdata	00000002 OSFlagNodeSize
0001cb04 g     O .rwdata	00000002 OSTmrCfgMax
00017ae0 g     F .text	00000038 alt_up_character_lcd_init
000073e0 g     F .text	000000dc strcmp
00011afc g     F .text	000001ac OSQCreate
00014234 g     F .text	00000198 OSTaskNameGet
0001a340 g       *ABS*	00000000 __flash_rodata_start
000126b0 g     F .text	0000020c OSQPostOpt
0000db0c g     F .text	00000220 OSTimeTick
0001caec g     O .rwdata	00000002 OSTaskMax
0001a340 g       *ABS*	00000000 __DTOR_LIST__
00012b70 g     F .text	000000d8 OSSemCreate
0001cb10 g     O .rwdata	00000002 OSTmrWheelSize
00018cb0 g     F .text	0000003c alt_up_rs232_open_dev
0000b438 g     F .text	00000088 .hidden __nedf2
0001cae6 g     O .rwdata	00000002 OSTaskDelEn
00013310 g     F .text	00000110 OSSemQuery
00011ca8 g     F .text	00000280 OSQDel
0001226c g     F .text	0000016c OSQPendAbort
00016274 g     F .text	00000038 alt_irq_init
000196e8 g     F .text	00000064 alt_release_fd
0002fa50 g     O .bss	00000800 display_stack
00018374 g     F .text	00000034 read_data_valid
00001d3c g     F .text	0000006c sprintf
00017eb0 g     F .text	00000038 alt_up_character_lcd_cursor_off
0001a8ec g     O .rodata	00000100 .hidden __clz_tab
0001e9ec g     O .bss	00000004 _PathLocale
00015980 g     F .text	000001e0 OSTmrStop
00018634 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00019fac g     F .text	00000014 atexit
0000d884 g     F .text	0000008c OSSchedLock
000058c0 g     F .text	00000018 setlocale
00032d70 g     O .bss	00000800 OSTmrTaskStk
0000f394 g     F .text	00000108 OSFlagCreate
000018c8 g     F .text	0000005c u_callback
0001ca88 g     O .rwdata	00000004 _impure_ptr
0001ea08 g     O .bss	00000004 alt_argc
000190b0 g     F .text	00000060 _do_dtors
000058ac g     F .text	00000008 __locale_cjk_lang
0001cab6 g     O .rwdata	00000002 OSEventMultiEn
00015180 g     F .text	000001bc OSTmrCreate
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
0000f49c g     F .text	00000248 OSFlagDel
0001ea6c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00010d80 g     F .text	0000016c OSMboxPendAbort
0001e9e4 g     O .bss	00000004 outbound_dsp_queue
0001e9e8 g     O .bss	00000004 out_expire_mailbox
00006e40 g     F .text	00000064 __ulp
0000f958 g     F .text	000005b8 OSFlagPend
0001cb02 g     O .rwdata	00000002 OSTmrEn
0001cb18 g     O .rwdata	00000008 alt_fs_list
00015474 g     F .text	00000138 OSTmrNameGet
0000e8fc g     F .text	00000074 OS_StrCopy
0001895c g     F .text	0000005c alt_up_rs232_enable_read_interrupt
00018ad8 g     F .text	00000040 alt_up_rs232_write_data
0001cacc g     O .rwdata	00000002 OSMemNameSize
00019c38 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001caf8 g     O .rwdata	00000002 OSTCBPrioTblMax
000058d8 g     F .text	0000000c localeconv
0001caf4 g     O .rwdata	00000002 OSTaskStatStkChkEn
00010838 g     F .text	000000d4 OSMboxCreate
0001cac8 g     O .rwdata	00000002 OSMemEn
0001cad2 g     O .rwdata	00000002 OSMutexEn
0001cb3c g       *ABS*	00000000 _edata
00035c90 g       *ABS*	00000000 _end
0001ea70 g     O .bss	00000001 OSIntNesting
00000248 g       *ABS*	00000000 __ram_exceptions_end
000172cc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00014ef0 g     F .text	000001d4 OSTimeDlyResume
0000f80c g     F .text	0000014c OSFlagNameSet
00010b4c g     F .text	00000234 OSMboxPend
0001e9b8 g     O .bss	00000001 totalFlights
00030250 g     O .bss	00000100 outbound_dsp_messages
00014754 g     F .text	000001c0 OSTaskStkChk
0001cace g     O .rwdata	00000002 OSMemSize
0001ca94 g     O .rwdata	00000004 __malloc_trim_threshold
000058a0 g     F .text	0000000c __locale_msgcharset
0001ea74 g     O .bss	00000004 OSTCBCur
00019fc0 g     F .text	00000038 exit
000180dc g     F .text	00000074 alt_up_irda_read_data
0001cad0 g     O .rwdata	00000002 OSMemTblSize
000183d4 g     F .text	000000c8 alt_up_ps2_init
00006c44 g     F .text	000001fc __mdiff
0000a174 g     F .text	00000074 .hidden __modsi3
000107a0 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000d6e4 g     F .text	0000005c OSInit
0001ea78 g     O .bss	00000004 OSTmrTime
00014af8 g     F .text	00000124 OSTaskQuery
00017bd0 g     F .text	00000078 alt_up_character_lcd_string
00012a18 g     F .text	000000a8 OS_QInit
0000e970 g     F .text	00000054 OS_StrLen
00018270 g     F .text	0000003c alt_up_irda_open_dev
0001161c g     F .text	00000114 OSMemNameSet
0001caea g     O .rwdata	00000002 OSTaskProfileEn
0001ea7c g     O .bss	00000004 OSTime
0001ea80 g     O .bss	00000004 OSTmrSem
00033570 g     O .bss	00000800 OSTaskIdleStk
0001a30c g     F .text	00000034 _exit
00010ffc g     F .text	0000015c OSMboxPostOpt
00018cec g     F .text	0000012c alt_alarm_start
0000f6e4 g     F .text	00000128 OSFlagNameGet
000150c4 g     F .text	0000005c OSTimeGet
000185cc g     F .text	00000068 alt_up_ps2_wait_for_ack
000074bc g     F .text	00000098 strlen
00019b88 g     F .text	00000020 OSTaskSwHook
00019594 g     F .text	00000154 open
00033d70 g     O .bss	00000c30 OSEventTbl
00001b70 g     F .text	0000007c VGA_clear
0000b4c0 g     F .text	000000dc .hidden __gedf2
000349a0 g     O .bss	0000114c OSTCBTbl
00013420 g     F .text	00000100 OSSemSet
000191a0 g     F .text	00000034 alt_icache_flush_all
00017c98 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001cb30 g     O .rwdata	00000004 alt_priority_mask
00030350 g     O .bss	00000680 flight_data
00012c48 g     F .text	00000240 OSSemDel
0001ea84 g     O .bss	00000004 OSFlagFreeList
0001cab0 g     O .rwdata	00000002 OSEventNameSize
0001090c g     F .text	00000240 OSMboxDel
0001ea88 g     O .bss	00000001 OSStatRdy
00035aec g     O .bss	000000a4 OSTCBPrioTbl
0000cb64 g     F .text	000000c4 __env_lock
000187fc g     F .text	0000008c alt_up_ps2_read_fd
0001caf6 g     O .rwdata	00000002 OSTaskSwHookEn
0000bda8 g     F .text	000008fc .hidden __subdf3
00018150 g     F .text	00000090 alt_up_irda_read_fd
00006678 g     F .text	000000b0 __lo0bits
0001cb34 g     O .rwdata	00000008 alt_alarm_list
0001cabe g     O .rwdata	00000002 OSFlagWidth
00019050 g     F .text	00000060 _do_ctors
00018a18 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00018e54 g     F .text	000000d0 close
0001ea18 g     O .bss	00000004 alt_envsem
0001ea8c g     O .bss	00000004 OSIdleCtrRun
0000dd2c g     F .text	00000020 OSVersion
0001cb08 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000c974 g     F .text	00000084 alt_load
00014c1c g     F .text	00000070 OS_TaskStkClr
0001cae2 g     O .rwdata	00000002 OSTaskCreateEn
0000e31c g     F .text	00000068 OS_EventWaitListInit
00019c58 g     F .text	00000020 OSTaskIdleHook
000063ec g     F .text	00000120 __multadd
00014914 g     F .text	000001e4 OSTaskSuspend
000063c4 g     F .text	00000028 _Bfree
0000e9c4 g     F .text	0000005c OS_TaskIdle
0001cb0e g     O .rwdata	00000002 OSTmrTblSize
000128bc g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000d7400 	call	d740 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	1096e404 	addi	r2,r2,23440
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	1096e404 	addi	r2,r2,23440
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	000d78c0 	call	d78c <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a80817 	ldw	r2,-24544(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a80817 	ldw	r2,-24544(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d692a114 	ori	gp,gp,19076
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	10ba6e14 	ori	r2,r2,59832

    movhi r3, %hi(__bss_end)
     260:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     264:	18d72414 	ori	r3,r3,23696

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	000c9740 	call	c974 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	000c9f80 	call	c9f8 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <alt_after_alt_main>

00000284 <main>:
 *                                                MAIN
 *********************************************************************************************************
 */

int  main(void)
{
     284:	defffd04 	addi	sp,sp,-12
     288:	dfc00215 	stw	ra,8(sp)
     28c:	df000115 	stw	fp,4(sp)
     290:	df000104 	addi	fp,sp,4
	INT8U err;

	VGA_clear();
     294:	0001b700 	call	1b70 <VGA_clear>
	VGA_clear_character();
     298:	0001bec0 	call	1bec <VGA_clear_character>

	OSInit();                                              /* Initialize uC/OS-II                      */
     29c:	000d6e40 	call	d6e4 <OSInit>

	//                       INITIALIZATIONS
	//event_flags
	sim_state = OSFlagCreate(0x00, &err);
     2a0:	e17fff04 	addi	r5,fp,-4
     2a4:	0009883a 	mov	r4,zero
     2a8:	000f3940 	call	f394 <OSFlagCreate>
     2ac:	d0a7d615 	stw	r2,-24744(gp)
	OSFlagPost(sim_state, sim_all, OS_FLAG_CLR, &err);
     2b0:	d0a7d617 	ldw	r2,-24744(gp)
     2b4:	e1ffff04 	addi	r7,fp,-4
     2b8:	000d883a 	mov	r6,zero
     2bc:	014001c4 	movi	r5,7
     2c0:	1009883a 	mov	r4,r2
     2c4:	000ff700 	call	ff70 <OSFlagPost>
	OSFlagPost(sim_state, sim_idle_state, OS_FLAG_SET, &err);
     2c8:	d0a7d617 	ldw	r2,-24744(gp)
     2cc:	e1ffff04 	addi	r7,fp,-4
     2d0:	01800044 	movi	r6,1
     2d4:	01400044 	movi	r5,1
     2d8:	1009883a 	mov	r4,r2
     2dc:	000ff700 	call	ff70 <OSFlagPost>

	runway_sem = OSSemCreate(1);
     2e0:	01000044 	movi	r4,1
     2e4:	0012b700 	call	12b70 <OSSemCreate>
     2e8:	d0a7d715 	stw	r2,-24740(gp)

	//semaphores
	expired_sem = OSSemCreate(0);
     2ec:	0009883a 	mov	r4,zero
     2f0:	0012b700 	call	12b70 <OSSemCreate>
     2f4:	d0a7d015 	stw	r2,-24768(gp)
	expired_ack_sem = OSSemCreate(0);
     2f8:	0009883a 	mov	r4,zero
     2fc:	0012b700 	call	12b70 <OSSemCreate>
     300:	d0a7d415 	stw	r2,-24752(gp)


	//mailboxes
	out_expire_mailbox = OSMboxCreate((void *)0);
     304:	0009883a 	mov	r4,zero
     308:	00108380 	call	10838 <OSMboxCreate>
     30c:	d0a7d915 	stw	r2,-24732(gp)
	in_expire_mailbox = OSMboxCreate((void *)0);
     310:	0009883a 	mov	r4,zero
     314:	00108380 	call	10838 <OSMboxCreate>
     318:	d0a7d215 	stw	r2,-24760(gp)

	//queues
	outbound_dsp_queue = OSQCreate(&outbound_dsp_messages[0], FLIGHT_LIMIT);
     31c:	01400804 	movi	r5,32
     320:	010000f4 	movhi	r4,3
     324:	21009404 	addi	r4,r4,592
     328:	0011afc0 	call	11afc <OSQCreate>
     32c:	d0a7d815 	stw	r2,-24736(gp)
	inbound_dsp_queue = OSQCreate(&inbound_dsp_messages[0], FLIGHT_LIMIT);
     330:	01400804 	movi	r5,32
     334:	010000f4 	movhi	r4,3
     338:	213c5404 	addi	r4,r4,-3760
     33c:	0011afc0 	call	11afc <OSQCreate>
     340:	d0a7ce15 	stw	r2,-24776(gp)


	inboundCount = 0;
     344:	d027d305 	stb	zero,-24756(gp)
	outboundCount = 0;
     348:	d027d505 	stb	zero,-24748(gp)

	create_tasks();
     34c:	000036c0 	call	36c <create_tasks>

	OSStart();                        /* Start multitasking   */
     350:	000d9ec0 	call	d9ec <OSStart>
	return 0;
     354:	0005883a 	mov	r2,zero
}
     358:	e037883a 	mov	sp,fp
     35c:	dfc00117 	ldw	ra,4(sp)
     360:	df000017 	ldw	fp,0(sp)
     364:	dec00204 	addi	sp,sp,8
     368:	f800283a 	ret

0000036c <create_tasks>:
 *                                             CREATE TASKS
 *********************************************************************************************************
 */

static  void  create_tasks(void)
{
     36c:	defffe04 	addi	sp,sp,-8
     370:	dfc00115 	stw	ra,4(sp)
     374:	df000015 	stw	fp,0(sp)
     378:	d839883a 	mov	fp,sp
	OSTaskCreate(display_task, (void *)0, &display_stack[TASK_STK_SIZE - 1], DISPLAY_PRIO);
     37c:	01c00944 	movi	r7,37
     380:	018000f4 	movhi	r6,3
     384:	31809304 	addi	r6,r6,588
     388:	000b883a 	mov	r5,zero
     38c:	01000034 	movhi	r4,0
     390:	21034b04 	addi	r4,r4,3372
     394:	0013a100 	call	13a10 <OSTaskCreate>
	OSTaskCreate(input_task, (void *)0, &input_stack[TASK_STK_SIZE - 1], INPUT_PRIO);
     398:	01c00984 	movi	r7,38
     39c:	018000f4 	movhi	r6,3
     3a0:	31be9304 	addi	r6,r6,-1460
     3a4:	000b883a 	mov	r5,zero
     3a8:	01000034 	movhi	r4,0
     3ac:	2103f504 	addi	r4,r4,4052
     3b0:	0013a100 	call	13a10 <OSTaskCreate>
}
     3b4:	0001883a 	nop
     3b8:	e037883a 	mov	sp,fp
     3bc:	dfc00117 	ldw	ra,4(sp)
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00204 	addi	sp,sp,8
     3c8:	f800283a 	ret

000003cc <flight_task>:
 *                                                  TASKS
 *********************************************************************************************************
 */

void flight_task(void *pdata)
{
     3cc:	deffe704 	addi	sp,sp,-100
     3d0:	dfc01815 	stw	ra,96(sp)
     3d4:	df001715 	stw	fp,92(sp)
     3d8:	df001704 	addi	fp,sp,92
     3dc:	e13fff15 	stw	r4,-4(fp)
	//char dsp_msg[20];

	//int flightID;

	//int ETA_start = rand() % MAX_ETA + MIN_ETA;
	int ETA_time = 0;
     3e0:	e03fec15 	stw	zero,-80(fp)

	//int clear_start = 10;
	int clear_time = 0;
     3e4:	e03fed15 	stw	zero,-76(fp)

	//int free_start = 20;
	int free_time = 0;
     3e8:	e03fee15 	stw	zero,-72(fp)

	int pending_start = 0;
     3ec:	e03fe915 	stw	zero,-92(fp)
	int pending_time = 0;
     3f0:	e03fef15 	stw	zero,-68(fp)

	int wait_time = 0; // time for outbound flight to be ready for takeoff
     3f4:	e03fea15 	stw	zero,-88(fp)

	f = *((Flight *)pdata);
     3f8:	e0bfff17 	ldw	r2,-4(fp)
     3fc:	10c00017 	ldw	r3,0(r2)
     400:	e0fff215 	stw	r3,-56(fp)
     404:	10c00117 	ldw	r3,4(r2)
     408:	e0fff315 	stw	r3,-52(fp)
     40c:	10c00217 	ldw	r3,8(r2)
     410:	e0fff415 	stw	r3,-48(fp)
     414:	10c00317 	ldw	r3,12(r2)
     418:	e0fff515 	stw	r3,-44(fp)
     41c:	10c00417 	ldw	r3,16(r2)
     420:	e0fff615 	stw	r3,-40(fp)
     424:	10c00517 	ldw	r3,20(r2)
     428:	e0fff715 	stw	r3,-36(fp)
     42c:	10c00617 	ldw	r3,24(r2)
     430:	e0fff815 	stw	r3,-32(fp)
     434:	10c00717 	ldw	r3,28(r2)
     438:	e0fff915 	stw	r3,-28(fp)
     43c:	10c00817 	ldw	r3,32(r2)
     440:	e0fffa15 	stw	r3,-24(fp)
     444:	10c00917 	ldw	r3,36(r2)
     448:	e0fffb15 	stw	r3,-20(fp)
     44c:	10c00a17 	ldw	r3,40(r2)
     450:	e0fffc15 	stw	r3,-16(fp)
     454:	10c00b17 	ldw	r3,44(r2)
     458:	e0fffd15 	stw	r3,-12(fp)
     45c:	10800c17 	ldw	r2,48(r2)
     460:	e0bffe15 	stw	r2,-8(fp)
//		(void *)&wait_time,
//		(INT8U         *)"Wait Timer",
//		&err
//	);

	switch (err)
     464:	e0bff103 	ldbu	r2,-60(fp)
     468:	10803fcc 	andi	r2,r2,255
     46c:	10c020e0 	cmpeqi	r3,r2,131
     470:	1800131e 	bne	r3,zero,4c0 <flight_task+0xf4>
     474:	10c02108 	cmpgei	r3,r2,132
     478:	1800041e 	bne	r3,zero,48c <flight_task+0xc0>
     47c:	10002826 	beq	r2,zero,520 <flight_task+0x154>
     480:	108020a0 	cmpeqi	r2,r2,130
     484:	1000081e 	bne	r2,zero,4a8 <flight_task+0xdc>
     488:	00002606 	br	524 <flight_task+0x158>
     48c:	10c021a0 	cmpeqi	r3,r2,134
     490:	18001d1e 	bne	r3,zero,508 <flight_task+0x13c>
     494:	10c022e0 	cmpeqi	r3,r2,139
     498:	1800151e 	bne	r3,zero,4f0 <flight_task+0x124>
     49c:	10802120 	cmpeqi	r2,r2,132
     4a0:	10000d1e 	bne	r2,zero,4d8 <flight_task+0x10c>
     4a4:	00001f06 	br	524 <flight_task+0x158>
	{
	case OS_ERR_NONE:
		break;
	case OS_ERR_TMR_INVALID_DLY:
		VGA_text(30, 14, "OS_ERR_TMR_INVALID");
     4a8:	018000b4 	movhi	r6,2
     4ac:	31a8d004 	addi	r6,r6,-23744
     4b0:	01400384 	movi	r5,14
     4b4:	01000784 	movi	r4,30
     4b8:	00019bc0 	call	19bc <VGA_text>
		break;
     4bc:	00001906 	br	524 <flight_task+0x158>
	case OS_ERR_TMR_INVALID_PERIOD:
		VGA_text(30, 10, "OS_ERR_TMR_INVALID");
     4c0:	018000b4 	movhi	r6,2
     4c4:	31a8d004 	addi	r6,r6,-23744
     4c8:	01400284 	movi	r5,10
     4cc:	01000784 	movi	r4,30
     4d0:	00019bc0 	call	19bc <VGA_text>
		break;
     4d4:	00001306 	br	524 <flight_task+0x158>
	case OS_ERR_TMR_INVALID_OPT:
		VGA_text(30, 11, "OS_ERR_TMR_INVALID");
     4d8:	018000b4 	movhi	r6,2
     4dc:	31a8d004 	addi	r6,r6,-23744
     4e0:	014002c4 	movi	r5,11
     4e4:	01000784 	movi	r4,30
     4e8:	00019bc0 	call	19bc <VGA_text>
		break;
     4ec:	00000d06 	br	524 <flight_task+0x158>
	case OS_ERR_TMR_ISR:
		VGA_text(30, 12, "OS_ERR_TMR_INVALID");
     4f0:	018000b4 	movhi	r6,2
     4f4:	31a8d004 	addi	r6,r6,-23744
     4f8:	01400304 	movi	r5,12
     4fc:	01000784 	movi	r4,30
     500:	00019bc0 	call	19bc <VGA_text>
		break;
     504:	00000706 	br	524 <flight_task+0x158>
	case OS_ERR_TMR_NON_AVAIL:
		VGA_text(30, 13, "OS_ERR_TMR_INVALID");
     508:	018000b4 	movhi	r6,2
     50c:	31a8d004 	addi	r6,r6,-23744
     510:	01400344 	movi	r5,13
     514:	01000784 	movi	r4,30
     518:	00019bc0 	call	19bc <VGA_text>
		break;
     51c:	00000106 	br	524 <flight_task+0x158>
//	);

	switch (err)
	{
	case OS_ERR_NONE:
		break;
     520:	0001883a 	nop
		VGA_text(30, 13, "OS_ERR_TMR_INVALID");
		break;
	}
	//OSTmrStart(wait_timer, &err);

	switch (err)
     524:	e0bff103 	ldbu	r2,-60(fp)
     528:	10803fcc 	andi	r2,r2,255
     52c:	10c02260 	cmpeqi	r3,r2,137
     530:	1800131e 	bne	r3,zero,580 <flight_task+0x1b4>
     534:	10c02288 	cmpgei	r3,r2,138
     538:	1800041e 	bne	r3,zero,54c <flight_task+0x180>
     53c:	10002826 	beq	r2,zero,5e0 <flight_task+0x214>
     540:	108021e0 	cmpeqi	r2,r2,135
     544:	10001a1e 	bne	r2,zero,5b0 <flight_task+0x1e4>
     548:	00002606 	br	5e4 <flight_task+0x218>
     54c:	10c022e0 	cmpeqi	r3,r2,139
     550:	1800111e 	bne	r3,zero,598 <flight_task+0x1cc>
     554:	10c022d0 	cmplti	r3,r2,139
     558:	1800031e 	bne	r3,zero,568 <flight_task+0x19c>
     55c:	10802360 	cmpeqi	r2,r2,141
     560:	1000191e 	bne	r2,zero,5c8 <flight_task+0x1fc>
     564:	00001f06 	br	5e4 <flight_task+0x218>
	{
	case OS_ERR_NONE:
		break;
	case OS_ERR_TMR_INVALID:
		VGA_text(20, 14, "OS_ERR_TMR_INVALID");
     568:	018000b4 	movhi	r6,2
     56c:	31a8d004 	addi	r6,r6,-23744
     570:	01400384 	movi	r5,14
     574:	01000504 	movi	r4,20
     578:	00019bc0 	call	19bc <VGA_text>
		break;
     57c:	00001906 	br	5e4 <flight_task+0x218>
	case OS_ERR_TMR_INVALID_TYPE:
		VGA_text(20, 13, "OS_ERR_TMR_INVALID_TYPE");
     580:	018000b4 	movhi	r6,2
     584:	31a8d504 	addi	r6,r6,-23724
     588:	01400344 	movi	r5,13
     58c:	01000504 	movi	r4,20
     590:	00019bc0 	call	19bc <VGA_text>
		break;
     594:	00001306 	br	5e4 <flight_task+0x218>
	case OS_ERR_TMR_ISR:
		VGA_text(20, 12, "OS_ERR_TMR_ISR");
     598:	018000b4 	movhi	r6,2
     59c:	31a8db04 	addi	r6,r6,-23700
     5a0:	01400304 	movi	r5,12
     5a4:	01000504 	movi	r4,20
     5a8:	00019bc0 	call	19bc <VGA_text>
		break;
     5ac:	00000d06 	br	5e4 <flight_task+0x218>
	case OS_ERR_TMR_INACTIVE:
		VGA_text(20, 11, "OS_ERR_TMR_INACTIVE");
     5b0:	018000b4 	movhi	r6,2
     5b4:	31a8df04 	addi	r6,r6,-23684
     5b8:	014002c4 	movi	r5,11
     5bc:	01000504 	movi	r4,20
     5c0:	00019bc0 	call	19bc <VGA_text>
		break;
     5c4:	00000706 	br	5e4 <flight_task+0x218>
	case OS_ERR_TMR_INVALID_STATE:
		VGA_text(20, 10, "OS_ERR_TMR_INVALID_STATE");
     5c8:	018000b4 	movhi	r6,2
     5cc:	31a8e404 	addi	r6,r6,-23664
     5d0:	01400284 	movi	r5,10
     5d4:	01000504 	movi	r4,20
     5d8:	00019bc0 	call	19bc <VGA_text>
		break;
     5dc:	00000106 	br	5e4 <flight_task+0x218>
	//OSTmrStart(wait_timer, &err);

	switch (err)
	{
	case OS_ERR_NONE:
		break;
     5e0:	0001883a 	nop
	case OS_ERR_TMR_INVALID_STATE:
		VGA_text(20, 10, "OS_ERR_TMR_INVALID_STATE");
		break;
	}

	if (f.direction == 0)  //make outbound flight
     5e4:	e0bff417 	ldw	r2,-48(fp)
     5e8:	1000061e 	bne	r2,zero,604 <flight_task+0x238>
	{
		flight_state = OSFlagCreate(flight_outbound_state, &err);
     5ec:	e0bff104 	addi	r2,fp,-60
     5f0:	100b883a 	mov	r5,r2
     5f4:	01000084 	movi	r4,2
     5f8:	000f3940 	call	f394 <OSFlagCreate>
     5fc:	e0bfeb15 	stw	r2,-84(fp)
     600:	00000506 	br	618 <flight_task+0x24c>
	}
	else  //make inbound flight
	{
		flight_state = OSFlagCreate(flight_inbound_state, &err);
     604:	e0bff104 	addi	r2,fp,-60
     608:	100b883a 	mov	r5,r2
     60c:	01000044 	movi	r4,1
     610:	000f3940 	call	f394 <OSFlagCreate>
     614:	e0bfeb15 	stw	r2,-84(fp)
//	char s[20];
//	sprintf(s, "ETA %d", flight_data[f.prio].ETA_start);
//	VGA_text(35, 20, s);
	while (1)
	{
		flags = OSFlagAccept(sim_state, sim_running_state, OS_FLAG_WAIT_SET_ALL, &err);
     618:	d0a7d617 	ldw	r2,-24744(gp)
     61c:	e0fff104 	addi	r3,fp,-60
     620:	180f883a 	mov	r7,r3
     624:	01800084 	movi	r6,2
     628:	01400084 	movi	r5,2
     62c:	1009883a 	mov	r4,r2
     630:	000f08c0 	call	f08c <OSFlagAccept>
     634:	e0bff00d 	sth	r2,-64(fp)
		if (flags > 0)
     638:	e0bff00b 	ldhu	r2,-64(fp)
     63c:	1001ad26 	beq	r2,zero,cf4 <flight_task+0x928>
		{
			wait_time++;
     640:	e0bfea17 	ldw	r2,-88(fp)
     644:	10800044 	addi	r2,r2,1
     648:	e0bfea15 	stw	r2,-88(fp)
			flags = OSFlagAccept(flight_state, flight_free_state, OS_FLAG_WAIT_SET_ALL, &err);
     64c:	e0bff104 	addi	r2,fp,-60
     650:	100f883a 	mov	r7,r2
     654:	01800084 	movi	r6,2
     658:	01400804 	movi	r5,32
     65c:	e13feb17 	ldw	r4,-84(fp)
     660:	000f08c0 	call	f08c <OSFlagAccept>
     664:	e0bff00d 	sth	r2,-64(fp)
			if (flags > 0)
     668:	e0bff00b 	ldhu	r2,-64(fp)
     66c:	10003526 	beq	r2,zero,744 <flight_task+0x378>
			{
				// send message to scan input task to allow this flight to be reused
				//OSQPost(inbound_dsp_queue, (void *)&f);
				OSSemPost(expired_sem);
     670:	d0a7d017 	ldw	r2,-24768(gp)
     674:	1009883a 	mov	r4,r2
     678:	00132000 	call	13200 <OSSemPost>
				OSSemPend(expired_ack_sem, 0, &err);
     67c:	d0a7d417 	ldw	r2,-24752(gp)
     680:	e0fff104 	addi	r3,fp,-60
     684:	180d883a 	mov	r6,r3
     688:	000b883a 	mov	r5,zero
     68c:	1009883a 	mov	r4,r2
     690:	0012e880 	call	12e88 <OSSemPend>

				f.ID = totalFlights;
     694:	d0a7cd03 	ldbu	r2,-24780(gp)
     698:	10803fcc 	andi	r2,r2,255
     69c:	e0bff215 	stw	r2,-56(fp)
				++totalFlights;
     6a0:	d0a7cd03 	ldbu	r2,-24780(gp)
     6a4:	10800044 	addi	r2,r2,1
     6a8:	d0a7cd05 	stb	r2,-24780(gp)

				//f.ETA_start = f.ETA_start; //randomize
				ETA_time = 0;
     6ac:	e03fec15 	stw	zero,-80(fp)
				//f.clear_start = f.clear_start;
				clear_time = 0;
     6b0:	e03fed15 	stw	zero,-76(fp)
				//f.free_start = f.free_start;
				free_time = 0;
     6b4:	e03fee15 	stw	zero,-72(fp)
				pending_time = 0;
     6b8:	e03fef15 	stw	zero,-68(fp)
				wait_time = 0;
     6bc:	e03fea15 	stw	zero,-88(fp)

				if (f.direction == 0)
     6c0:	e0bff417 	ldw	r2,-48(fp)
     6c4:	1000101e 	bne	r2,zero,708 <flight_task+0x33c>
				{
					outboundCount++;
     6c8:	d0a7d503 	ldbu	r2,-24748(gp)
     6cc:	10800044 	addi	r2,r2,1
     6d0:	d0a7d505 	stb	r2,-24748(gp)
					OSFlagPost(flight_state, flight_all, OS_FLAG_CLR, &err);
     6d4:	e0bff104 	addi	r2,fp,-60
     6d8:	100f883a 	mov	r7,r2
     6dc:	000d883a 	mov	r6,zero
     6e0:	01403fc4 	movi	r5,255
     6e4:	e13feb17 	ldw	r4,-84(fp)
     6e8:	000ff700 	call	ff70 <OSFlagPost>
					OSFlagPost(flight_state, flight_outbound_state, OS_FLAG_SET, &err);
     6ec:	e0bff104 	addi	r2,fp,-60
     6f0:	100f883a 	mov	r7,r2
     6f4:	01800044 	movi	r6,1
     6f8:	01400084 	movi	r5,2
     6fc:	e13feb17 	ldw	r4,-84(fp)
     700:	000ff700 	call	ff70 <OSFlagPost>
     704:	00000f06 	br	744 <flight_task+0x378>
				}
				else
				{
					inboundCount++;
     708:	d0a7d303 	ldbu	r2,-24756(gp)
     70c:	10800044 	addi	r2,r2,1
     710:	d0a7d305 	stb	r2,-24756(gp)
					OSFlagPost(flight_state, flight_all, OS_FLAG_CLR, &err);
     714:	e0bff104 	addi	r2,fp,-60
     718:	100f883a 	mov	r7,r2
     71c:	000d883a 	mov	r6,zero
     720:	01403fc4 	movi	r5,255
     724:	e13feb17 	ldw	r4,-84(fp)
     728:	000ff700 	call	ff70 <OSFlagPost>
					OSFlagPost(flight_state, flight_inbound_state, OS_FLAG_SET, &err);
     72c:	e0bff104 	addi	r2,fp,-60
     730:	100f883a 	mov	r7,r2
     734:	01800044 	movi	r6,1
     738:	01400044 	movi	r5,1
     73c:	e13feb17 	ldw	r4,-84(fp)
     740:	000ff700 	call	ff70 <OSFlagPost>
				//sprintf(s, "prio: %d", f.prio);
				//VGA_text(35, 10, s);
			}


			flags = OSFlagAccept(flight_state, flight_inbound_state, OS_FLAG_WAIT_SET_ALL, &err);
     744:	e0bff104 	addi	r2,fp,-60
     748:	100f883a 	mov	r7,r2
     74c:	01800084 	movi	r6,2
     750:	01400044 	movi	r5,1
     754:	e13feb17 	ldw	r4,-84(fp)
     758:	000f08c0 	call	f08c <OSFlagAccept>
     75c:	e0bff00d 	sth	r2,-64(fp)
			if (flags > 0)
     760:	e0bff00b 	ldhu	r2,-64(fp)
     764:	10003026 	beq	r2,zero,828 <flight_task+0x45c>
			{
				//OSTmrStart(wait_timer, &err);// restart timer if it was paused
				ETA_time = f.ETA_start - wait_time;
     768:	e0fff717 	ldw	r3,-36(fp)
     76c:	e0bfea17 	ldw	r2,-88(fp)
     770:	1885c83a 	sub	r2,r3,r2
     774:	e0bfec15 	stw	r2,-80(fp)

				sprintf(f.msg, "Flight #%03d ETA %d    ", f.ID, ETA_time);
     778:	e0fff217 	ldw	r3,-56(fp)
     77c:	e0bff204 	addi	r2,fp,-56
     780:	10800804 	addi	r2,r2,32
     784:	e1ffec17 	ldw	r7,-80(fp)
     788:	180d883a 	mov	r6,r3
     78c:	014000b4 	movhi	r5,2
     790:	2968eb04 	addi	r5,r5,-23636
     794:	1009883a 	mov	r4,r2
     798:	0001d3c0 	call	1d3c <sprintf>
				OSQPost(inbound_dsp_queue, (void *)&f);
     79c:	d0a7ce17 	ldw	r2,-24776(gp)
     7a0:	e0fff204 	addi	r3,fp,-56
     7a4:	180b883a 	mov	r5,r3
     7a8:	1009883a 	mov	r4,r2
     7ac:	00123d80 	call	123d8 <OSQPost>

				if (ETA_time <= 0)
     7b0:	e0bfec17 	ldw	r2,-80(fp)
     7b4:	00801c16 	blt	zero,r2,828 <flight_task+0x45c>
				{
					ETA_time = 0;
     7b8:	e03fec15 	stw	zero,-80(fp)

					/* pend runway */
					sprintf(f.msg, "Flight #%03d pending  ", f.ID);
     7bc:	e0fff217 	ldw	r3,-56(fp)
     7c0:	e0bff204 	addi	r2,fp,-56
     7c4:	10800804 	addi	r2,r2,32
     7c8:	180d883a 	mov	r6,r3
     7cc:	014000b4 	movhi	r5,2
     7d0:	2968f104 	addi	r5,r5,-23612
     7d4:	1009883a 	mov	r4,r2
     7d8:	0001d3c0 	call	1d3c <sprintf>
					OSQPost(inbound_dsp_queue, (void *)&f);
     7dc:	d0a7ce17 	ldw	r2,-24776(gp)
     7e0:	e0fff204 	addi	r3,fp,-56
     7e4:	180b883a 	mov	r5,r3
     7e8:	1009883a 	mov	r4,r2
     7ec:	00123d80 	call	123d8 <OSQPost>
					OSFlagPost(flight_state, flight_all, OS_FLAG_CLR, &err);
     7f0:	e0bff104 	addi	r2,fp,-60
     7f4:	100f883a 	mov	r7,r2
     7f8:	000d883a 	mov	r6,zero
     7fc:	01403fc4 	movi	r5,255
     800:	e13feb17 	ldw	r4,-84(fp)
     804:	000ff700 	call	ff70 <OSFlagPost>
					OSFlagPost(flight_state, flight_pending_runway, OS_FLAG_SET, &err);
     808:	e0bff104 	addi	r2,fp,-60
     80c:	100f883a 	mov	r7,r2
     810:	01800044 	movi	r6,1
     814:	01400204 	movi	r5,8
     818:	e13feb17 	ldw	r4,-84(fp)
     81c:	000ff700 	call	ff70 <OSFlagPost>
					pending_start = wait_time;
     820:	e0bfea17 	ldw	r2,-88(fp)
     824:	e0bfe915 	stw	r2,-92(fp)

				}
			}

			flags = OSFlagAccept(flight_state, flight_outbound_state, OS_FLAG_WAIT_SET_ALL, &err);
     828:	e0bff104 	addi	r2,fp,-60
     82c:	100f883a 	mov	r7,r2
     830:	01800084 	movi	r6,2
     834:	01400084 	movi	r5,2
     838:	e13feb17 	ldw	r4,-84(fp)
     83c:	000f08c0 	call	f08c <OSFlagAccept>
     840:	e0bff00d 	sth	r2,-64(fp)
			if (flags > 0)
     844:	e0bff00b 	ldhu	r2,-64(fp)
     848:	10003126 	beq	r2,zero,910 <flight_task+0x544>
			{
				//OSTmrStart(wait_timer, &err);// restart timer if it was paused
				ETA_time = f.ETA_start - wait_time;
     84c:	e0fff717 	ldw	r3,-36(fp)
     850:	e0bfea17 	ldw	r2,-88(fp)
     854:	1885c83a 	sub	r2,r3,r2
     858:	e0bfec15 	stw	r2,-80(fp)

				sprintf(f.msg, "Flight #%03d ETA %d  ", f.ID, ETA_time);
     85c:	e0fff217 	ldw	r3,-56(fp)
     860:	e0bff204 	addi	r2,fp,-56
     864:	10800804 	addi	r2,r2,32
     868:	e1ffec17 	ldw	r7,-80(fp)
     86c:	180d883a 	mov	r6,r3
     870:	014000b4 	movhi	r5,2
     874:	2968f704 	addi	r5,r5,-23588
     878:	1009883a 	mov	r4,r2
     87c:	0001d3c0 	call	1d3c <sprintf>
				OSQPost(outbound_dsp_queue, (void *)&f);
     880:	d0a7d817 	ldw	r2,-24736(gp)
     884:	e0fff204 	addi	r3,fp,-56
     888:	180b883a 	mov	r5,r3
     88c:	1009883a 	mov	r4,r2
     890:	00123d80 	call	123d8 <OSQPost>

				if (ETA_time <= 0)
     894:	e0bfec17 	ldw	r2,-80(fp)
     898:	00801d16 	blt	zero,r2,910 <flight_task+0x544>
				{
					ETA_time = 0;
     89c:	e03fec15 	stw	zero,-80(fp)

					/* pend runway */
					sprintf(f.msg, "Flight #%03d pending    ", f.ID);
     8a0:	e0fff217 	ldw	r3,-56(fp)
     8a4:	e0bff204 	addi	r2,fp,-56
     8a8:	10800804 	addi	r2,r2,32
     8ac:	180d883a 	mov	r6,r3
     8b0:	014000b4 	movhi	r5,2
     8b4:	2968fd04 	addi	r5,r5,-23564
     8b8:	1009883a 	mov	r4,r2
     8bc:	0001d3c0 	call	1d3c <sprintf>
					OSQPost(outbound_dsp_queue, (void *)&f);
     8c0:	d0a7d817 	ldw	r2,-24736(gp)
     8c4:	e0fff204 	addi	r3,fp,-56
     8c8:	180b883a 	mov	r5,r3
     8cc:	1009883a 	mov	r4,r2
     8d0:	00123d80 	call	123d8 <OSQPost>
					OSFlagPost(flight_state, flight_all, OS_FLAG_CLR, &err);
     8d4:	e0bff104 	addi	r2,fp,-60
     8d8:	100f883a 	mov	r7,r2
     8dc:	000d883a 	mov	r6,zero
     8e0:	01403fc4 	movi	r5,255
     8e4:	e13feb17 	ldw	r4,-84(fp)
     8e8:	000ff700 	call	ff70 <OSFlagPost>
					OSFlagPost(flight_state, flight_pending_runway, OS_FLAG_SET, &err);
     8ec:	e0bff104 	addi	r2,fp,-60
     8f0:	100f883a 	mov	r7,r2
     8f4:	01800044 	movi	r6,1
     8f8:	01400204 	movi	r5,8
     8fc:	e13feb17 	ldw	r4,-84(fp)
     900:	000ff700 	call	ff70 <OSFlagPost>
					wait_time = 0;
     904:	e03fea15 	stw	zero,-88(fp)
					pending_start = wait_time;
     908:	e0bfea17 	ldw	r2,-88(fp)
     90c:	e0bfe915 	stw	r2,-92(fp)

				}
			}
			flags = OSFlagAccept(flight_state, flight_on_runway_state, OS_FLAG_WAIT_SET_ALL, &err);
     910:	e0bff104 	addi	r2,fp,-60
     914:	100f883a 	mov	r7,r2
     918:	01800084 	movi	r6,2
     91c:	01400104 	movi	r5,4
     920:	e13feb17 	ldw	r4,-84(fp)
     924:	000f08c0 	call	f08c <OSFlagAccept>
     928:	e0bff00d 	sth	r2,-64(fp)
			if (flags > 0)
     92c:	e0bff00b 	ldhu	r2,-64(fp)
     930:	10005226 	beq	r2,zero,a7c <flight_task+0x6b0>
			{
				//OSTmrStart(wait_timer, &err);// restart timer if it was paused
				clear_time = f.clear_start - wait_time;
     934:	e0fff817 	ldw	r3,-32(fp)
     938:	e0bfea17 	ldw	r2,-88(fp)
     93c:	1885c83a 	sub	r2,r3,r2
     940:	e0bfed15 	stw	r2,-76(fp)

				if (f.direction == 0)
     944:	e0bff417 	ldw	r2,-48(fp)
     948:	10000e1e 	bne	r2,zero,984 <flight_task+0x5b8>
				{
					sprintf(f.msg, "Flight #%03d (Takeoff)    ", f.ID);
     94c:	e0fff217 	ldw	r3,-56(fp)
     950:	e0bff204 	addi	r2,fp,-56
     954:	10800804 	addi	r2,r2,32
     958:	180d883a 	mov	r6,r3
     95c:	014000b4 	movhi	r5,2
     960:	29690404 	addi	r5,r5,-23536
     964:	1009883a 	mov	r4,r2
     968:	0001d3c0 	call	1d3c <sprintf>
					OSQPost(outbound_dsp_queue, (void *)&f);
     96c:	d0a7d817 	ldw	r2,-24736(gp)
     970:	e0fff204 	addi	r3,fp,-56
     974:	180b883a 	mov	r5,r3
     978:	1009883a 	mov	r4,r2
     97c:	00123d80 	call	123d8 <OSQPost>
     980:	00000d06 	br	9b8 <flight_task+0x5ec>
				}
				else
				{
					sprintf(f.msg, "Flight #%03d (Landing)  ", f.ID);
     984:	e0fff217 	ldw	r3,-56(fp)
     988:	e0bff204 	addi	r2,fp,-56
     98c:	10800804 	addi	r2,r2,32
     990:	180d883a 	mov	r6,r3
     994:	014000b4 	movhi	r5,2
     998:	29690b04 	addi	r5,r5,-23508
     99c:	1009883a 	mov	r4,r2
     9a0:	0001d3c0 	call	1d3c <sprintf>
					OSQPost(inbound_dsp_queue, (void *)&f);
     9a4:	d0a7ce17 	ldw	r2,-24776(gp)
     9a8:	e0fff204 	addi	r3,fp,-56
     9ac:	180b883a 	mov	r5,r3
     9b0:	1009883a 	mov	r4,r2
     9b4:	00123d80 	call	123d8 <OSQPost>
				}


				if (clear_time <= 0)
     9b8:	e0bfed17 	ldw	r2,-76(fp)
     9bc:	00802f16 	blt	zero,r2,a7c <flight_task+0x6b0>
				{
					clear_time = 0;
     9c0:	e03fed15 	stw	zero,-76(fp)
					/* start timer to free memory*/
					/* release runway */
					err = OSSemPost(runway_sem);
     9c4:	d0a7d717 	ldw	r2,-24740(gp)
     9c8:	1009883a 	mov	r4,r2
     9cc:	00132000 	call	13200 <OSSemPost>
     9d0:	e0bff105 	stb	r2,-60(fp)
					OSFlagPost(flight_state, flight_all, OS_FLAG_CLR, &err);
     9d4:	e0bff104 	addi	r2,fp,-60
     9d8:	100f883a 	mov	r7,r2
     9dc:	000d883a 	mov	r6,zero
     9e0:	01403fc4 	movi	r5,255
     9e4:	e13feb17 	ldw	r4,-84(fp)
     9e8:	000ff700 	call	ff70 <OSFlagPost>
					OSFlagPost(flight_state, flight_cleared_runway, OS_FLAG_SET, &err);
     9ec:	e0bff104 	addi	r2,fp,-60
     9f0:	100f883a 	mov	r7,r2
     9f4:	01800044 	movi	r6,1
     9f8:	01400404 	movi	r5,16
     9fc:	e13feb17 	ldw	r4,-84(fp)
     a00:	000ff700 	call	ff70 <OSFlagPost>

					if (f.direction == 0)
     a04:	e0bff417 	ldw	r2,-48(fp)
     a08:	10000e1e 	bne	r2,zero,a44 <flight_task+0x678>
					{
						sprintf(f.msg, "Flight #%03d (Clear)    ", f.ID);
     a0c:	e0fff217 	ldw	r3,-56(fp)
     a10:	e0bff204 	addi	r2,fp,-56
     a14:	10800804 	addi	r2,r2,32
     a18:	180d883a 	mov	r6,r3
     a1c:	014000b4 	movhi	r5,2
     a20:	29691204 	addi	r5,r5,-23480
     a24:	1009883a 	mov	r4,r2
     a28:	0001d3c0 	call	1d3c <sprintf>
						OSQPost(outbound_dsp_queue, (void *)&f);
     a2c:	d0a7d817 	ldw	r2,-24736(gp)
     a30:	e0fff204 	addi	r3,fp,-56
     a34:	180b883a 	mov	r5,r3
     a38:	1009883a 	mov	r4,r2
     a3c:	00123d80 	call	123d8 <OSQPost>
     a40:	00000d06 	br	a78 <flight_task+0x6ac>
					}
					else
					{
						sprintf(f.msg, "Flight #%03d (Clear)   ", f.ID);
     a44:	e0fff217 	ldw	r3,-56(fp)
     a48:	e0bff204 	addi	r2,fp,-56
     a4c:	10800804 	addi	r2,r2,32
     a50:	180d883a 	mov	r6,r3
     a54:	014000b4 	movhi	r5,2
     a58:	29691904 	addi	r5,r5,-23452
     a5c:	1009883a 	mov	r4,r2
     a60:	0001d3c0 	call	1d3c <sprintf>
						OSQPost(inbound_dsp_queue, (void *)&f);
     a64:	d0a7ce17 	ldw	r2,-24776(gp)
     a68:	e0fff204 	addi	r3,fp,-56
     a6c:	180b883a 	mov	r5,r3
     a70:	1009883a 	mov	r4,r2
     a74:	00123d80 	call	123d8 <OSQPost>
					}


					wait_time = 0;
     a78:	e03fea15 	stw	zero,-88(fp)
				}
			}
			flags = OSFlagAccept(flight_state, flight_pending_runway, OS_FLAG_WAIT_SET_ALL, &err);
     a7c:	e0bff104 	addi	r2,fp,-60
     a80:	100f883a 	mov	r7,r2
     a84:	01800084 	movi	r6,2
     a88:	01400204 	movi	r5,8
     a8c:	e13feb17 	ldw	r4,-84(fp)
     a90:	000f08c0 	call	f08c <OSFlagAccept>
     a94:	e0bff00d 	sth	r2,-64(fp)
			if (flags > 0)
     a98:	e0bff00b 	ldhu	r2,-64(fp)
     a9c:	10005326 	beq	r2,zero,bec <flight_task+0x820>
			{
				//OSTmrStart(wait_timer, &err);// restart timer if it was paused
				pending_time = wait_time - pending_start;
     aa0:	e0ffea17 	ldw	r3,-88(fp)
     aa4:	e0bfe917 	ldw	r2,-92(fp)
     aa8:	1885c83a 	sub	r2,r3,r2
     aac:	e0bfef15 	stw	r2,-68(fp)

				if (f.direction == 0)
     ab0:	e0bff417 	ldw	r2,-48(fp)
     ab4:	10000f1e 	bne	r2,zero,af4 <flight_task+0x728>
				{
					sprintf(f.msg, "Flight #%03d Pending %d   ", f.ID, pending_time);
     ab8:	e0fff217 	ldw	r3,-56(fp)
     abc:	e0bff204 	addi	r2,fp,-56
     ac0:	10800804 	addi	r2,r2,32
     ac4:	e1ffef17 	ldw	r7,-68(fp)
     ac8:	180d883a 	mov	r6,r3
     acc:	014000b4 	movhi	r5,2
     ad0:	29691f04 	addi	r5,r5,-23428
     ad4:	1009883a 	mov	r4,r2
     ad8:	0001d3c0 	call	1d3c <sprintf>
					OSQPost(outbound_dsp_queue, (void *)&f);
     adc:	d0a7d817 	ldw	r2,-24736(gp)
     ae0:	e0fff204 	addi	r3,fp,-56
     ae4:	180b883a 	mov	r5,r3
     ae8:	1009883a 	mov	r4,r2
     aec:	00123d80 	call	123d8 <OSQPost>
     af0:	00000e06 	br	b2c <flight_task+0x760>
				}
				else
				{
					sprintf(f.msg, "Flight #%03d Pending %d   ", f.ID, pending_time);
     af4:	e0fff217 	ldw	r3,-56(fp)
     af8:	e0bff204 	addi	r2,fp,-56
     afc:	10800804 	addi	r2,r2,32
     b00:	e1ffef17 	ldw	r7,-68(fp)
     b04:	180d883a 	mov	r6,r3
     b08:	014000b4 	movhi	r5,2
     b0c:	29691f04 	addi	r5,r5,-23428
     b10:	1009883a 	mov	r4,r2
     b14:	0001d3c0 	call	1d3c <sprintf>
					OSQPost(inbound_dsp_queue, (void *)&f);
     b18:	d0a7ce17 	ldw	r2,-24776(gp)
     b1c:	e0fff204 	addi	r3,fp,-56
     b20:	180b883a 	mov	r5,r3
     b24:	1009883a 	mov	r4,r2
     b28:	00123d80 	call	123d8 <OSQPost>
				}



				value = OSSemAccept(runway_sem);
     b2c:	d0a7d717 	ldw	r2,-24740(gp)
     b30:	1009883a 	mov	r4,r2
     b34:	0012ac00 	call	12ac0 <OSSemAccept>
     b38:	e0bff08d 	sth	r2,-62(fp)
				if (value > 0) {
     b3c:	e0bff08b 	ldhu	r2,-62(fp)
     b40:	10002a26 	beq	r2,zero,bec <flight_task+0x820>
					OSFlagPost(flight_state, flight_all, OS_FLAG_CLR, &err);
     b44:	e0bff104 	addi	r2,fp,-60
     b48:	100f883a 	mov	r7,r2
     b4c:	000d883a 	mov	r6,zero
     b50:	01403fc4 	movi	r5,255
     b54:	e13feb17 	ldw	r4,-84(fp)
     b58:	000ff700 	call	ff70 <OSFlagPost>
					OSFlagPost(flight_state, flight_on_runway_state, OS_FLAG_SET, &err);
     b5c:	e0bff104 	addi	r2,fp,-60
     b60:	100f883a 	mov	r7,r2
     b64:	01800044 	movi	r6,1
     b68:	01400104 	movi	r5,4
     b6c:	e13feb17 	ldw	r4,-84(fp)
     b70:	000ff700 	call	ff70 <OSFlagPost>

					if (f.direction == 0)
     b74:	e0bff417 	ldw	r2,-48(fp)
     b78:	10000e1e 	bne	r2,zero,bb4 <flight_task+0x7e8>
					{
						sprintf(f.msg, "Flight #%03d (Takeoff)    ", f.ID);
     b7c:	e0fff217 	ldw	r3,-56(fp)
     b80:	e0bff204 	addi	r2,fp,-56
     b84:	10800804 	addi	r2,r2,32
     b88:	180d883a 	mov	r6,r3
     b8c:	014000b4 	movhi	r5,2
     b90:	29690404 	addi	r5,r5,-23536
     b94:	1009883a 	mov	r4,r2
     b98:	0001d3c0 	call	1d3c <sprintf>
						OSQPost(outbound_dsp_queue, (void *)&f);
     b9c:	d0a7d817 	ldw	r2,-24736(gp)
     ba0:	e0fff204 	addi	r3,fp,-56
     ba4:	180b883a 	mov	r5,r3
     ba8:	1009883a 	mov	r4,r2
     bac:	00123d80 	call	123d8 <OSQPost>
     bb0:	00000d06 	br	be8 <flight_task+0x81c>
					}
					else
					{
						sprintf(f.msg, "Flight #%03d (Landing)    ", f.ID);
     bb4:	e0fff217 	ldw	r3,-56(fp)
     bb8:	e0bff204 	addi	r2,fp,-56
     bbc:	10800804 	addi	r2,r2,32
     bc0:	180d883a 	mov	r6,r3
     bc4:	014000b4 	movhi	r5,2
     bc8:	29692604 	addi	r5,r5,-23400
     bcc:	1009883a 	mov	r4,r2
     bd0:	0001d3c0 	call	1d3c <sprintf>
						OSQPost(inbound_dsp_queue, (void *)&f);
     bd4:	d0a7ce17 	ldw	r2,-24776(gp)
     bd8:	e0fff204 	addi	r3,fp,-56
     bdc:	180b883a 	mov	r5,r3
     be0:	1009883a 	mov	r4,r2
     be4:	00123d80 	call	123d8 <OSQPost>
					}

					/* start on runway timer (aka clear_timer)*/
					wait_time = 0;
     be8:	e03fea15 	stw	zero,-88(fp)
				}
			}
			flags = OSFlagAccept(flight_state, flight_cleared_runway, OS_FLAG_WAIT_SET_ALL, &err);
     bec:	e0bff104 	addi	r2,fp,-60
     bf0:	100f883a 	mov	r7,r2
     bf4:	01800084 	movi	r6,2
     bf8:	01400404 	movi	r5,16
     bfc:	e13feb17 	ldw	r4,-84(fp)
     c00:	000f08c0 	call	f08c <OSFlagAccept>
     c04:	e0bff00d 	sth	r2,-64(fp)
			if (flags > 0)
     c08:	e0bff00b 	ldhu	r2,-64(fp)
     c0c:	10003926 	beq	r2,zero,cf4 <flight_task+0x928>
			{
				//OSTmrStart(wait_timer, &err);// restart timer if it was paused
				free_time = f.free_start - wait_time;
     c10:	e0fff917 	ldw	r3,-28(fp)
     c14:	e0bfea17 	ldw	r2,-88(fp)
     c18:	1885c83a 	sub	r2,r3,r2
     c1c:	e0bfee15 	stw	r2,-72(fp)

				if (f.direction == 0)
     c20:	e0bff417 	ldw	r2,-48(fp)
     c24:	10000e1e 	bne	r2,zero,c60 <flight_task+0x894>
				{
					sprintf(f.msg, "Flight #%03d (Clear)  ", f.ID);
     c28:	e0fff217 	ldw	r3,-56(fp)
     c2c:	e0bff204 	addi	r2,fp,-56
     c30:	10800804 	addi	r2,r2,32
     c34:	180d883a 	mov	r6,r3
     c38:	014000b4 	movhi	r5,2
     c3c:	29692d04 	addi	r5,r5,-23372
     c40:	1009883a 	mov	r4,r2
     c44:	0001d3c0 	call	1d3c <sprintf>
					OSQPost(outbound_dsp_queue, (void *)&f);
     c48:	d0a7d817 	ldw	r2,-24736(gp)
     c4c:	e0fff204 	addi	r3,fp,-56
     c50:	180b883a 	mov	r5,r3
     c54:	1009883a 	mov	r4,r2
     c58:	00123d80 	call	123d8 <OSQPost>
     c5c:	00000d06 	br	c94 <flight_task+0x8c8>
				}
				else
				{
					sprintf(f.msg, "Flight #%03d (Clear)   ", f.ID);
     c60:	e0fff217 	ldw	r3,-56(fp)
     c64:	e0bff204 	addi	r2,fp,-56
     c68:	10800804 	addi	r2,r2,32
     c6c:	180d883a 	mov	r6,r3
     c70:	014000b4 	movhi	r5,2
     c74:	29691904 	addi	r5,r5,-23452
     c78:	1009883a 	mov	r4,r2
     c7c:	0001d3c0 	call	1d3c <sprintf>
					OSQPost(inbound_dsp_queue, (void *)&f);
     c80:	d0a7ce17 	ldw	r2,-24776(gp)
     c84:	e0fff204 	addi	r3,fp,-56
     c88:	180b883a 	mov	r5,r3
     c8c:	1009883a 	mov	r4,r2
     c90:	00123d80 	call	123d8 <OSQPost>
				}

				if (free_time <= 0)
     c94:	e0bfee17 	ldw	r2,-72(fp)
     c98:	00801616 	blt	zero,r2,cf4 <flight_task+0x928>
				{
					free_time = 0;
     c9c:	e03fee15 	stw	zero,-72(fp)
					if (f.direction == 0)
     ca0:	e0bff417 	ldw	r2,-48(fp)
     ca4:	1000041e 	bne	r2,zero,cb8 <flight_task+0x8ec>
					{
						outboundCount--;
     ca8:	d0a7d503 	ldbu	r2,-24748(gp)
     cac:	10bfffc4 	addi	r2,r2,-1
     cb0:	d0a7d505 	stb	r2,-24748(gp)
     cb4:	00000306 	br	cc4 <flight_task+0x8f8>
					}
					else
					{
						inboundCount--;
     cb8:	d0a7d303 	ldbu	r2,-24756(gp)
     cbc:	10bfffc4 	addi	r2,r2,-1
     cc0:	d0a7d305 	stb	r2,-24756(gp)
					}
					/* free up resources */
					OSFlagPost(flight_state, flight_all, OS_FLAG_CLR, &err);
     cc4:	e0bff104 	addi	r2,fp,-60
     cc8:	100f883a 	mov	r7,r2
     ccc:	000d883a 	mov	r6,zero
     cd0:	01403fc4 	movi	r5,255
     cd4:	e13feb17 	ldw	r4,-84(fp)
     cd8:	000ff700 	call	ff70 <OSFlagPost>
					OSFlagPost(flight_state, flight_free_state, OS_FLAG_SET, &err);
     cdc:	e0bff104 	addi	r2,fp,-60
     ce0:	100f883a 	mov	r7,r2
     ce4:	01800044 	movi	r6,1
     ce8:	01400804 	movi	r5,32
     cec:	e13feb17 	ldw	r4,-84(fp)
     cf0:	000ff700 	call	ff70 <OSFlagPost>
				}
			}

		}

		flags = OSFlagAccept(sim_state, sim_paused_state, OS_FLAG_WAIT_SET_ALL, &err);
     cf4:	d0a7d617 	ldw	r2,-24744(gp)
     cf8:	e0fff104 	addi	r3,fp,-60
     cfc:	180f883a 	mov	r7,r3
     d00:	01800084 	movi	r6,2
     d04:	01400104 	movi	r5,4
     d08:	1009883a 	mov	r4,r2
     d0c:	000f08c0 	call	f08c <OSFlagAccept>
     d10:	e0bff00d 	sth	r2,-64(fp)
		if (flags > 0)
		{
			//OSTmrStop(wait_timer, OS_TMR_OPT_NONE, (void *)0, &err);
		}

		OSTimeDlyHMSM(0, 0, 1, 0);
     d14:	000f883a 	mov	r7,zero
     d18:	01800044 	movi	r6,1
     d1c:	000b883a 	mov	r5,zero
     d20:	0009883a 	mov	r4,zero
     d24:	0014d900 	call	14d90 <OSTimeDlyHMSM>
	}
     d28:	003e3b06 	br	618 <flight_task+0x24c>

00000d2c <display_task>:

}

void display_task(void *pdata)
{
     d2c:	defff504 	addi	sp,sp,-44
     d30:	dfc00a15 	stw	ra,40(sp)
     d34:	df000915 	stw	fp,36(sp)
     d38:	df000904 	addi	fp,sp,36
     d3c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	Flight *outbound_msgs;
	Flight *inbound_msgs;

	OS_SEM_DATA sem_data;
	VGA_clear();
     d40:	0001b700 	call	1b70 <VGA_clear>
	while (1)
	{
		//VGA_clear_character();
		//VGA_clear_character();
		//VGA_clear();
		flags = OSFlagAccept(sim_state, sim_idle_state, OS_FLAG_WAIT_SET_ALL, &err);
     d44:	d0a7d617 	ldw	r2,-24744(gp)
     d48:	e0fffc04 	addi	r3,fp,-16
     d4c:	180f883a 	mov	r7,r3
     d50:	01800084 	movi	r6,2
     d54:	01400044 	movi	r5,1
     d58:	1009883a 	mov	r4,r2
     d5c:	000f08c0 	call	f08c <OSFlagAccept>
     d60:	e0bff90d 	sth	r2,-28(fp)
		if (flags > 0)
     d64:	e0bff90b 	ldhu	r2,-28(fp)
     d68:	10000a26 	beq	r2,zero,d94 <display_task+0x68>
		{
			switch (err) {
     d6c:	e0bffc03 	ldbu	r2,-16(fp)
     d70:	10803fcc 	andi	r2,r2,255
     d74:	1000061e 	bne	r2,zero,d90 <display_task+0x64>
			case OS_NO_ERR:
				//"                                                                                  "
				VGA_text(0, 1, "                          Press Key0 to Start Simulation                          ");
     d78:	018000b4 	movhi	r6,2
     d7c:	31a93304 	addi	r6,r6,-23348
     d80:	01400044 	movi	r5,1
     d84:	0009883a 	mov	r4,zero
     d88:	00019bc0 	call	19bc <VGA_text>
				break;
     d8c:	00000106 	br	d94 <display_task+0x68>
			case OS_TIMEOUT:
				//PC_DispStr(1, 1, "error: OS_TIMEOUT", DISP_FGND_RED + DISP_BGND_BLACK);
				break;
     d90:	0001883a 	nop
			}
		}


		flags = OSFlagAccept(sim_state, sim_running_state, OS_FLAG_WAIT_SET_ALL, &err);
     d94:	d0a7d617 	ldw	r2,-24744(gp)
     d98:	e0fffc04 	addi	r3,fp,-16
     d9c:	180f883a 	mov	r7,r3
     da0:	01800084 	movi	r6,2
     da4:	01400084 	movi	r5,2
     da8:	1009883a 	mov	r4,r2
     dac:	000f08c0 	call	f08c <OSFlagAccept>
     db0:	e0bff90d 	sth	r2,-28(fp)
		if (flags > 0)
     db4:	e0bff90b 	ldhu	r2,-28(fp)
     db8:	10006a26 	beq	r2,zero,f64 <display_task+0x238>
		{
			switch (err) {
     dbc:	e0bffc03 	ldbu	r2,-16(fp)
     dc0:	10803fcc 	andi	r2,r2,255
     dc4:	1000671e 	bne	r2,zero,f64 <display_task+0x238>
			case OS_NO_ERR:

				VGA_text(0, 1,  "                           Simulation Running                              ");
     dc8:	018000b4 	movhi	r6,2
     dcc:	31a94804 	addi	r6,r6,-23264
     dd0:	01400044 	movi	r5,1
     dd4:	0009883a 	mov	r4,zero
     dd8:	00019bc0 	call	19bc <VGA_text>
				VGA_text(0, 59, "                                                               Pause: Key1 ");
     ddc:	018000b4 	movhi	r6,2
     de0:	31a95b04 	addi	r6,r6,-23188
     de4:	01400ec4 	movi	r5,59
     de8:	0009883a 	mov	r4,zero
     dec:	00019bc0 	call	19bc <VGA_text>
				VGA_text(0, 58, "                                             Generate Random Flights: Key2 ");
     df0:	018000b4 	movhi	r6,2
     df4:	31a96e04 	addi	r6,r6,-23112
     df8:	01400e84 	movi	r5,58
     dfc:	0009883a 	mov	r4,zero
     e00:	00019bc0 	call	19bc <VGA_text>
				VGA_text(0, 4,  " Outbound Flights             Inbound Flights               Runway Status  ");
     e04:	018000b4 	movhi	r6,2
     e08:	31a98104 	addi	r6,r6,-23036
     e0c:	01400104 	movi	r5,4
     e10:	0009883a 	mov	r4,zero
     e14:	00019bc0 	call	19bc <VGA_text>


				err = OSSemQuery(runway_sem, &sem_data);
     e18:	d0a7d717 	ldw	r2,-24740(gp)
     e1c:	e0fffc84 	addi	r3,fp,-14
     e20:	180b883a 	mov	r5,r3
     e24:	1009883a 	mov	r4,r2
     e28:	00133100 	call	13310 <OSSemQuery>
     e2c:	e0bffc05 	stb	r2,-16(fp)
				if (err == OS_NO_ERR)
     e30:	e0bffc03 	ldbu	r2,-16(fp)
     e34:	10803fcc 	andi	r2,r2,255
     e38:	10000e1e 	bne	r2,zero,e74 <display_task+0x148>
				{
					if (sem_data.OSCnt != 0x00)
     e3c:	e0bffc8b 	ldhu	r2,-14(fp)
     e40:	10bfffcc 	andi	r2,r2,65535
     e44:	10000626 	beq	r2,zero,e60 <display_task+0x134>
					{
						VGA_text(RUNWAY_COL, 6, "AVAILABLE     ");
     e48:	018000b4 	movhi	r6,2
     e4c:	31a99404 	addi	r6,r6,-22960
     e50:	01400184 	movi	r5,6
     e54:	01000f04 	movi	r4,60
     e58:	00019bc0 	call	19bc <VGA_text>
     e5c:	00000506 	br	e74 <display_task+0x148>
					}
					else
					{
						VGA_text(RUNWAY_COL, 6, "OCCUPIED     ");
     e60:	018000b4 	movhi	r6,2
     e64:	31a99804 	addi	r6,r6,-22944
     e68:	01400184 	movi	r5,6
     e6c:	01000f04 	movi	r4,60
     e70:	00019bc0 	call	19bc <VGA_text>
					}
				}



				for (int i = 0; i < outboundCount; i++)
     e74:	e03ff715 	stw	zero,-36(fp)
     e78:	00001406 	br	ecc <display_task+0x1a0>
				{
					outbound_msgs = (Flight *)OSQAccept(outbound_dsp_queue, &err);
     e7c:	d0a7d817 	ldw	r2,-24736(gp)
     e80:	e0fffc04 	addi	r3,fp,-16
     e84:	180b883a 	mov	r5,r3
     e88:	1009883a 	mov	r4,r2
     e8c:	00119bc0 	call	119bc <OSQAccept>
     e90:	e0bffa15 	stw	r2,-24(fp)
					if (outbound_msgs != (void *)0)
     e94:	e0bffa17 	ldw	r2,-24(fp)
     e98:	10000926 	beq	r2,zero,ec0 <display_task+0x194>
					{
						//display_data[i] = *outbound_msgs;
						VGA_text(0, 5 + outbound_msgs->outbound_ID, &outbound_msgs->msg[0]);
     e9c:	e0bffa17 	ldw	r2,-24(fp)
     ea0:	10800417 	ldw	r2,16(r2)
     ea4:	10c00144 	addi	r3,r2,5
     ea8:	e0bffa17 	ldw	r2,-24(fp)
     eac:	10800804 	addi	r2,r2,32
     eb0:	100d883a 	mov	r6,r2
     eb4:	180b883a 	mov	r5,r3
     eb8:	0009883a 	mov	r4,zero
     ebc:	00019bc0 	call	19bc <VGA_text>
					}
				}



				for (int i = 0; i < outboundCount; i++)
     ec0:	e0bff717 	ldw	r2,-36(fp)
     ec4:	10800044 	addi	r2,r2,1
     ec8:	e0bff715 	stw	r2,-36(fp)
     ecc:	d0a7d503 	ldbu	r2,-24748(gp)
     ed0:	10803fcc 	andi	r2,r2,255
     ed4:	e0fff717 	ldw	r3,-36(fp)
     ed8:	18bfe816 	blt	r3,r2,e7c <display_task+0x150>
					{
						//display_data[i] = *outbound_msgs;
						VGA_text(0, 5 + outbound_msgs->outbound_ID, &outbound_msgs->msg[0]);
					}
				}
				err = OSQFlush(outbound_dsp_queue);
     edc:	d0a7d817 	ldw	r2,-24736(gp)
     ee0:	1009883a 	mov	r4,r2
     ee4:	0011f280 	call	11f28 <OSQFlush>
     ee8:	e0bffc05 	stb	r2,-16(fp)

				for (int i = 0; i < inboundCount; i++)
     eec:	e03ff815 	stw	zero,-32(fp)
     ef0:	00001406 	br	f44 <display_task+0x218>
				{
					inbound_msgs = (Flight *)OSQAccept(inbound_dsp_queue, &err);
     ef4:	d0a7ce17 	ldw	r2,-24776(gp)
     ef8:	e0fffc04 	addi	r3,fp,-16
     efc:	180b883a 	mov	r5,r3
     f00:	1009883a 	mov	r4,r2
     f04:	00119bc0 	call	119bc <OSQAccept>
     f08:	e0bffb15 	stw	r2,-20(fp)
					if (inbound_msgs != (void *)0)
     f0c:	e0bffb17 	ldw	r2,-20(fp)
     f10:	10000926 	beq	r2,zero,f38 <display_task+0x20c>
					{
						VGA_text(INBOUND_COL, 5 + inbound_msgs->inbound_ID, &inbound_msgs->msg[0]);
     f14:	e0bffb17 	ldw	r2,-20(fp)
     f18:	10800317 	ldw	r2,12(r2)
     f1c:	10c00144 	addi	r3,r2,5
     f20:	e0bffb17 	ldw	r2,-20(fp)
     f24:	10800804 	addi	r2,r2,32
     f28:	100d883a 	mov	r6,r2
     f2c:	180b883a 	mov	r5,r3
     f30:	01000744 	movi	r4,29
     f34:	00019bc0 	call	19bc <VGA_text>
						VGA_text(0, 5 + outbound_msgs->outbound_ID, &outbound_msgs->msg[0]);
					}
				}
				err = OSQFlush(outbound_dsp_queue);

				for (int i = 0; i < inboundCount; i++)
     f38:	e0bff817 	ldw	r2,-32(fp)
     f3c:	10800044 	addi	r2,r2,1
     f40:	e0bff815 	stw	r2,-32(fp)
     f44:	d0a7d303 	ldbu	r2,-24756(gp)
     f48:	10803fcc 	andi	r2,r2,255
     f4c:	e0fff817 	ldw	r3,-32(fp)
     f50:	18bfe816 	blt	r3,r2,ef4 <display_task+0x1c8>
					if (inbound_msgs != (void *)0)
					{
						VGA_text(INBOUND_COL, 5 + inbound_msgs->inbound_ID, &inbound_msgs->msg[0]);
					}
				}
				err = OSQFlush(inbound_dsp_queue);
     f54:	d0a7ce17 	ldw	r2,-24776(gp)
     f58:	1009883a 	mov	r4,r2
     f5c:	0011f280 	call	11f28 <OSQFlush>
     f60:	e0bffc05 	stb	r2,-16(fp)


			}
		}

		flags = OSFlagAccept(sim_state, sim_paused_state, OS_FLAG_WAIT_SET_ALL, &err);
     f64:	d0a7d617 	ldw	r2,-24744(gp)
     f68:	e0fffc04 	addi	r3,fp,-16
     f6c:	180f883a 	mov	r7,r3
     f70:	01800084 	movi	r6,2
     f74:	01400104 	movi	r5,4
     f78:	1009883a 	mov	r4,r2
     f7c:	000f08c0 	call	f08c <OSFlagAccept>
     f80:	e0bff90d 	sth	r2,-28(fp)
		if (flags > 0)
     f84:	e0bff90b 	ldhu	r2,-28(fp)
     f88:	10000f26 	beq	r2,zero,fc8 <display_task+0x29c>
		{
			switch (err) {
     f8c:	e0bffc03 	ldbu	r2,-16(fp)
     f90:	10803fcc 	andi	r2,r2,255
     f94:	10000b1e 	bne	r2,zero,fc4 <display_task+0x298>
			case OS_NO_ERR:
				//"                "                            Simulation Running                               "                                                                    "
				VGA_text(0, 1,     "                             Simulation Paused                              ");
     f98:	018000b4 	movhi	r6,2
     f9c:	31a99c04 	addi	r6,r6,-22928
     fa0:	01400044 	movi	r5,1
     fa4:	0009883a 	mov	r4,zero
     fa8:	00019bc0 	call	19bc <VGA_text>
				//PC_DispStr(1, 1, "                                    Simulation Paused                                  ", DISP_FGND_YELLOW + DISP_BGND_BLUE);
				VGA_text(0, 59,    "                                                              Resume: Key1 ");
     fac:	018000b4 	movhi	r6,2
     fb0:	31a9b004 	addi	r6,r6,-22848
     fb4:	01400ec4 	movi	r5,59
     fb8:	0009883a 	mov	r4,zero
     fbc:	00019bc0 	call	19bc <VGA_text>
				break;
     fc0:	00000106 	br	fc8 <display_task+0x29c>
			case OS_TIMEOUT:
				//PC_DispStr(1, 1, "error: OS_TIMEOUT", DISP_FGND_RED + DISP_BGND_BLACK);
				break;
     fc4:	0001883a 	nop
			}
		}
		OSTimeDly(1);
     fc8:	01000044 	movi	r4,1
     fcc:	0014c8c0 	call	14c8c <OSTimeDly>
	}
     fd0:	003f5c06 	br	d44 <display_task+0x18>

00000fd4 <input_task>:
}

void input_task(void *pdata)
{
     fd4:	deffe404 	addi	sp,sp,-112
     fd8:	dfc01b15 	stw	ra,108(sp)
     fdc:	df001a15 	stw	fp,104(sp)
     fe0:	dc001915 	stw	r16,100(sp)
     fe4:	df001a04 	addi	fp,sp,104
     fe8:	e13ffe15 	stw	r4,-8(fp)
	INT8U  err;
	INT16U value;

	OS_FLAGS flags;

	INT16U counter = 0;
     fec:	e03ff08d 	sth	zero,-62(fp)

	INT8U direction = 0;
     ff0:	e03fe905 	stb	zero,-92(fp)
	INT8U flightCounter = 0;
     ff4:	e03fe945 	stb	zero,-91(fp)
	srand(OSTimeGet());
     ff8:	00150c40 	call	150c4 <OSTimeGet>
     ffc:	1009883a 	mov	r4,r2
    1000:	0001c6c0 	call	1c6c <srand>

	OS_TMR *utilization_timer;

	utilization_timer = OSTmrCreate(20, 0,
    1004:	e0bff004 	addi	r2,fp,-64
    1008:	d8800215 	stw	r2,8(sp)
    100c:	008000b4 	movhi	r2,2
    1010:	10a9c304 	addi	r2,r2,-22772
    1014:	d8800115 	stw	r2,4(sp)
    1018:	e0bff084 	addi	r2,fp,-62
    101c:	d8800015 	stw	r2,0(sp)
    1020:	01c00034 	movhi	r7,0
    1024:	39c63204 	addi	r7,r7,6344
    1028:	01800044 	movi	r6,1
    102c:	000b883a 	mov	r5,zero
    1030:	01000504 	movi	r4,20
    1034:	00151800 	call	15180 <OSTmrCreate>
    1038:	e0bfec15 	stw	r2,-80(fp)
	);

	//pdata = pdata;
	while (1)
	{
		volatile int * KEY_ptr = (int *) 0xFF200050;		// pushbutton KEY address
    103c:	00bfc834 	movhi	r2,65312
    1040:	10801404 	addi	r2,r2,80
    1044:	e0bfed15 	stw	r2,-76(fp)
		int KEY_value;

		KEY_value = *(KEY_ptr); 				// read the pushbutton KEY values
    1048:	e0bfed17 	ldw	r2,-76(fp)
    104c:	10800017 	ldw	r2,0(r2)
    1050:	e0bfee15 	stw	r2,-72(fp)
		//while (*KEY_ptr);							// wait for pushbutton KEY release

		if (KEY_value == 0x1)					// check KEY1
    1054:	e0bfee17 	ldw	r2,-72(fp)
    1058:	10800058 	cmpnei	r2,r2,1
    105c:	1000121e 	bne	r2,zero,10a8 <input_task+0xd4>
		{
			OSFlagPost(sim_state, sim_idle_state, OS_FLAG_CLR, &err);
    1060:	d0a7d617 	ldw	r2,-24744(gp)
    1064:	e0fff004 	addi	r3,fp,-64
    1068:	180f883a 	mov	r7,r3
    106c:	000d883a 	mov	r6,zero
    1070:	01400044 	movi	r5,1
    1074:	1009883a 	mov	r4,r2
    1078:	000ff700 	call	ff70 <OSFlagPost>
			OSFlagPost(sim_state, sim_running_state, OS_FLAG_SET, &err);
    107c:	d0a7d617 	ldw	r2,-24744(gp)
    1080:	e0fff004 	addi	r3,fp,-64
    1084:	180f883a 	mov	r7,r3
    1088:	01800044 	movi	r6,1
    108c:	01400084 	movi	r5,2
    1090:	1009883a 	mov	r4,r2
    1094:	000ff700 	call	ff70 <OSFlagPost>
			OSTmrStart(utilization_timer, &err);
    1098:	e0bff004 	addi	r2,fp,-64
    109c:	100b883a 	mov	r5,r2
    10a0:	e13fec17 	ldw	r4,-80(fp)
    10a4:	00158400 	call	15840 <OSTmrStart>
		}
		if (KEY_value == 0x2)					// check KEY1
    10a8:	e0bfee17 	ldw	r2,-72(fp)
    10ac:	10800098 	cmpnei	r2,r2,2
    10b0:	1000291e 	bne	r2,zero,1158 <input_task+0x184>
		{
			flags = OSFlagQuery(sim_state, &err);
    10b4:	d0a7d617 	ldw	r2,-24744(gp)
    10b8:	e0fff004 	addi	r3,fp,-64
    10bc:	180b883a 	mov	r5,r3
    10c0:	1009883a 	mov	r4,r2
    10c4:	00103040 	call	10304 <OSFlagQuery>
    10c8:	e0bfef0d 	sth	r2,-68(fp)
			if (flags == sim_running_state)
    10cc:	e0bfef0b 	ldhu	r2,-68(fp)
    10d0:	10800098 	cmpnei	r2,r2,2
    10d4:	10000f1e 	bne	r2,zero,1114 <input_task+0x140>
			{
				OSFlagPost(sim_state, sim_running_state, OS_FLAG_CLR, &err);
    10d8:	d0a7d617 	ldw	r2,-24744(gp)
    10dc:	e0fff004 	addi	r3,fp,-64
    10e0:	180f883a 	mov	r7,r3
    10e4:	000d883a 	mov	r6,zero
    10e8:	01400084 	movi	r5,2
    10ec:	1009883a 	mov	r4,r2
    10f0:	000ff700 	call	ff70 <OSFlagPost>
				OSFlagPost(sim_state, sim_paused_state, OS_FLAG_SET, &err);
    10f4:	d0a7d617 	ldw	r2,-24744(gp)
    10f8:	e0fff004 	addi	r3,fp,-64
    10fc:	180f883a 	mov	r7,r3
    1100:	01800044 	movi	r6,1
    1104:	01400104 	movi	r5,4
    1108:	1009883a 	mov	r4,r2
    110c:	000ff700 	call	ff70 <OSFlagPost>
    1110:	00001106 	br	1158 <input_task+0x184>
			}
			else if (flags == sim_paused_state)
    1114:	e0bfef0b 	ldhu	r2,-68(fp)
    1118:	10800118 	cmpnei	r2,r2,4
    111c:	10000e1e 	bne	r2,zero,1158 <input_task+0x184>
			{
				OSFlagPost(sim_state, sim_paused_state, OS_FLAG_CLR, &err);
    1120:	d0a7d617 	ldw	r2,-24744(gp)
    1124:	e0fff004 	addi	r3,fp,-64
    1128:	180f883a 	mov	r7,r3
    112c:	000d883a 	mov	r6,zero
    1130:	01400104 	movi	r5,4
    1134:	1009883a 	mov	r4,r2
    1138:	000ff700 	call	ff70 <OSFlagPost>
				OSFlagPost(sim_state, sim_running_state, OS_FLAG_SET, &err);
    113c:	d0a7d617 	ldw	r2,-24744(gp)
    1140:	e0fff004 	addi	r3,fp,-64
    1144:	180f883a 	mov	r7,r3
    1148:	01800044 	movi	r6,1
    114c:	01400084 	movi	r5,2
    1150:	1009883a 	mov	r4,r2
    1154:	000ff700 	call	ff70 <OSFlagPost>
			}
			//VGA_clear_character();
		}
		if (KEY_value == 0x4)				// check KEY2
    1158:	e0bfee17 	ldw	r2,-72(fp)
    115c:	10800118 	cmpnei	r2,r2,4
    1160:	1001c91e 	bne	r2,zero,1888 <input_task+0x8b4>
		{
			flags = OSFlagAccept(sim_state, sim_running_state, OS_FLAG_WAIT_SET_ALL, &err);
    1164:	d0a7d617 	ldw	r2,-24744(gp)
    1168:	e0fff004 	addi	r3,fp,-64
    116c:	180f883a 	mov	r7,r3
    1170:	01800084 	movi	r6,2
    1174:	01400084 	movi	r5,2
    1178:	1009883a 	mov	r4,r2
    117c:	000f08c0 	call	f08c <OSFlagAccept>
    1180:	e0bfef0d 	sth	r2,-68(fp)
			if (flags > 0)
    1184:	e0bfef0b 	ldhu	r2,-68(fp)
    1188:	1000ed26 	beq	r2,zero,1540 <input_task+0x56c>
			{
				counter++;
    118c:	e0bff08b 	ldhu	r2,-62(fp)
    1190:	10800044 	addi	r2,r2,1
    1194:	e0bff08d 	sth	r2,-62(fp)
				//char s[20];
				//sprintf(s, "out: %d in: %d total: %d limit %d", outboundCount, inboundCount, outboundCount + inboundCount, FLIGHT_LIMIT);
				//VGA_text(30, 15, s);
				if ((outboundCount + inboundCount) != FLIGHT_LIMIT) // cant handle more than a certain number of flights
    1198:	d0a7d503 	ldbu	r2,-24748(gp)
    119c:	10c03fcc 	andi	r3,r2,255
    11a0:	d0a7d303 	ldbu	r2,-24756(gp)
    11a4:	10803fcc 	andi	r2,r2,255
    11a8:	1885883a 	add	r2,r3,r2
    11ac:	10800820 	cmpeqi	r2,r2,32
    11b0:	1000e11e 	bne	r2,zero,1538 <input_task+0x564>
				{
					flightCounter = outboundCount + inboundCount; // total nubmer of flights currently active
    11b4:	d0e7d503 	ldbu	r3,-24748(gp)
    11b8:	d0a7d303 	ldbu	r2,-24756(gp)
    11bc:	1885883a 	add	r2,r3,r2
    11c0:	e0bfe945 	stb	r2,-91(fp)
					direction = rand() % 2;
    11c4:	0001c840 	call	1c84 <rand>
    11c8:	1007883a 	mov	r3,r2
    11cc:	00a00034 	movhi	r2,32768
    11d0:	10800044 	addi	r2,r2,1
    11d4:	1884703a 	and	r2,r3,r2
    11d8:	1000040e 	bge	r2,zero,11ec <input_task+0x218>
    11dc:	10bfffc4 	addi	r2,r2,-1
    11e0:	00ffff84 	movi	r3,-2
    11e4:	10c4b03a 	or	r2,r2,r3
    11e8:	10800044 	addi	r2,r2,1
    11ec:	e0bfe905 	stb	r2,-92(fp)
					if (direction == 0)
    11f0:	e0bfe903 	ldbu	r2,-92(fp)
    11f4:	1000d21e 	bne	r2,zero,1540 <input_task+0x56c>
					{
						if (outboundCount != (FLIGHT_LIMIT / 2))
    11f8:	d0a7d503 	ldbu	r2,-24748(gp)
    11fc:	10803fcc 	andi	r2,r2,255
    1200:	10800420 	cmpeqi	r2,r2,16
    1204:	1000ce1e 	bne	r2,zero,1540 <input_task+0x56c>
						{
							value = OSSemAccept(expired_sem);         /* Check resource availability */
    1208:	d0a7d017 	ldw	r2,-24768(gp)
    120c:	1009883a 	mov	r4,r2
    1210:	0012ac00 	call	12ac0 <OSSemAccept>
    1214:	e0bfef8d 	sth	r2,-66(fp)
							if (value > 0)
    1218:	e0bfef8b 	ldhu	r2,-66(fp)
    121c:	10000426 	beq	r2,zero,1230 <input_task+0x25c>
							{
								OSSemPost(expired_ack_sem);
    1220:	d0a7d417 	ldw	r2,-24752(gp)
    1224:	1009883a 	mov	r4,r2
    1228:	00132000 	call	13200 <OSSemPost>
    122c:	0000c406 	br	1540 <input_task+0x56c>
							}
							else
							{
								// if no IDS/priorities are available make a new outbound flight

								++outboundCount;
    1230:	d0a7d503 	ldbu	r2,-24748(gp)
    1234:	10800044 	addi	r2,r2,1
    1238:	d0a7d505 	stb	r2,-24748(gp)
								flight_data[flightCounter].ID = totalFlights;
    123c:	e13fe943 	ldbu	r4,-91(fp)
    1240:	d0a7cd03 	ldbu	r2,-24780(gp)
    1244:	10c03fcc 	andi	r3,r2,255
    1248:	008000f4 	movhi	r2,3
    124c:	1080d404 	addi	r2,r2,848
    1250:	21000d24 	muli	r4,r4,52
    1254:	1105883a 	add	r2,r2,r4
    1258:	10c00015 	stw	r3,0(r2)
								flight_data[flightCounter].ETA_start = rand() % MAX_ETA + MIN_ETA;
    125c:	e43fe943 	ldbu	r16,-91(fp)
    1260:	0001c840 	call	1c84 <rand>
    1264:	00c00c84 	movi	r3,50
    1268:	10c7283a 	div	r3,r2,r3
    126c:	18c00ca4 	muli	r3,r3,50
    1270:	10c5c83a 	sub	r2,r2,r3
    1274:	10c00284 	addi	r3,r2,10
    1278:	008000f4 	movhi	r2,3
    127c:	1080d404 	addi	r2,r2,848
    1280:	81000d24 	muli	r4,r16,52
    1284:	1105883a 	add	r2,r2,r4
    1288:	10800504 	addi	r2,r2,20
    128c:	10c00015 	stw	r3,0(r2)
								flight_data[flightCounter].direction = direction;
    1290:	e13fe943 	ldbu	r4,-91(fp)
    1294:	e0ffe903 	ldbu	r3,-92(fp)
    1298:	008000f4 	movhi	r2,3
    129c:	1080d404 	addi	r2,r2,848
    12a0:	21000d24 	muli	r4,r4,52
    12a4:	1105883a 	add	r2,r2,r4
    12a8:	10800204 	addi	r2,r2,8
    12ac:	10c00015 	stw	r3,0(r2)
								Flight low_eta = flight_data[flightCounter];
    12b0:	e0ffe943 	ldbu	r3,-91(fp)
    12b4:	008000f4 	movhi	r2,3
    12b8:	1080d404 	addi	r2,r2,848
    12bc:	18c00d24 	muli	r3,r3,52
    12c0:	10c5883a 	add	r2,r2,r3
    12c4:	10c00017 	ldw	r3,0(r2)
    12c8:	e0fff115 	stw	r3,-60(fp)
    12cc:	10c00117 	ldw	r3,4(r2)
    12d0:	e0fff215 	stw	r3,-56(fp)
    12d4:	10c00217 	ldw	r3,8(r2)
    12d8:	e0fff315 	stw	r3,-52(fp)
    12dc:	10c00317 	ldw	r3,12(r2)
    12e0:	e0fff415 	stw	r3,-48(fp)
    12e4:	10c00417 	ldw	r3,16(r2)
    12e8:	e0fff515 	stw	r3,-44(fp)
    12ec:	10c00517 	ldw	r3,20(r2)
    12f0:	e0fff615 	stw	r3,-40(fp)
    12f4:	10c00617 	ldw	r3,24(r2)
    12f8:	e0fff715 	stw	r3,-36(fp)
    12fc:	10c00717 	ldw	r3,28(r2)
    1300:	e0fff815 	stw	r3,-32(fp)
    1304:	10c00817 	ldw	r3,32(r2)
    1308:	e0fff915 	stw	r3,-28(fp)
    130c:	10c00917 	ldw	r3,36(r2)
    1310:	e0fffa15 	stw	r3,-24(fp)
    1314:	10c00a17 	ldw	r3,40(r2)
    1318:	e0fffb15 	stw	r3,-20(fp)
    131c:	10c00b17 	ldw	r3,44(r2)
    1320:	e0fffc15 	stw	r3,-16(fp)
    1324:	10800c17 	ldw	r2,48(r2)
    1328:	e0bffd15 	stw	r2,-12(fp)
								for (int i = 0; i < flightCounter; i++)
    132c:	e03fea15 	stw	zero,-88(fp)
    1330:	00002b06 	br	13e0 <input_task+0x40c>
								{
									if (flight_data[i].ETA_start < low_eta.ETA_start)
    1334:	008000f4 	movhi	r2,3
    1338:	1080d404 	addi	r2,r2,848
    133c:	e0ffea17 	ldw	r3,-88(fp)
    1340:	18c00d24 	muli	r3,r3,52
    1344:	10c5883a 	add	r2,r2,r3
    1348:	10800504 	addi	r2,r2,20
    134c:	10c00017 	ldw	r3,0(r2)
    1350:	e0bff617 	ldw	r2,-40(fp)
    1354:	18801f0e 	bge	r3,r2,13d4 <input_task+0x400>
									{
										low_eta = flight_data[i];
    1358:	008000f4 	movhi	r2,3
    135c:	1080d404 	addi	r2,r2,848
    1360:	e0ffea17 	ldw	r3,-88(fp)
    1364:	18c00d24 	muli	r3,r3,52
    1368:	10c5883a 	add	r2,r2,r3
    136c:	10c00017 	ldw	r3,0(r2)
    1370:	e0fff115 	stw	r3,-60(fp)
    1374:	10c00117 	ldw	r3,4(r2)
    1378:	e0fff215 	stw	r3,-56(fp)
    137c:	10c00217 	ldw	r3,8(r2)
    1380:	e0fff315 	stw	r3,-52(fp)
    1384:	10c00317 	ldw	r3,12(r2)
    1388:	e0fff415 	stw	r3,-48(fp)
    138c:	10c00417 	ldw	r3,16(r2)
    1390:	e0fff515 	stw	r3,-44(fp)
    1394:	10c00517 	ldw	r3,20(r2)
    1398:	e0fff615 	stw	r3,-40(fp)
    139c:	10c00617 	ldw	r3,24(r2)
    13a0:	e0fff715 	stw	r3,-36(fp)
    13a4:	10c00717 	ldw	r3,28(r2)
    13a8:	e0fff815 	stw	r3,-32(fp)
    13ac:	10c00817 	ldw	r3,32(r2)
    13b0:	e0fff915 	stw	r3,-28(fp)
    13b4:	10c00917 	ldw	r3,36(r2)
    13b8:	e0fffa15 	stw	r3,-24(fp)
    13bc:	10c00a17 	ldw	r3,40(r2)
    13c0:	e0fffb15 	stw	r3,-20(fp)
    13c4:	10c00b17 	ldw	r3,44(r2)
    13c8:	e0fffc15 	stw	r3,-16(fp)
    13cc:	10800c17 	ldw	r2,48(r2)
    13d0:	e0bffd15 	stw	r2,-12(fp)
								++outboundCount;
								flight_data[flightCounter].ID = totalFlights;
								flight_data[flightCounter].ETA_start = rand() % MAX_ETA + MIN_ETA;
								flight_data[flightCounter].direction = direction;
								Flight low_eta = flight_data[flightCounter];
								for (int i = 0; i < flightCounter; i++)
    13d4:	e0bfea17 	ldw	r2,-88(fp)
    13d8:	10800044 	addi	r2,r2,1
    13dc:	e0bfea15 	stw	r2,-88(fp)
    13e0:	e0bfe943 	ldbu	r2,-91(fp)
    13e4:	e0ffea17 	ldw	r3,-88(fp)
    13e8:	18bfd216 	blt	r3,r2,1334 <input_task+0x360>
									if (flight_data[i].ETA_start < low_eta.ETA_start)
									{
										low_eta = flight_data[i];
									}
								}
								if (flight_data[flightCounter].ETA_start < low_eta.ETA_start)
    13ec:	e0ffe943 	ldbu	r3,-91(fp)
    13f0:	008000f4 	movhi	r2,3
    13f4:	1080d404 	addi	r2,r2,848
    13f8:	18c00d24 	muli	r3,r3,52
    13fc:	10c5883a 	add	r2,r2,r3
    1400:	10800504 	addi	r2,r2,20
    1404:	10c00017 	ldw	r3,0(r2)
    1408:	e0bff617 	ldw	r2,-40(fp)
    140c:	18800a0e 	bge	r3,r2,1438 <input_task+0x464>
								{
									flight_data[flightCounter].prio = low_eta.prio - 1; // task ID
    1410:	e13fe943 	ldbu	r4,-91(fp)
    1414:	e0bff217 	ldw	r2,-56(fp)
    1418:	10ffffc4 	addi	r3,r2,-1
    141c:	008000f4 	movhi	r2,3
    1420:	1080d404 	addi	r2,r2,848
    1424:	21000d24 	muli	r4,r4,52
    1428:	1105883a 	add	r2,r2,r4
    142c:	10800104 	addi	r2,r2,4
    1430:	10c00015 	stw	r3,0(r2)
    1434:	00000a06 	br	1460 <input_task+0x48c>
								}
								else
								{
									flight_data[flightCounter].prio = FLIGHT_PRIO - flightCounter;
    1438:	e13fe943 	ldbu	r4,-91(fp)
    143c:	e0bfe943 	ldbu	r2,-91(fp)
    1440:	00c00904 	movi	r3,36
    1444:	1887c83a 	sub	r3,r3,r2
    1448:	008000f4 	movhi	r2,3
    144c:	1080d404 	addi	r2,r2,848
    1450:	21000d24 	muli	r4,r4,52
    1454:	1105883a 	add	r2,r2,r4
    1458:	10800104 	addi	r2,r2,4
    145c:	10c00015 	stw	r3,0(r2)
								}
								flight_data[flightCounter].clear_start = 10;
    1460:	e0ffe943 	ldbu	r3,-91(fp)
    1464:	008000f4 	movhi	r2,3
    1468:	1080d404 	addi	r2,r2,848
    146c:	18c00d24 	muli	r3,r3,52
    1470:	10c5883a 	add	r2,r2,r3
    1474:	10800604 	addi	r2,r2,24
    1478:	00c00284 	movi	r3,10
    147c:	10c00015 	stw	r3,0(r2)
								flight_data[flightCounter].free_start = 10;
    1480:	e0ffe943 	ldbu	r3,-91(fp)
    1484:	008000f4 	movhi	r2,3
    1488:	1080d404 	addi	r2,r2,848
    148c:	18c00d24 	muli	r3,r3,52
    1490:	10c5883a 	add	r2,r2,r3
    1494:	10800704 	addi	r2,r2,28
    1498:	00c00284 	movi	r3,10
    149c:	10c00015 	stw	r3,0(r2)

								flight_data[flightCounter].outbound_ID = outboundCount; //display row
    14a0:	e13fe943 	ldbu	r4,-91(fp)
    14a4:	d0a7d503 	ldbu	r2,-24748(gp)
    14a8:	10c03fcc 	andi	r3,r2,255
    14ac:	008000f4 	movhi	r2,3
    14b0:	1080d404 	addi	r2,r2,848
    14b4:	21000d24 	muli	r4,r4,52
    14b8:	1105883a 	add	r2,r2,r4
    14bc:	10800404 	addi	r2,r2,16
    14c0:	10c00015 	stw	r3,0(r2)
								OSTaskCreate(flight_task, (void *)&flight_data[flightCounter], &flight_stack[flightCounter][TASK_STK_SIZE - 1], (INT8U)(flight_data[flightCounter].prio));
    14c4:	e0bfe943 	ldbu	r2,-91(fp)
    14c8:	10c00d24 	muli	r3,r2,52
    14cc:	008000f4 	movhi	r2,3
    14d0:	1080d404 	addi	r2,r2,848
    14d4:	1889883a 	add	r4,r3,r2
    14d8:	e0bfe943 	ldbu	r2,-91(fp)
    14dc:	100492fa 	slli	r2,r2,11
    14e0:	10c1ff04 	addi	r3,r2,2044
    14e4:	008000b4 	movhi	r2,2
    14e8:	10bc5404 	addi	r2,r2,-3760
    14ec:	188b883a 	add	r5,r3,r2
    14f0:	e0ffe943 	ldbu	r3,-91(fp)
    14f4:	008000f4 	movhi	r2,3
    14f8:	1080d404 	addi	r2,r2,848
    14fc:	18c00d24 	muli	r3,r3,52
    1500:	10c5883a 	add	r2,r2,r3
    1504:	10800104 	addi	r2,r2,4
    1508:	10800017 	ldw	r2,0(r2)
    150c:	10803fcc 	andi	r2,r2,255
    1510:	100f883a 	mov	r7,r2
    1514:	280d883a 	mov	r6,r5
    1518:	200b883a 	mov	r5,r4
    151c:	01000034 	movhi	r4,0
    1520:	2100f304 	addi	r4,r4,972
    1524:	0013a100 	call	13a10 <OSTaskCreate>

								++totalFlights; // total number of flights (since this also gives the task its priority start at 0
    1528:	d0a7cd03 	ldbu	r2,-24780(gp)
    152c:	10800044 	addi	r2,r2,1
    1530:	d0a7cd05 	stb	r2,-24780(gp)
    1534:	00000206 	br	1540 <input_task+0x56c>
					}
				}
				else
				{
					// outbounds full try to make inbound
					direction = 1;
    1538:	00800044 	movi	r2,1
    153c:	e0bfe905 	stb	r2,-92(fp)
				}
			}

			if (direction == 1)
    1540:	e0bfe903 	ldbu	r2,-92(fp)
    1544:	10800058 	cmpnei	r2,r2,1
    1548:	1000cf1e 	bne	r2,zero,1888 <input_task+0x8b4>
			{
				if (inboundCount != (FLIGHT_LIMIT / 2))
    154c:	d0a7d303 	ldbu	r2,-24756(gp)
    1550:	10803fcc 	andi	r2,r2,255
    1554:	10800420 	cmpeqi	r2,r2,16
    1558:	1000cb1e 	bne	r2,zero,1888 <input_task+0x8b4>
				{

					value = OSSemAccept(expired_sem);         /* Check resource availability */
    155c:	d0a7d017 	ldw	r2,-24768(gp)
    1560:	1009883a 	mov	r4,r2
    1564:	0012ac00 	call	12ac0 <OSSemAccept>
    1568:	e0bfef8d 	sth	r2,-66(fp)
					if (value > 0)
    156c:	e0bfef8b 	ldhu	r2,-66(fp)
    1570:	10000426 	beq	r2,zero,1584 <input_task+0x5b0>
					{
						OSSemPost(expired_ack_sem);
    1574:	d0a7d417 	ldw	r2,-24752(gp)
    1578:	1009883a 	mov	r4,r2
    157c:	00132000 	call	13200 <OSSemPost>
    1580:	0000c106 	br	1888 <input_task+0x8b4>
					}
					else
					{
						// make inbound flight
						// if no IDS/priorities are available make a new outbound flight
						++inboundCount;
    1584:	d0a7d303 	ldbu	r2,-24756(gp)
    1588:	10800044 	addi	r2,r2,1
    158c:	d0a7d305 	stb	r2,-24756(gp)
						flight_data[flightCounter].ID = totalFlights;
    1590:	e13fe943 	ldbu	r4,-91(fp)
    1594:	d0a7cd03 	ldbu	r2,-24780(gp)
    1598:	10c03fcc 	andi	r3,r2,255
    159c:	008000f4 	movhi	r2,3
    15a0:	1080d404 	addi	r2,r2,848
    15a4:	21000d24 	muli	r4,r4,52
    15a8:	1105883a 	add	r2,r2,r4
    15ac:	10c00015 	stw	r3,0(r2)
						flight_data[flightCounter].ETA_start = rand() % MAX_ETA + MIN_ETA;
    15b0:	e43fe943 	ldbu	r16,-91(fp)
    15b4:	0001c840 	call	1c84 <rand>
    15b8:	00c00c84 	movi	r3,50
    15bc:	10c7283a 	div	r3,r2,r3
    15c0:	18c00ca4 	muli	r3,r3,50
    15c4:	10c5c83a 	sub	r2,r2,r3
    15c8:	10c00284 	addi	r3,r2,10
    15cc:	008000f4 	movhi	r2,3
    15d0:	1080d404 	addi	r2,r2,848
    15d4:	81000d24 	muli	r4,r16,52
    15d8:	1105883a 	add	r2,r2,r4
    15dc:	10800504 	addi	r2,r2,20
    15e0:	10c00015 	stw	r3,0(r2)
						flight_data[flightCounter].direction = direction;
    15e4:	e13fe943 	ldbu	r4,-91(fp)
    15e8:	e0ffe903 	ldbu	r3,-92(fp)
    15ec:	008000f4 	movhi	r2,3
    15f0:	1080d404 	addi	r2,r2,848
    15f4:	21000d24 	muli	r4,r4,52
    15f8:	1105883a 	add	r2,r2,r4
    15fc:	10800204 	addi	r2,r2,8
    1600:	10c00015 	stw	r3,0(r2)

						Flight low_eta = flight_data[flightCounter];
    1604:	e0ffe943 	ldbu	r3,-91(fp)
    1608:	008000f4 	movhi	r2,3
    160c:	1080d404 	addi	r2,r2,848
    1610:	18c00d24 	muli	r3,r3,52
    1614:	10c5883a 	add	r2,r2,r3
    1618:	10c00017 	ldw	r3,0(r2)
    161c:	e0fff115 	stw	r3,-60(fp)
    1620:	10c00117 	ldw	r3,4(r2)
    1624:	e0fff215 	stw	r3,-56(fp)
    1628:	10c00217 	ldw	r3,8(r2)
    162c:	e0fff315 	stw	r3,-52(fp)
    1630:	10c00317 	ldw	r3,12(r2)
    1634:	e0fff415 	stw	r3,-48(fp)
    1638:	10c00417 	ldw	r3,16(r2)
    163c:	e0fff515 	stw	r3,-44(fp)
    1640:	10c00517 	ldw	r3,20(r2)
    1644:	e0fff615 	stw	r3,-40(fp)
    1648:	10c00617 	ldw	r3,24(r2)
    164c:	e0fff715 	stw	r3,-36(fp)
    1650:	10c00717 	ldw	r3,28(r2)
    1654:	e0fff815 	stw	r3,-32(fp)
    1658:	10c00817 	ldw	r3,32(r2)
    165c:	e0fff915 	stw	r3,-28(fp)
    1660:	10c00917 	ldw	r3,36(r2)
    1664:	e0fffa15 	stw	r3,-24(fp)
    1668:	10c00a17 	ldw	r3,40(r2)
    166c:	e0fffb15 	stw	r3,-20(fp)
    1670:	10c00b17 	ldw	r3,44(r2)
    1674:	e0fffc15 	stw	r3,-16(fp)
    1678:	10800c17 	ldw	r2,48(r2)
    167c:	e0bffd15 	stw	r2,-12(fp)
						for (int i = 0; i < flightCounter; i++)
    1680:	e03feb15 	stw	zero,-84(fp)
    1684:	00002b06 	br	1734 <input_task+0x760>
						{
							if (flight_data[i].ETA_start < low_eta.ETA_start)
    1688:	008000f4 	movhi	r2,3
    168c:	1080d404 	addi	r2,r2,848
    1690:	e0ffeb17 	ldw	r3,-84(fp)
    1694:	18c00d24 	muli	r3,r3,52
    1698:	10c5883a 	add	r2,r2,r3
    169c:	10800504 	addi	r2,r2,20
    16a0:	10c00017 	ldw	r3,0(r2)
    16a4:	e0bff617 	ldw	r2,-40(fp)
    16a8:	18801f0e 	bge	r3,r2,1728 <input_task+0x754>
							{
								low_eta = flight_data[i];
    16ac:	008000f4 	movhi	r2,3
    16b0:	1080d404 	addi	r2,r2,848
    16b4:	e0ffeb17 	ldw	r3,-84(fp)
    16b8:	18c00d24 	muli	r3,r3,52
    16bc:	10c5883a 	add	r2,r2,r3
    16c0:	10c00017 	ldw	r3,0(r2)
    16c4:	e0fff115 	stw	r3,-60(fp)
    16c8:	10c00117 	ldw	r3,4(r2)
    16cc:	e0fff215 	stw	r3,-56(fp)
    16d0:	10c00217 	ldw	r3,8(r2)
    16d4:	e0fff315 	stw	r3,-52(fp)
    16d8:	10c00317 	ldw	r3,12(r2)
    16dc:	e0fff415 	stw	r3,-48(fp)
    16e0:	10c00417 	ldw	r3,16(r2)
    16e4:	e0fff515 	stw	r3,-44(fp)
    16e8:	10c00517 	ldw	r3,20(r2)
    16ec:	e0fff615 	stw	r3,-40(fp)
    16f0:	10c00617 	ldw	r3,24(r2)
    16f4:	e0fff715 	stw	r3,-36(fp)
    16f8:	10c00717 	ldw	r3,28(r2)
    16fc:	e0fff815 	stw	r3,-32(fp)
    1700:	10c00817 	ldw	r3,32(r2)
    1704:	e0fff915 	stw	r3,-28(fp)
    1708:	10c00917 	ldw	r3,36(r2)
    170c:	e0fffa15 	stw	r3,-24(fp)
    1710:	10c00a17 	ldw	r3,40(r2)
    1714:	e0fffb15 	stw	r3,-20(fp)
    1718:	10c00b17 	ldw	r3,44(r2)
    171c:	e0fffc15 	stw	r3,-16(fp)
    1720:	10800c17 	ldw	r2,48(r2)
    1724:	e0bffd15 	stw	r2,-12(fp)
						flight_data[flightCounter].ID = totalFlights;
						flight_data[flightCounter].ETA_start = rand() % MAX_ETA + MIN_ETA;
						flight_data[flightCounter].direction = direction;

						Flight low_eta = flight_data[flightCounter];
						for (int i = 0; i < flightCounter; i++)
    1728:	e0bfeb17 	ldw	r2,-84(fp)
    172c:	10800044 	addi	r2,r2,1
    1730:	e0bfeb15 	stw	r2,-84(fp)
    1734:	e0bfe943 	ldbu	r2,-91(fp)
    1738:	e0ffeb17 	ldw	r3,-84(fp)
    173c:	18bfd216 	blt	r3,r2,1688 <input_task+0x6b4>
							if (flight_data[i].ETA_start < low_eta.ETA_start)
							{
								low_eta = flight_data[i];
							}
						}
						if (flight_data[flightCounter].ETA_start < low_eta.ETA_start)
    1740:	e0ffe943 	ldbu	r3,-91(fp)
    1744:	008000f4 	movhi	r2,3
    1748:	1080d404 	addi	r2,r2,848
    174c:	18c00d24 	muli	r3,r3,52
    1750:	10c5883a 	add	r2,r2,r3
    1754:	10800504 	addi	r2,r2,20
    1758:	10c00017 	ldw	r3,0(r2)
    175c:	e0bff617 	ldw	r2,-40(fp)
    1760:	18800a0e 	bge	r3,r2,178c <input_task+0x7b8>
						{
							flight_data[flightCounter].prio = low_eta.prio - 1; // task ID
    1764:	e13fe943 	ldbu	r4,-91(fp)
    1768:	e0bff217 	ldw	r2,-56(fp)
    176c:	10ffffc4 	addi	r3,r2,-1
    1770:	008000f4 	movhi	r2,3
    1774:	1080d404 	addi	r2,r2,848
    1778:	21000d24 	muli	r4,r4,52
    177c:	1105883a 	add	r2,r2,r4
    1780:	10800104 	addi	r2,r2,4
    1784:	10c00015 	stw	r3,0(r2)
    1788:	00000a06 	br	17b4 <input_task+0x7e0>
						}
						else
						{
							flight_data[flightCounter].prio = FLIGHT_PRIO - flightCounter;
    178c:	e13fe943 	ldbu	r4,-91(fp)
    1790:	e0bfe943 	ldbu	r2,-91(fp)
    1794:	00c00904 	movi	r3,36
    1798:	1887c83a 	sub	r3,r3,r2
    179c:	008000f4 	movhi	r2,3
    17a0:	1080d404 	addi	r2,r2,848
    17a4:	21000d24 	muli	r4,r4,52
    17a8:	1105883a 	add	r2,r2,r4
    17ac:	10800104 	addi	r2,r2,4
    17b0:	10c00015 	stw	r3,0(r2)
						}
						flight_data[flightCounter].clear_start = 10;
    17b4:	e0ffe943 	ldbu	r3,-91(fp)
    17b8:	008000f4 	movhi	r2,3
    17bc:	1080d404 	addi	r2,r2,848
    17c0:	18c00d24 	muli	r3,r3,52
    17c4:	10c5883a 	add	r2,r2,r3
    17c8:	10800604 	addi	r2,r2,24
    17cc:	00c00284 	movi	r3,10
    17d0:	10c00015 	stw	r3,0(r2)
						flight_data[flightCounter].free_start = 10;
    17d4:	e0ffe943 	ldbu	r3,-91(fp)
    17d8:	008000f4 	movhi	r2,3
    17dc:	1080d404 	addi	r2,r2,848
    17e0:	18c00d24 	muli	r3,r3,52
    17e4:	10c5883a 	add	r2,r2,r3
    17e8:	10800704 	addi	r2,r2,28
    17ec:	00c00284 	movi	r3,10
    17f0:	10c00015 	stw	r3,0(r2)

						flight_data[flightCounter].inbound_ID = inboundCount; //display row
    17f4:	e13fe943 	ldbu	r4,-91(fp)
    17f8:	d0a7d303 	ldbu	r2,-24756(gp)
    17fc:	10c03fcc 	andi	r3,r2,255
    1800:	008000f4 	movhi	r2,3
    1804:	1080d404 	addi	r2,r2,848
    1808:	21000d24 	muli	r4,r4,52
    180c:	1105883a 	add	r2,r2,r4
    1810:	10800304 	addi	r2,r2,12
    1814:	10c00015 	stw	r3,0(r2)
						OSTaskCreate(flight_task, (void *)&flight_data[flightCounter], &flight_stack[flightCounter][TASK_STK_SIZE - 1], (INT8U)(flight_data[flightCounter].prio));
    1818:	e0bfe943 	ldbu	r2,-91(fp)
    181c:	10c00d24 	muli	r3,r2,52
    1820:	008000f4 	movhi	r2,3
    1824:	1080d404 	addi	r2,r2,848
    1828:	1889883a 	add	r4,r3,r2
    182c:	e0bfe943 	ldbu	r2,-91(fp)
    1830:	100492fa 	slli	r2,r2,11
    1834:	10c1ff04 	addi	r3,r2,2044
    1838:	008000b4 	movhi	r2,2
    183c:	10bc5404 	addi	r2,r2,-3760
    1840:	188b883a 	add	r5,r3,r2
    1844:	e0ffe943 	ldbu	r3,-91(fp)
    1848:	008000f4 	movhi	r2,3
    184c:	1080d404 	addi	r2,r2,848
    1850:	18c00d24 	muli	r3,r3,52
    1854:	10c5883a 	add	r2,r2,r3
    1858:	10800104 	addi	r2,r2,4
    185c:	10800017 	ldw	r2,0(r2)
    1860:	10803fcc 	andi	r2,r2,255
    1864:	100f883a 	mov	r7,r2
    1868:	280d883a 	mov	r6,r5
    186c:	200b883a 	mov	r5,r4
    1870:	01000034 	movhi	r4,0
    1874:	2100f304 	addi	r4,r4,972
    1878:	0013a100 	call	13a10 <OSTaskCreate>


						++totalFlights; // total number of flights (since this also gives the task its priority start at 0
    187c:	d0a7cd03 	ldbu	r2,-24780(gp)
    1880:	10800044 	addi	r2,r2,1
    1884:	d0a7cd05 	stb	r2,-24780(gp)
					}

				}
			}
		}
		flags = OSFlagAccept(sim_state, sim_running_state, OS_FLAG_WAIT_SET_ALL, &err);
    1888:	d0a7d617 	ldw	r2,-24744(gp)
    188c:	e0fff004 	addi	r3,fp,-64
    1890:	180f883a 	mov	r7,r3
    1894:	01800084 	movi	r6,2
    1898:	01400084 	movi	r5,2
    189c:	1009883a 	mov	r4,r2
    18a0:	000f08c0 	call	f08c <OSFlagAccept>
    18a4:	e0bfef0d 	sth	r2,-68(fp)
		if (flags > 0)
    18a8:	e0bfef0b 	ldhu	r2,-68(fp)
    18ac:	10000326 	beq	r2,zero,18bc <input_task+0x8e8>
		{
			counter++;
    18b0:	e0bff08b 	ldhu	r2,-62(fp)
    18b4:	10800044 	addi	r2,r2,1
    18b8:	e0bff08d 	sth	r2,-62(fp)
		}
		OSTimeDly(1);
    18bc:	01000044 	movi	r4,1
    18c0:	0014c8c0 	call	14c8c <OSTimeDly>
	}
    18c4:	003ddd06 	br	103c <input_task+0x68>

000018c8 <u_callback>:
 *********************************************************************************************************
 *                                                  Callbacks
 *********************************************************************************************************
 */
void u_callback(void *ptmr, void *callback_arg)
{
    18c8:	defffa04 	addi	sp,sp,-24
    18cc:	dfc00515 	stw	ra,20(sp)
    18d0:	df000415 	stw	fp,16(sp)
    18d4:	df000404 	addi	fp,sp,16
    18d8:	e13ffe15 	stw	r4,-8(fp)
    18dc:	e17fff15 	stw	r5,-4(fp)
	INT16U count = 0;
    18e0:	e03ffd0d 	sth	zero,-12(fp)
	count = *((INT16U *)callback_arg);
    18e4:	e0bfff17 	ldw	r2,-4(fp)
    18e8:	1080000b 	ldhu	r2,0(r2)
    18ec:	e0bffd0d 	sth	r2,-12(fp)
	VGA_box(0,0, 319, 239, GRAY);
    18f0:	00800284 	movi	r2,10
    18f4:	d8800015 	stw	r2,0(sp)
    18f8:	01c03bc4 	movi	r7,239
    18fc:	01804fc4 	movi	r6,319
    1900:	000b883a 	mov	r5,zero
    1904:	0009883a 	mov	r4,zero
    1908:	0001a500 	call	1a50 <VGA_box>
	// count = 160 without tasks
	// count = 219 in lowest task
}
    190c:	0001883a 	nop
    1910:	e037883a 	mov	sp,fp
    1914:	dfc00117 	ldw	ra,4(sp)
    1918:	df000017 	ldw	fp,0(sp)
    191c:	dec00204 	addi	sp,sp,8
    1920:	f800283a 	ret

00001924 <clear_bg>:
//*********************************************************************************************************
//*                                                  Functions
//*********************************************************************************************************
//*
void clear_bg()
{
    1924:	defffd04 	addi	sp,sp,-12
    1928:	dfc00215 	stw	ra,8(sp)
    192c:	df000115 	stw	fp,4(sp)
    1930:	df000104 	addi	fp,sp,4
	VGA_box(0,0, 319, 239, GRAY);
    1934:	00800284 	movi	r2,10
    1938:	d8800015 	stw	r2,0(sp)
    193c:	01c03bc4 	movi	r7,239
    1940:	01804fc4 	movi	r6,319
    1944:	000b883a 	mov	r5,zero
    1948:	0009883a 	mov	r4,zero
    194c:	0001a500 	call	1a50 <VGA_box>
	VGA_box(0, 1, 320, 8, BLUE);
    1950:	00802644 	movi	r2,153
    1954:	d8800015 	stw	r2,0(sp)
    1958:	01c00204 	movi	r7,8
    195c:	01805004 	movi	r6,320
    1960:	01400044 	movi	r5,1
    1964:	0009883a 	mov	r4,zero
    1968:	0001a500 	call	1a50 <VGA_box>
	VGA_box(170, 231, 320, 240, BLUE);
    196c:	00802644 	movi	r2,153
    1970:	d8800015 	stw	r2,0(sp)
    1974:	01c03c04 	movi	r7,240
    1978:	01805004 	movi	r6,320
    197c:	014039c4 	movi	r5,231
    1980:	01002a84 	movi	r4,170
    1984:	0001a500 	call	1a50 <VGA_box>
	VGA_box(0, 238, 320, 240, BLUE);
    1988:	00802644 	movi	r2,153
    198c:	d8800015 	stw	r2,0(sp)
    1990:	01c03c04 	movi	r7,240
    1994:	01805004 	movi	r6,320
    1998:	01403b84 	movi	r5,238
    199c:	0009883a 	mov	r4,zero
    19a0:	0001a500 	call	1a50 <VGA_box>
}
    19a4:	0001883a 	nop
    19a8:	e037883a 	mov	sp,fp
    19ac:	dfc00117 	ldw	ra,4(sp)
    19b0:	df000017 	ldw	fp,0(sp)
    19b4:	dec00204 	addi	sp,sp,8
    19b8:	f800283a 	ret

000019bc <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    19bc:	defffa04 	addi	sp,sp,-24
    19c0:	df000515 	stw	fp,20(sp)
    19c4:	df000504 	addi	fp,sp,20
    19c8:	e13ffd15 	stw	r4,-12(fp)
    19cc:	e17ffe15 	stw	r5,-8(fp)
    19d0:	e1bfff15 	stw	r6,-4(fp)
	int offset;
	volatile char * character_buffer = (char *) 0x09000000;   // VGA character buffer
    19d4:	00824034 	movhi	r2,2304
    19d8:	e0bffc15 	stw	r2,-16(fp)
	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    19dc:	e0bffe17 	ldw	r2,-8(fp)
    19e0:	100691fa 	slli	r3,r2,7
    19e4:	e0bffd17 	ldw	r2,-12(fp)
    19e8:	1885883a 	add	r2,r3,r2
    19ec:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    19f0:	00000c06 	br	1a24 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);   // write to the character buffer
    19f4:	e0bffb17 	ldw	r2,-20(fp)
    19f8:	e0fffc17 	ldw	r3,-16(fp)
    19fc:	1885883a 	add	r2,r3,r2
    1a00:	e0ffff17 	ldw	r3,-4(fp)
    1a04:	18c00003 	ldbu	r3,0(r3)
    1a08:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    1a0c:	e0bfff17 	ldw	r2,-4(fp)
    1a10:	10800044 	addi	r2,r2,1
    1a14:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    1a18:	e0bffb17 	ldw	r2,-20(fp)
    1a1c:	10800044 	addi	r2,r2,1
    1a20:	e0bffb15 	stw	r2,-20(fp)
{
	int offset;
	volatile char * character_buffer = (char *) 0x09000000;   // VGA character buffer
	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    1a24:	e0bfff17 	ldw	r2,-4(fp)
    1a28:	10800003 	ldbu	r2,0(r2)
    1a2c:	10803fcc 	andi	r2,r2,255
    1a30:	1080201c 	xori	r2,r2,128
    1a34:	10bfe004 	addi	r2,r2,-128
    1a38:	103fee1e 	bne	r2,zero,19f4 <VGA_text+0x38>
	{
		*(character_buffer + offset) = *(text_ptr);   // write to the character buffer
		++text_ptr;
		++offset;
	}
}
    1a3c:	0001883a 	nop
    1a40:	e037883a 	mov	sp,fp
    1a44:	df000017 	ldw	fp,0(sp)
    1a48:	dec00104 	addi	sp,sp,4
    1a4c:	f800283a 	ret

00001a50 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    1a50:	defff604 	addi	sp,sp,-40
    1a54:	df000915 	stw	fp,36(sp)
    1a58:	df000904 	addi	fp,sp,36
    1a5c:	e13ffb15 	stw	r4,-20(fp)
    1a60:	e17ffc15 	stw	r5,-16(fp)
    1a64:	e1bffd15 	stw	r6,-12(fp)
    1a68:	e1fffe15 	stw	r7,-8(fp)
    1a6c:	e0800117 	ldw	r2,4(fp)
    1a70:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
	volatile short * pixel_buffer = (short *) 0x08000000;
    1a74:	00820034 	movhi	r2,2048
    1a78:	e0bff915 	stw	r2,-28(fp)
	// VGA pixel buffer
	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    1a7c:	e0bffc17 	ldw	r2,-16(fp)
    1a80:	e0bff715 	stw	r2,-36(fp)
    1a84:	00001806 	br	1ae8 <VGA_box+0x98>
	{
		col = x1;
    1a88:	e0bffb17 	ldw	r2,-20(fp)
    1a8c:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    1a90:	00000f06 	br	1ad0 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    1a94:	e0bff717 	ldw	r2,-36(fp)
    1a98:	1006927a 	slli	r3,r2,9
    1a9c:	e0bff817 	ldw	r2,-32(fp)
    1aa0:	1885883a 	add	r2,r3,r2
    1aa4:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;
    1aa8:	e0bffa17 	ldw	r2,-24(fp)
    1aac:	1085883a 	add	r2,r2,r2
    1ab0:	1007883a 	mov	r3,r2
    1ab4:	e0bff917 	ldw	r2,-28(fp)
    1ab8:	10c5883a 	add	r2,r2,r3
    1abc:	e0ffff0b 	ldhu	r3,-4(fp)
    1ac0:	10c0000d 	sth	r3,0(r2)
			// compute halfword address, set pixel
			++col;
    1ac4:	e0bff817 	ldw	r2,-32(fp)
    1ac8:	10800044 	addi	r2,r2,1
    1acc:	e0bff815 	stw	r2,-32(fp)
	// VGA pixel buffer
	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    1ad0:	e0bff817 	ldw	r2,-32(fp)
    1ad4:	e0fffd17 	ldw	r3,-12(fp)
    1ad8:	18bfee0e 	bge	r3,r2,1a94 <VGA_box+0x44>
{
	int offset, row, col;
	volatile short * pixel_buffer = (short *) 0x08000000;
	// VGA pixel buffer
	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    1adc:	e0bff717 	ldw	r2,-36(fp)
    1ae0:	10800044 	addi	r2,r2,1
    1ae4:	e0bff715 	stw	r2,-36(fp)
    1ae8:	e0bff717 	ldw	r2,-36(fp)
    1aec:	e0fffe17 	ldw	r3,-8(fp)
    1af0:	18bfe50e 	bge	r3,r2,1a88 <VGA_box+0x38>
			*(pixel_buffer + offset) = pixel_color;
			// compute halfword address, set pixel
			++col;
		}
	}
}
    1af4:	0001883a 	nop
    1af8:	e037883a 	mov	sp,fp
    1afc:	df000017 	ldw	fp,0(sp)
    1b00:	dec00104 	addi	sp,sp,4
    1b04:	f800283a 	ret

00001b08 <VGA_pixel>:

void VGA_pixel(int x, int y, short pixel_color)
{
    1b08:	defffa04 	addi	sp,sp,-24
    1b0c:	df000515 	stw	fp,20(sp)
    1b10:	df000504 	addi	fp,sp,20
    1b14:	e13ffd15 	stw	r4,-12(fp)
    1b18:	e17ffe15 	stw	r5,-8(fp)
    1b1c:	3005883a 	mov	r2,r6
    1b20:	e0bfff0d 	sth	r2,-4(fp)
	int offset;
	volatile short * pixel_buffer = (short *) 0x08000000;
    1b24:	00820034 	movhi	r2,2048
    1b28:	e0bffb15 	stw	r2,-20(fp)
	// VGA pixel buffer
	offset = ((y << 9) + x);
    1b2c:	e0bffe17 	ldw	r2,-8(fp)
    1b30:	1006927a 	slli	r3,r2,9
    1b34:	e0bffd17 	ldw	r2,-12(fp)
    1b38:	1885883a 	add	r2,r3,r2
    1b3c:	e0bffc15 	stw	r2,-16(fp)
	*(pixel_buffer + offset) = pixel_color;
    1b40:	e0bffc17 	ldw	r2,-16(fp)
    1b44:	1085883a 	add	r2,r2,r2
    1b48:	1007883a 	mov	r3,r2
    1b4c:	e0bffb17 	ldw	r2,-20(fp)
    1b50:	10c5883a 	add	r2,r2,r3
    1b54:	e0ffff0b 	ldhu	r3,-4(fp)
    1b58:	10c0000d 	sth	r3,0(r2)
}
    1b5c:	0001883a 	nop
    1b60:	e037883a 	mov	sp,fp
    1b64:	df000017 	ldw	fp,0(sp)
    1b68:	dec00104 	addi	sp,sp,4
    1b6c:	f800283a 	ret

00001b70 <VGA_clear>:

void VGA_clear()
{
    1b70:	defffc04 	addi	sp,sp,-16
    1b74:	dfc00315 	stw	ra,12(sp)
    1b78:	df000215 	stw	fp,8(sp)
    1b7c:	df000204 	addi	fp,sp,8
	int x, y;
	for(x = 0; x < 320; x++)
    1b80:	e03ffe15 	stw	zero,-8(fp)
    1b84:	00000f06 	br	1bc4 <VGA_clear+0x54>
	{
		for(y = 0; y < 240; y++)
    1b88:	e03fff15 	stw	zero,-4(fp)
    1b8c:	00000706 	br	1bac <VGA_clear+0x3c>
		{
			VGA_pixel(x, y, 0);
    1b90:	000d883a 	mov	r6,zero
    1b94:	e17fff17 	ldw	r5,-4(fp)
    1b98:	e13ffe17 	ldw	r4,-8(fp)
    1b9c:	0001b080 	call	1b08 <VGA_pixel>
void VGA_clear()
{
	int x, y;
	for(x = 0; x < 320; x++)
	{
		for(y = 0; y < 240; y++)
    1ba0:	e0bfff17 	ldw	r2,-4(fp)
    1ba4:	10800044 	addi	r2,r2,1
    1ba8:	e0bfff15 	stw	r2,-4(fp)
    1bac:	e0bfff17 	ldw	r2,-4(fp)
    1bb0:	10803c10 	cmplti	r2,r2,240
    1bb4:	103ff61e 	bne	r2,zero,1b90 <VGA_clear+0x20>
}

void VGA_clear()
{
	int x, y;
	for(x = 0; x < 320; x++)
    1bb8:	e0bffe17 	ldw	r2,-8(fp)
    1bbc:	10800044 	addi	r2,r2,1
    1bc0:	e0bffe15 	stw	r2,-8(fp)
    1bc4:	e0bffe17 	ldw	r2,-8(fp)
    1bc8:	10805010 	cmplti	r2,r2,320
    1bcc:	103fee1e 	bne	r2,zero,1b88 <VGA_clear+0x18>
		for(y = 0; y < 240; y++)
		{
			VGA_pixel(x, y, 0);
		}
	}
	clear_bg();
    1bd0:	00019240 	call	1924 <clear_bg>
}
    1bd4:	0001883a 	nop
    1bd8:	e037883a 	mov	sp,fp
    1bdc:	dfc00117 	ldw	ra,4(sp)
    1be0:	df000017 	ldw	fp,0(sp)
    1be4:	dec00204 	addi	sp,sp,8
    1be8:	f800283a 	ret

00001bec <VGA_clear_character>:

void VGA_clear_character()
{
    1bec:	defffc04 	addi	sp,sp,-16
    1bf0:	dfc00315 	stw	ra,12(sp)
    1bf4:	df000215 	stw	fp,8(sp)
    1bf8:	df000204 	addi	fp,sp,8
	for(int x = 0; x < 80; x++)
    1bfc:	e03ffe15 	stw	zero,-8(fp)
    1c00:	00001006 	br	1c44 <VGA_clear_character+0x58>
	{
		for(int y = 0; y < 60; y++)
    1c04:	e03fff15 	stw	zero,-4(fp)
    1c08:	00000806 	br	1c2c <VGA_clear_character+0x40>
		{
			VGA_text(x, y, " ");
    1c0c:	018000b4 	movhi	r6,2
    1c10:	31a9c804 	addi	r6,r6,-22752
    1c14:	e17fff17 	ldw	r5,-4(fp)
    1c18:	e13ffe17 	ldw	r4,-8(fp)
    1c1c:	00019bc0 	call	19bc <VGA_text>

void VGA_clear_character()
{
	for(int x = 0; x < 80; x++)
	{
		for(int y = 0; y < 60; y++)
    1c20:	e0bfff17 	ldw	r2,-4(fp)
    1c24:	10800044 	addi	r2,r2,1
    1c28:	e0bfff15 	stw	r2,-4(fp)
    1c2c:	e0bfff17 	ldw	r2,-4(fp)
    1c30:	10800f10 	cmplti	r2,r2,60
    1c34:	103ff51e 	bne	r2,zero,1c0c <VGA_clear_character+0x20>
	clear_bg();
}

void VGA_clear_character()
{
	for(int x = 0; x < 80; x++)
    1c38:	e0bffe17 	ldw	r2,-8(fp)
    1c3c:	10800044 	addi	r2,r2,1
    1c40:	e0bffe15 	stw	r2,-8(fp)
    1c44:	e0bffe17 	ldw	r2,-8(fp)
    1c48:	10801410 	cmplti	r2,r2,80
    1c4c:	103fed1e 	bne	r2,zero,1c04 <VGA_clear_character+0x18>
		for(int y = 0; y < 60; y++)
		{
			VGA_text(x, y, " ");
		}
	}
	clear_bg();
    1c50:	00019240 	call	1924 <clear_bg>
}
    1c54:	0001883a 	nop
    1c58:	e037883a 	mov	sp,fp
    1c5c:	dfc00117 	ldw	ra,4(sp)
    1c60:	df000017 	ldw	fp,0(sp)
    1c64:	dec00204 	addi	sp,sp,8
    1c68:	f800283a 	ret

00001c6c <srand>:
    1c6c:	008000b4 	movhi	r2,2
    1c70:	10b2a204 	addi	r2,r2,-13688
    1c74:	10800017 	ldw	r2,0(r2)
    1c78:	11002915 	stw	r4,164(r2)
    1c7c:	10002a15 	stw	zero,168(r2)
    1c80:	f800283a 	ret

00001c84 <rand>:
    1c84:	008000b4 	movhi	r2,2
    1c88:	10b2a204 	addi	r2,r2,-13688
    1c8c:	11c00017 	ldw	r7,0(r2)
    1c90:	01532574 	movhi	r5,19605
    1c94:	019614b4 	movhi	r6,22610
    1c98:	38c02917 	ldw	r3,164(r7)
    1c9c:	39002a17 	ldw	r4,168(r7)
    1ca0:	295fcb44 	addi	r5,r5,32557
    1ca4:	31bd0b44 	addi	r6,r6,-3027
    1ca8:	1951383a 	mul	r8,r3,r5
    1cac:	2149383a 	mul	r4,r4,r5
    1cb0:	198d383a 	mul	r6,r3,r6
    1cb4:	194a383a 	mulxuu	r5,r3,r5
    1cb8:	40800044 	addi	r2,r8,1
    1cbc:	2187883a 	add	r3,r4,r6
    1cc0:	1949883a 	add	r4,r3,r5
    1cc4:	38802915 	stw	r2,164(r7)
    1cc8:	1207803a 	cmpltu	r3,r2,r8
    1ccc:	00a00034 	movhi	r2,32768
    1cd0:	1907883a 	add	r3,r3,r4
    1cd4:	10bfffc4 	addi	r2,r2,-1
    1cd8:	38c02a15 	stw	r3,168(r7)
    1cdc:	1884703a 	and	r2,r3,r2
    1ce0:	f800283a 	ret

00001ce4 <_sprintf_r>:
    1ce4:	deffe404 	addi	sp,sp,-112
    1ce8:	2807883a 	mov	r3,r5
    1cec:	dfc01a15 	stw	ra,104(sp)
    1cf0:	d9c01b15 	stw	r7,108(sp)
    1cf4:	00a00034 	movhi	r2,32768
    1cf8:	10bfffc4 	addi	r2,r2,-1
    1cfc:	02008204 	movi	r8,520
    1d00:	d8800215 	stw	r2,8(sp)
    1d04:	d8800515 	stw	r2,20(sp)
    1d08:	d9c01b04 	addi	r7,sp,108
    1d0c:	d80b883a 	mov	r5,sp
    1d10:	00bfffc4 	movi	r2,-1
    1d14:	d8c00015 	stw	r3,0(sp)
    1d18:	d8c00415 	stw	r3,16(sp)
    1d1c:	da00030d 	sth	r8,12(sp)
    1d20:	d880038d 	sth	r2,14(sp)
    1d24:	0001da80 	call	1da8 <___svfprintf_internal_r>
    1d28:	d8c00017 	ldw	r3,0(sp)
    1d2c:	18000005 	stb	zero,0(r3)
    1d30:	dfc01a17 	ldw	ra,104(sp)
    1d34:	dec01c04 	addi	sp,sp,112
    1d38:	f800283a 	ret

00001d3c <sprintf>:
    1d3c:	deffe304 	addi	sp,sp,-116
    1d40:	2007883a 	mov	r3,r4
    1d44:	dfc01a15 	stw	ra,104(sp)
    1d48:	d9801b15 	stw	r6,108(sp)
    1d4c:	d9c01c15 	stw	r7,112(sp)
    1d50:	010000b4 	movhi	r4,2
    1d54:	2132a204 	addi	r4,r4,-13688
    1d58:	21000017 	ldw	r4,0(r4)
    1d5c:	00a00034 	movhi	r2,32768
    1d60:	10bfffc4 	addi	r2,r2,-1
    1d64:	280d883a 	mov	r6,r5
    1d68:	02008204 	movi	r8,520
    1d6c:	d8800215 	stw	r2,8(sp)
    1d70:	d8800515 	stw	r2,20(sp)
    1d74:	d9c01b04 	addi	r7,sp,108
    1d78:	d80b883a 	mov	r5,sp
    1d7c:	00bfffc4 	movi	r2,-1
    1d80:	d8c00015 	stw	r3,0(sp)
    1d84:	d8c00415 	stw	r3,16(sp)
    1d88:	da00030d 	sth	r8,12(sp)
    1d8c:	d880038d 	sth	r2,14(sp)
    1d90:	0001da80 	call	1da8 <___svfprintf_internal_r>
    1d94:	d8c00017 	ldw	r3,0(sp)
    1d98:	18000005 	stb	zero,0(r3)
    1d9c:	dfc01a17 	ldw	ra,104(sp)
    1da0:	dec01d04 	addi	sp,sp,116
    1da4:	f800283a 	ret

00001da8 <___svfprintf_internal_r>:
    1da8:	deffb704 	addi	sp,sp,-292
    1dac:	dfc04815 	stw	ra,288(sp)
    1db0:	ddc04615 	stw	r23,280(sp)
    1db4:	d9402c15 	stw	r5,176(sp)
    1db8:	d9003915 	stw	r4,228(sp)
    1dbc:	302f883a 	mov	r23,r6
    1dc0:	d9c02d15 	stw	r7,180(sp)
    1dc4:	df004715 	stw	fp,284(sp)
    1dc8:	dd804515 	stw	r22,276(sp)
    1dcc:	dd404415 	stw	r21,272(sp)
    1dd0:	dd004315 	stw	r20,268(sp)
    1dd4:	dcc04215 	stw	r19,264(sp)
    1dd8:	dc804115 	stw	r18,260(sp)
    1ddc:	dc404015 	stw	r17,256(sp)
    1de0:	dc003f15 	stw	r16,252(sp)
    1de4:	00058b40 	call	58b4 <_localeconv_r>
    1de8:	10800017 	ldw	r2,0(r2)
    1dec:	1009883a 	mov	r4,r2
    1df0:	d8803415 	stw	r2,208(sp)
    1df4:	00074bc0 	call	74bc <strlen>
    1df8:	d8c02c17 	ldw	r3,176(sp)
    1dfc:	d8803815 	stw	r2,224(sp)
    1e00:	1880030b 	ldhu	r2,12(r3)
    1e04:	1080200c 	andi	r2,r2,128
    1e08:	10000226 	beq	r2,zero,1e14 <___svfprintf_internal_r+0x6c>
    1e0c:	18800417 	ldw	r2,16(r3)
    1e10:	10067f26 	beq	r2,zero,3810 <___svfprintf_internal_r+0x1a68>
    1e14:	dcc03917 	ldw	r19,228(sp)
    1e18:	d8c00404 	addi	r3,sp,16
    1e1c:	054000b4 	movhi	r21,2
    1e20:	d9001e04 	addi	r4,sp,120
    1e24:	ad69d984 	addi	r21,r21,-22682
    1e28:	d8c01e15 	stw	r3,120(sp)
    1e2c:	d8002015 	stw	zero,128(sp)
    1e30:	d8001f15 	stw	zero,124(sp)
    1e34:	d8003315 	stw	zero,204(sp)
    1e38:	d8003615 	stw	zero,216(sp)
    1e3c:	d8003715 	stw	zero,220(sp)
    1e40:	1811883a 	mov	r8,r3
    1e44:	d8003a15 	stw	zero,232(sp)
    1e48:	d8003b15 	stw	zero,236(sp)
    1e4c:	d8002f15 	stw	zero,188(sp)
    1e50:	d9002815 	stw	r4,160(sp)
    1e54:	b8800007 	ldb	r2,0(r23)
    1e58:	10026726 	beq	r2,zero,27f8 <___svfprintf_internal_r+0xa50>
    1e5c:	00c00944 	movi	r3,37
    1e60:	b821883a 	mov	r16,r23
    1e64:	10c0021e 	bne	r2,r3,1e70 <___svfprintf_internal_r+0xc8>
    1e68:	00001406 	br	1ebc <___svfprintf_internal_r+0x114>
    1e6c:	10c00326 	beq	r2,r3,1e7c <___svfprintf_internal_r+0xd4>
    1e70:	84000044 	addi	r16,r16,1
    1e74:	80800007 	ldb	r2,0(r16)
    1e78:	103ffc1e 	bne	r2,zero,1e6c <___svfprintf_internal_r+0xc4>
    1e7c:	85e3c83a 	sub	r17,r16,r23
    1e80:	88000e26 	beq	r17,zero,1ebc <___svfprintf_internal_r+0x114>
    1e84:	d8c02017 	ldw	r3,128(sp)
    1e88:	d8801f17 	ldw	r2,124(sp)
    1e8c:	45c00015 	stw	r23,0(r8)
    1e90:	1c47883a 	add	r3,r3,r17
    1e94:	10800044 	addi	r2,r2,1
    1e98:	d8c02015 	stw	r3,128(sp)
    1e9c:	44400115 	stw	r17,4(r8)
    1ea0:	d8801f15 	stw	r2,124(sp)
    1ea4:	00c001c4 	movi	r3,7
    1ea8:	18809716 	blt	r3,r2,2108 <___svfprintf_internal_r+0x360>
    1eac:	42000204 	addi	r8,r8,8
    1eb0:	d9402f17 	ldw	r5,188(sp)
    1eb4:	2c4b883a 	add	r5,r5,r17
    1eb8:	d9402f15 	stw	r5,188(sp)
    1ebc:	80800007 	ldb	r2,0(r16)
    1ec0:	10009826 	beq	r2,zero,2124 <___svfprintf_internal_r+0x37c>
    1ec4:	84400047 	ldb	r17,1(r16)
    1ec8:	00bfffc4 	movi	r2,-1
    1ecc:	85c00044 	addi	r23,r16,1
    1ed0:	d8002785 	stb	zero,158(sp)
    1ed4:	0007883a 	mov	r3,zero
    1ed8:	000f883a 	mov	r7,zero
    1edc:	d8802915 	stw	r2,164(sp)
    1ee0:	d8003115 	stw	zero,196(sp)
    1ee4:	0025883a 	mov	r18,zero
    1ee8:	01401604 	movi	r5,88
    1eec:	01800244 	movi	r6,9
    1ef0:	02800a84 	movi	r10,42
    1ef4:	02401b04 	movi	r9,108
    1ef8:	bdc00044 	addi	r23,r23,1
    1efc:	88bff804 	addi	r2,r17,-32
    1f00:	2882f036 	bltu	r5,r2,2ac4 <___svfprintf_internal_r+0xd1c>
    1f04:	100490ba 	slli	r2,r2,2
    1f08:	01000034 	movhi	r4,0
    1f0c:	2107c704 	addi	r4,r4,7964
    1f10:	1105883a 	add	r2,r2,r4
    1f14:	10800017 	ldw	r2,0(r2)
    1f18:	1000683a 	jmp	r2
    1f1c:	00002a2c 	andhi	zero,zero,168
    1f20:	00002ac4 	movi	zero,171
    1f24:	00002ac4 	movi	zero,171
    1f28:	00002a20 	cmpeqi	zero,zero,168
    1f2c:	00002ac4 	movi	zero,171
    1f30:	00002ac4 	movi	zero,171
    1f34:	00002ac4 	movi	zero,171
    1f38:	00002ac4 	movi	zero,171
    1f3c:	00002ac4 	movi	zero,171
    1f40:	00002ac4 	movi	zero,171
    1f44:	00002180 	call	218 <alt_instruction_exception_entry+0x44>
    1f48:	0000295c 	xori	zero,zero,165
    1f4c:	00002ac4 	movi	zero,171
    1f50:	00002090 	cmplti	zero,zero,130
    1f54:	000021a8 	cmpgeui	zero,zero,134
    1f58:	00002ac4 	movi	zero,171
    1f5c:	0000221c 	xori	zero,zero,136
    1f60:	000021e8 	cmpgeui	zero,zero,135
    1f64:	000021e8 	cmpgeui	zero,zero,135
    1f68:	000021e8 	cmpgeui	zero,zero,135
    1f6c:	000021e8 	cmpgeui	zero,zero,135
    1f70:	000021e8 	cmpgeui	zero,zero,135
    1f74:	000021e8 	cmpgeui	zero,zero,135
    1f78:	000021e8 	cmpgeui	zero,zero,135
    1f7c:	000021e8 	cmpgeui	zero,zero,135
    1f80:	000021e8 	cmpgeui	zero,zero,135
    1f84:	00002ac4 	movi	zero,171
    1f88:	00002ac4 	movi	zero,171
    1f8c:	00002ac4 	movi	zero,171
    1f90:	00002ac4 	movi	zero,171
    1f94:	00002ac4 	movi	zero,171
    1f98:	00002ac4 	movi	zero,171
    1f9c:	00002ac4 	movi	zero,171
    1fa0:	00002ac4 	movi	zero,171
    1fa4:	00002ac4 	movi	zero,171
    1fa8:	00002ac4 	movi	zero,171
    1fac:	000022d4 	movui	zero,139
    1fb0:	00002228 	cmpgeui	zero,zero,136
    1fb4:	00002ac4 	movi	zero,171
    1fb8:	00002228 	cmpgeui	zero,zero,136
    1fbc:	00002ac4 	movi	zero,171
    1fc0:	00002ac4 	movi	zero,171
    1fc4:	00002ac4 	movi	zero,171
    1fc8:	00002ac4 	movi	zero,171
    1fcc:	000022c8 	cmpgei	zero,zero,139
    1fd0:	00002ac4 	movi	zero,171
    1fd4:	00002ac4 	movi	zero,171
    1fd8:	00002390 	cmplti	zero,zero,142
    1fdc:	00002ac4 	movi	zero,171
    1fe0:	00002ac4 	movi	zero,171
    1fe4:	00002ac4 	movi	zero,171
    1fe8:	00002ac4 	movi	zero,171
    1fec:	00002ac4 	movi	zero,171
    1ff0:	00002800 	call	280 <alt_after_alt_main>
    1ff4:	00002ac4 	movi	zero,171
    1ff8:	00002ac4 	movi	zero,171
    1ffc:	00002860 	cmpeqi	zero,zero,161
    2000:	00002ac4 	movi	zero,171
    2004:	00002ac4 	movi	zero,171
    2008:	00002ac4 	movi	zero,171
    200c:	00002ac4 	movi	zero,171
    2010:	00002ac4 	movi	zero,171
    2014:	00002ac4 	movi	zero,171
    2018:	00002ac4 	movi	zero,171
    201c:	00002ac4 	movi	zero,171
    2020:	00002ac4 	movi	zero,171
    2024:	00002ac4 	movi	zero,171
    2028:	00002910 	cmplti	zero,zero,164
    202c:	00002a4c 	andi	zero,zero,169
    2030:	00002228 	cmpgeui	zero,zero,136
    2034:	00002228 	cmpgeui	zero,zero,136
    2038:	00002228 	cmpgeui	zero,zero,136
    203c:	00002aa0 	cmpeqi	zero,zero,170
    2040:	00002a4c 	andi	zero,zero,169
    2044:	00002ac4 	movi	zero,171
    2048:	00002ac4 	movi	zero,171
    204c:	00002a5c 	xori	zero,zero,169
    2050:	00002ac4 	movi	zero,171
    2054:	00002a6c 	andhi	zero,zero,169
    2058:	0000294c 	andi	zero,zero,165
    205c:	0000209c 	xori	zero,zero,130
    2060:	0000296c 	andhi	zero,zero,165
    2064:	00002ac4 	movi	zero,171
    2068:	00002978 	rdprs	zero,zero,165
    206c:	00002ac4 	movi	zero,171
    2070:	000029d4 	movui	zero,167
    2074:	00002ac4 	movi	zero,171
    2078:	00002ac4 	movi	zero,171
    207c:	000029e4 	muli	zero,zero,167
    2080:	d9003117 	ldw	r4,196(sp)
    2084:	d8802d15 	stw	r2,180(sp)
    2088:	0109c83a 	sub	r4,zero,r4
    208c:	d9003115 	stw	r4,196(sp)
    2090:	94800114 	ori	r18,r18,4
    2094:	bc400007 	ldb	r17,0(r23)
    2098:	003f9706 	br	1ef8 <___svfprintf_internal_r+0x150>
    209c:	00800c04 	movi	r2,48
    20a0:	d9002d17 	ldw	r4,180(sp)
    20a4:	d9402917 	ldw	r5,164(sp)
    20a8:	d8802705 	stb	r2,156(sp)
    20ac:	00801e04 	movi	r2,120
    20b0:	d8802745 	stb	r2,157(sp)
    20b4:	d8002785 	stb	zero,158(sp)
    20b8:	20c00104 	addi	r3,r4,4
    20bc:	25000017 	ldw	r20,0(r4)
    20c0:	002d883a 	mov	r22,zero
    20c4:	90800094 	ori	r2,r18,2
    20c8:	28028616 	blt	r5,zero,2ae4 <___svfprintf_internal_r+0xd3c>
    20cc:	00bfdfc4 	movi	r2,-129
    20d0:	90a4703a 	and	r18,r18,r2
    20d4:	d8c02d15 	stw	r3,180(sp)
    20d8:	94800094 	ori	r18,r18,2
    20dc:	a002731e 	bne	r20,zero,2aac <___svfprintf_internal_r+0xd04>
    20e0:	008000b4 	movhi	r2,2
    20e4:	10a9d204 	addi	r2,r2,-22712
    20e8:	d8803a15 	stw	r2,232(sp)
    20ec:	04401e04 	movi	r17,120
    20f0:	d8c02917 	ldw	r3,164(sp)
    20f4:	0039883a 	mov	fp,zero
    20f8:	1801d526 	beq	r3,zero,2850 <___svfprintf_internal_r+0xaa8>
    20fc:	0029883a 	mov	r20,zero
    2100:	002d883a 	mov	r22,zero
    2104:	0001f106 	br	28cc <___svfprintf_internal_r+0xb24>
    2108:	d9402c17 	ldw	r5,176(sp)
    210c:	d9801e04 	addi	r6,sp,120
    2110:	9809883a 	mov	r4,r19
    2114:	00075540 	call	7554 <__ssprint_r>
    2118:	1000081e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    211c:	da000404 	addi	r8,sp,16
    2120:	003f6306 	br	1eb0 <___svfprintf_internal_r+0x108>
    2124:	d8802017 	ldw	r2,128(sp)
    2128:	10000426 	beq	r2,zero,213c <___svfprintf_internal_r+0x394>
    212c:	d9402c17 	ldw	r5,176(sp)
    2130:	d9003917 	ldw	r4,228(sp)
    2134:	d9801e04 	addi	r6,sp,120
    2138:	00075540 	call	7554 <__ssprint_r>
    213c:	d8802c17 	ldw	r2,176(sp)
    2140:	10c0030b 	ldhu	r3,12(r2)
    2144:	d8802f17 	ldw	r2,188(sp)
    2148:	18c0100c 	andi	r3,r3,64
    214c:	1805f51e 	bne	r3,zero,3924 <___svfprintf_internal_r+0x1b7c>
    2150:	dfc04817 	ldw	ra,288(sp)
    2154:	df004717 	ldw	fp,284(sp)
    2158:	ddc04617 	ldw	r23,280(sp)
    215c:	dd804517 	ldw	r22,276(sp)
    2160:	dd404417 	ldw	r21,272(sp)
    2164:	dd004317 	ldw	r20,268(sp)
    2168:	dcc04217 	ldw	r19,264(sp)
    216c:	dc804117 	ldw	r18,260(sp)
    2170:	dc404017 	ldw	r17,256(sp)
    2174:	dc003f17 	ldw	r16,252(sp)
    2178:	dec04904 	addi	sp,sp,292
    217c:	f800283a 	ret
    2180:	d8802d17 	ldw	r2,180(sp)
    2184:	d9002d17 	ldw	r4,180(sp)
    2188:	10800017 	ldw	r2,0(r2)
    218c:	d8803115 	stw	r2,196(sp)
    2190:	20800104 	addi	r2,r4,4
    2194:	d9003117 	ldw	r4,196(sp)
    2198:	203fb916 	blt	r4,zero,2080 <___svfprintf_internal_r+0x2d8>
    219c:	d8802d15 	stw	r2,180(sp)
    21a0:	bc400007 	ldb	r17,0(r23)
    21a4:	003f5406 	br	1ef8 <___svfprintf_internal_r+0x150>
    21a8:	bc400007 	ldb	r17,0(r23)
    21ac:	bac00044 	addi	r11,r23,1
    21b0:	8a873926 	beq	r17,r10,3e98 <___svfprintf_internal_r+0x20f0>
    21b4:	88bff404 	addi	r2,r17,-48
    21b8:	0009883a 	mov	r4,zero
    21bc:	30868836 	bltu	r6,r2,3be0 <___svfprintf_internal_r+0x1e38>
    21c0:	5c400007 	ldb	r17,0(r11)
    21c4:	210002a4 	muli	r4,r4,10
    21c8:	5dc00044 	addi	r23,r11,1
    21cc:	b817883a 	mov	r11,r23
    21d0:	2089883a 	add	r4,r4,r2
    21d4:	88bff404 	addi	r2,r17,-48
    21d8:	30bff92e 	bgeu	r6,r2,21c0 <___svfprintf_internal_r+0x418>
    21dc:	2005d716 	blt	r4,zero,393c <___svfprintf_internal_r+0x1b94>
    21e0:	d9002915 	stw	r4,164(sp)
    21e4:	003f4506 	br	1efc <___svfprintf_internal_r+0x154>
    21e8:	b809883a 	mov	r4,r23
    21ec:	d8003115 	stw	zero,196(sp)
    21f0:	88bff404 	addi	r2,r17,-48
    21f4:	0017883a 	mov	r11,zero
    21f8:	24400007 	ldb	r17,0(r4)
    21fc:	5ac002a4 	muli	r11,r11,10
    2200:	bdc00044 	addi	r23,r23,1
    2204:	b809883a 	mov	r4,r23
    2208:	12d7883a 	add	r11,r2,r11
    220c:	88bff404 	addi	r2,r17,-48
    2210:	30bff92e 	bgeu	r6,r2,21f8 <___svfprintf_internal_r+0x450>
    2214:	dac03115 	stw	r11,196(sp)
    2218:	003f3806 	br	1efc <___svfprintf_internal_r+0x154>
    221c:	94802014 	ori	r18,r18,128
    2220:	bc400007 	ldb	r17,0(r23)
    2224:	003f3406 	br	1ef8 <___svfprintf_internal_r+0x150>
    2228:	18c03fcc 	andi	r3,r3,255
    222c:	1807471e 	bne	r3,zero,3f4c <___svfprintf_internal_r+0x21a4>
    2230:	9080020c 	andi	r2,r18,8
    2234:	10047d26 	beq	r2,zero,342c <___svfprintf_internal_r+0x1684>
    2238:	d8c02d17 	ldw	r3,180(sp)
    223c:	d9002d17 	ldw	r4,180(sp)
    2240:	d9402d17 	ldw	r5,180(sp)
    2244:	18c00017 	ldw	r3,0(r3)
    2248:	21000117 	ldw	r4,4(r4)
    224c:	29400204 	addi	r5,r5,8
    2250:	d8c03615 	stw	r3,216(sp)
    2254:	d9003715 	stw	r4,220(sp)
    2258:	d9402d15 	stw	r5,180(sp)
    225c:	d9003617 	ldw	r4,216(sp)
    2260:	d9403717 	ldw	r5,220(sp)
    2264:	da003e15 	stw	r8,248(sp)
    2268:	04000044 	movi	r16,1
    226c:	00073180 	call	7318 <__fpclassifyd>
    2270:	da003e17 	ldw	r8,248(sp)
    2274:	14044b1e 	bne	r2,r16,33a4 <___svfprintf_internal_r+0x15fc>
    2278:	d9003617 	ldw	r4,216(sp)
    227c:	d9403717 	ldw	r5,220(sp)
    2280:	000d883a 	mov	r6,zero
    2284:	000f883a 	mov	r7,zero
    2288:	000b59c0 	call	b59c <__ledf2>
    228c:	da003e17 	ldw	r8,248(sp)
    2290:	1005f316 	blt	r2,zero,3a60 <___svfprintf_internal_r+0x1cb8>
    2294:	df002783 	ldbu	fp,158(sp)
    2298:	008011c4 	movi	r2,71
    229c:	1445590e 	bge	r2,r17,3804 <___svfprintf_internal_r+0x1a5c>
    22a0:	040000b4 	movhi	r16,2
    22a4:	8429ca04 	addi	r16,r16,-22744
    22a8:	00c000c4 	movi	r3,3
    22ac:	00bfdfc4 	movi	r2,-129
    22b0:	d8c02a15 	stw	r3,168(sp)
    22b4:	90a4703a 	and	r18,r18,r2
    22b8:	d8c02e15 	stw	r3,184(sp)
    22bc:	d8002915 	stw	zero,164(sp)
    22c0:	d8003215 	stw	zero,200(sp)
    22c4:	00006606 	br	2460 <___svfprintf_internal_r+0x6b8>
    22c8:	94800214 	ori	r18,r18,8
    22cc:	bc400007 	ldb	r17,0(r23)
    22d0:	003f0906 	br	1ef8 <___svfprintf_internal_r+0x150>
    22d4:	18c03fcc 	andi	r3,r3,255
    22d8:	1807181e 	bne	r3,zero,3f3c <___svfprintf_internal_r+0x2194>
    22dc:	94800414 	ori	r18,r18,16
    22e0:	9080080c 	andi	r2,r18,32
    22e4:	10039626 	beq	r2,zero,3140 <___svfprintf_internal_r+0x1398>
    22e8:	d9402d17 	ldw	r5,180(sp)
    22ec:	28800117 	ldw	r2,4(r5)
    22f0:	2d000017 	ldw	r20,0(r5)
    22f4:	29400204 	addi	r5,r5,8
    22f8:	d9402d15 	stw	r5,180(sp)
    22fc:	102d883a 	mov	r22,r2
    2300:	10039816 	blt	r2,zero,3164 <___svfprintf_internal_r+0x13bc>
    2304:	d9402917 	ldw	r5,164(sp)
    2308:	df002783 	ldbu	fp,158(sp)
    230c:	2803ab16 	blt	r5,zero,31bc <___svfprintf_internal_r+0x1414>
    2310:	00ffdfc4 	movi	r3,-129
    2314:	a584b03a 	or	r2,r20,r22
    2318:	90e4703a 	and	r18,r18,r3
    231c:	10014a26 	beq	r2,zero,2848 <___svfprintf_internal_r+0xaa0>
    2320:	b0034b26 	beq	r22,zero,3050 <___svfprintf_internal_r+0x12a8>
    2324:	dc402a15 	stw	r17,168(sp)
    2328:	dc001e04 	addi	r16,sp,120
    232c:	b023883a 	mov	r17,r22
    2330:	402d883a 	mov	r22,r8
    2334:	a009883a 	mov	r4,r20
    2338:	880b883a 	mov	r5,r17
    233c:	01800284 	movi	r6,10
    2340:	000f883a 	mov	r7,zero
    2344:	0009bb80 	call	9bb8 <__umoddi3>
    2348:	10800c04 	addi	r2,r2,48
    234c:	843fffc4 	addi	r16,r16,-1
    2350:	a009883a 	mov	r4,r20
    2354:	880b883a 	mov	r5,r17
    2358:	80800005 	stb	r2,0(r16)
    235c:	01800284 	movi	r6,10
    2360:	000f883a 	mov	r7,zero
    2364:	00096400 	call	9640 <__udivdi3>
    2368:	1029883a 	mov	r20,r2
    236c:	10c4b03a 	or	r2,r2,r3
    2370:	1823883a 	mov	r17,r3
    2374:	103fef1e 	bne	r2,zero,2334 <___svfprintf_internal_r+0x58c>
    2378:	d8c02817 	ldw	r3,160(sp)
    237c:	dc402a17 	ldw	r17,168(sp)
    2380:	b011883a 	mov	r8,r22
    2384:	1c07c83a 	sub	r3,r3,r16
    2388:	d8c02e15 	stw	r3,184(sp)
    238c:	00002e06 	br	2448 <___svfprintf_internal_r+0x6a0>
    2390:	18c03fcc 	andi	r3,r3,255
    2394:	1806e71e 	bne	r3,zero,3f34 <___svfprintf_internal_r+0x218c>
    2398:	94800414 	ori	r18,r18,16
    239c:	9080080c 	andi	r2,r18,32
    23a0:	1002d426 	beq	r2,zero,2ef4 <___svfprintf_internal_r+0x114c>
    23a4:	d9402d17 	ldw	r5,180(sp)
    23a8:	d8c02917 	ldw	r3,164(sp)
    23ac:	d8002785 	stb	zero,158(sp)
    23b0:	28800204 	addi	r2,r5,8
    23b4:	2d000017 	ldw	r20,0(r5)
    23b8:	2d800117 	ldw	r22,4(r5)
    23bc:	18041516 	blt	r3,zero,3414 <___svfprintf_internal_r+0x166c>
    23c0:	013fdfc4 	movi	r4,-129
    23c4:	a586b03a 	or	r3,r20,r22
    23c8:	d8802d15 	stw	r2,180(sp)
    23cc:	9124703a 	and	r18,r18,r4
    23d0:	1802d51e 	bne	r3,zero,2f28 <___svfprintf_internal_r+0x1180>
    23d4:	d9402917 	ldw	r5,164(sp)
    23d8:	0039883a 	mov	fp,zero
    23dc:	2806be26 	beq	r5,zero,3ed8 <___svfprintf_internal_r+0x2130>
    23e0:	0029883a 	mov	r20,zero
    23e4:	002d883a 	mov	r22,zero
    23e8:	dc001e04 	addi	r16,sp,120
    23ec:	a006d0fa 	srli	r3,r20,3
    23f0:	b008977a 	slli	r4,r22,29
    23f4:	b02cd0fa 	srli	r22,r22,3
    23f8:	a50001cc 	andi	r20,r20,7
    23fc:	a0800c04 	addi	r2,r20,48
    2400:	843fffc4 	addi	r16,r16,-1
    2404:	20e8b03a 	or	r20,r4,r3
    2408:	80800005 	stb	r2,0(r16)
    240c:	a586b03a 	or	r3,r20,r22
    2410:	183ff61e 	bne	r3,zero,23ec <___svfprintf_internal_r+0x644>
    2414:	90c0004c 	andi	r3,r18,1
    2418:	18013926 	beq	r3,zero,2900 <___svfprintf_internal_r+0xb58>
    241c:	10803fcc 	andi	r2,r2,255
    2420:	1080201c 	xori	r2,r2,128
    2424:	10bfe004 	addi	r2,r2,-128
    2428:	00c00c04 	movi	r3,48
    242c:	10c13426 	beq	r2,r3,2900 <___svfprintf_internal_r+0xb58>
    2430:	80ffffc5 	stb	r3,-1(r16)
    2434:	d8c02817 	ldw	r3,160(sp)
    2438:	80bfffc4 	addi	r2,r16,-1
    243c:	1021883a 	mov	r16,r2
    2440:	1887c83a 	sub	r3,r3,r2
    2444:	d8c02e15 	stw	r3,184(sp)
    2448:	d8802e17 	ldw	r2,184(sp)
    244c:	d9002917 	ldw	r4,164(sp)
    2450:	1100010e 	bge	r2,r4,2458 <___svfprintf_internal_r+0x6b0>
    2454:	2005883a 	mov	r2,r4
    2458:	d8802a15 	stw	r2,168(sp)
    245c:	d8003215 	stw	zero,200(sp)
    2460:	e7003fcc 	andi	fp,fp,255
    2464:	e700201c 	xori	fp,fp,128
    2468:	e73fe004 	addi	fp,fp,-128
    246c:	e0000326 	beq	fp,zero,247c <___svfprintf_internal_r+0x6d4>
    2470:	d8c02a17 	ldw	r3,168(sp)
    2474:	18c00044 	addi	r3,r3,1
    2478:	d8c02a15 	stw	r3,168(sp)
    247c:	90c0008c 	andi	r3,r18,2
    2480:	d8c02b15 	stw	r3,172(sp)
    2484:	18000326 	beq	r3,zero,2494 <___svfprintf_internal_r+0x6ec>
    2488:	d8c02a17 	ldw	r3,168(sp)
    248c:	18c00084 	addi	r3,r3,2
    2490:	d8c02a15 	stw	r3,168(sp)
    2494:	90c0210c 	andi	r3,r18,132
    2498:	d8c03015 	stw	r3,192(sp)
    249c:	1801a11e 	bne	r3,zero,2b24 <___svfprintf_internal_r+0xd7c>
    24a0:	d9003117 	ldw	r4,196(sp)
    24a4:	d8c02a17 	ldw	r3,168(sp)
    24a8:	20e9c83a 	sub	r20,r4,r3
    24ac:	05019d0e 	bge	zero,r20,2b24 <___svfprintf_internal_r+0xd7c>
    24b0:	02400404 	movi	r9,16
    24b4:	d8c02017 	ldw	r3,128(sp)
    24b8:	d8801f17 	ldw	r2,124(sp)
    24bc:	4d051b0e 	bge	r9,r20,392c <___svfprintf_internal_r+0x1b84>
    24c0:	014000b4 	movhi	r5,2
    24c4:	2969dd84 	addi	r5,r5,-22666
    24c8:	dc403c15 	stw	r17,240(sp)
    24cc:	d9403515 	stw	r5,212(sp)
    24d0:	a023883a 	mov	r17,r20
    24d4:	482d883a 	mov	r22,r9
    24d8:	9029883a 	mov	r20,r18
    24dc:	070001c4 	movi	fp,7
    24e0:	8025883a 	mov	r18,r16
    24e4:	dc002c17 	ldw	r16,176(sp)
    24e8:	00000306 	br	24f8 <___svfprintf_internal_r+0x750>
    24ec:	8c7ffc04 	addi	r17,r17,-16
    24f0:	42000204 	addi	r8,r8,8
    24f4:	b440130e 	bge	r22,r17,2544 <___svfprintf_internal_r+0x79c>
    24f8:	010000b4 	movhi	r4,2
    24fc:	18c00404 	addi	r3,r3,16
    2500:	10800044 	addi	r2,r2,1
    2504:	2129dd84 	addi	r4,r4,-22666
    2508:	41000015 	stw	r4,0(r8)
    250c:	45800115 	stw	r22,4(r8)
    2510:	d8c02015 	stw	r3,128(sp)
    2514:	d8801f15 	stw	r2,124(sp)
    2518:	e0bff40e 	bge	fp,r2,24ec <___svfprintf_internal_r+0x744>
    251c:	d9801e04 	addi	r6,sp,120
    2520:	800b883a 	mov	r5,r16
    2524:	9809883a 	mov	r4,r19
    2528:	00075540 	call	7554 <__ssprint_r>
    252c:	103f031e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    2530:	8c7ffc04 	addi	r17,r17,-16
    2534:	d8c02017 	ldw	r3,128(sp)
    2538:	d8801f17 	ldw	r2,124(sp)
    253c:	da000404 	addi	r8,sp,16
    2540:	b47fed16 	blt	r22,r17,24f8 <___svfprintf_internal_r+0x750>
    2544:	9021883a 	mov	r16,r18
    2548:	a025883a 	mov	r18,r20
    254c:	8829883a 	mov	r20,r17
    2550:	dc403c17 	ldw	r17,240(sp)
    2554:	d9403517 	ldw	r5,212(sp)
    2558:	a0c7883a 	add	r3,r20,r3
    255c:	10800044 	addi	r2,r2,1
    2560:	41400015 	stw	r5,0(r8)
    2564:	45000115 	stw	r20,4(r8)
    2568:	d8c02015 	stw	r3,128(sp)
    256c:	d8801f15 	stw	r2,124(sp)
    2570:	010001c4 	movi	r4,7
    2574:	20829f16 	blt	r4,r2,2ff4 <___svfprintf_internal_r+0x124c>
    2578:	df002787 	ldb	fp,158(sp)
    257c:	42000204 	addi	r8,r8,8
    2580:	e0000c26 	beq	fp,zero,25b4 <___svfprintf_internal_r+0x80c>
    2584:	d8801f17 	ldw	r2,124(sp)
    2588:	d9002784 	addi	r4,sp,158
    258c:	18c00044 	addi	r3,r3,1
    2590:	10800044 	addi	r2,r2,1
    2594:	41000015 	stw	r4,0(r8)
    2598:	01000044 	movi	r4,1
    259c:	41000115 	stw	r4,4(r8)
    25a0:	d8c02015 	stw	r3,128(sp)
    25a4:	d8801f15 	stw	r2,124(sp)
    25a8:	010001c4 	movi	r4,7
    25ac:	20823816 	blt	r4,r2,2e90 <___svfprintf_internal_r+0x10e8>
    25b0:	42000204 	addi	r8,r8,8
    25b4:	d8802b17 	ldw	r2,172(sp)
    25b8:	10000c26 	beq	r2,zero,25ec <___svfprintf_internal_r+0x844>
    25bc:	d8801f17 	ldw	r2,124(sp)
    25c0:	d9002704 	addi	r4,sp,156
    25c4:	18c00084 	addi	r3,r3,2
    25c8:	10800044 	addi	r2,r2,1
    25cc:	41000015 	stw	r4,0(r8)
    25d0:	01000084 	movi	r4,2
    25d4:	41000115 	stw	r4,4(r8)
    25d8:	d8c02015 	stw	r3,128(sp)
    25dc:	d8801f15 	stw	r2,124(sp)
    25e0:	010001c4 	movi	r4,7
    25e4:	20823216 	blt	r4,r2,2eb0 <___svfprintf_internal_r+0x1108>
    25e8:	42000204 	addi	r8,r8,8
    25ec:	d9003017 	ldw	r4,192(sp)
    25f0:	00802004 	movi	r2,128
    25f4:	20819726 	beq	r4,r2,2c54 <___svfprintf_internal_r+0xeac>
    25f8:	d9402917 	ldw	r5,164(sp)
    25fc:	d8802e17 	ldw	r2,184(sp)
    2600:	28adc83a 	sub	r22,r5,r2
    2604:	05802f0e 	bge	zero,r22,26c4 <___svfprintf_internal_r+0x91c>
    2608:	07000404 	movi	fp,16
    260c:	d8801f17 	ldw	r2,124(sp)
    2610:	e583c00e 	bge	fp,r22,3514 <___svfprintf_internal_r+0x176c>
    2614:	014000b4 	movhi	r5,2
    2618:	2969d984 	addi	r5,r5,-22682
    261c:	dc402915 	stw	r17,164(sp)
    2620:	d9402b15 	stw	r5,172(sp)
    2624:	b023883a 	mov	r17,r22
    2628:	050001c4 	movi	r20,7
    262c:	902d883a 	mov	r22,r18
    2630:	8025883a 	mov	r18,r16
    2634:	dc002c17 	ldw	r16,176(sp)
    2638:	00000306 	br	2648 <___svfprintf_internal_r+0x8a0>
    263c:	8c7ffc04 	addi	r17,r17,-16
    2640:	42000204 	addi	r8,r8,8
    2644:	e440110e 	bge	fp,r17,268c <___svfprintf_internal_r+0x8e4>
    2648:	18c00404 	addi	r3,r3,16
    264c:	10800044 	addi	r2,r2,1
    2650:	45400015 	stw	r21,0(r8)
    2654:	47000115 	stw	fp,4(r8)
    2658:	d8c02015 	stw	r3,128(sp)
    265c:	d8801f15 	stw	r2,124(sp)
    2660:	a0bff60e 	bge	r20,r2,263c <___svfprintf_internal_r+0x894>
    2664:	d9801e04 	addi	r6,sp,120
    2668:	800b883a 	mov	r5,r16
    266c:	9809883a 	mov	r4,r19
    2670:	00075540 	call	7554 <__ssprint_r>
    2674:	103eb11e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    2678:	8c7ffc04 	addi	r17,r17,-16
    267c:	d8c02017 	ldw	r3,128(sp)
    2680:	d8801f17 	ldw	r2,124(sp)
    2684:	da000404 	addi	r8,sp,16
    2688:	e47fef16 	blt	fp,r17,2648 <___svfprintf_internal_r+0x8a0>
    268c:	9021883a 	mov	r16,r18
    2690:	b025883a 	mov	r18,r22
    2694:	882d883a 	mov	r22,r17
    2698:	dc402917 	ldw	r17,164(sp)
    269c:	d9002b17 	ldw	r4,172(sp)
    26a0:	1d87883a 	add	r3,r3,r22
    26a4:	10800044 	addi	r2,r2,1
    26a8:	41000015 	stw	r4,0(r8)
    26ac:	45800115 	stw	r22,4(r8)
    26b0:	d8c02015 	stw	r3,128(sp)
    26b4:	d8801f15 	stw	r2,124(sp)
    26b8:	010001c4 	movi	r4,7
    26bc:	2081ec16 	blt	r4,r2,2e70 <___svfprintf_internal_r+0x10c8>
    26c0:	42000204 	addi	r8,r8,8
    26c4:	9080400c 	andi	r2,r18,256
    26c8:	1001181e 	bne	r2,zero,2b2c <___svfprintf_internal_r+0xd84>
    26cc:	d9402e17 	ldw	r5,184(sp)
    26d0:	d8801f17 	ldw	r2,124(sp)
    26d4:	44000015 	stw	r16,0(r8)
    26d8:	1947883a 	add	r3,r3,r5
    26dc:	10800044 	addi	r2,r2,1
    26e0:	41400115 	stw	r5,4(r8)
    26e4:	d8c02015 	stw	r3,128(sp)
    26e8:	d8801f15 	stw	r2,124(sp)
    26ec:	010001c4 	movi	r4,7
    26f0:	2081d116 	blt	r4,r2,2e38 <___svfprintf_internal_r+0x1090>
    26f4:	42000204 	addi	r8,r8,8
    26f8:	9480010c 	andi	r18,r18,4
    26fc:	90003226 	beq	r18,zero,27c8 <___svfprintf_internal_r+0xa20>
    2700:	d9403117 	ldw	r5,196(sp)
    2704:	d8802a17 	ldw	r2,168(sp)
    2708:	28a1c83a 	sub	r16,r5,r2
    270c:	04002e0e 	bge	zero,r16,27c8 <___svfprintf_internal_r+0xa20>
    2710:	04400404 	movi	r17,16
    2714:	d8801f17 	ldw	r2,124(sp)
    2718:	8c04b90e 	bge	r17,r16,3a00 <___svfprintf_internal_r+0x1c58>
    271c:	014000b4 	movhi	r5,2
    2720:	2969dd84 	addi	r5,r5,-22666
    2724:	d9403515 	stw	r5,212(sp)
    2728:	048001c4 	movi	r18,7
    272c:	dd002c17 	ldw	r20,176(sp)
    2730:	00000306 	br	2740 <___svfprintf_internal_r+0x998>
    2734:	843ffc04 	addi	r16,r16,-16
    2738:	42000204 	addi	r8,r8,8
    273c:	8c00130e 	bge	r17,r16,278c <___svfprintf_internal_r+0x9e4>
    2740:	010000b4 	movhi	r4,2
    2744:	18c00404 	addi	r3,r3,16
    2748:	10800044 	addi	r2,r2,1
    274c:	2129dd84 	addi	r4,r4,-22666
    2750:	41000015 	stw	r4,0(r8)
    2754:	44400115 	stw	r17,4(r8)
    2758:	d8c02015 	stw	r3,128(sp)
    275c:	d8801f15 	stw	r2,124(sp)
    2760:	90bff40e 	bge	r18,r2,2734 <___svfprintf_internal_r+0x98c>
    2764:	d9801e04 	addi	r6,sp,120
    2768:	a00b883a 	mov	r5,r20
    276c:	9809883a 	mov	r4,r19
    2770:	00075540 	call	7554 <__ssprint_r>
    2774:	103e711e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    2778:	843ffc04 	addi	r16,r16,-16
    277c:	d8c02017 	ldw	r3,128(sp)
    2780:	d8801f17 	ldw	r2,124(sp)
    2784:	da000404 	addi	r8,sp,16
    2788:	8c3fed16 	blt	r17,r16,2740 <___svfprintf_internal_r+0x998>
    278c:	d9403517 	ldw	r5,212(sp)
    2790:	1c07883a 	add	r3,r3,r16
    2794:	10800044 	addi	r2,r2,1
    2798:	41400015 	stw	r5,0(r8)
    279c:	44000115 	stw	r16,4(r8)
    27a0:	d8c02015 	stw	r3,128(sp)
    27a4:	d8801f15 	stw	r2,124(sp)
    27a8:	010001c4 	movi	r4,7
    27ac:	2080060e 	bge	r4,r2,27c8 <___svfprintf_internal_r+0xa20>
    27b0:	d9402c17 	ldw	r5,176(sp)
    27b4:	d9801e04 	addi	r6,sp,120
    27b8:	9809883a 	mov	r4,r19
    27bc:	00075540 	call	7554 <__ssprint_r>
    27c0:	103e5e1e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    27c4:	d8c02017 	ldw	r3,128(sp)
    27c8:	d8803117 	ldw	r2,196(sp)
    27cc:	d9002a17 	ldw	r4,168(sp)
    27d0:	1100010e 	bge	r2,r4,27d8 <___svfprintf_internal_r+0xa30>
    27d4:	2005883a 	mov	r2,r4
    27d8:	d9402f17 	ldw	r5,188(sp)
    27dc:	288b883a 	add	r5,r5,r2
    27e0:	d9402f15 	stw	r5,188(sp)
    27e4:	18019c1e 	bne	r3,zero,2e58 <___svfprintf_internal_r+0x10b0>
    27e8:	b8800007 	ldb	r2,0(r23)
    27ec:	d8001f15 	stw	zero,124(sp)
    27f0:	da000404 	addi	r8,sp,16
    27f4:	103d991e 	bne	r2,zero,1e5c <___svfprintf_internal_r+0xb4>
    27f8:	b821883a 	mov	r16,r23
    27fc:	003daf06 	br	1ebc <___svfprintf_internal_r+0x114>
    2800:	18c03fcc 	andi	r3,r3,255
    2804:	1805c71e 	bne	r3,zero,3f24 <___svfprintf_internal_r+0x217c>
    2808:	94800414 	ori	r18,r18,16
    280c:	9080080c 	andi	r2,r18,32
    2810:	10020126 	beq	r2,zero,3018 <___svfprintf_internal_r+0x1270>
    2814:	d8802d17 	ldw	r2,180(sp)
    2818:	d9002917 	ldw	r4,164(sp)
    281c:	d8002785 	stb	zero,158(sp)
    2820:	10c00204 	addi	r3,r2,8
    2824:	15000017 	ldw	r20,0(r2)
    2828:	15800117 	ldw	r22,4(r2)
    282c:	20038e16 	blt	r4,zero,3668 <___svfprintf_internal_r+0x18c0>
    2830:	013fdfc4 	movi	r4,-129
    2834:	a584b03a 	or	r2,r20,r22
    2838:	d8c02d15 	stw	r3,180(sp)
    283c:	9124703a 	and	r18,r18,r4
    2840:	0039883a 	mov	fp,zero
    2844:	103eb61e 	bne	r2,zero,2320 <___svfprintf_internal_r+0x578>
    2848:	d8802917 	ldw	r2,164(sp)
    284c:	1002c81e 	bne	r2,zero,3370 <___svfprintf_internal_r+0x15c8>
    2850:	d8002915 	stw	zero,164(sp)
    2854:	d8002e15 	stw	zero,184(sp)
    2858:	dc001e04 	addi	r16,sp,120
    285c:	003efa06 	br	2448 <___svfprintf_internal_r+0x6a0>
    2860:	18c03fcc 	andi	r3,r3,255
    2864:	1805ad1e 	bne	r3,zero,3f1c <___svfprintf_internal_r+0x2174>
    2868:	014000b4 	movhi	r5,2
    286c:	2969cd04 	addi	r5,r5,-22732
    2870:	d9403a15 	stw	r5,232(sp)
    2874:	9080080c 	andi	r2,r18,32
    2878:	10006126 	beq	r2,zero,2a00 <___svfprintf_internal_r+0xc58>
    287c:	d8802d17 	ldw	r2,180(sp)
    2880:	15000017 	ldw	r20,0(r2)
    2884:	15800117 	ldw	r22,4(r2)
    2888:	10800204 	addi	r2,r2,8
    288c:	d8802d15 	stw	r2,180(sp)
    2890:	9080004c 	andi	r2,r18,1
    2894:	10018e26 	beq	r2,zero,2ed0 <___svfprintf_internal_r+0x1128>
    2898:	a584b03a 	or	r2,r20,r22
    289c:	10030926 	beq	r2,zero,34c4 <___svfprintf_internal_r+0x171c>
    28a0:	d8c02917 	ldw	r3,164(sp)
    28a4:	00800c04 	movi	r2,48
    28a8:	d8802705 	stb	r2,156(sp)
    28ac:	dc402745 	stb	r17,157(sp)
    28b0:	d8002785 	stb	zero,158(sp)
    28b4:	90800094 	ori	r2,r18,2
    28b8:	18048716 	blt	r3,zero,3ad8 <___svfprintf_internal_r+0x1d30>
    28bc:	00bfdfc4 	movi	r2,-129
    28c0:	90a4703a 	and	r18,r18,r2
    28c4:	94800094 	ori	r18,r18,2
    28c8:	0039883a 	mov	fp,zero
    28cc:	d9003a17 	ldw	r4,232(sp)
    28d0:	dc001e04 	addi	r16,sp,120
    28d4:	a08003cc 	andi	r2,r20,15
    28d8:	b006973a 	slli	r3,r22,28
    28dc:	2085883a 	add	r2,r4,r2
    28e0:	a028d13a 	srli	r20,r20,4
    28e4:	10800003 	ldbu	r2,0(r2)
    28e8:	b02cd13a 	srli	r22,r22,4
    28ec:	843fffc4 	addi	r16,r16,-1
    28f0:	1d28b03a 	or	r20,r3,r20
    28f4:	80800005 	stb	r2,0(r16)
    28f8:	a584b03a 	or	r2,r20,r22
    28fc:	103ff51e 	bne	r2,zero,28d4 <___svfprintf_internal_r+0xb2c>
    2900:	d8c02817 	ldw	r3,160(sp)
    2904:	1c07c83a 	sub	r3,r3,r16
    2908:	d8c02e15 	stw	r3,184(sp)
    290c:	003ece06 	br	2448 <___svfprintf_internal_r+0x6a0>
    2910:	d8c02d17 	ldw	r3,180(sp)
    2914:	d9002d17 	ldw	r4,180(sp)
    2918:	d8002785 	stb	zero,158(sp)
    291c:	18800017 	ldw	r2,0(r3)
    2920:	21000104 	addi	r4,r4,4
    2924:	00c00044 	movi	r3,1
    2928:	d8c02a15 	stw	r3,168(sp)
    292c:	d8801405 	stb	r2,80(sp)
    2930:	d9002d15 	stw	r4,180(sp)
    2934:	d8c02e15 	stw	r3,184(sp)
    2938:	d8002915 	stw	zero,164(sp)
    293c:	d8003215 	stw	zero,200(sp)
    2940:	dc001404 	addi	r16,sp,80
    2944:	0039883a 	mov	fp,zero
    2948:	003ecc06 	br	247c <___svfprintf_internal_r+0x6d4>
    294c:	18c03fcc 	andi	r3,r3,255
    2950:	183e9226 	beq	r3,zero,239c <___svfprintf_internal_r+0x5f4>
    2954:	d9c02785 	stb	r7,158(sp)
    2958:	003e9006 	br	239c <___svfprintf_internal_r+0x5f4>
    295c:	00c00044 	movi	r3,1
    2960:	01c00ac4 	movi	r7,43
    2964:	bc400007 	ldb	r17,0(r23)
    2968:	003d6306 	br	1ef8 <___svfprintf_internal_r+0x150>
    296c:	94800814 	ori	r18,r18,32
    2970:	bc400007 	ldb	r17,0(r23)
    2974:	003d6006 	br	1ef8 <___svfprintf_internal_r+0x150>
    2978:	d8c02d17 	ldw	r3,180(sp)
    297c:	d8002785 	stb	zero,158(sp)
    2980:	1c000017 	ldw	r16,0(r3)
    2984:	1d000104 	addi	r20,r3,4
    2988:	80040f26 	beq	r16,zero,39c8 <___svfprintf_internal_r+0x1c20>
    298c:	d9002917 	ldw	r4,164(sp)
    2990:	2003dc16 	blt	r4,zero,3904 <___svfprintf_internal_r+0x1b5c>
    2994:	200d883a 	mov	r6,r4
    2998:	000b883a 	mov	r5,zero
    299c:	8009883a 	mov	r4,r16
    29a0:	da003e15 	stw	r8,248(sp)
    29a4:	00060f00 	call	60f0 <memchr>
    29a8:	da003e17 	ldw	r8,248(sp)
    29ac:	10045826 	beq	r2,zero,3b10 <___svfprintf_internal_r+0x1d68>
    29b0:	1405c83a 	sub	r2,r2,r16
    29b4:	d8802e15 	stw	r2,184(sp)
    29b8:	1003d816 	blt	r2,zero,391c <___svfprintf_internal_r+0x1b74>
    29bc:	df002783 	ldbu	fp,158(sp)
    29c0:	d8802a15 	stw	r2,168(sp)
    29c4:	dd002d15 	stw	r20,180(sp)
    29c8:	d8002915 	stw	zero,164(sp)
    29cc:	d8003215 	stw	zero,200(sp)
    29d0:	003ea306 	br	2460 <___svfprintf_internal_r+0x6b8>
    29d4:	18c03fcc 	andi	r3,r3,255
    29d8:	183f8c26 	beq	r3,zero,280c <___svfprintf_internal_r+0xa64>
    29dc:	d9c02785 	stb	r7,158(sp)
    29e0:	003f8a06 	br	280c <___svfprintf_internal_r+0xa64>
    29e4:	18c03fcc 	andi	r3,r3,255
    29e8:	1805631e 	bne	r3,zero,3f78 <___svfprintf_internal_r+0x21d0>
    29ec:	014000b4 	movhi	r5,2
    29f0:	2969d204 	addi	r5,r5,-22712
    29f4:	d9403a15 	stw	r5,232(sp)
    29f8:	9080080c 	andi	r2,r18,32
    29fc:	103f9f1e 	bne	r2,zero,287c <___svfprintf_internal_r+0xad4>
    2a00:	9080040c 	andi	r2,r18,16
    2a04:	10029c26 	beq	r2,zero,3478 <___svfprintf_internal_r+0x16d0>
    2a08:	d8c02d17 	ldw	r3,180(sp)
    2a0c:	002d883a 	mov	r22,zero
    2a10:	1d000017 	ldw	r20,0(r3)
    2a14:	18c00104 	addi	r3,r3,4
    2a18:	d8c02d15 	stw	r3,180(sp)
    2a1c:	003f9c06 	br	2890 <___svfprintf_internal_r+0xae8>
    2a20:	94800054 	ori	r18,r18,1
    2a24:	bc400007 	ldb	r17,0(r23)
    2a28:	003d3306 	br	1ef8 <___svfprintf_internal_r+0x150>
    2a2c:	38803fcc 	andi	r2,r7,255
    2a30:	1080201c 	xori	r2,r2,128
    2a34:	10bfe004 	addi	r2,r2,-128
    2a38:	1002971e 	bne	r2,zero,3498 <___svfprintf_internal_r+0x16f0>
    2a3c:	00c00044 	movi	r3,1
    2a40:	01c00804 	movi	r7,32
    2a44:	bc400007 	ldb	r17,0(r23)
    2a48:	003d2b06 	br	1ef8 <___svfprintf_internal_r+0x150>
    2a4c:	18c03fcc 	andi	r3,r3,255
    2a50:	183e2326 	beq	r3,zero,22e0 <___svfprintf_internal_r+0x538>
    2a54:	d9c02785 	stb	r7,158(sp)
    2a58:	003e2106 	br	22e0 <___svfprintf_internal_r+0x538>
    2a5c:	bc400007 	ldb	r17,0(r23)
    2a60:	8a430426 	beq	r17,r9,3674 <___svfprintf_internal_r+0x18cc>
    2a64:	94800414 	ori	r18,r18,16
    2a68:	003d2306 	br	1ef8 <___svfprintf_internal_r+0x150>
    2a6c:	18c03fcc 	andi	r3,r3,255
    2a70:	18053f1e 	bne	r3,zero,3f70 <___svfprintf_internal_r+0x21c8>
    2a74:	9080080c 	andi	r2,r18,32
    2a78:	10028926 	beq	r2,zero,34a0 <___svfprintf_internal_r+0x16f8>
    2a7c:	d9402d17 	ldw	r5,180(sp)
    2a80:	d9002f17 	ldw	r4,188(sp)
    2a84:	28800017 	ldw	r2,0(r5)
    2a88:	2007d7fa 	srai	r3,r4,31
    2a8c:	29400104 	addi	r5,r5,4
    2a90:	d9402d15 	stw	r5,180(sp)
    2a94:	11000015 	stw	r4,0(r2)
    2a98:	10c00115 	stw	r3,4(r2)
    2a9c:	003ced06 	br	1e54 <___svfprintf_internal_r+0xac>
    2aa0:	94801014 	ori	r18,r18,64
    2aa4:	bc400007 	ldb	r17,0(r23)
    2aa8:	003d1306 	br	1ef8 <___svfprintf_internal_r+0x150>
    2aac:	010000b4 	movhi	r4,2
    2ab0:	2129d204 	addi	r4,r4,-22712
    2ab4:	0039883a 	mov	fp,zero
    2ab8:	d9003a15 	stw	r4,232(sp)
    2abc:	04401e04 	movi	r17,120
    2ac0:	003f8206 	br	28cc <___svfprintf_internal_r+0xb24>
    2ac4:	18c03fcc 	andi	r3,r3,255
    2ac8:	1805221e 	bne	r3,zero,3f54 <___svfprintf_internal_r+0x21ac>
    2acc:	883d9526 	beq	r17,zero,2124 <___svfprintf_internal_r+0x37c>
    2ad0:	00c00044 	movi	r3,1
    2ad4:	d8c02a15 	stw	r3,168(sp)
    2ad8:	dc401405 	stb	r17,80(sp)
    2adc:	d8002785 	stb	zero,158(sp)
    2ae0:	003f9406 	br	2934 <___svfprintf_internal_r+0xb8c>
    2ae4:	010000b4 	movhi	r4,2
    2ae8:	2129d204 	addi	r4,r4,-22712
    2aec:	d9003a15 	stw	r4,232(sp)
    2af0:	d8c02d15 	stw	r3,180(sp)
    2af4:	1025883a 	mov	r18,r2
    2af8:	04401e04 	movi	r17,120
    2afc:	a584b03a 	or	r2,r20,r22
    2b00:	1000fa1e 	bne	r2,zero,2eec <___svfprintf_internal_r+0x1144>
    2b04:	0039883a 	mov	fp,zero
    2b08:	00800084 	movi	r2,2
    2b0c:	10803fcc 	andi	r2,r2,255
    2b10:	00c00044 	movi	r3,1
    2b14:	10c21626 	beq	r2,r3,3370 <___svfprintf_internal_r+0x15c8>
    2b18:	00c00084 	movi	r3,2
    2b1c:	10fe301e 	bne	r2,r3,23e0 <___svfprintf_internal_r+0x638>
    2b20:	003d7606 	br	20fc <___svfprintf_internal_r+0x354>
    2b24:	d8c02017 	ldw	r3,128(sp)
    2b28:	003e9506 	br	2580 <___svfprintf_internal_r+0x7d8>
    2b2c:	00801944 	movi	r2,101
    2b30:	14407c0e 	bge	r2,r17,2d24 <___svfprintf_internal_r+0xf7c>
    2b34:	d9003617 	ldw	r4,216(sp)
    2b38:	d9403717 	ldw	r5,220(sp)
    2b3c:	000d883a 	mov	r6,zero
    2b40:	000f883a 	mov	r7,zero
    2b44:	d8c03d15 	stw	r3,244(sp)
    2b48:	da003e15 	stw	r8,248(sp)
    2b4c:	000b4380 	call	b438 <__eqdf2>
    2b50:	d8c03d17 	ldw	r3,244(sp)
    2b54:	da003e17 	ldw	r8,248(sp)
    2b58:	1000f51e 	bne	r2,zero,2f30 <___svfprintf_internal_r+0x1188>
    2b5c:	d8801f17 	ldw	r2,124(sp)
    2b60:	010000b4 	movhi	r4,2
    2b64:	2129d904 	addi	r4,r4,-22684
    2b68:	18c00044 	addi	r3,r3,1
    2b6c:	10800044 	addi	r2,r2,1
    2b70:	41000015 	stw	r4,0(r8)
    2b74:	01000044 	movi	r4,1
    2b78:	41000115 	stw	r4,4(r8)
    2b7c:	d8c02015 	stw	r3,128(sp)
    2b80:	d8801f15 	stw	r2,124(sp)
    2b84:	010001c4 	movi	r4,7
    2b88:	20826616 	blt	r4,r2,3524 <___svfprintf_internal_r+0x177c>
    2b8c:	42000204 	addi	r8,r8,8
    2b90:	d8802617 	ldw	r2,152(sp)
    2b94:	d9403317 	ldw	r5,204(sp)
    2b98:	11400216 	blt	r2,r5,2ba4 <___svfprintf_internal_r+0xdfc>
    2b9c:	9080004c 	andi	r2,r18,1
    2ba0:	103ed526 	beq	r2,zero,26f8 <___svfprintf_internal_r+0x950>
    2ba4:	d8803817 	ldw	r2,224(sp)
    2ba8:	d9003417 	ldw	r4,208(sp)
    2bac:	d9403817 	ldw	r5,224(sp)
    2bb0:	1887883a 	add	r3,r3,r2
    2bb4:	d8801f17 	ldw	r2,124(sp)
    2bb8:	41000015 	stw	r4,0(r8)
    2bbc:	41400115 	stw	r5,4(r8)
    2bc0:	10800044 	addi	r2,r2,1
    2bc4:	d8c02015 	stw	r3,128(sp)
    2bc8:	d8801f15 	stw	r2,124(sp)
    2bcc:	010001c4 	movi	r4,7
    2bd0:	2082af16 	blt	r4,r2,3690 <___svfprintf_internal_r+0x18e8>
    2bd4:	42000204 	addi	r8,r8,8
    2bd8:	d8803317 	ldw	r2,204(sp)
    2bdc:	143fffc4 	addi	r16,r2,-1
    2be0:	043ec50e 	bge	zero,r16,26f8 <___svfprintf_internal_r+0x950>
    2be4:	04400404 	movi	r17,16
    2be8:	d8801f17 	ldw	r2,124(sp)
    2bec:	8c00860e 	bge	r17,r16,2e08 <___svfprintf_internal_r+0x1060>
    2bf0:	014000b4 	movhi	r5,2
    2bf4:	2969d984 	addi	r5,r5,-22682
    2bf8:	d9402b15 	stw	r5,172(sp)
    2bfc:	058001c4 	movi	r22,7
    2c00:	dd002c17 	ldw	r20,176(sp)
    2c04:	00000306 	br	2c14 <___svfprintf_internal_r+0xe6c>
    2c08:	42000204 	addi	r8,r8,8
    2c0c:	843ffc04 	addi	r16,r16,-16
    2c10:	8c00800e 	bge	r17,r16,2e14 <___svfprintf_internal_r+0x106c>
    2c14:	18c00404 	addi	r3,r3,16
    2c18:	10800044 	addi	r2,r2,1
    2c1c:	45400015 	stw	r21,0(r8)
    2c20:	44400115 	stw	r17,4(r8)
    2c24:	d8c02015 	stw	r3,128(sp)
    2c28:	d8801f15 	stw	r2,124(sp)
    2c2c:	b0bff60e 	bge	r22,r2,2c08 <___svfprintf_internal_r+0xe60>
    2c30:	d9801e04 	addi	r6,sp,120
    2c34:	a00b883a 	mov	r5,r20
    2c38:	9809883a 	mov	r4,r19
    2c3c:	00075540 	call	7554 <__ssprint_r>
    2c40:	103d3e1e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    2c44:	d8c02017 	ldw	r3,128(sp)
    2c48:	d8801f17 	ldw	r2,124(sp)
    2c4c:	da000404 	addi	r8,sp,16
    2c50:	003fee06 	br	2c0c <___svfprintf_internal_r+0xe64>
    2c54:	d9403117 	ldw	r5,196(sp)
    2c58:	d8802a17 	ldw	r2,168(sp)
    2c5c:	28adc83a 	sub	r22,r5,r2
    2c60:	05be650e 	bge	zero,r22,25f8 <___svfprintf_internal_r+0x850>
    2c64:	07000404 	movi	fp,16
    2c68:	d8801f17 	ldw	r2,124(sp)
    2c6c:	e583a20e 	bge	fp,r22,3af8 <___svfprintf_internal_r+0x1d50>
    2c70:	014000b4 	movhi	r5,2
    2c74:	2969d984 	addi	r5,r5,-22682
    2c78:	dc403015 	stw	r17,192(sp)
    2c7c:	d9402b15 	stw	r5,172(sp)
    2c80:	b023883a 	mov	r17,r22
    2c84:	050001c4 	movi	r20,7
    2c88:	902d883a 	mov	r22,r18
    2c8c:	8025883a 	mov	r18,r16
    2c90:	dc002c17 	ldw	r16,176(sp)
    2c94:	00000306 	br	2ca4 <___svfprintf_internal_r+0xefc>
    2c98:	8c7ffc04 	addi	r17,r17,-16
    2c9c:	42000204 	addi	r8,r8,8
    2ca0:	e440110e 	bge	fp,r17,2ce8 <___svfprintf_internal_r+0xf40>
    2ca4:	18c00404 	addi	r3,r3,16
    2ca8:	10800044 	addi	r2,r2,1
    2cac:	45400015 	stw	r21,0(r8)
    2cb0:	47000115 	stw	fp,4(r8)
    2cb4:	d8c02015 	stw	r3,128(sp)
    2cb8:	d8801f15 	stw	r2,124(sp)
    2cbc:	a0bff60e 	bge	r20,r2,2c98 <___svfprintf_internal_r+0xef0>
    2cc0:	d9801e04 	addi	r6,sp,120
    2cc4:	800b883a 	mov	r5,r16
    2cc8:	9809883a 	mov	r4,r19
    2ccc:	00075540 	call	7554 <__ssprint_r>
    2cd0:	103d1a1e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    2cd4:	8c7ffc04 	addi	r17,r17,-16
    2cd8:	d8c02017 	ldw	r3,128(sp)
    2cdc:	d8801f17 	ldw	r2,124(sp)
    2ce0:	da000404 	addi	r8,sp,16
    2ce4:	e47fef16 	blt	fp,r17,2ca4 <___svfprintf_internal_r+0xefc>
    2ce8:	9021883a 	mov	r16,r18
    2cec:	b025883a 	mov	r18,r22
    2cf0:	882d883a 	mov	r22,r17
    2cf4:	dc403017 	ldw	r17,192(sp)
    2cf8:	d9002b17 	ldw	r4,172(sp)
    2cfc:	1d87883a 	add	r3,r3,r22
    2d00:	10800044 	addi	r2,r2,1
    2d04:	41000015 	stw	r4,0(r8)
    2d08:	45800115 	stw	r22,4(r8)
    2d0c:	d8c02015 	stw	r3,128(sp)
    2d10:	d8801f15 	stw	r2,124(sp)
    2d14:	010001c4 	movi	r4,7
    2d18:	20819a16 	blt	r4,r2,3384 <___svfprintf_internal_r+0x15dc>
    2d1c:	42000204 	addi	r8,r8,8
    2d20:	003e3506 	br	25f8 <___svfprintf_internal_r+0x850>
    2d24:	d9403317 	ldw	r5,204(sp)
    2d28:	00800044 	movi	r2,1
    2d2c:	18c00044 	addi	r3,r3,1
    2d30:	1141710e 	bge	r2,r5,32f8 <___svfprintf_internal_r+0x1550>
    2d34:	dc401f17 	ldw	r17,124(sp)
    2d38:	00800044 	movi	r2,1
    2d3c:	40800115 	stw	r2,4(r8)
    2d40:	8c400044 	addi	r17,r17,1
    2d44:	44000015 	stw	r16,0(r8)
    2d48:	d8c02015 	stw	r3,128(sp)
    2d4c:	dc401f15 	stw	r17,124(sp)
    2d50:	008001c4 	movi	r2,7
    2d54:	14417416 	blt	r2,r17,3328 <___svfprintf_internal_r+0x1580>
    2d58:	42000204 	addi	r8,r8,8
    2d5c:	d8803817 	ldw	r2,224(sp)
    2d60:	d9003417 	ldw	r4,208(sp)
    2d64:	8c400044 	addi	r17,r17,1
    2d68:	10c7883a 	add	r3,r2,r3
    2d6c:	40800115 	stw	r2,4(r8)
    2d70:	41000015 	stw	r4,0(r8)
    2d74:	d8c02015 	stw	r3,128(sp)
    2d78:	dc401f15 	stw	r17,124(sp)
    2d7c:	008001c4 	movi	r2,7
    2d80:	14417216 	blt	r2,r17,334c <___svfprintf_internal_r+0x15a4>
    2d84:	45800204 	addi	r22,r8,8
    2d88:	d9003617 	ldw	r4,216(sp)
    2d8c:	d9403717 	ldw	r5,220(sp)
    2d90:	000d883a 	mov	r6,zero
    2d94:	000f883a 	mov	r7,zero
    2d98:	d8c03d15 	stw	r3,244(sp)
    2d9c:	000b4380 	call	b438 <__eqdf2>
    2da0:	d8c03d17 	ldw	r3,244(sp)
    2da4:	1000b326 	beq	r2,zero,3074 <___svfprintf_internal_r+0x12cc>
    2da8:	d9403317 	ldw	r5,204(sp)
    2dac:	84000044 	addi	r16,r16,1
    2db0:	8c400044 	addi	r17,r17,1
    2db4:	28bfffc4 	addi	r2,r5,-1
    2db8:	1887883a 	add	r3,r3,r2
    2dbc:	b0800115 	stw	r2,4(r22)
    2dc0:	b4000015 	stw	r16,0(r22)
    2dc4:	d8c02015 	stw	r3,128(sp)
    2dc8:	dc401f15 	stw	r17,124(sp)
    2dcc:	008001c4 	movi	r2,7
    2dd0:	1440d216 	blt	r2,r17,311c <___svfprintf_internal_r+0x1374>
    2dd4:	b5800204 	addi	r22,r22,8
    2dd8:	d9003b17 	ldw	r4,236(sp)
    2ddc:	df0022c4 	addi	fp,sp,139
    2de0:	8c400044 	addi	r17,r17,1
    2de4:	20c7883a 	add	r3,r4,r3
    2de8:	b7000015 	stw	fp,0(r22)
    2dec:	b1000115 	stw	r4,4(r22)
    2df0:	d8c02015 	stw	r3,128(sp)
    2df4:	dc401f15 	stw	r17,124(sp)
    2df8:	008001c4 	movi	r2,7
    2dfc:	14400e16 	blt	r2,r17,2e38 <___svfprintf_internal_r+0x1090>
    2e00:	b2000204 	addi	r8,r22,8
    2e04:	003e3c06 	br	26f8 <___svfprintf_internal_r+0x950>
    2e08:	010000b4 	movhi	r4,2
    2e0c:	2129d984 	addi	r4,r4,-22682
    2e10:	d9002b15 	stw	r4,172(sp)
    2e14:	d9002b17 	ldw	r4,172(sp)
    2e18:	1c07883a 	add	r3,r3,r16
    2e1c:	44000115 	stw	r16,4(r8)
    2e20:	41000015 	stw	r4,0(r8)
    2e24:	10800044 	addi	r2,r2,1
    2e28:	d8c02015 	stw	r3,128(sp)
    2e2c:	d8801f15 	stw	r2,124(sp)
    2e30:	010001c4 	movi	r4,7
    2e34:	20be2f0e 	bge	r4,r2,26f4 <___svfprintf_internal_r+0x94c>
    2e38:	d9402c17 	ldw	r5,176(sp)
    2e3c:	d9801e04 	addi	r6,sp,120
    2e40:	9809883a 	mov	r4,r19
    2e44:	00075540 	call	7554 <__ssprint_r>
    2e48:	103cbc1e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    2e4c:	d8c02017 	ldw	r3,128(sp)
    2e50:	da000404 	addi	r8,sp,16
    2e54:	003e2806 	br	26f8 <___svfprintf_internal_r+0x950>
    2e58:	d9402c17 	ldw	r5,176(sp)
    2e5c:	d9801e04 	addi	r6,sp,120
    2e60:	9809883a 	mov	r4,r19
    2e64:	00075540 	call	7554 <__ssprint_r>
    2e68:	103e5f26 	beq	r2,zero,27e8 <___svfprintf_internal_r+0xa40>
    2e6c:	003cb306 	br	213c <___svfprintf_internal_r+0x394>
    2e70:	d9402c17 	ldw	r5,176(sp)
    2e74:	d9801e04 	addi	r6,sp,120
    2e78:	9809883a 	mov	r4,r19
    2e7c:	00075540 	call	7554 <__ssprint_r>
    2e80:	103cae1e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    2e84:	d8c02017 	ldw	r3,128(sp)
    2e88:	da000404 	addi	r8,sp,16
    2e8c:	003e0d06 	br	26c4 <___svfprintf_internal_r+0x91c>
    2e90:	d9402c17 	ldw	r5,176(sp)
    2e94:	d9801e04 	addi	r6,sp,120
    2e98:	9809883a 	mov	r4,r19
    2e9c:	00075540 	call	7554 <__ssprint_r>
    2ea0:	103ca61e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    2ea4:	d8c02017 	ldw	r3,128(sp)
    2ea8:	da000404 	addi	r8,sp,16
    2eac:	003dc106 	br	25b4 <___svfprintf_internal_r+0x80c>
    2eb0:	d9402c17 	ldw	r5,176(sp)
    2eb4:	d9801e04 	addi	r6,sp,120
    2eb8:	9809883a 	mov	r4,r19
    2ebc:	00075540 	call	7554 <__ssprint_r>
    2ec0:	103c9e1e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    2ec4:	d8c02017 	ldw	r3,128(sp)
    2ec8:	da000404 	addi	r8,sp,16
    2ecc:	003dc706 	br	25ec <___svfprintf_internal_r+0x844>
    2ed0:	d8802917 	ldw	r2,164(sp)
    2ed4:	d8002785 	stb	zero,158(sp)
    2ed8:	103f0816 	blt	r2,zero,2afc <___svfprintf_internal_r+0xd54>
    2edc:	00ffdfc4 	movi	r3,-129
    2ee0:	a584b03a 	or	r2,r20,r22
    2ee4:	90e4703a 	and	r18,r18,r3
    2ee8:	103c8126 	beq	r2,zero,20f0 <___svfprintf_internal_r+0x348>
    2eec:	0039883a 	mov	fp,zero
    2ef0:	003e7606 	br	28cc <___svfprintf_internal_r+0xb24>
    2ef4:	9080040c 	andi	r2,r18,16
    2ef8:	10013d26 	beq	r2,zero,33f0 <___svfprintf_internal_r+0x1648>
    2efc:	d9002d17 	ldw	r4,180(sp)
    2f00:	d9402917 	ldw	r5,164(sp)
    2f04:	d8002785 	stb	zero,158(sp)
    2f08:	20800104 	addi	r2,r4,4
    2f0c:	25000017 	ldw	r20,0(r4)
    2f10:	002d883a 	mov	r22,zero
    2f14:	28013f16 	blt	r5,zero,3414 <___svfprintf_internal_r+0x166c>
    2f18:	00ffdfc4 	movi	r3,-129
    2f1c:	d8802d15 	stw	r2,180(sp)
    2f20:	90e4703a 	and	r18,r18,r3
    2f24:	a03d2b26 	beq	r20,zero,23d4 <___svfprintf_internal_r+0x62c>
    2f28:	0039883a 	mov	fp,zero
    2f2c:	003d2e06 	br	23e8 <___svfprintf_internal_r+0x640>
    2f30:	dc402617 	ldw	r17,152(sp)
    2f34:	0441830e 	bge	zero,r17,3544 <___svfprintf_internal_r+0x179c>
    2f38:	dc403217 	ldw	r17,200(sp)
    2f3c:	d8803317 	ldw	r2,204(sp)
    2f40:	1440010e 	bge	r2,r17,2f48 <___svfprintf_internal_r+0x11a0>
    2f44:	1023883a 	mov	r17,r2
    2f48:	04400a0e 	bge	zero,r17,2f74 <___svfprintf_internal_r+0x11cc>
    2f4c:	d8801f17 	ldw	r2,124(sp)
    2f50:	1c47883a 	add	r3,r3,r17
    2f54:	44000015 	stw	r16,0(r8)
    2f58:	10800044 	addi	r2,r2,1
    2f5c:	44400115 	stw	r17,4(r8)
    2f60:	d8c02015 	stw	r3,128(sp)
    2f64:	d8801f15 	stw	r2,124(sp)
    2f68:	010001c4 	movi	r4,7
    2f6c:	20827516 	blt	r4,r2,3944 <___svfprintf_internal_r+0x1b9c>
    2f70:	42000204 	addi	r8,r8,8
    2f74:	88027b16 	blt	r17,zero,3964 <___svfprintf_internal_r+0x1bbc>
    2f78:	d9003217 	ldw	r4,200(sp)
    2f7c:	2463c83a 	sub	r17,r4,r17
    2f80:	0440990e 	bge	zero,r17,31e8 <___svfprintf_internal_r+0x1440>
    2f84:	05800404 	movi	r22,16
    2f88:	d8801f17 	ldw	r2,124(sp)
    2f8c:	b441530e 	bge	r22,r17,34dc <___svfprintf_internal_r+0x1734>
    2f90:	010000b4 	movhi	r4,2
    2f94:	2129d984 	addi	r4,r4,-22682
    2f98:	d9002b15 	stw	r4,172(sp)
    2f9c:	070001c4 	movi	fp,7
    2fa0:	dd002c17 	ldw	r20,176(sp)
    2fa4:	00000306 	br	2fb4 <___svfprintf_internal_r+0x120c>
    2fa8:	42000204 	addi	r8,r8,8
    2fac:	8c7ffc04 	addi	r17,r17,-16
    2fb0:	b4414d0e 	bge	r22,r17,34e8 <___svfprintf_internal_r+0x1740>
    2fb4:	18c00404 	addi	r3,r3,16
    2fb8:	10800044 	addi	r2,r2,1
    2fbc:	45400015 	stw	r21,0(r8)
    2fc0:	45800115 	stw	r22,4(r8)
    2fc4:	d8c02015 	stw	r3,128(sp)
    2fc8:	d8801f15 	stw	r2,124(sp)
    2fcc:	e0bff60e 	bge	fp,r2,2fa8 <___svfprintf_internal_r+0x1200>
    2fd0:	d9801e04 	addi	r6,sp,120
    2fd4:	a00b883a 	mov	r5,r20
    2fd8:	9809883a 	mov	r4,r19
    2fdc:	00075540 	call	7554 <__ssprint_r>
    2fe0:	103c561e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    2fe4:	d8c02017 	ldw	r3,128(sp)
    2fe8:	d8801f17 	ldw	r2,124(sp)
    2fec:	da000404 	addi	r8,sp,16
    2ff0:	003fee06 	br	2fac <___svfprintf_internal_r+0x1204>
    2ff4:	d9402c17 	ldw	r5,176(sp)
    2ff8:	d9801e04 	addi	r6,sp,120
    2ffc:	9809883a 	mov	r4,r19
    3000:	00075540 	call	7554 <__ssprint_r>
    3004:	103c4d1e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    3008:	d8c02017 	ldw	r3,128(sp)
    300c:	df002787 	ldb	fp,158(sp)
    3010:	da000404 	addi	r8,sp,16
    3014:	003d5a06 	br	2580 <___svfprintf_internal_r+0x7d8>
    3018:	9080040c 	andi	r2,r18,16
    301c:	10005c26 	beq	r2,zero,3190 <___svfprintf_internal_r+0x13e8>
    3020:	d9402d17 	ldw	r5,180(sp)
    3024:	d8c02917 	ldw	r3,164(sp)
    3028:	d8002785 	stb	zero,158(sp)
    302c:	28800104 	addi	r2,r5,4
    3030:	2d000017 	ldw	r20,0(r5)
    3034:	002d883a 	mov	r22,zero
    3038:	18005e16 	blt	r3,zero,31b4 <___svfprintf_internal_r+0x140c>
    303c:	00ffdfc4 	movi	r3,-129
    3040:	d8802d15 	stw	r2,180(sp)
    3044:	90e4703a 	and	r18,r18,r3
    3048:	0039883a 	mov	fp,zero
    304c:	a03dfe26 	beq	r20,zero,2848 <___svfprintf_internal_r+0xaa0>
    3050:	00800244 	movi	r2,9
    3054:	153cb336 	bltu	r2,r20,2324 <___svfprintf_internal_r+0x57c>
    3058:	a5000c04 	addi	r20,r20,48
    305c:	dc001dc4 	addi	r16,sp,119
    3060:	dd001dc5 	stb	r20,119(sp)
    3064:	d8c02817 	ldw	r3,160(sp)
    3068:	1c07c83a 	sub	r3,r3,r16
    306c:	d8c02e15 	stw	r3,184(sp)
    3070:	003cf506 	br	2448 <___svfprintf_internal_r+0x6a0>
    3074:	d8803317 	ldw	r2,204(sp)
    3078:	143fffc4 	addi	r16,r2,-1
    307c:	043f560e 	bge	zero,r16,2dd8 <___svfprintf_internal_r+0x1030>
    3080:	07000404 	movi	fp,16
    3084:	e403530e 	bge	fp,r16,3dd4 <___svfprintf_internal_r+0x202c>
    3088:	014000b4 	movhi	r5,2
    308c:	2969d984 	addi	r5,r5,-22682
    3090:	d9402b15 	stw	r5,172(sp)
    3094:	01c001c4 	movi	r7,7
    3098:	dd002c17 	ldw	r20,176(sp)
    309c:	00000306 	br	30ac <___svfprintf_internal_r+0x1304>
    30a0:	843ffc04 	addi	r16,r16,-16
    30a4:	b5800204 	addi	r22,r22,8
    30a8:	e400130e 	bge	fp,r16,30f8 <___svfprintf_internal_r+0x1350>
    30ac:	18c00404 	addi	r3,r3,16
    30b0:	8c400044 	addi	r17,r17,1
    30b4:	b5400015 	stw	r21,0(r22)
    30b8:	b7000115 	stw	fp,4(r22)
    30bc:	d8c02015 	stw	r3,128(sp)
    30c0:	dc401f15 	stw	r17,124(sp)
    30c4:	3c7ff60e 	bge	r7,r17,30a0 <___svfprintf_internal_r+0x12f8>
    30c8:	d9801e04 	addi	r6,sp,120
    30cc:	a00b883a 	mov	r5,r20
    30d0:	9809883a 	mov	r4,r19
    30d4:	d9c03d15 	stw	r7,244(sp)
    30d8:	00075540 	call	7554 <__ssprint_r>
    30dc:	d9c03d17 	ldw	r7,244(sp)
    30e0:	103c161e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    30e4:	843ffc04 	addi	r16,r16,-16
    30e8:	d8c02017 	ldw	r3,128(sp)
    30ec:	dc401f17 	ldw	r17,124(sp)
    30f0:	dd800404 	addi	r22,sp,16
    30f4:	e43fed16 	blt	fp,r16,30ac <___svfprintf_internal_r+0x1304>
    30f8:	d8802b17 	ldw	r2,172(sp)
    30fc:	1c07883a 	add	r3,r3,r16
    3100:	8c400044 	addi	r17,r17,1
    3104:	b0800015 	stw	r2,0(r22)
    3108:	b4000115 	stw	r16,4(r22)
    310c:	d8c02015 	stw	r3,128(sp)
    3110:	dc401f15 	stw	r17,124(sp)
    3114:	008001c4 	movi	r2,7
    3118:	147f2e0e 	bge	r2,r17,2dd4 <___svfprintf_internal_r+0x102c>
    311c:	d9402c17 	ldw	r5,176(sp)
    3120:	d9801e04 	addi	r6,sp,120
    3124:	9809883a 	mov	r4,r19
    3128:	00075540 	call	7554 <__ssprint_r>
    312c:	103c031e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    3130:	d8c02017 	ldw	r3,128(sp)
    3134:	dc401f17 	ldw	r17,124(sp)
    3138:	dd800404 	addi	r22,sp,16
    313c:	003f2606 	br	2dd8 <___svfprintf_internal_r+0x1030>
    3140:	9080040c 	andi	r2,r18,16
    3144:	1000c326 	beq	r2,zero,3454 <___svfprintf_internal_r+0x16ac>
    3148:	d8802d17 	ldw	r2,180(sp)
    314c:	15000017 	ldw	r20,0(r2)
    3150:	10800104 	addi	r2,r2,4
    3154:	d8802d15 	stw	r2,180(sp)
    3158:	a02dd7fa 	srai	r22,r20,31
    315c:	b005883a 	mov	r2,r22
    3160:	103c680e 	bge	r2,zero,2304 <___svfprintf_internal_r+0x55c>
    3164:	0529c83a 	sub	r20,zero,r20
    3168:	a004c03a 	cmpne	r2,r20,zero
    316c:	05adc83a 	sub	r22,zero,r22
    3170:	b0adc83a 	sub	r22,r22,r2
    3174:	d8802917 	ldw	r2,164(sp)
    3178:	07000b44 	movi	fp,45
    317c:	df002785 	stb	fp,158(sp)
    3180:	10022e16 	blt	r2,zero,3a3c <___svfprintf_internal_r+0x1c94>
    3184:	00bfdfc4 	movi	r2,-129
    3188:	90a4703a 	and	r18,r18,r2
    318c:	003c6406 	br	2320 <___svfprintf_internal_r+0x578>
    3190:	9080100c 	andi	r2,r18,64
    3194:	d8002785 	stb	zero,158(sp)
    3198:	10012526 	beq	r2,zero,3630 <___svfprintf_internal_r+0x1888>
    319c:	d9002d17 	ldw	r4,180(sp)
    31a0:	d9402917 	ldw	r5,164(sp)
    31a4:	002d883a 	mov	r22,zero
    31a8:	20800104 	addi	r2,r4,4
    31ac:	2500000b 	ldhu	r20,0(r4)
    31b0:	283fa20e 	bge	r5,zero,303c <___svfprintf_internal_r+0x1294>
    31b4:	d8802d15 	stw	r2,180(sp)
    31b8:	0039883a 	mov	fp,zero
    31bc:	a584b03a 	or	r2,r20,r22
    31c0:	103c571e 	bne	r2,zero,2320 <___svfprintf_internal_r+0x578>
    31c4:	00800044 	movi	r2,1
    31c8:	003e5006 	br	2b0c <___svfprintf_internal_r+0xd64>
    31cc:	d9402c17 	ldw	r5,176(sp)
    31d0:	d9801e04 	addi	r6,sp,120
    31d4:	9809883a 	mov	r4,r19
    31d8:	00075540 	call	7554 <__ssprint_r>
    31dc:	103bd71e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    31e0:	d8c02017 	ldw	r3,128(sp)
    31e4:	da000404 	addi	r8,sp,16
    31e8:	d9003217 	ldw	r4,200(sp)
    31ec:	d8802617 	ldw	r2,152(sp)
    31f0:	d9403317 	ldw	r5,204(sp)
    31f4:	8123883a 	add	r17,r16,r4
    31f8:	11400216 	blt	r2,r5,3204 <___svfprintf_internal_r+0x145c>
    31fc:	9100004c 	andi	r4,r18,1
    3200:	20000d26 	beq	r4,zero,3238 <___svfprintf_internal_r+0x1490>
    3204:	d9003817 	ldw	r4,224(sp)
    3208:	d9403417 	ldw	r5,208(sp)
    320c:	1907883a 	add	r3,r3,r4
    3210:	d9001f17 	ldw	r4,124(sp)
    3214:	41400015 	stw	r5,0(r8)
    3218:	d9403817 	ldw	r5,224(sp)
    321c:	21000044 	addi	r4,r4,1
    3220:	d8c02015 	stw	r3,128(sp)
    3224:	41400115 	stw	r5,4(r8)
    3228:	d9001f15 	stw	r4,124(sp)
    322c:	014001c4 	movi	r5,7
    3230:	2901dc16 	blt	r5,r4,39a4 <___svfprintf_internal_r+0x1bfc>
    3234:	42000204 	addi	r8,r8,8
    3238:	d9003317 	ldw	r4,204(sp)
    323c:	8121883a 	add	r16,r16,r4
    3240:	2085c83a 	sub	r2,r4,r2
    3244:	8461c83a 	sub	r16,r16,r17
    3248:	1400010e 	bge	r2,r16,3250 <___svfprintf_internal_r+0x14a8>
    324c:	1021883a 	mov	r16,r2
    3250:	04000a0e 	bge	zero,r16,327c <___svfprintf_internal_r+0x14d4>
    3254:	d9001f17 	ldw	r4,124(sp)
    3258:	1c07883a 	add	r3,r3,r16
    325c:	44400015 	stw	r17,0(r8)
    3260:	21000044 	addi	r4,r4,1
    3264:	44000115 	stw	r16,4(r8)
    3268:	d8c02015 	stw	r3,128(sp)
    326c:	d9001f15 	stw	r4,124(sp)
    3270:	014001c4 	movi	r5,7
    3274:	2901e616 	blt	r5,r4,3a10 <___svfprintf_internal_r+0x1c68>
    3278:	42000204 	addi	r8,r8,8
    327c:	8001f616 	blt	r16,zero,3a58 <___svfprintf_internal_r+0x1cb0>
    3280:	1421c83a 	sub	r16,r2,r16
    3284:	043d1c0e 	bge	zero,r16,26f8 <___svfprintf_internal_r+0x950>
    3288:	04400404 	movi	r17,16
    328c:	d8801f17 	ldw	r2,124(sp)
    3290:	8c3edd0e 	bge	r17,r16,2e08 <___svfprintf_internal_r+0x1060>
    3294:	014000b4 	movhi	r5,2
    3298:	2969d984 	addi	r5,r5,-22682
    329c:	d9402b15 	stw	r5,172(sp)
    32a0:	058001c4 	movi	r22,7
    32a4:	dd002c17 	ldw	r20,176(sp)
    32a8:	00000306 	br	32b8 <___svfprintf_internal_r+0x1510>
    32ac:	42000204 	addi	r8,r8,8
    32b0:	843ffc04 	addi	r16,r16,-16
    32b4:	8c3ed70e 	bge	r17,r16,2e14 <___svfprintf_internal_r+0x106c>
    32b8:	18c00404 	addi	r3,r3,16
    32bc:	10800044 	addi	r2,r2,1
    32c0:	45400015 	stw	r21,0(r8)
    32c4:	44400115 	stw	r17,4(r8)
    32c8:	d8c02015 	stw	r3,128(sp)
    32cc:	d8801f15 	stw	r2,124(sp)
    32d0:	b0bff60e 	bge	r22,r2,32ac <___svfprintf_internal_r+0x1504>
    32d4:	d9801e04 	addi	r6,sp,120
    32d8:	a00b883a 	mov	r5,r20
    32dc:	9809883a 	mov	r4,r19
    32e0:	00075540 	call	7554 <__ssprint_r>
    32e4:	103b951e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    32e8:	d8c02017 	ldw	r3,128(sp)
    32ec:	d8801f17 	ldw	r2,124(sp)
    32f0:	da000404 	addi	r8,sp,16
    32f4:	003fee06 	br	32b0 <___svfprintf_internal_r+0x1508>
    32f8:	9088703a 	and	r4,r18,r2
    32fc:	203e8d1e 	bne	r4,zero,2d34 <___svfprintf_internal_r+0xf8c>
    3300:	dc401f17 	ldw	r17,124(sp)
    3304:	40800115 	stw	r2,4(r8)
    3308:	44000015 	stw	r16,0(r8)
    330c:	8c400044 	addi	r17,r17,1
    3310:	d8c02015 	stw	r3,128(sp)
    3314:	dc401f15 	stw	r17,124(sp)
    3318:	008001c4 	movi	r2,7
    331c:	147f7f16 	blt	r2,r17,311c <___svfprintf_internal_r+0x1374>
    3320:	45800204 	addi	r22,r8,8
    3324:	003eac06 	br	2dd8 <___svfprintf_internal_r+0x1030>
    3328:	d9402c17 	ldw	r5,176(sp)
    332c:	d9801e04 	addi	r6,sp,120
    3330:	9809883a 	mov	r4,r19
    3334:	00075540 	call	7554 <__ssprint_r>
    3338:	103b801e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    333c:	d8c02017 	ldw	r3,128(sp)
    3340:	dc401f17 	ldw	r17,124(sp)
    3344:	da000404 	addi	r8,sp,16
    3348:	003e8406 	br	2d5c <___svfprintf_internal_r+0xfb4>
    334c:	d9402c17 	ldw	r5,176(sp)
    3350:	d9801e04 	addi	r6,sp,120
    3354:	9809883a 	mov	r4,r19
    3358:	00075540 	call	7554 <__ssprint_r>
    335c:	103b771e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    3360:	d8c02017 	ldw	r3,128(sp)
    3364:	dc401f17 	ldw	r17,124(sp)
    3368:	dd800404 	addi	r22,sp,16
    336c:	003e8606 	br	2d88 <___svfprintf_internal_r+0xfe0>
    3370:	0029883a 	mov	r20,zero
    3374:	a5000c04 	addi	r20,r20,48
    3378:	dc001dc4 	addi	r16,sp,119
    337c:	dd001dc5 	stb	r20,119(sp)
    3380:	003f3806 	br	3064 <___svfprintf_internal_r+0x12bc>
    3384:	d9402c17 	ldw	r5,176(sp)
    3388:	d9801e04 	addi	r6,sp,120
    338c:	9809883a 	mov	r4,r19
    3390:	00075540 	call	7554 <__ssprint_r>
    3394:	103b691e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    3398:	d8c02017 	ldw	r3,128(sp)
    339c:	da000404 	addi	r8,sp,16
    33a0:	003c9506 	br	25f8 <___svfprintf_internal_r+0x850>
    33a4:	d9003617 	ldw	r4,216(sp)
    33a8:	d9403717 	ldw	r5,220(sp)
    33ac:	da003e15 	stw	r8,248(sp)
    33b0:	00073180 	call	7318 <__fpclassifyd>
    33b4:	da003e17 	ldw	r8,248(sp)
    33b8:	1000bd1e 	bne	r2,zero,36b0 <___svfprintf_internal_r+0x1908>
    33bc:	008011c4 	movi	r2,71
    33c0:	14411e0e 	bge	r2,r17,383c <___svfprintf_internal_r+0x1a94>
    33c4:	040000b4 	movhi	r16,2
    33c8:	8429cc04 	addi	r16,r16,-22736
    33cc:	00c000c4 	movi	r3,3
    33d0:	00bfdfc4 	movi	r2,-129
    33d4:	d8c02a15 	stw	r3,168(sp)
    33d8:	90a4703a 	and	r18,r18,r2
    33dc:	df002783 	ldbu	fp,158(sp)
    33e0:	d8c02e15 	stw	r3,184(sp)
    33e4:	d8002915 	stw	zero,164(sp)
    33e8:	d8003215 	stw	zero,200(sp)
    33ec:	003c1c06 	br	2460 <___svfprintf_internal_r+0x6b8>
    33f0:	9080100c 	andi	r2,r18,64
    33f4:	d8002785 	stb	zero,158(sp)
    33f8:	10009426 	beq	r2,zero,364c <___svfprintf_internal_r+0x18a4>
    33fc:	d8c02d17 	ldw	r3,180(sp)
    3400:	d9002917 	ldw	r4,164(sp)
    3404:	002d883a 	mov	r22,zero
    3408:	18800104 	addi	r2,r3,4
    340c:	1d00000b 	ldhu	r20,0(r3)
    3410:	203ec10e 	bge	r4,zero,2f18 <___svfprintf_internal_r+0x1170>
    3414:	a586b03a 	or	r3,r20,r22
    3418:	d8802d15 	stw	r2,180(sp)
    341c:	183ec21e 	bne	r3,zero,2f28 <___svfprintf_internal_r+0x1180>
    3420:	0039883a 	mov	fp,zero
    3424:	0005883a 	mov	r2,zero
    3428:	003db806 	br	2b0c <___svfprintf_internal_r+0xd64>
    342c:	d8802d17 	ldw	r2,180(sp)
    3430:	d8c02d17 	ldw	r3,180(sp)
    3434:	d9002d17 	ldw	r4,180(sp)
    3438:	10800017 	ldw	r2,0(r2)
    343c:	18c00117 	ldw	r3,4(r3)
    3440:	21000204 	addi	r4,r4,8
    3444:	d8803615 	stw	r2,216(sp)
    3448:	d8c03715 	stw	r3,220(sp)
    344c:	d9002d15 	stw	r4,180(sp)
    3450:	003b8206 	br	225c <___svfprintf_internal_r+0x4b4>
    3454:	9080100c 	andi	r2,r18,64
    3458:	10010726 	beq	r2,zero,3878 <___svfprintf_internal_r+0x1ad0>
    345c:	d8c02d17 	ldw	r3,180(sp)
    3460:	1d00000f 	ldh	r20,0(r3)
    3464:	18c00104 	addi	r3,r3,4
    3468:	d8c02d15 	stw	r3,180(sp)
    346c:	a02dd7fa 	srai	r22,r20,31
    3470:	b005883a 	mov	r2,r22
    3474:	003ba206 	br	2300 <___svfprintf_internal_r+0x558>
    3478:	9080100c 	andi	r2,r18,64
    347c:	10010526 	beq	r2,zero,3894 <___svfprintf_internal_r+0x1aec>
    3480:	d9002d17 	ldw	r4,180(sp)
    3484:	002d883a 	mov	r22,zero
    3488:	2500000b 	ldhu	r20,0(r4)
    348c:	21000104 	addi	r4,r4,4
    3490:	d9002d15 	stw	r4,180(sp)
    3494:	003cfe06 	br	2890 <___svfprintf_internal_r+0xae8>
    3498:	bc400007 	ldb	r17,0(r23)
    349c:	003a9606 	br	1ef8 <___svfprintf_internal_r+0x150>
    34a0:	9080040c 	andi	r2,r18,16
    34a4:	10010126 	beq	r2,zero,38ac <___svfprintf_internal_r+0x1b04>
    34a8:	d9402d17 	ldw	r5,180(sp)
    34ac:	d8c02f17 	ldw	r3,188(sp)
    34b0:	28800017 	ldw	r2,0(r5)
    34b4:	29400104 	addi	r5,r5,4
    34b8:	d9402d15 	stw	r5,180(sp)
    34bc:	10c00015 	stw	r3,0(r2)
    34c0:	003a6406 	br	1e54 <___svfprintf_internal_r+0xac>
    34c4:	d9002917 	ldw	r4,164(sp)
    34c8:	d8002785 	stb	zero,158(sp)
    34cc:	203d8d16 	blt	r4,zero,2b04 <___svfprintf_internal_r+0xd5c>
    34d0:	00bfdfc4 	movi	r2,-129
    34d4:	90a4703a 	and	r18,r18,r2
    34d8:	003b0506 	br	20f0 <___svfprintf_internal_r+0x348>
    34dc:	014000b4 	movhi	r5,2
    34e0:	2969d984 	addi	r5,r5,-22682
    34e4:	d9402b15 	stw	r5,172(sp)
    34e8:	d9402b17 	ldw	r5,172(sp)
    34ec:	1c47883a 	add	r3,r3,r17
    34f0:	10800044 	addi	r2,r2,1
    34f4:	41400015 	stw	r5,0(r8)
    34f8:	44400115 	stw	r17,4(r8)
    34fc:	d8c02015 	stw	r3,128(sp)
    3500:	d8801f15 	stw	r2,124(sp)
    3504:	010001c4 	movi	r4,7
    3508:	20bf3016 	blt	r4,r2,31cc <___svfprintf_internal_r+0x1424>
    350c:	42000204 	addi	r8,r8,8
    3510:	003f3506 	br	31e8 <___svfprintf_internal_r+0x1440>
    3514:	010000b4 	movhi	r4,2
    3518:	2129d984 	addi	r4,r4,-22682
    351c:	d9002b15 	stw	r4,172(sp)
    3520:	003c5e06 	br	269c <___svfprintf_internal_r+0x8f4>
    3524:	d9402c17 	ldw	r5,176(sp)
    3528:	d9801e04 	addi	r6,sp,120
    352c:	9809883a 	mov	r4,r19
    3530:	00075540 	call	7554 <__ssprint_r>
    3534:	103b011e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    3538:	d8c02017 	ldw	r3,128(sp)
    353c:	da000404 	addi	r8,sp,16
    3540:	003d9306 	br	2b90 <___svfprintf_internal_r+0xde8>
    3544:	d8801f17 	ldw	r2,124(sp)
    3548:	014000b4 	movhi	r5,2
    354c:	01000044 	movi	r4,1
    3550:	18c00044 	addi	r3,r3,1
    3554:	10800044 	addi	r2,r2,1
    3558:	2969d904 	addi	r5,r5,-22684
    355c:	41000115 	stw	r4,4(r8)
    3560:	41400015 	stw	r5,0(r8)
    3564:	d8c02015 	stw	r3,128(sp)
    3568:	d8801f15 	stw	r2,124(sp)
    356c:	010001c4 	movi	r4,7
    3570:	2080b516 	blt	r4,r2,3848 <___svfprintf_internal_r+0x1aa0>
    3574:	42000204 	addi	r8,r8,8
    3578:	8800041e 	bne	r17,zero,358c <___svfprintf_internal_r+0x17e4>
    357c:	d8803317 	ldw	r2,204(sp)
    3580:	1000021e 	bne	r2,zero,358c <___svfprintf_internal_r+0x17e4>
    3584:	9080004c 	andi	r2,r18,1
    3588:	103c5b26 	beq	r2,zero,26f8 <___svfprintf_internal_r+0x950>
    358c:	d9003817 	ldw	r4,224(sp)
    3590:	d8801f17 	ldw	r2,124(sp)
    3594:	d9403417 	ldw	r5,208(sp)
    3598:	20c7883a 	add	r3,r4,r3
    359c:	10800044 	addi	r2,r2,1
    35a0:	41000115 	stw	r4,4(r8)
    35a4:	41400015 	stw	r5,0(r8)
    35a8:	d8c02015 	stw	r3,128(sp)
    35ac:	d8801f15 	stw	r2,124(sp)
    35b0:	010001c4 	movi	r4,7
    35b4:	20818016 	blt	r4,r2,3bb8 <___svfprintf_internal_r+0x1e10>
    35b8:	42000204 	addi	r8,r8,8
    35bc:	0463c83a 	sub	r17,zero,r17
    35c0:	0440cb0e 	bge	zero,r17,38f0 <___svfprintf_internal_r+0x1b48>
    35c4:	05800404 	movi	r22,16
    35c8:	b440e80e 	bge	r22,r17,396c <___svfprintf_internal_r+0x1bc4>
    35cc:	014000b4 	movhi	r5,2
    35d0:	2969d984 	addi	r5,r5,-22682
    35d4:	d9402b15 	stw	r5,172(sp)
    35d8:	070001c4 	movi	fp,7
    35dc:	dd002c17 	ldw	r20,176(sp)
    35e0:	00000306 	br	35f0 <___svfprintf_internal_r+0x1848>
    35e4:	42000204 	addi	r8,r8,8
    35e8:	8c7ffc04 	addi	r17,r17,-16
    35ec:	b440e20e 	bge	r22,r17,3978 <___svfprintf_internal_r+0x1bd0>
    35f0:	18c00404 	addi	r3,r3,16
    35f4:	10800044 	addi	r2,r2,1
    35f8:	45400015 	stw	r21,0(r8)
    35fc:	45800115 	stw	r22,4(r8)
    3600:	d8c02015 	stw	r3,128(sp)
    3604:	d8801f15 	stw	r2,124(sp)
    3608:	e0bff60e 	bge	fp,r2,35e4 <___svfprintf_internal_r+0x183c>
    360c:	d9801e04 	addi	r6,sp,120
    3610:	a00b883a 	mov	r5,r20
    3614:	9809883a 	mov	r4,r19
    3618:	00075540 	call	7554 <__ssprint_r>
    361c:	103ac71e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    3620:	d8c02017 	ldw	r3,128(sp)
    3624:	d8801f17 	ldw	r2,124(sp)
    3628:	da000404 	addi	r8,sp,16
    362c:	003fee06 	br	35e8 <___svfprintf_internal_r+0x1840>
    3630:	d8c02d17 	ldw	r3,180(sp)
    3634:	d9002917 	ldw	r4,164(sp)
    3638:	002d883a 	mov	r22,zero
    363c:	18800104 	addi	r2,r3,4
    3640:	1d000017 	ldw	r20,0(r3)
    3644:	203e7d0e 	bge	r4,zero,303c <___svfprintf_internal_r+0x1294>
    3648:	003eda06 	br	31b4 <___svfprintf_internal_r+0x140c>
    364c:	d9402d17 	ldw	r5,180(sp)
    3650:	d8c02917 	ldw	r3,164(sp)
    3654:	002d883a 	mov	r22,zero
    3658:	28800104 	addi	r2,r5,4
    365c:	2d000017 	ldw	r20,0(r5)
    3660:	183e2d0e 	bge	r3,zero,2f18 <___svfprintf_internal_r+0x1170>
    3664:	003f6b06 	br	3414 <___svfprintf_internal_r+0x166c>
    3668:	d8c02d15 	stw	r3,180(sp)
    366c:	0039883a 	mov	fp,zero
    3670:	003ed206 	br	31bc <___svfprintf_internal_r+0x1414>
    3674:	bc400043 	ldbu	r17,1(r23)
    3678:	94800814 	ori	r18,r18,32
    367c:	bdc00044 	addi	r23,r23,1
    3680:	8c403fcc 	andi	r17,r17,255
    3684:	8c40201c 	xori	r17,r17,128
    3688:	8c7fe004 	addi	r17,r17,-128
    368c:	003a1a06 	br	1ef8 <___svfprintf_internal_r+0x150>
    3690:	d9402c17 	ldw	r5,176(sp)
    3694:	d9801e04 	addi	r6,sp,120
    3698:	9809883a 	mov	r4,r19
    369c:	00075540 	call	7554 <__ssprint_r>
    36a0:	103aa61e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    36a4:	d8c02017 	ldw	r3,128(sp)
    36a8:	da000404 	addi	r8,sp,16
    36ac:	003d4a06 	br	2bd8 <___svfprintf_internal_r+0xe30>
    36b0:	d9002917 	ldw	r4,164(sp)
    36b4:	05bff7c4 	movi	r22,-33
    36b8:	00bfffc4 	movi	r2,-1
    36bc:	8dac703a 	and	r22,r17,r22
    36c0:	20806a26 	beq	r4,r2,386c <___svfprintf_internal_r+0x1ac4>
    36c4:	008011c4 	movi	r2,71
    36c8:	b0813726 	beq	r22,r2,3ba8 <___svfprintf_internal_r+0x1e00>
    36cc:	d9003717 	ldw	r4,220(sp)
    36d0:	90c04014 	ori	r3,r18,256
    36d4:	d8c02b15 	stw	r3,172(sp)
    36d8:	20015d16 	blt	r4,zero,3c50 <___svfprintf_internal_r+0x1ea8>
    36dc:	dd003717 	ldw	r20,220(sp)
    36e0:	d8002a05 	stb	zero,168(sp)
    36e4:	00801984 	movi	r2,102
    36e8:	88814026 	beq	r17,r2,3bec <___svfprintf_internal_r+0x1e44>
    36ec:	00801184 	movi	r2,70
    36f0:	88817126 	beq	r17,r2,3cb8 <___svfprintf_internal_r+0x1f10>
    36f4:	00801144 	movi	r2,69
    36f8:	b0816226 	beq	r22,r2,3c84 <___svfprintf_internal_r+0x1edc>
    36fc:	d8c02917 	ldw	r3,164(sp)
    3700:	d8802104 	addi	r2,sp,132
    3704:	d8800315 	stw	r2,12(sp)
    3708:	d9403617 	ldw	r5,216(sp)
    370c:	d8802504 	addi	r2,sp,148
    3710:	d8800215 	stw	r2,8(sp)
    3714:	d8802604 	addi	r2,sp,152
    3718:	d8c00015 	stw	r3,0(sp)
    371c:	d8800115 	stw	r2,4(sp)
    3720:	01c00084 	movi	r7,2
    3724:	a00d883a 	mov	r6,r20
    3728:	9809883a 	mov	r4,r19
    372c:	d8c03d15 	stw	r3,244(sp)
    3730:	da003e15 	stw	r8,248(sp)
    3734:	00041800 	call	4180 <_dtoa_r>
    3738:	1021883a 	mov	r16,r2
    373c:	008019c4 	movi	r2,103
    3740:	d8c03d17 	ldw	r3,244(sp)
    3744:	da003e17 	ldw	r8,248(sp)
    3748:	8880e726 	beq	r17,r2,3ae8 <___svfprintf_internal_r+0x1d40>
    374c:	008011c4 	movi	r2,71
    3750:	8880d426 	beq	r17,r2,3aa4 <___svfprintf_internal_r+0x1cfc>
    3754:	80f9883a 	add	fp,r16,r3
    3758:	d9003617 	ldw	r4,216(sp)
    375c:	000d883a 	mov	r6,zero
    3760:	000f883a 	mov	r7,zero
    3764:	a00b883a 	mov	r5,r20
    3768:	da003e15 	stw	r8,248(sp)
    376c:	000b4380 	call	b438 <__eqdf2>
    3770:	da003e17 	ldw	r8,248(sp)
    3774:	1000e426 	beq	r2,zero,3b08 <___svfprintf_internal_r+0x1d60>
    3778:	d8802117 	ldw	r2,132(sp)
    377c:	1700062e 	bgeu	r2,fp,3798 <___svfprintf_internal_r+0x19f0>
    3780:	01000c04 	movi	r4,48
    3784:	10c00044 	addi	r3,r2,1
    3788:	d8c02115 	stw	r3,132(sp)
    378c:	11000005 	stb	r4,0(r2)
    3790:	d8802117 	ldw	r2,132(sp)
    3794:	173ffb36 	bltu	r2,fp,3784 <___svfprintf_internal_r+0x19dc>
    3798:	1405c83a 	sub	r2,r2,r16
    379c:	d8803315 	stw	r2,204(sp)
    37a0:	008011c4 	movi	r2,71
    37a4:	b080c526 	beq	r22,r2,3abc <___svfprintf_internal_r+0x1d14>
    37a8:	00801944 	movi	r2,101
    37ac:	1441d90e 	bge	r2,r17,3f14 <___svfprintf_internal_r+0x216c>
    37b0:	d8c02617 	ldw	r3,152(sp)
    37b4:	00801984 	movi	r2,102
    37b8:	d8c03215 	stw	r3,200(sp)
    37bc:	88813426 	beq	r17,r2,3c90 <___svfprintf_internal_r+0x1ee8>
    37c0:	d8c03217 	ldw	r3,200(sp)
    37c4:	d9003317 	ldw	r4,204(sp)
    37c8:	19012516 	blt	r3,r4,3c60 <___svfprintf_internal_r+0x1eb8>
    37cc:	9480004c 	andi	r18,r18,1
    37d0:	9001841e 	bne	r18,zero,3de4 <___svfprintf_internal_r+0x203c>
    37d4:	1805883a 	mov	r2,r3
    37d8:	1801cc16 	blt	r3,zero,3f0c <___svfprintf_internal_r+0x2164>
    37dc:	d8c03217 	ldw	r3,200(sp)
    37e0:	044019c4 	movi	r17,103
    37e4:	d8c02e15 	stw	r3,184(sp)
    37e8:	df002a07 	ldb	fp,168(sp)
    37ec:	e000a61e 	bne	fp,zero,3a88 <___svfprintf_internal_r+0x1ce0>
    37f0:	df002783 	ldbu	fp,158(sp)
    37f4:	d8802a15 	stw	r2,168(sp)
    37f8:	dc802b17 	ldw	r18,172(sp)
    37fc:	d8002915 	stw	zero,164(sp)
    3800:	003b1706 	br	2460 <___svfprintf_internal_r+0x6b8>
    3804:	040000b4 	movhi	r16,2
    3808:	8429c904 	addi	r16,r16,-22748
    380c:	003aa606 	br	22a8 <___svfprintf_internal_r+0x500>
    3810:	d9003917 	ldw	r4,228(sp)
    3814:	04001004 	movi	r16,64
    3818:	800b883a 	mov	r5,r16
    381c:	00058e40 	call	58e4 <_malloc_r>
    3820:	d9002c17 	ldw	r4,176(sp)
    3824:	20800015 	stw	r2,0(r4)
    3828:	20800415 	stw	r2,16(r4)
    382c:	1001cb26 	beq	r2,zero,3f5c <___svfprintf_internal_r+0x21b4>
    3830:	d8802c17 	ldw	r2,176(sp)
    3834:	14000515 	stw	r16,20(r2)
    3838:	00397606 	br	1e14 <___svfprintf_internal_r+0x6c>
    383c:	040000b4 	movhi	r16,2
    3840:	8429cb04 	addi	r16,r16,-22740
    3844:	003ee106 	br	33cc <___svfprintf_internal_r+0x1624>
    3848:	d9402c17 	ldw	r5,176(sp)
    384c:	d9801e04 	addi	r6,sp,120
    3850:	9809883a 	mov	r4,r19
    3854:	00075540 	call	7554 <__ssprint_r>
    3858:	103a381e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    385c:	dc402617 	ldw	r17,152(sp)
    3860:	d8c02017 	ldw	r3,128(sp)
    3864:	da000404 	addi	r8,sp,16
    3868:	003f4306 	br	3578 <___svfprintf_internal_r+0x17d0>
    386c:	01400184 	movi	r5,6
    3870:	d9402915 	stw	r5,164(sp)
    3874:	003f9506 	br	36cc <___svfprintf_internal_r+0x1924>
    3878:	d9002d17 	ldw	r4,180(sp)
    387c:	25000017 	ldw	r20,0(r4)
    3880:	21000104 	addi	r4,r4,4
    3884:	d9002d15 	stw	r4,180(sp)
    3888:	a02dd7fa 	srai	r22,r20,31
    388c:	b005883a 	mov	r2,r22
    3890:	003a9b06 	br	2300 <___svfprintf_internal_r+0x558>
    3894:	d9402d17 	ldw	r5,180(sp)
    3898:	002d883a 	mov	r22,zero
    389c:	2d000017 	ldw	r20,0(r5)
    38a0:	29400104 	addi	r5,r5,4
    38a4:	d9402d15 	stw	r5,180(sp)
    38a8:	003bf906 	br	2890 <___svfprintf_internal_r+0xae8>
    38ac:	9480100c 	andi	r18,r18,64
    38b0:	90006e26 	beq	r18,zero,3a6c <___svfprintf_internal_r+0x1cc4>
    38b4:	d9002d17 	ldw	r4,180(sp)
    38b8:	d9402f17 	ldw	r5,188(sp)
    38bc:	20800017 	ldw	r2,0(r4)
    38c0:	21000104 	addi	r4,r4,4
    38c4:	d9002d15 	stw	r4,180(sp)
    38c8:	1140000d 	sth	r5,0(r2)
    38cc:	00396106 	br	1e54 <___svfprintf_internal_r+0xac>
    38d0:	d9402c17 	ldw	r5,176(sp)
    38d4:	d9801e04 	addi	r6,sp,120
    38d8:	9809883a 	mov	r4,r19
    38dc:	00075540 	call	7554 <__ssprint_r>
    38e0:	103a161e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    38e4:	d8c02017 	ldw	r3,128(sp)
    38e8:	d8801f17 	ldw	r2,124(sp)
    38ec:	da000404 	addi	r8,sp,16
    38f0:	d9403317 	ldw	r5,204(sp)
    38f4:	10800044 	addi	r2,r2,1
    38f8:	44000015 	stw	r16,0(r8)
    38fc:	28c7883a 	add	r3,r5,r3
    3900:	003b7706 	br	26e0 <___svfprintf_internal_r+0x938>
    3904:	8009883a 	mov	r4,r16
    3908:	da003e15 	stw	r8,248(sp)
    390c:	00074bc0 	call	74bc <strlen>
    3910:	d8802e15 	stw	r2,184(sp)
    3914:	da003e17 	ldw	r8,248(sp)
    3918:	103c280e 	bge	r2,zero,29bc <___svfprintf_internal_r+0xc14>
    391c:	0005883a 	mov	r2,zero
    3920:	003c2606 	br	29bc <___svfprintf_internal_r+0xc14>
    3924:	00bfffc4 	movi	r2,-1
    3928:	003a0906 	br	2150 <___svfprintf_internal_r+0x3a8>
    392c:	010000b4 	movhi	r4,2
    3930:	2129dd84 	addi	r4,r4,-22666
    3934:	d9003515 	stw	r4,212(sp)
    3938:	003b0606 	br	2554 <___svfprintf_internal_r+0x7ac>
    393c:	013fffc4 	movi	r4,-1
    3940:	003a2706 	br	21e0 <___svfprintf_internal_r+0x438>
    3944:	d9402c17 	ldw	r5,176(sp)
    3948:	d9801e04 	addi	r6,sp,120
    394c:	9809883a 	mov	r4,r19
    3950:	00075540 	call	7554 <__ssprint_r>
    3954:	1039f91e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    3958:	d8c02017 	ldw	r3,128(sp)
    395c:	da000404 	addi	r8,sp,16
    3960:	003d8406 	br	2f74 <___svfprintf_internal_r+0x11cc>
    3964:	0023883a 	mov	r17,zero
    3968:	003d8306 	br	2f78 <___svfprintf_internal_r+0x11d0>
    396c:	010000b4 	movhi	r4,2
    3970:	2129d984 	addi	r4,r4,-22682
    3974:	d9002b15 	stw	r4,172(sp)
    3978:	d9002b17 	ldw	r4,172(sp)
    397c:	1c47883a 	add	r3,r3,r17
    3980:	10800044 	addi	r2,r2,1
    3984:	41000015 	stw	r4,0(r8)
    3988:	44400115 	stw	r17,4(r8)
    398c:	d8c02015 	stw	r3,128(sp)
    3990:	d8801f15 	stw	r2,124(sp)
    3994:	010001c4 	movi	r4,7
    3998:	20bfcd16 	blt	r4,r2,38d0 <___svfprintf_internal_r+0x1b28>
    399c:	42000204 	addi	r8,r8,8
    39a0:	003fd306 	br	38f0 <___svfprintf_internal_r+0x1b48>
    39a4:	d9402c17 	ldw	r5,176(sp)
    39a8:	d9801e04 	addi	r6,sp,120
    39ac:	9809883a 	mov	r4,r19
    39b0:	00075540 	call	7554 <__ssprint_r>
    39b4:	1039e11e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    39b8:	d8802617 	ldw	r2,152(sp)
    39bc:	d8c02017 	ldw	r3,128(sp)
    39c0:	da000404 	addi	r8,sp,16
    39c4:	003e1c06 	br	3238 <___svfprintf_internal_r+0x1490>
    39c8:	d8802917 	ldw	r2,164(sp)
    39cc:	00c00184 	movi	r3,6
    39d0:	1880012e 	bgeu	r3,r2,39d8 <___svfprintf_internal_r+0x1c30>
    39d4:	1805883a 	mov	r2,r3
    39d8:	d8802e15 	stw	r2,184(sp)
    39dc:	1000f316 	blt	r2,zero,3dac <___svfprintf_internal_r+0x2004>
    39e0:	040000b4 	movhi	r16,2
    39e4:	d8802a15 	stw	r2,168(sp)
    39e8:	dd002d15 	stw	r20,180(sp)
    39ec:	d8002915 	stw	zero,164(sp)
    39f0:	d8003215 	stw	zero,200(sp)
    39f4:	8429d704 	addi	r16,r16,-22692
    39f8:	0039883a 	mov	fp,zero
    39fc:	003a9f06 	br	247c <___svfprintf_internal_r+0x6d4>
    3a00:	010000b4 	movhi	r4,2
    3a04:	2129dd84 	addi	r4,r4,-22666
    3a08:	d9003515 	stw	r4,212(sp)
    3a0c:	003b5f06 	br	278c <___svfprintf_internal_r+0x9e4>
    3a10:	d9402c17 	ldw	r5,176(sp)
    3a14:	d9801e04 	addi	r6,sp,120
    3a18:	9809883a 	mov	r4,r19
    3a1c:	00075540 	call	7554 <__ssprint_r>
    3a20:	1039c61e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    3a24:	d8802617 	ldw	r2,152(sp)
    3a28:	d9403317 	ldw	r5,204(sp)
    3a2c:	d8c02017 	ldw	r3,128(sp)
    3a30:	da000404 	addi	r8,sp,16
    3a34:	2885c83a 	sub	r2,r5,r2
    3a38:	003e1006 	br	327c <___svfprintf_internal_r+0x14d4>
    3a3c:	00800044 	movi	r2,1
    3a40:	10803fcc 	andi	r2,r2,255
    3a44:	00c00044 	movi	r3,1
    3a48:	10fa3526 	beq	r2,r3,2320 <___svfprintf_internal_r+0x578>
    3a4c:	00c00084 	movi	r3,2
    3a50:	10fb9e26 	beq	r2,r3,28cc <___svfprintf_internal_r+0xb24>
    3a54:	003a6406 	br	23e8 <___svfprintf_internal_r+0x640>
    3a58:	0021883a 	mov	r16,zero
    3a5c:	003e0806 	br	3280 <___svfprintf_internal_r+0x14d8>
    3a60:	07000b44 	movi	fp,45
    3a64:	df002785 	stb	fp,158(sp)
    3a68:	003a0b06 	br	2298 <___svfprintf_internal_r+0x4f0>
    3a6c:	d8c02d17 	ldw	r3,180(sp)
    3a70:	d9002f17 	ldw	r4,188(sp)
    3a74:	18800017 	ldw	r2,0(r3)
    3a78:	18c00104 	addi	r3,r3,4
    3a7c:	d8c02d15 	stw	r3,180(sp)
    3a80:	11000015 	stw	r4,0(r2)
    3a84:	0038f306 	br	1e54 <___svfprintf_internal_r+0xac>
    3a88:	00c00b44 	movi	r3,45
    3a8c:	d8c02785 	stb	r3,158(sp)
    3a90:	d8802a15 	stw	r2,168(sp)
    3a94:	dc802b17 	ldw	r18,172(sp)
    3a98:	d8002915 	stw	zero,164(sp)
    3a9c:	07000b44 	movi	fp,45
    3aa0:	003a7306 	br	2470 <___svfprintf_internal_r+0x6c8>
    3aa4:	9080004c 	andi	r2,r18,1
    3aa8:	1000941e 	bne	r2,zero,3cfc <___svfprintf_internal_r+0x1f54>
    3aac:	d8802117 	ldw	r2,132(sp)
    3ab0:	1405c83a 	sub	r2,r2,r16
    3ab4:	d8803315 	stw	r2,204(sp)
    3ab8:	b441161e 	bne	r22,r17,3f14 <___svfprintf_internal_r+0x216c>
    3abc:	dd802617 	ldw	r22,152(sp)
    3ac0:	00bfff44 	movi	r2,-3
    3ac4:	b0801a16 	blt	r22,r2,3b30 <___svfprintf_internal_r+0x1d88>
    3ac8:	d9402917 	ldw	r5,164(sp)
    3acc:	2d801816 	blt	r5,r22,3b30 <___svfprintf_internal_r+0x1d88>
    3ad0:	dd803215 	stw	r22,200(sp)
    3ad4:	003f3a06 	br	37c0 <___svfprintf_internal_r+0x1a18>
    3ad8:	1025883a 	mov	r18,r2
    3adc:	0039883a 	mov	fp,zero
    3ae0:	00800084 	movi	r2,2
    3ae4:	003fd606 	br	3a40 <___svfprintf_internal_r+0x1c98>
    3ae8:	9080004c 	andi	r2,r18,1
    3aec:	103f191e 	bne	r2,zero,3754 <___svfprintf_internal_r+0x19ac>
    3af0:	d8802117 	ldw	r2,132(sp)
    3af4:	003f2806 	br	3798 <___svfprintf_internal_r+0x19f0>
    3af8:	010000b4 	movhi	r4,2
    3afc:	2129d984 	addi	r4,r4,-22682
    3b00:	d9002b15 	stw	r4,172(sp)
    3b04:	003c7c06 	br	2cf8 <___svfprintf_internal_r+0xf50>
    3b08:	e005883a 	mov	r2,fp
    3b0c:	003f2206 	br	3798 <___svfprintf_internal_r+0x19f0>
    3b10:	d9402917 	ldw	r5,164(sp)
    3b14:	df002783 	ldbu	fp,158(sp)
    3b18:	dd002d15 	stw	r20,180(sp)
    3b1c:	d9402a15 	stw	r5,168(sp)
    3b20:	d9402e15 	stw	r5,184(sp)
    3b24:	d8002915 	stw	zero,164(sp)
    3b28:	d8003215 	stw	zero,200(sp)
    3b2c:	003a4c06 	br	2460 <___svfprintf_internal_r+0x6b8>
    3b30:	8c7fff84 	addi	r17,r17,-2
    3b34:	b5bfffc4 	addi	r22,r22,-1
    3b38:	dd802615 	stw	r22,152(sp)
    3b3c:	dc4022c5 	stb	r17,139(sp)
    3b40:	b000c316 	blt	r22,zero,3e50 <___svfprintf_internal_r+0x20a8>
    3b44:	00800ac4 	movi	r2,43
    3b48:	d8802305 	stb	r2,140(sp)
    3b4c:	00800244 	movi	r2,9
    3b50:	15806e16 	blt	r2,r22,3d0c <___svfprintf_internal_r+0x1f64>
    3b54:	00800c04 	movi	r2,48
    3b58:	b5800c04 	addi	r22,r22,48
    3b5c:	d8802345 	stb	r2,141(sp)
    3b60:	dd802385 	stb	r22,142(sp)
    3b64:	d88023c4 	addi	r2,sp,143
    3b68:	df0022c4 	addi	fp,sp,139
    3b6c:	d8c03317 	ldw	r3,204(sp)
    3b70:	1739c83a 	sub	fp,r2,fp
    3b74:	d9003317 	ldw	r4,204(sp)
    3b78:	e0c7883a 	add	r3,fp,r3
    3b7c:	df003b15 	stw	fp,236(sp)
    3b80:	d8c02e15 	stw	r3,184(sp)
    3b84:	00800044 	movi	r2,1
    3b88:	1100b70e 	bge	r2,r4,3e68 <___svfprintf_internal_r+0x20c0>
    3b8c:	d8c02e17 	ldw	r3,184(sp)
    3b90:	18c00044 	addi	r3,r3,1
    3b94:	d8c02e15 	stw	r3,184(sp)
    3b98:	1805883a 	mov	r2,r3
    3b9c:	1800b016 	blt	r3,zero,3e60 <___svfprintf_internal_r+0x20b8>
    3ba0:	d8003215 	stw	zero,200(sp)
    3ba4:	003f1006 	br	37e8 <___svfprintf_internal_r+0x1a40>
    3ba8:	d8802917 	ldw	r2,164(sp)
    3bac:	103ec71e 	bne	r2,zero,36cc <___svfprintf_internal_r+0x1924>
    3bb0:	dc002915 	stw	r16,164(sp)
    3bb4:	003ec506 	br	36cc <___svfprintf_internal_r+0x1924>
    3bb8:	d9402c17 	ldw	r5,176(sp)
    3bbc:	d9801e04 	addi	r6,sp,120
    3bc0:	9809883a 	mov	r4,r19
    3bc4:	00075540 	call	7554 <__ssprint_r>
    3bc8:	10395c1e 	bne	r2,zero,213c <___svfprintf_internal_r+0x394>
    3bcc:	dc402617 	ldw	r17,152(sp)
    3bd0:	d8c02017 	ldw	r3,128(sp)
    3bd4:	d8801f17 	ldw	r2,124(sp)
    3bd8:	da000404 	addi	r8,sp,16
    3bdc:	003e7706 	br	35bc <___svfprintf_internal_r+0x1814>
    3be0:	582f883a 	mov	r23,r11
    3be4:	d8002915 	stw	zero,164(sp)
    3be8:	0038c406 	br	1efc <___svfprintf_internal_r+0x154>
    3bec:	d8c02917 	ldw	r3,164(sp)
    3bf0:	d8802104 	addi	r2,sp,132
    3bf4:	d8800315 	stw	r2,12(sp)
    3bf8:	d9403617 	ldw	r5,216(sp)
    3bfc:	d8802504 	addi	r2,sp,148
    3c00:	d8800215 	stw	r2,8(sp)
    3c04:	d8802604 	addi	r2,sp,152
    3c08:	d8c00015 	stw	r3,0(sp)
    3c0c:	9809883a 	mov	r4,r19
    3c10:	d8800115 	stw	r2,4(sp)
    3c14:	01c000c4 	movi	r7,3
    3c18:	a00d883a 	mov	r6,r20
    3c1c:	da003e15 	stw	r8,248(sp)
    3c20:	00041800 	call	4180 <_dtoa_r>
    3c24:	d9002917 	ldw	r4,164(sp)
    3c28:	da003e17 	ldw	r8,248(sp)
    3c2c:	1021883a 	mov	r16,r2
    3c30:	1139883a 	add	fp,r2,r4
    3c34:	2007883a 	mov	r3,r4
    3c38:	81000007 	ldb	r4,0(r16)
    3c3c:	00800c04 	movi	r2,48
    3c40:	20806f26 	beq	r4,r2,3e00 <___svfprintf_internal_r+0x2058>
    3c44:	d8c02617 	ldw	r3,152(sp)
    3c48:	e0f9883a 	add	fp,fp,r3
    3c4c:	003ec206 	br	3758 <___svfprintf_internal_r+0x19b0>
    3c50:	00c00b44 	movi	r3,45
    3c54:	2520003c 	xorhi	r20,r4,32768
    3c58:	d8c02a05 	stb	r3,168(sp)
    3c5c:	003ea106 	br	36e4 <___svfprintf_internal_r+0x193c>
    3c60:	d8c03217 	ldw	r3,200(sp)
    3c64:	00c0890e 	bge	zero,r3,3e8c <___svfprintf_internal_r+0x20e4>
    3c68:	00800044 	movi	r2,1
    3c6c:	d9003317 	ldw	r4,204(sp)
    3c70:	1105883a 	add	r2,r2,r4
    3c74:	d8802e15 	stw	r2,184(sp)
    3c78:	10005f16 	blt	r2,zero,3df8 <___svfprintf_internal_r+0x2050>
    3c7c:	044019c4 	movi	r17,103
    3c80:	003ed906 	br	37e8 <___svfprintf_internal_r+0x1a40>
    3c84:	d9002917 	ldw	r4,164(sp)
    3c88:	20c00044 	addi	r3,r4,1
    3c8c:	003e9c06 	br	3700 <___svfprintf_internal_r+0x1958>
    3c90:	d9002917 	ldw	r4,164(sp)
    3c94:	00c0680e 	bge	zero,r3,3e38 <___svfprintf_internal_r+0x2090>
    3c98:	2000461e 	bne	r4,zero,3db4 <___svfprintf_internal_r+0x200c>
    3c9c:	9480004c 	andi	r18,r18,1
    3ca0:	9000441e 	bne	r18,zero,3db4 <___svfprintf_internal_r+0x200c>
    3ca4:	1805883a 	mov	r2,r3
    3ca8:	1800a016 	blt	r3,zero,3f2c <___svfprintf_internal_r+0x2184>
    3cac:	d8c03217 	ldw	r3,200(sp)
    3cb0:	d8c02e15 	stw	r3,184(sp)
    3cb4:	003ecc06 	br	37e8 <___svfprintf_internal_r+0x1a40>
    3cb8:	d9402917 	ldw	r5,164(sp)
    3cbc:	d8802104 	addi	r2,sp,132
    3cc0:	d8800315 	stw	r2,12(sp)
    3cc4:	d9400015 	stw	r5,0(sp)
    3cc8:	d8802504 	addi	r2,sp,148
    3ccc:	d9403617 	ldw	r5,216(sp)
    3cd0:	d8800215 	stw	r2,8(sp)
    3cd4:	d8802604 	addi	r2,sp,152
    3cd8:	d8800115 	stw	r2,4(sp)
    3cdc:	01c000c4 	movi	r7,3
    3ce0:	a00d883a 	mov	r6,r20
    3ce4:	9809883a 	mov	r4,r19
    3ce8:	da003e15 	stw	r8,248(sp)
    3cec:	00041800 	call	4180 <_dtoa_r>
    3cf0:	d8c02917 	ldw	r3,164(sp)
    3cf4:	da003e17 	ldw	r8,248(sp)
    3cf8:	1021883a 	mov	r16,r2
    3cfc:	00801184 	movi	r2,70
    3d00:	80f9883a 	add	fp,r16,r3
    3d04:	88bfcc26 	beq	r17,r2,3c38 <___svfprintf_internal_r+0x1e90>
    3d08:	003e9306 	br	3758 <___svfprintf_internal_r+0x19b0>
    3d0c:	df0022c4 	addi	fp,sp,139
    3d10:	dc002915 	stw	r16,164(sp)
    3d14:	9829883a 	mov	r20,r19
    3d18:	e021883a 	mov	r16,fp
    3d1c:	4027883a 	mov	r19,r8
    3d20:	b009883a 	mov	r4,r22
    3d24:	01400284 	movi	r5,10
    3d28:	000a1740 	call	a174 <__modsi3>
    3d2c:	10800c04 	addi	r2,r2,48
    3d30:	843fffc4 	addi	r16,r16,-1
    3d34:	b009883a 	mov	r4,r22
    3d38:	01400284 	movi	r5,10
    3d3c:	80800005 	stb	r2,0(r16)
    3d40:	000a0f00 	call	a0f0 <__divsi3>
    3d44:	102d883a 	mov	r22,r2
    3d48:	00800244 	movi	r2,9
    3d4c:	15bff416 	blt	r2,r22,3d20 <___svfprintf_internal_r+0x1f78>
    3d50:	9811883a 	mov	r8,r19
    3d54:	b0800c04 	addi	r2,r22,48
    3d58:	a027883a 	mov	r19,r20
    3d5c:	8029883a 	mov	r20,r16
    3d60:	a17fffc4 	addi	r5,r20,-1
    3d64:	a0bfffc5 	stb	r2,-1(r20)
    3d68:	dc002917 	ldw	r16,164(sp)
    3d6c:	2f00752e 	bgeu	r5,fp,3f44 <___svfprintf_internal_r+0x219c>
    3d70:	d9c02384 	addi	r7,sp,142
    3d74:	3d0fc83a 	sub	r7,r7,r20
    3d78:	d9002344 	addi	r4,sp,141
    3d7c:	e1cf883a 	add	r7,fp,r7
    3d80:	00000106 	br	3d88 <___svfprintf_internal_r+0x1fe0>
    3d84:	28800003 	ldbu	r2,0(r5)
    3d88:	20800005 	stb	r2,0(r4)
    3d8c:	21000044 	addi	r4,r4,1
    3d90:	29400044 	addi	r5,r5,1
    3d94:	21fffb1e 	bne	r4,r7,3d84 <___svfprintf_internal_r+0x1fdc>
    3d98:	d8802304 	addi	r2,sp,140
    3d9c:	1505c83a 	sub	r2,r2,r20
    3da0:	d8c02344 	addi	r3,sp,141
    3da4:	1885883a 	add	r2,r3,r2
    3da8:	003f7006 	br	3b6c <___svfprintf_internal_r+0x1dc4>
    3dac:	0005883a 	mov	r2,zero
    3db0:	003f0b06 	br	39e0 <___svfprintf_internal_r+0x1c38>
    3db4:	d9002917 	ldw	r4,164(sp)
    3db8:	d8c03217 	ldw	r3,200(sp)
    3dbc:	20800044 	addi	r2,r4,1
    3dc0:	1885883a 	add	r2,r3,r2
    3dc4:	d8802e15 	stw	r2,184(sp)
    3dc8:	103e870e 	bge	r2,zero,37e8 <___svfprintf_internal_r+0x1a40>
    3dcc:	0005883a 	mov	r2,zero
    3dd0:	003e8506 	br	37e8 <___svfprintf_internal_r+0x1a40>
    3dd4:	010000b4 	movhi	r4,2
    3dd8:	2129d984 	addi	r4,r4,-22682
    3ddc:	d9002b15 	stw	r4,172(sp)
    3de0:	003cc506 	br	30f8 <___svfprintf_internal_r+0x1350>
    3de4:	d8c03217 	ldw	r3,200(sp)
    3de8:	18c00044 	addi	r3,r3,1
    3dec:	d8c02e15 	stw	r3,184(sp)
    3df0:	1805883a 	mov	r2,r3
    3df4:	183fa10e 	bge	r3,zero,3c7c <___svfprintf_internal_r+0x1ed4>
    3df8:	0005883a 	mov	r2,zero
    3dfc:	003f9f06 	br	3c7c <___svfprintf_internal_r+0x1ed4>
    3e00:	d9003617 	ldw	r4,216(sp)
    3e04:	000d883a 	mov	r6,zero
    3e08:	000f883a 	mov	r7,zero
    3e0c:	a00b883a 	mov	r5,r20
    3e10:	d8c03d15 	stw	r3,244(sp)
    3e14:	da003e15 	stw	r8,248(sp)
    3e18:	000b4380 	call	b438 <__eqdf2>
    3e1c:	d8c03d17 	ldw	r3,244(sp)
    3e20:	da003e17 	ldw	r8,248(sp)
    3e24:	103f8726 	beq	r2,zero,3c44 <___svfprintf_internal_r+0x1e9c>
    3e28:	00800044 	movi	r2,1
    3e2c:	10c7c83a 	sub	r3,r2,r3
    3e30:	d8c02615 	stw	r3,152(sp)
    3e34:	003f8406 	br	3c48 <___svfprintf_internal_r+0x1ea0>
    3e38:	20000e1e 	bne	r4,zero,3e74 <___svfprintf_internal_r+0x20cc>
    3e3c:	9480004c 	andi	r18,r18,1
    3e40:	90000c1e 	bne	r18,zero,3e74 <___svfprintf_internal_r+0x20cc>
    3e44:	00800044 	movi	r2,1
    3e48:	d8802e15 	stw	r2,184(sp)
    3e4c:	003e6606 	br	37e8 <___svfprintf_internal_r+0x1a40>
    3e50:	00800b44 	movi	r2,45
    3e54:	05adc83a 	sub	r22,zero,r22
    3e58:	d8802305 	stb	r2,140(sp)
    3e5c:	003f3b06 	br	3b4c <___svfprintf_internal_r+0x1da4>
    3e60:	0005883a 	mov	r2,zero
    3e64:	003f4e06 	br	3ba0 <___svfprintf_internal_r+0x1df8>
    3e68:	90a4703a 	and	r18,r18,r2
    3e6c:	903f4a26 	beq	r18,zero,3b98 <___svfprintf_internal_r+0x1df0>
    3e70:	003f4606 	br	3b8c <___svfprintf_internal_r+0x1de4>
    3e74:	d8c02917 	ldw	r3,164(sp)
    3e78:	18c00084 	addi	r3,r3,2
    3e7c:	d8c02e15 	stw	r3,184(sp)
    3e80:	1805883a 	mov	r2,r3
    3e84:	183e580e 	bge	r3,zero,37e8 <___svfprintf_internal_r+0x1a40>
    3e88:	003fd006 	br	3dcc <___svfprintf_internal_r+0x2024>
    3e8c:	00800084 	movi	r2,2
    3e90:	10c5c83a 	sub	r2,r2,r3
    3e94:	003f7506 	br	3c6c <___svfprintf_internal_r+0x1ec4>
    3e98:	d8802d17 	ldw	r2,180(sp)
    3e9c:	d9002d17 	ldw	r4,180(sp)
    3ea0:	bc400043 	ldbu	r17,1(r23)
    3ea4:	10800017 	ldw	r2,0(r2)
    3ea8:	582f883a 	mov	r23,r11
    3eac:	d8802915 	stw	r2,164(sp)
    3eb0:	20800104 	addi	r2,r4,4
    3eb4:	d9002917 	ldw	r4,164(sp)
    3eb8:	d8802d15 	stw	r2,180(sp)
    3ebc:	203df00e 	bge	r4,zero,3680 <___svfprintf_internal_r+0x18d8>
    3ec0:	8c403fcc 	andi	r17,r17,255
    3ec4:	00bfffc4 	movi	r2,-1
    3ec8:	8c40201c 	xori	r17,r17,128
    3ecc:	d8802915 	stw	r2,164(sp)
    3ed0:	8c7fe004 	addi	r17,r17,-128
    3ed4:	00380806 	br	1ef8 <___svfprintf_internal_r+0x150>
    3ed8:	9080004c 	andi	r2,r18,1
    3edc:	0039883a 	mov	fp,zero
    3ee0:	10000726 	beq	r2,zero,3f00 <___svfprintf_internal_r+0x2158>
    3ee4:	d8c02817 	ldw	r3,160(sp)
    3ee8:	dc001dc4 	addi	r16,sp,119
    3eec:	00800c04 	movi	r2,48
    3ef0:	1c07c83a 	sub	r3,r3,r16
    3ef4:	d8801dc5 	stb	r2,119(sp)
    3ef8:	d8c02e15 	stw	r3,184(sp)
    3efc:	00395206 	br	2448 <___svfprintf_internal_r+0x6a0>
    3f00:	d8002e15 	stw	zero,184(sp)
    3f04:	dc001e04 	addi	r16,sp,120
    3f08:	00394f06 	br	2448 <___svfprintf_internal_r+0x6a0>
    3f0c:	0005883a 	mov	r2,zero
    3f10:	003e3206 	br	37dc <___svfprintf_internal_r+0x1a34>
    3f14:	dd802617 	ldw	r22,152(sp)
    3f18:	003f0606 	br	3b34 <___svfprintf_internal_r+0x1d8c>
    3f1c:	d9c02785 	stb	r7,158(sp)
    3f20:	003a5106 	br	2868 <___svfprintf_internal_r+0xac0>
    3f24:	d9c02785 	stb	r7,158(sp)
    3f28:	003a3706 	br	2808 <___svfprintf_internal_r+0xa60>
    3f2c:	0005883a 	mov	r2,zero
    3f30:	003f5e06 	br	3cac <___svfprintf_internal_r+0x1f04>
    3f34:	d9c02785 	stb	r7,158(sp)
    3f38:	00391706 	br	2398 <___svfprintf_internal_r+0x5f0>
    3f3c:	d9c02785 	stb	r7,158(sp)
    3f40:	0038e606 	br	22dc <___svfprintf_internal_r+0x534>
    3f44:	d8802344 	addi	r2,sp,141
    3f48:	003f0806 	br	3b6c <___svfprintf_internal_r+0x1dc4>
    3f4c:	d9c02785 	stb	r7,158(sp)
    3f50:	0038b706 	br	2230 <___svfprintf_internal_r+0x488>
    3f54:	d9c02785 	stb	r7,158(sp)
    3f58:	003adc06 	br	2acc <___svfprintf_internal_r+0xd24>
    3f5c:	d9403917 	ldw	r5,228(sp)
    3f60:	00800304 	movi	r2,12
    3f64:	28800015 	stw	r2,0(r5)
    3f68:	00bfffc4 	movi	r2,-1
    3f6c:	00387806 	br	2150 <___svfprintf_internal_r+0x3a8>
    3f70:	d9c02785 	stb	r7,158(sp)
    3f74:	003abf06 	br	2a74 <___svfprintf_internal_r+0xccc>
    3f78:	d9c02785 	stb	r7,158(sp)
    3f7c:	003a9b06 	br	29ec <___svfprintf_internal_r+0xc44>

00003f80 <quorem>:
    3f80:	defff704 	addi	sp,sp,-36
    3f84:	dc800215 	stw	r18,8(sp)
    3f88:	20800417 	ldw	r2,16(r4)
    3f8c:	2c800417 	ldw	r18,16(r5)
    3f90:	dfc00815 	stw	ra,32(sp)
    3f94:	ddc00715 	stw	r23,28(sp)
    3f98:	dd800615 	stw	r22,24(sp)
    3f9c:	dd400515 	stw	r21,20(sp)
    3fa0:	dd000415 	stw	r20,16(sp)
    3fa4:	dcc00315 	stw	r19,12(sp)
    3fa8:	dc400115 	stw	r17,4(sp)
    3fac:	dc000015 	stw	r16,0(sp)
    3fb0:	14807116 	blt	r2,r18,4178 <quorem+0x1f8>
    3fb4:	94bfffc4 	addi	r18,r18,-1
    3fb8:	94ad883a 	add	r22,r18,r18
    3fbc:	b5ad883a 	add	r22,r22,r22
    3fc0:	2c400504 	addi	r17,r5,20
    3fc4:	8da9883a 	add	r20,r17,r22
    3fc8:	25400504 	addi	r21,r4,20
    3fcc:	282f883a 	mov	r23,r5
    3fd0:	adad883a 	add	r22,r21,r22
    3fd4:	a1400017 	ldw	r5,0(r20)
    3fd8:	2021883a 	mov	r16,r4
    3fdc:	b1000017 	ldw	r4,0(r22)
    3fe0:	29400044 	addi	r5,r5,1
    3fe4:	000a1e80 	call	a1e8 <__udivsi3>
    3fe8:	1027883a 	mov	r19,r2
    3fec:	10002c26 	beq	r2,zero,40a0 <quorem+0x120>
    3ff0:	a813883a 	mov	r9,r21
    3ff4:	880b883a 	mov	r5,r17
    3ff8:	0009883a 	mov	r4,zero
    3ffc:	000d883a 	mov	r6,zero
    4000:	2a000017 	ldw	r8,0(r5)
    4004:	49c00017 	ldw	r7,0(r9)
    4008:	29400104 	addi	r5,r5,4
    400c:	40bfffcc 	andi	r2,r8,65535
    4010:	14c5383a 	mul	r2,r2,r19
    4014:	4010d43a 	srli	r8,r8,16
    4018:	38ffffcc 	andi	r3,r7,65535
    401c:	1105883a 	add	r2,r2,r4
    4020:	1008d43a 	srli	r4,r2,16
    4024:	44d1383a 	mul	r8,r8,r19
    4028:	198d883a 	add	r6,r3,r6
    402c:	10ffffcc 	andi	r3,r2,65535
    4030:	30c7c83a 	sub	r3,r6,r3
    4034:	380ed43a 	srli	r7,r7,16
    4038:	4105883a 	add	r2,r8,r4
    403c:	180dd43a 	srai	r6,r3,16
    4040:	113fffcc 	andi	r4,r2,65535
    4044:	390fc83a 	sub	r7,r7,r4
    4048:	398d883a 	add	r6,r7,r6
    404c:	300e943a 	slli	r7,r6,16
    4050:	18ffffcc 	andi	r3,r3,65535
    4054:	1008d43a 	srli	r4,r2,16
    4058:	38ceb03a 	or	r7,r7,r3
    405c:	49c00015 	stw	r7,0(r9)
    4060:	300dd43a 	srai	r6,r6,16
    4064:	4a400104 	addi	r9,r9,4
    4068:	a17fe52e 	bgeu	r20,r5,4000 <quorem+0x80>
    406c:	b0800017 	ldw	r2,0(r22)
    4070:	10000b1e 	bne	r2,zero,40a0 <quorem+0x120>
    4074:	b0bfff04 	addi	r2,r22,-4
    4078:	a880082e 	bgeu	r21,r2,409c <quorem+0x11c>
    407c:	b0ffff17 	ldw	r3,-4(r22)
    4080:	18000326 	beq	r3,zero,4090 <quorem+0x110>
    4084:	00000506 	br	409c <quorem+0x11c>
    4088:	10c00017 	ldw	r3,0(r2)
    408c:	1800031e 	bne	r3,zero,409c <quorem+0x11c>
    4090:	10bfff04 	addi	r2,r2,-4
    4094:	94bfffc4 	addi	r18,r18,-1
    4098:	a8bffb36 	bltu	r21,r2,4088 <quorem+0x108>
    409c:	84800415 	stw	r18,16(r16)
    40a0:	b80b883a 	mov	r5,r23
    40a4:	8009883a 	mov	r4,r16
    40a8:	0006be40 	call	6be4 <__mcmp>
    40ac:	10002616 	blt	r2,zero,4148 <quorem+0x1c8>
    40b0:	9cc00044 	addi	r19,r19,1
    40b4:	a805883a 	mov	r2,r21
    40b8:	000b883a 	mov	r5,zero
    40bc:	11000017 	ldw	r4,0(r2)
    40c0:	89800017 	ldw	r6,0(r17)
    40c4:	10800104 	addi	r2,r2,4
    40c8:	20ffffcc 	andi	r3,r4,65535
    40cc:	194b883a 	add	r5,r3,r5
    40d0:	30ffffcc 	andi	r3,r6,65535
    40d4:	28c7c83a 	sub	r3,r5,r3
    40d8:	300cd43a 	srli	r6,r6,16
    40dc:	2008d43a 	srli	r4,r4,16
    40e0:	180bd43a 	srai	r5,r3,16
    40e4:	18ffffcc 	andi	r3,r3,65535
    40e8:	2189c83a 	sub	r4,r4,r6
    40ec:	2149883a 	add	r4,r4,r5
    40f0:	200c943a 	slli	r6,r4,16
    40f4:	8c400104 	addi	r17,r17,4
    40f8:	200bd43a 	srai	r5,r4,16
    40fc:	30c6b03a 	or	r3,r6,r3
    4100:	10ffff15 	stw	r3,-4(r2)
    4104:	a47fed2e 	bgeu	r20,r17,40bc <quorem+0x13c>
    4108:	9485883a 	add	r2,r18,r18
    410c:	1085883a 	add	r2,r2,r2
    4110:	a887883a 	add	r3,r21,r2
    4114:	18800017 	ldw	r2,0(r3)
    4118:	10000b1e 	bne	r2,zero,4148 <quorem+0x1c8>
    411c:	18bfff04 	addi	r2,r3,-4
    4120:	a880082e 	bgeu	r21,r2,4144 <quorem+0x1c4>
    4124:	18ffff17 	ldw	r3,-4(r3)
    4128:	18000326 	beq	r3,zero,4138 <quorem+0x1b8>
    412c:	00000506 	br	4144 <quorem+0x1c4>
    4130:	10c00017 	ldw	r3,0(r2)
    4134:	1800031e 	bne	r3,zero,4144 <quorem+0x1c4>
    4138:	10bfff04 	addi	r2,r2,-4
    413c:	94bfffc4 	addi	r18,r18,-1
    4140:	a8bffb36 	bltu	r21,r2,4130 <quorem+0x1b0>
    4144:	84800415 	stw	r18,16(r16)
    4148:	9805883a 	mov	r2,r19
    414c:	dfc00817 	ldw	ra,32(sp)
    4150:	ddc00717 	ldw	r23,28(sp)
    4154:	dd800617 	ldw	r22,24(sp)
    4158:	dd400517 	ldw	r21,20(sp)
    415c:	dd000417 	ldw	r20,16(sp)
    4160:	dcc00317 	ldw	r19,12(sp)
    4164:	dc800217 	ldw	r18,8(sp)
    4168:	dc400117 	ldw	r17,4(sp)
    416c:	dc000017 	ldw	r16,0(sp)
    4170:	dec00904 	addi	sp,sp,36
    4174:	f800283a 	ret
    4178:	0005883a 	mov	r2,zero
    417c:	003ff306 	br	414c <quorem+0x1cc>

00004180 <_dtoa_r>:
    4180:	20801017 	ldw	r2,64(r4)
    4184:	deffde04 	addi	sp,sp,-136
    4188:	df002015 	stw	fp,128(sp)
    418c:	dcc01b15 	stw	r19,108(sp)
    4190:	dc801a15 	stw	r18,104(sp)
    4194:	dc401915 	stw	r17,100(sp)
    4198:	dc001815 	stw	r16,96(sp)
    419c:	dfc02115 	stw	ra,132(sp)
    41a0:	ddc01f15 	stw	r23,124(sp)
    41a4:	dd801e15 	stw	r22,120(sp)
    41a8:	dd401d15 	stw	r21,116(sp)
    41ac:	dd001c15 	stw	r20,112(sp)
    41b0:	d9c00315 	stw	r7,12(sp)
    41b4:	2039883a 	mov	fp,r4
    41b8:	3023883a 	mov	r17,r6
    41bc:	2825883a 	mov	r18,r5
    41c0:	dc002417 	ldw	r16,144(sp)
    41c4:	3027883a 	mov	r19,r6
    41c8:	10000826 	beq	r2,zero,41ec <_dtoa_r+0x6c>
    41cc:	21801117 	ldw	r6,68(r4)
    41d0:	00c00044 	movi	r3,1
    41d4:	100b883a 	mov	r5,r2
    41d8:	1986983a 	sll	r3,r3,r6
    41dc:	11800115 	stw	r6,4(r2)
    41e0:	10c00215 	stw	r3,8(r2)
    41e4:	00063c40 	call	63c4 <_Bfree>
    41e8:	e0001015 	stw	zero,64(fp)
    41ec:	88002e16 	blt	r17,zero,42a8 <_dtoa_r+0x128>
    41f0:	80000015 	stw	zero,0(r16)
    41f4:	889ffc2c 	andhi	r2,r17,32752
    41f8:	00dffc34 	movhi	r3,32752
    41fc:	10c01c26 	beq	r2,r3,4270 <_dtoa_r+0xf0>
    4200:	000d883a 	mov	r6,zero
    4204:	000f883a 	mov	r7,zero
    4208:	9009883a 	mov	r4,r18
    420c:	980b883a 	mov	r5,r19
    4210:	000b4380 	call	b438 <__eqdf2>
    4214:	10002b1e 	bne	r2,zero,42c4 <_dtoa_r+0x144>
    4218:	d9c02317 	ldw	r7,140(sp)
    421c:	00800044 	movi	r2,1
    4220:	38800015 	stw	r2,0(r7)
    4224:	d8802517 	ldw	r2,148(sp)
    4228:	10019e26 	beq	r2,zero,48a4 <_dtoa_r+0x724>
    422c:	d8c02517 	ldw	r3,148(sp)
    4230:	008000b4 	movhi	r2,2
    4234:	10a9d944 	addi	r2,r2,-22683
    4238:	18800015 	stw	r2,0(r3)
    423c:	10bfffc4 	addi	r2,r2,-1
    4240:	dfc02117 	ldw	ra,132(sp)
    4244:	df002017 	ldw	fp,128(sp)
    4248:	ddc01f17 	ldw	r23,124(sp)
    424c:	dd801e17 	ldw	r22,120(sp)
    4250:	dd401d17 	ldw	r21,116(sp)
    4254:	dd001c17 	ldw	r20,112(sp)
    4258:	dcc01b17 	ldw	r19,108(sp)
    425c:	dc801a17 	ldw	r18,104(sp)
    4260:	dc401917 	ldw	r17,100(sp)
    4264:	dc001817 	ldw	r16,96(sp)
    4268:	dec02204 	addi	sp,sp,136
    426c:	f800283a 	ret
    4270:	d8c02317 	ldw	r3,140(sp)
    4274:	0089c3c4 	movi	r2,9999
    4278:	18800015 	stw	r2,0(r3)
    427c:	90017726 	beq	r18,zero,485c <_dtoa_r+0x6dc>
    4280:	008000b4 	movhi	r2,2
    4284:	10a9e504 	addi	r2,r2,-22636
    4288:	d9002517 	ldw	r4,148(sp)
    428c:	203fec26 	beq	r4,zero,4240 <_dtoa_r+0xc0>
    4290:	10c000c7 	ldb	r3,3(r2)
    4294:	1801781e 	bne	r3,zero,4878 <_dtoa_r+0x6f8>
    4298:	10c000c4 	addi	r3,r2,3
    429c:	d9802517 	ldw	r6,148(sp)
    42a0:	30c00015 	stw	r3,0(r6)
    42a4:	003fe606 	br	4240 <_dtoa_r+0xc0>
    42a8:	04e00034 	movhi	r19,32768
    42ac:	9cffffc4 	addi	r19,r19,-1
    42b0:	00800044 	movi	r2,1
    42b4:	8ce6703a 	and	r19,r17,r19
    42b8:	80800015 	stw	r2,0(r16)
    42bc:	9823883a 	mov	r17,r19
    42c0:	003fcc06 	br	41f4 <_dtoa_r+0x74>
    42c4:	d8800204 	addi	r2,sp,8
    42c8:	d8800015 	stw	r2,0(sp)
    42cc:	d9c00104 	addi	r7,sp,4
    42d0:	900b883a 	mov	r5,r18
    42d4:	980d883a 	mov	r6,r19
    42d8:	e009883a 	mov	r4,fp
    42dc:	8820d53a 	srli	r16,r17,20
    42e0:	0006fb00 	call	6fb0 <__d2b>
    42e4:	d8800915 	stw	r2,36(sp)
    42e8:	8001651e 	bne	r16,zero,4880 <_dtoa_r+0x700>
    42ec:	dd800217 	ldw	r22,8(sp)
    42f0:	dc000117 	ldw	r16,4(sp)
    42f4:	00800804 	movi	r2,32
    42f8:	b421883a 	add	r16,r22,r16
    42fc:	80c10c84 	addi	r3,r16,1074
    4300:	10c2d10e 	bge	r2,r3,4e48 <_dtoa_r+0xcc8>
    4304:	00801004 	movi	r2,64
    4308:	81010484 	addi	r4,r16,1042
    430c:	10c7c83a 	sub	r3,r2,r3
    4310:	9108d83a 	srl	r4,r18,r4
    4314:	88e2983a 	sll	r17,r17,r3
    4318:	2448b03a 	or	r4,r4,r17
    431c:	000c8000 	call	c800 <__floatunsidf>
    4320:	017f8434 	movhi	r5,65040
    4324:	01800044 	movi	r6,1
    4328:	1009883a 	mov	r4,r2
    432c:	194b883a 	add	r5,r3,r5
    4330:	843fffc4 	addi	r16,r16,-1
    4334:	d9801115 	stw	r6,68(sp)
    4338:	000d883a 	mov	r6,zero
    433c:	01cffe34 	movhi	r7,16376
    4340:	000bda80 	call	bda8 <__subdf3>
    4344:	0198dbf4 	movhi	r6,25455
    4348:	01cff4f4 	movhi	r7,16339
    434c:	3190d844 	addi	r6,r6,17249
    4350:	39e1e9c4 	addi	r7,r7,-30809
    4354:	1009883a 	mov	r4,r2
    4358:	180b883a 	mov	r5,r3
    435c:	000b6900 	call	b690 <__muldf3>
    4360:	01a2d874 	movhi	r6,35681
    4364:	01cff1f4 	movhi	r7,16327
    4368:	31b22cc4 	addi	r6,r6,-14157
    436c:	39e28a04 	addi	r7,r7,-30168
    4370:	180b883a 	mov	r5,r3
    4374:	1009883a 	mov	r4,r2
    4378:	000a2a40 	call	a2a4 <__adddf3>
    437c:	8009883a 	mov	r4,r16
    4380:	1029883a 	mov	r20,r2
    4384:	1823883a 	mov	r17,r3
    4388:	000c7240 	call	c724 <__floatsidf>
    438c:	019427f4 	movhi	r6,20639
    4390:	01cff4f4 	movhi	r7,16339
    4394:	319e7ec4 	addi	r6,r6,31227
    4398:	39d104c4 	addi	r7,r7,17427
    439c:	1009883a 	mov	r4,r2
    43a0:	180b883a 	mov	r5,r3
    43a4:	000b6900 	call	b690 <__muldf3>
    43a8:	100d883a 	mov	r6,r2
    43ac:	180f883a 	mov	r7,r3
    43b0:	a009883a 	mov	r4,r20
    43b4:	880b883a 	mov	r5,r17
    43b8:	000a2a40 	call	a2a4 <__adddf3>
    43bc:	1009883a 	mov	r4,r2
    43c0:	180b883a 	mov	r5,r3
    43c4:	1029883a 	mov	r20,r2
    43c8:	1823883a 	mov	r17,r3
    43cc:	000c6a40 	call	c6a4 <__fixdfsi>
    43d0:	000d883a 	mov	r6,zero
    43d4:	000f883a 	mov	r7,zero
    43d8:	a009883a 	mov	r4,r20
    43dc:	880b883a 	mov	r5,r17
    43e0:	d8800515 	stw	r2,20(sp)
    43e4:	000b59c0 	call	b59c <__ledf2>
    43e8:	10028716 	blt	r2,zero,4e08 <_dtoa_r+0xc88>
    43ec:	d8c00517 	ldw	r3,20(sp)
    43f0:	00800584 	movi	r2,22
    43f4:	10c27536 	bltu	r2,r3,4dcc <_dtoa_r+0xc4c>
    43f8:	180490fa 	slli	r2,r3,3
    43fc:	00c000b4 	movhi	r3,2
    4400:	18ea0104 	addi	r3,r3,-22524
    4404:	1885883a 	add	r2,r3,r2
    4408:	11000017 	ldw	r4,0(r2)
    440c:	11400117 	ldw	r5,4(r2)
    4410:	900d883a 	mov	r6,r18
    4414:	980f883a 	mov	r7,r19
    4418:	000b4c00 	call	b4c0 <__gedf2>
    441c:	00828d0e 	bge	zero,r2,4e54 <_dtoa_r+0xcd4>
    4420:	d9000517 	ldw	r4,20(sp)
    4424:	d8000e15 	stw	zero,56(sp)
    4428:	213fffc4 	addi	r4,r4,-1
    442c:	d9000515 	stw	r4,20(sp)
    4430:	b42dc83a 	sub	r22,r22,r16
    4434:	b5bfffc4 	addi	r22,r22,-1
    4438:	b0026f16 	blt	r22,zero,4df8 <_dtoa_r+0xc78>
    443c:	d8000815 	stw	zero,32(sp)
    4440:	d9c00517 	ldw	r7,20(sp)
    4444:	38026416 	blt	r7,zero,4dd8 <_dtoa_r+0xc58>
    4448:	b1ed883a 	add	r22,r22,r7
    444c:	d9c00d15 	stw	r7,52(sp)
    4450:	d8000a15 	stw	zero,40(sp)
    4454:	d9800317 	ldw	r6,12(sp)
    4458:	00800244 	movi	r2,9
    445c:	11811436 	bltu	r2,r6,48b0 <_dtoa_r+0x730>
    4460:	00800144 	movi	r2,5
    4464:	1184e10e 	bge	r2,r6,57ec <_dtoa_r+0x166c>
    4468:	31bfff04 	addi	r6,r6,-4
    446c:	d9800315 	stw	r6,12(sp)
    4470:	0023883a 	mov	r17,zero
    4474:	d9800317 	ldw	r6,12(sp)
    4478:	008000c4 	movi	r2,3
    447c:	30836726 	beq	r6,r2,521c <_dtoa_r+0x109c>
    4480:	1183410e 	bge	r2,r6,5188 <_dtoa_r+0x1008>
    4484:	d9c00317 	ldw	r7,12(sp)
    4488:	00800104 	movi	r2,4
    448c:	38827c26 	beq	r7,r2,4e80 <_dtoa_r+0xd00>
    4490:	00800144 	movi	r2,5
    4494:	3884c41e 	bne	r7,r2,57a8 <_dtoa_r+0x1628>
    4498:	00800044 	movi	r2,1
    449c:	d8800b15 	stw	r2,44(sp)
    44a0:	d8c00517 	ldw	r3,20(sp)
    44a4:	d9002217 	ldw	r4,136(sp)
    44a8:	1907883a 	add	r3,r3,r4
    44ac:	19800044 	addi	r6,r3,1
    44b0:	d8c00c15 	stw	r3,48(sp)
    44b4:	d9800615 	stw	r6,24(sp)
    44b8:	0183a40e 	bge	zero,r6,534c <_dtoa_r+0x11cc>
    44bc:	d9800617 	ldw	r6,24(sp)
    44c0:	3021883a 	mov	r16,r6
    44c4:	e0001115 	stw	zero,68(fp)
    44c8:	008005c4 	movi	r2,23
    44cc:	1184c92e 	bgeu	r2,r6,57f4 <_dtoa_r+0x1674>
    44d0:	00c00044 	movi	r3,1
    44d4:	00800104 	movi	r2,4
    44d8:	1085883a 	add	r2,r2,r2
    44dc:	11000504 	addi	r4,r2,20
    44e0:	180b883a 	mov	r5,r3
    44e4:	18c00044 	addi	r3,r3,1
    44e8:	313ffb2e 	bgeu	r6,r4,44d8 <_dtoa_r+0x358>
    44ec:	e1401115 	stw	r5,68(fp)
    44f0:	e009883a 	mov	r4,fp
    44f4:	000631c0 	call	631c <_Balloc>
    44f8:	d8800715 	stw	r2,28(sp)
    44fc:	e0801015 	stw	r2,64(fp)
    4500:	00800384 	movi	r2,14
    4504:	1400f736 	bltu	r2,r16,48e4 <_dtoa_r+0x764>
    4508:	8800f626 	beq	r17,zero,48e4 <_dtoa_r+0x764>
    450c:	d9c00517 	ldw	r7,20(sp)
    4510:	01c39a0e 	bge	zero,r7,537c <_dtoa_r+0x11fc>
    4514:	388003cc 	andi	r2,r7,15
    4518:	100490fa 	slli	r2,r2,3
    451c:	382bd13a 	srai	r21,r7,4
    4520:	00c000b4 	movhi	r3,2
    4524:	18ea0104 	addi	r3,r3,-22524
    4528:	1885883a 	add	r2,r3,r2
    452c:	a8c0040c 	andi	r3,r21,16
    4530:	12400017 	ldw	r9,0(r2)
    4534:	12000117 	ldw	r8,4(r2)
    4538:	18037926 	beq	r3,zero,5320 <_dtoa_r+0x11a0>
    453c:	008000b4 	movhi	r2,2
    4540:	10a9f704 	addi	r2,r2,-22564
    4544:	11800817 	ldw	r6,32(r2)
    4548:	11c00917 	ldw	r7,36(r2)
    454c:	9009883a 	mov	r4,r18
    4550:	980b883a 	mov	r5,r19
    4554:	da001715 	stw	r8,92(sp)
    4558:	da401615 	stw	r9,88(sp)
    455c:	000ab500 	call	ab50 <__divdf3>
    4560:	da001717 	ldw	r8,92(sp)
    4564:	da401617 	ldw	r9,88(sp)
    4568:	ad4003cc 	andi	r21,r21,15
    456c:	040000c4 	movi	r16,3
    4570:	1023883a 	mov	r17,r2
    4574:	1829883a 	mov	r20,r3
    4578:	a8001126 	beq	r21,zero,45c0 <_dtoa_r+0x440>
    457c:	05c000b4 	movhi	r23,2
    4580:	bde9f704 	addi	r23,r23,-22564
    4584:	4805883a 	mov	r2,r9
    4588:	4007883a 	mov	r3,r8
    458c:	a980004c 	andi	r6,r21,1
    4590:	1009883a 	mov	r4,r2
    4594:	a82bd07a 	srai	r21,r21,1
    4598:	180b883a 	mov	r5,r3
    459c:	30000426 	beq	r6,zero,45b0 <_dtoa_r+0x430>
    45a0:	b9800017 	ldw	r6,0(r23)
    45a4:	b9c00117 	ldw	r7,4(r23)
    45a8:	84000044 	addi	r16,r16,1
    45ac:	000b6900 	call	b690 <__muldf3>
    45b0:	bdc00204 	addi	r23,r23,8
    45b4:	a83ff51e 	bne	r21,zero,458c <_dtoa_r+0x40c>
    45b8:	1013883a 	mov	r9,r2
    45bc:	1811883a 	mov	r8,r3
    45c0:	480d883a 	mov	r6,r9
    45c4:	400f883a 	mov	r7,r8
    45c8:	8809883a 	mov	r4,r17
    45cc:	a00b883a 	mov	r5,r20
    45d0:	000ab500 	call	ab50 <__divdf3>
    45d4:	d8800f15 	stw	r2,60(sp)
    45d8:	d8c01015 	stw	r3,64(sp)
    45dc:	d8c00e17 	ldw	r3,56(sp)
    45e0:	18000626 	beq	r3,zero,45fc <_dtoa_r+0x47c>
    45e4:	d9000f17 	ldw	r4,60(sp)
    45e8:	d9401017 	ldw	r5,64(sp)
    45ec:	000d883a 	mov	r6,zero
    45f0:	01cffc34 	movhi	r7,16368
    45f4:	000b59c0 	call	b59c <__ledf2>
    45f8:	10040b16 	blt	r2,zero,5628 <_dtoa_r+0x14a8>
    45fc:	8009883a 	mov	r4,r16
    4600:	000c7240 	call	c724 <__floatsidf>
    4604:	d9800f17 	ldw	r6,60(sp)
    4608:	d9c01017 	ldw	r7,64(sp)
    460c:	1009883a 	mov	r4,r2
    4610:	180b883a 	mov	r5,r3
    4614:	000b6900 	call	b690 <__muldf3>
    4618:	000d883a 	mov	r6,zero
    461c:	01d00734 	movhi	r7,16412
    4620:	1009883a 	mov	r4,r2
    4624:	180b883a 	mov	r5,r3
    4628:	000a2a40 	call	a2a4 <__adddf3>
    462c:	1021883a 	mov	r16,r2
    4630:	d8800617 	ldw	r2,24(sp)
    4634:	047f3034 	movhi	r17,64704
    4638:	1c63883a 	add	r17,r3,r17
    463c:	10031826 	beq	r2,zero,52a0 <_dtoa_r+0x1120>
    4640:	d8c00517 	ldw	r3,20(sp)
    4644:	db000617 	ldw	r12,24(sp)
    4648:	d8c01315 	stw	r3,76(sp)
    464c:	d9000b17 	ldw	r4,44(sp)
    4650:	20038f26 	beq	r4,zero,5490 <_dtoa_r+0x1310>
    4654:	60bfffc4 	addi	r2,r12,-1
    4658:	100490fa 	slli	r2,r2,3
    465c:	00c000b4 	movhi	r3,2
    4660:	18ea0104 	addi	r3,r3,-22524
    4664:	1885883a 	add	r2,r3,r2
    4668:	11800017 	ldw	r6,0(r2)
    466c:	11c00117 	ldw	r7,4(r2)
    4670:	d8800717 	ldw	r2,28(sp)
    4674:	0009883a 	mov	r4,zero
    4678:	014ff834 	movhi	r5,16352
    467c:	db001615 	stw	r12,88(sp)
    4680:	15c00044 	addi	r23,r2,1
    4684:	000ab500 	call	ab50 <__divdf3>
    4688:	800d883a 	mov	r6,r16
    468c:	880f883a 	mov	r7,r17
    4690:	1009883a 	mov	r4,r2
    4694:	180b883a 	mov	r5,r3
    4698:	000bda80 	call	bda8 <__subdf3>
    469c:	d9401017 	ldw	r5,64(sp)
    46a0:	d9000f17 	ldw	r4,60(sp)
    46a4:	102b883a 	mov	r21,r2
    46a8:	d8c01215 	stw	r3,72(sp)
    46ac:	000c6a40 	call	c6a4 <__fixdfsi>
    46b0:	1009883a 	mov	r4,r2
    46b4:	1029883a 	mov	r20,r2
    46b8:	000c7240 	call	c724 <__floatsidf>
    46bc:	d9000f17 	ldw	r4,60(sp)
    46c0:	d9401017 	ldw	r5,64(sp)
    46c4:	100d883a 	mov	r6,r2
    46c8:	180f883a 	mov	r7,r3
    46cc:	000bda80 	call	bda8 <__subdf3>
    46d0:	1823883a 	mov	r17,r3
    46d4:	d8c00717 	ldw	r3,28(sp)
    46d8:	d9401217 	ldw	r5,72(sp)
    46dc:	a2000c04 	addi	r8,r20,48
    46e0:	1021883a 	mov	r16,r2
    46e4:	1a000005 	stb	r8,0(r3)
    46e8:	800d883a 	mov	r6,r16
    46ec:	880f883a 	mov	r7,r17
    46f0:	a809883a 	mov	r4,r21
    46f4:	4029883a 	mov	r20,r8
    46f8:	000b4c00 	call	b4c0 <__gedf2>
    46fc:	00841d16 	blt	zero,r2,5774 <_dtoa_r+0x15f4>
    4700:	800d883a 	mov	r6,r16
    4704:	880f883a 	mov	r7,r17
    4708:	0009883a 	mov	r4,zero
    470c:	014ffc34 	movhi	r5,16368
    4710:	000bda80 	call	bda8 <__subdf3>
    4714:	d9401217 	ldw	r5,72(sp)
    4718:	100d883a 	mov	r6,r2
    471c:	180f883a 	mov	r7,r3
    4720:	a809883a 	mov	r4,r21
    4724:	000b4c00 	call	b4c0 <__gedf2>
    4728:	db001617 	ldw	r12,88(sp)
    472c:	00840e16 	blt	zero,r2,5768 <_dtoa_r+0x15e8>
    4730:	00800044 	movi	r2,1
    4734:	13006b0e 	bge	r2,r12,48e4 <_dtoa_r+0x764>
    4738:	d9000717 	ldw	r4,28(sp)
    473c:	dd800f15 	stw	r22,60(sp)
    4740:	dcc01015 	stw	r19,64(sp)
    4744:	2319883a 	add	r12,r4,r12
    4748:	dcc01217 	ldw	r19,72(sp)
    474c:	602d883a 	mov	r22,r12
    4750:	dc801215 	stw	r18,72(sp)
    4754:	b825883a 	mov	r18,r23
    4758:	00000906 	br	4780 <_dtoa_r+0x600>
    475c:	000bda80 	call	bda8 <__subdf3>
    4760:	a80d883a 	mov	r6,r21
    4764:	980f883a 	mov	r7,r19
    4768:	1009883a 	mov	r4,r2
    476c:	180b883a 	mov	r5,r3
    4770:	000b59c0 	call	b59c <__ledf2>
    4774:	1003e816 	blt	r2,zero,5718 <_dtoa_r+0x1598>
    4778:	b825883a 	mov	r18,r23
    477c:	bd83e926 	beq	r23,r22,5724 <_dtoa_r+0x15a4>
    4780:	a809883a 	mov	r4,r21
    4784:	980b883a 	mov	r5,r19
    4788:	000d883a 	mov	r6,zero
    478c:	01d00934 	movhi	r7,16420
    4790:	000b6900 	call	b690 <__muldf3>
    4794:	000d883a 	mov	r6,zero
    4798:	01d00934 	movhi	r7,16420
    479c:	8009883a 	mov	r4,r16
    47a0:	880b883a 	mov	r5,r17
    47a4:	102b883a 	mov	r21,r2
    47a8:	1827883a 	mov	r19,r3
    47ac:	000b6900 	call	b690 <__muldf3>
    47b0:	180b883a 	mov	r5,r3
    47b4:	1009883a 	mov	r4,r2
    47b8:	1821883a 	mov	r16,r3
    47bc:	1023883a 	mov	r17,r2
    47c0:	000c6a40 	call	c6a4 <__fixdfsi>
    47c4:	1009883a 	mov	r4,r2
    47c8:	1029883a 	mov	r20,r2
    47cc:	000c7240 	call	c724 <__floatsidf>
    47d0:	8809883a 	mov	r4,r17
    47d4:	800b883a 	mov	r5,r16
    47d8:	100d883a 	mov	r6,r2
    47dc:	180f883a 	mov	r7,r3
    47e0:	000bda80 	call	bda8 <__subdf3>
    47e4:	a5000c04 	addi	r20,r20,48
    47e8:	a80d883a 	mov	r6,r21
    47ec:	980f883a 	mov	r7,r19
    47f0:	1009883a 	mov	r4,r2
    47f4:	180b883a 	mov	r5,r3
    47f8:	95000005 	stb	r20,0(r18)
    47fc:	1021883a 	mov	r16,r2
    4800:	1823883a 	mov	r17,r3
    4804:	000b59c0 	call	b59c <__ledf2>
    4808:	bdc00044 	addi	r23,r23,1
    480c:	800d883a 	mov	r6,r16
    4810:	880f883a 	mov	r7,r17
    4814:	0009883a 	mov	r4,zero
    4818:	014ffc34 	movhi	r5,16368
    481c:	103fcf0e 	bge	r2,zero,475c <_dtoa_r+0x5dc>
    4820:	d8c01317 	ldw	r3,76(sp)
    4824:	d8c00515 	stw	r3,20(sp)
    4828:	d9400917 	ldw	r5,36(sp)
    482c:	e009883a 	mov	r4,fp
    4830:	00063c40 	call	63c4 <_Bfree>
    4834:	d9000517 	ldw	r4,20(sp)
    4838:	d9802317 	ldw	r6,140(sp)
    483c:	d9c02517 	ldw	r7,148(sp)
    4840:	b8000005 	stb	zero,0(r23)
    4844:	20800044 	addi	r2,r4,1
    4848:	30800015 	stw	r2,0(r6)
    484c:	3802aa26 	beq	r7,zero,52f8 <_dtoa_r+0x1178>
    4850:	3dc00015 	stw	r23,0(r7)
    4854:	d8800717 	ldw	r2,28(sp)
    4858:	003e7906 	br	4240 <_dtoa_r+0xc0>
    485c:	00800434 	movhi	r2,16
    4860:	10bfffc4 	addi	r2,r2,-1
    4864:	88a2703a 	and	r17,r17,r2
    4868:	883e851e 	bne	r17,zero,4280 <_dtoa_r+0x100>
    486c:	008000b4 	movhi	r2,2
    4870:	10a9e204 	addi	r2,r2,-22648
    4874:	003e8406 	br	4288 <_dtoa_r+0x108>
    4878:	10c00204 	addi	r3,r2,8
    487c:	003e8706 	br	429c <_dtoa_r+0x11c>
    4880:	01400434 	movhi	r5,16
    4884:	297fffc4 	addi	r5,r5,-1
    4888:	994a703a 	and	r5,r19,r5
    488c:	9009883a 	mov	r4,r18
    4890:	843f0044 	addi	r16,r16,-1023
    4894:	294ffc34 	orhi	r5,r5,16368
    4898:	dd800217 	ldw	r22,8(sp)
    489c:	d8001115 	stw	zero,68(sp)
    48a0:	003ea506 	br	4338 <_dtoa_r+0x1b8>
    48a4:	008000b4 	movhi	r2,2
    48a8:	10a9d904 	addi	r2,r2,-22684
    48ac:	003e6406 	br	4240 <_dtoa_r+0xc0>
    48b0:	e0001115 	stw	zero,68(fp)
    48b4:	000b883a 	mov	r5,zero
    48b8:	e009883a 	mov	r4,fp
    48bc:	000631c0 	call	631c <_Balloc>
    48c0:	01bfffc4 	movi	r6,-1
    48c4:	01c00044 	movi	r7,1
    48c8:	d8800715 	stw	r2,28(sp)
    48cc:	d9800c15 	stw	r6,48(sp)
    48d0:	e0801015 	stw	r2,64(fp)
    48d4:	d8000315 	stw	zero,12(sp)
    48d8:	d9c00b15 	stw	r7,44(sp)
    48dc:	d9800615 	stw	r6,24(sp)
    48e0:	d8002215 	stw	zero,136(sp)
    48e4:	d8800117 	ldw	r2,4(sp)
    48e8:	10008916 	blt	r2,zero,4b10 <_dtoa_r+0x990>
    48ec:	d9000517 	ldw	r4,20(sp)
    48f0:	00c00384 	movi	r3,14
    48f4:	19008616 	blt	r3,r4,4b10 <_dtoa_r+0x990>
    48f8:	200490fa 	slli	r2,r4,3
    48fc:	00c000b4 	movhi	r3,2
    4900:	d9802217 	ldw	r6,136(sp)
    4904:	18ea0104 	addi	r3,r3,-22524
    4908:	1885883a 	add	r2,r3,r2
    490c:	14000017 	ldw	r16,0(r2)
    4910:	14400117 	ldw	r17,4(r2)
    4914:	30016316 	blt	r6,zero,4ea4 <_dtoa_r+0xd24>
    4918:	800d883a 	mov	r6,r16
    491c:	880f883a 	mov	r7,r17
    4920:	9009883a 	mov	r4,r18
    4924:	980b883a 	mov	r5,r19
    4928:	000ab500 	call	ab50 <__divdf3>
    492c:	180b883a 	mov	r5,r3
    4930:	1009883a 	mov	r4,r2
    4934:	000c6a40 	call	c6a4 <__fixdfsi>
    4938:	1009883a 	mov	r4,r2
    493c:	102b883a 	mov	r21,r2
    4940:	000c7240 	call	c724 <__floatsidf>
    4944:	800d883a 	mov	r6,r16
    4948:	880f883a 	mov	r7,r17
    494c:	1009883a 	mov	r4,r2
    4950:	180b883a 	mov	r5,r3
    4954:	000b6900 	call	b690 <__muldf3>
    4958:	100d883a 	mov	r6,r2
    495c:	180f883a 	mov	r7,r3
    4960:	9009883a 	mov	r4,r18
    4964:	980b883a 	mov	r5,r19
    4968:	000bda80 	call	bda8 <__subdf3>
    496c:	d9c00717 	ldw	r7,28(sp)
    4970:	1009883a 	mov	r4,r2
    4974:	a8800c04 	addi	r2,r21,48
    4978:	38800005 	stb	r2,0(r7)
    497c:	3dc00044 	addi	r23,r7,1
    4980:	d9c00617 	ldw	r7,24(sp)
    4984:	01800044 	movi	r6,1
    4988:	180b883a 	mov	r5,r3
    498c:	2005883a 	mov	r2,r4
    4990:	39803826 	beq	r7,r6,4a74 <_dtoa_r+0x8f4>
    4994:	000d883a 	mov	r6,zero
    4998:	01d00934 	movhi	r7,16420
    499c:	000b6900 	call	b690 <__muldf3>
    49a0:	000d883a 	mov	r6,zero
    49a4:	000f883a 	mov	r7,zero
    49a8:	1009883a 	mov	r4,r2
    49ac:	180b883a 	mov	r5,r3
    49b0:	1025883a 	mov	r18,r2
    49b4:	1827883a 	mov	r19,r3
    49b8:	000b4380 	call	b438 <__eqdf2>
    49bc:	103f9a26 	beq	r2,zero,4828 <_dtoa_r+0x6a8>
    49c0:	d9c00617 	ldw	r7,24(sp)
    49c4:	d8c00717 	ldw	r3,28(sp)
    49c8:	b829883a 	mov	r20,r23
    49cc:	38bfffc4 	addi	r2,r7,-1
    49d0:	18ad883a 	add	r22,r3,r2
    49d4:	00000a06 	br	4a00 <_dtoa_r+0x880>
    49d8:	000b6900 	call	b690 <__muldf3>
    49dc:	000d883a 	mov	r6,zero
    49e0:	000f883a 	mov	r7,zero
    49e4:	1009883a 	mov	r4,r2
    49e8:	180b883a 	mov	r5,r3
    49ec:	1025883a 	mov	r18,r2
    49f0:	1827883a 	mov	r19,r3
    49f4:	b829883a 	mov	r20,r23
    49f8:	000b4380 	call	b438 <__eqdf2>
    49fc:	103f8a26 	beq	r2,zero,4828 <_dtoa_r+0x6a8>
    4a00:	800d883a 	mov	r6,r16
    4a04:	880f883a 	mov	r7,r17
    4a08:	9009883a 	mov	r4,r18
    4a0c:	980b883a 	mov	r5,r19
    4a10:	000ab500 	call	ab50 <__divdf3>
    4a14:	180b883a 	mov	r5,r3
    4a18:	1009883a 	mov	r4,r2
    4a1c:	000c6a40 	call	c6a4 <__fixdfsi>
    4a20:	1009883a 	mov	r4,r2
    4a24:	102b883a 	mov	r21,r2
    4a28:	000c7240 	call	c724 <__floatsidf>
    4a2c:	800d883a 	mov	r6,r16
    4a30:	880f883a 	mov	r7,r17
    4a34:	1009883a 	mov	r4,r2
    4a38:	180b883a 	mov	r5,r3
    4a3c:	000b6900 	call	b690 <__muldf3>
    4a40:	100d883a 	mov	r6,r2
    4a44:	180f883a 	mov	r7,r3
    4a48:	9009883a 	mov	r4,r18
    4a4c:	980b883a 	mov	r5,r19
    4a50:	000bda80 	call	bda8 <__subdf3>
    4a54:	aa000c04 	addi	r8,r21,48
    4a58:	a2000005 	stb	r8,0(r20)
    4a5c:	000d883a 	mov	r6,zero
    4a60:	01d00934 	movhi	r7,16420
    4a64:	1009883a 	mov	r4,r2
    4a68:	180b883a 	mov	r5,r3
    4a6c:	a5c00044 	addi	r23,r20,1
    4a70:	b53fd91e 	bne	r22,r20,49d8 <_dtoa_r+0x858>
    4a74:	100d883a 	mov	r6,r2
    4a78:	180f883a 	mov	r7,r3
    4a7c:	1009883a 	mov	r4,r2
    4a80:	180b883a 	mov	r5,r3
    4a84:	000a2a40 	call	a2a4 <__adddf3>
    4a88:	100d883a 	mov	r6,r2
    4a8c:	180f883a 	mov	r7,r3
    4a90:	8009883a 	mov	r4,r16
    4a94:	880b883a 	mov	r5,r17
    4a98:	1027883a 	mov	r19,r2
    4a9c:	1825883a 	mov	r18,r3
    4aa0:	000b59c0 	call	b59c <__ledf2>
    4aa4:	10000816 	blt	r2,zero,4ac8 <_dtoa_r+0x948>
    4aa8:	980d883a 	mov	r6,r19
    4aac:	900f883a 	mov	r7,r18
    4ab0:	8009883a 	mov	r4,r16
    4ab4:	880b883a 	mov	r5,r17
    4ab8:	000b4380 	call	b438 <__eqdf2>
    4abc:	103f5a1e 	bne	r2,zero,4828 <_dtoa_r+0x6a8>
    4ac0:	ad40004c 	andi	r21,r21,1
    4ac4:	a83f5826 	beq	r21,zero,4828 <_dtoa_r+0x6a8>
    4ac8:	bd3fffc3 	ldbu	r20,-1(r23)
    4acc:	b8bfffc4 	addi	r2,r23,-1
    4ad0:	1007883a 	mov	r3,r2
    4ad4:	01400e44 	movi	r5,57
    4ad8:	d9800717 	ldw	r6,28(sp)
    4adc:	00000506 	br	4af4 <_dtoa_r+0x974>
    4ae0:	18ffffc4 	addi	r3,r3,-1
    4ae4:	11824726 	beq	r2,r6,5404 <_dtoa_r+0x1284>
    4ae8:	1d000003 	ldbu	r20,0(r3)
    4aec:	102f883a 	mov	r23,r2
    4af0:	10bfffc4 	addi	r2,r2,-1
    4af4:	a1003fcc 	andi	r4,r20,255
    4af8:	2100201c 	xori	r4,r4,128
    4afc:	213fe004 	addi	r4,r4,-128
    4b00:	217ff726 	beq	r4,r5,4ae0 <_dtoa_r+0x960>
    4b04:	a2000044 	addi	r8,r20,1
    4b08:	12000005 	stb	r8,0(r2)
    4b0c:	003f4606 	br	4828 <_dtoa_r+0x6a8>
    4b10:	d9000b17 	ldw	r4,44(sp)
    4b14:	2000c826 	beq	r4,zero,4e38 <_dtoa_r+0xcb8>
    4b18:	d9800317 	ldw	r6,12(sp)
    4b1c:	00c00044 	movi	r3,1
    4b20:	1980f90e 	bge	r3,r6,4f08 <_dtoa_r+0xd88>
    4b24:	d8800617 	ldw	r2,24(sp)
    4b28:	d8c00a17 	ldw	r3,40(sp)
    4b2c:	157fffc4 	addi	r21,r2,-1
    4b30:	1d41f316 	blt	r3,r21,5300 <_dtoa_r+0x1180>
    4b34:	1d6bc83a 	sub	r21,r3,r21
    4b38:	d9c00617 	ldw	r7,24(sp)
    4b3c:	3802aa16 	blt	r7,zero,55e8 <_dtoa_r+0x1468>
    4b40:	dd000817 	ldw	r20,32(sp)
    4b44:	d8800617 	ldw	r2,24(sp)
    4b48:	d8c00817 	ldw	r3,32(sp)
    4b4c:	01400044 	movi	r5,1
    4b50:	e009883a 	mov	r4,fp
    4b54:	1887883a 	add	r3,r3,r2
    4b58:	d8c00815 	stw	r3,32(sp)
    4b5c:	b0ad883a 	add	r22,r22,r2
    4b60:	00067280 	call	6728 <__i2b>
    4b64:	1023883a 	mov	r17,r2
    4b68:	a0000826 	beq	r20,zero,4b8c <_dtoa_r+0xa0c>
    4b6c:	0580070e 	bge	zero,r22,4b8c <_dtoa_r+0xa0c>
    4b70:	a005883a 	mov	r2,r20
    4b74:	b500b916 	blt	r22,r20,4e5c <_dtoa_r+0xcdc>
    4b78:	d9000817 	ldw	r4,32(sp)
    4b7c:	a0a9c83a 	sub	r20,r20,r2
    4b80:	b0adc83a 	sub	r22,r22,r2
    4b84:	2089c83a 	sub	r4,r4,r2
    4b88:	d9000815 	stw	r4,32(sp)
    4b8c:	d9800a17 	ldw	r6,40(sp)
    4b90:	0181810e 	bge	zero,r6,5198 <_dtoa_r+0x1018>
    4b94:	d9c00b17 	ldw	r7,44(sp)
    4b98:	3800b326 	beq	r7,zero,4e68 <_dtoa_r+0xce8>
    4b9c:	a800b226 	beq	r21,zero,4e68 <_dtoa_r+0xce8>
    4ba0:	880b883a 	mov	r5,r17
    4ba4:	a80d883a 	mov	r6,r21
    4ba8:	e009883a 	mov	r4,fp
    4bac:	000695c0 	call	695c <__pow5mult>
    4bb0:	d9800917 	ldw	r6,36(sp)
    4bb4:	100b883a 	mov	r5,r2
    4bb8:	e009883a 	mov	r4,fp
    4bbc:	1023883a 	mov	r17,r2
    4bc0:	00067640 	call	6764 <__multiply>
    4bc4:	1021883a 	mov	r16,r2
    4bc8:	d8800a17 	ldw	r2,40(sp)
    4bcc:	d9400917 	ldw	r5,36(sp)
    4bd0:	e009883a 	mov	r4,fp
    4bd4:	1545c83a 	sub	r2,r2,r21
    4bd8:	d8800a15 	stw	r2,40(sp)
    4bdc:	00063c40 	call	63c4 <_Bfree>
    4be0:	d8c00a17 	ldw	r3,40(sp)
    4be4:	18009f1e 	bne	r3,zero,4e64 <_dtoa_r+0xce4>
    4be8:	05c00044 	movi	r23,1
    4bec:	e009883a 	mov	r4,fp
    4bf0:	b80b883a 	mov	r5,r23
    4bf4:	00067280 	call	6728 <__i2b>
    4bf8:	d9000d17 	ldw	r4,52(sp)
    4bfc:	102b883a 	mov	r21,r2
    4c00:	2000ce26 	beq	r4,zero,4f3c <_dtoa_r+0xdbc>
    4c04:	200d883a 	mov	r6,r4
    4c08:	100b883a 	mov	r5,r2
    4c0c:	e009883a 	mov	r4,fp
    4c10:	000695c0 	call	695c <__pow5mult>
    4c14:	d9800317 	ldw	r6,12(sp)
    4c18:	102b883a 	mov	r21,r2
    4c1c:	b981810e 	bge	r23,r6,5224 <_dtoa_r+0x10a4>
    4c20:	0027883a 	mov	r19,zero
    4c24:	a8800417 	ldw	r2,16(r21)
    4c28:	05c00804 	movi	r23,32
    4c2c:	10800104 	addi	r2,r2,4
    4c30:	1085883a 	add	r2,r2,r2
    4c34:	1085883a 	add	r2,r2,r2
    4c38:	a885883a 	add	r2,r21,r2
    4c3c:	11000017 	ldw	r4,0(r2)
    4c40:	00066100 	call	6610 <__hi0bits>
    4c44:	b885c83a 	sub	r2,r23,r2
    4c48:	1585883a 	add	r2,r2,r22
    4c4c:	108007cc 	andi	r2,r2,31
    4c50:	1000b326 	beq	r2,zero,4f20 <_dtoa_r+0xda0>
    4c54:	00c00804 	movi	r3,32
    4c58:	1887c83a 	sub	r3,r3,r2
    4c5c:	01000104 	movi	r4,4
    4c60:	20c2cd0e 	bge	r4,r3,5798 <_dtoa_r+0x1618>
    4c64:	00c00704 	movi	r3,28
    4c68:	1885c83a 	sub	r2,r3,r2
    4c6c:	d8c00817 	ldw	r3,32(sp)
    4c70:	a0a9883a 	add	r20,r20,r2
    4c74:	b0ad883a 	add	r22,r22,r2
    4c78:	1887883a 	add	r3,r3,r2
    4c7c:	d8c00815 	stw	r3,32(sp)
    4c80:	d9800817 	ldw	r6,32(sp)
    4c84:	0180040e 	bge	zero,r6,4c98 <_dtoa_r+0xb18>
    4c88:	800b883a 	mov	r5,r16
    4c8c:	e009883a 	mov	r4,fp
    4c90:	0006a9c0 	call	6a9c <__lshift>
    4c94:	1021883a 	mov	r16,r2
    4c98:	0580050e 	bge	zero,r22,4cb0 <_dtoa_r+0xb30>
    4c9c:	a80b883a 	mov	r5,r21
    4ca0:	b00d883a 	mov	r6,r22
    4ca4:	e009883a 	mov	r4,fp
    4ca8:	0006a9c0 	call	6a9c <__lshift>
    4cac:	102b883a 	mov	r21,r2
    4cb0:	d9c00e17 	ldw	r7,56(sp)
    4cb4:	3801211e 	bne	r7,zero,513c <_dtoa_r+0xfbc>
    4cb8:	d9800617 	ldw	r6,24(sp)
    4cbc:	0181380e 	bge	zero,r6,51a0 <_dtoa_r+0x1020>
    4cc0:	d8c00b17 	ldw	r3,44(sp)
    4cc4:	1800ab1e 	bne	r3,zero,4f74 <_dtoa_r+0xdf4>
    4cc8:	dc800717 	ldw	r18,28(sp)
    4ccc:	dcc00617 	ldw	r19,24(sp)
    4cd0:	9029883a 	mov	r20,r18
    4cd4:	00000206 	br	4ce0 <_dtoa_r+0xb60>
    4cd8:	00063ec0 	call	63ec <__multadd>
    4cdc:	1021883a 	mov	r16,r2
    4ce0:	a80b883a 	mov	r5,r21
    4ce4:	8009883a 	mov	r4,r16
    4ce8:	0003f800 	call	3f80 <quorem>
    4cec:	10800c04 	addi	r2,r2,48
    4cf0:	90800005 	stb	r2,0(r18)
    4cf4:	94800044 	addi	r18,r18,1
    4cf8:	9507c83a 	sub	r3,r18,r20
    4cfc:	000f883a 	mov	r7,zero
    4d00:	01800284 	movi	r6,10
    4d04:	800b883a 	mov	r5,r16
    4d08:	e009883a 	mov	r4,fp
    4d0c:	1cfff216 	blt	r3,r19,4cd8 <_dtoa_r+0xb58>
    4d10:	1011883a 	mov	r8,r2
    4d14:	d8800617 	ldw	r2,24(sp)
    4d18:	0082370e 	bge	zero,r2,55f8 <_dtoa_r+0x1478>
    4d1c:	d9000717 	ldw	r4,28(sp)
    4d20:	0025883a 	mov	r18,zero
    4d24:	20af883a 	add	r23,r4,r2
    4d28:	01800044 	movi	r6,1
    4d2c:	800b883a 	mov	r5,r16
    4d30:	e009883a 	mov	r4,fp
    4d34:	da001715 	stw	r8,92(sp)
    4d38:	0006a9c0 	call	6a9c <__lshift>
    4d3c:	a80b883a 	mov	r5,r21
    4d40:	1009883a 	mov	r4,r2
    4d44:	d8800915 	stw	r2,36(sp)
    4d48:	0006be40 	call	6be4 <__mcmp>
    4d4c:	da001717 	ldw	r8,92(sp)
    4d50:	0081800e 	bge	zero,r2,5354 <_dtoa_r+0x11d4>
    4d54:	b93fffc3 	ldbu	r4,-1(r23)
    4d58:	b8bfffc4 	addi	r2,r23,-1
    4d5c:	1007883a 	mov	r3,r2
    4d60:	01800e44 	movi	r6,57
    4d64:	d9c00717 	ldw	r7,28(sp)
    4d68:	00000506 	br	4d80 <_dtoa_r+0xc00>
    4d6c:	18ffffc4 	addi	r3,r3,-1
    4d70:	11c12326 	beq	r2,r7,5200 <_dtoa_r+0x1080>
    4d74:	19000003 	ldbu	r4,0(r3)
    4d78:	102f883a 	mov	r23,r2
    4d7c:	10bfffc4 	addi	r2,r2,-1
    4d80:	21403fcc 	andi	r5,r4,255
    4d84:	2940201c 	xori	r5,r5,128
    4d88:	297fe004 	addi	r5,r5,-128
    4d8c:	29bff726 	beq	r5,r6,4d6c <_dtoa_r+0xbec>
    4d90:	21000044 	addi	r4,r4,1
    4d94:	11000005 	stb	r4,0(r2)
    4d98:	a80b883a 	mov	r5,r21
    4d9c:	e009883a 	mov	r4,fp
    4da0:	00063c40 	call	63c4 <_Bfree>
    4da4:	883ea026 	beq	r17,zero,4828 <_dtoa_r+0x6a8>
    4da8:	90000426 	beq	r18,zero,4dbc <_dtoa_r+0xc3c>
    4dac:	94400326 	beq	r18,r17,4dbc <_dtoa_r+0xc3c>
    4db0:	900b883a 	mov	r5,r18
    4db4:	e009883a 	mov	r4,fp
    4db8:	00063c40 	call	63c4 <_Bfree>
    4dbc:	880b883a 	mov	r5,r17
    4dc0:	e009883a 	mov	r4,fp
    4dc4:	00063c40 	call	63c4 <_Bfree>
    4dc8:	003e9706 	br	4828 <_dtoa_r+0x6a8>
    4dcc:	01800044 	movi	r6,1
    4dd0:	d9800e15 	stw	r6,56(sp)
    4dd4:	003d9606 	br	4430 <_dtoa_r+0x2b0>
    4dd8:	d8800817 	ldw	r2,32(sp)
    4ddc:	d8c00517 	ldw	r3,20(sp)
    4de0:	d8000d15 	stw	zero,52(sp)
    4de4:	10c5c83a 	sub	r2,r2,r3
    4de8:	00c9c83a 	sub	r4,zero,r3
    4dec:	d8800815 	stw	r2,32(sp)
    4df0:	d9000a15 	stw	r4,40(sp)
    4df4:	003d9706 	br	4454 <_dtoa_r+0x2d4>
    4df8:	05adc83a 	sub	r22,zero,r22
    4dfc:	dd800815 	stw	r22,32(sp)
    4e00:	002d883a 	mov	r22,zero
    4e04:	003d8e06 	br	4440 <_dtoa_r+0x2c0>
    4e08:	d9000517 	ldw	r4,20(sp)
    4e0c:	000c7240 	call	c724 <__floatsidf>
    4e10:	100d883a 	mov	r6,r2
    4e14:	180f883a 	mov	r7,r3
    4e18:	a009883a 	mov	r4,r20
    4e1c:	880b883a 	mov	r5,r17
    4e20:	000b4380 	call	b438 <__eqdf2>
    4e24:	103d7126 	beq	r2,zero,43ec <_dtoa_r+0x26c>
    4e28:	d9c00517 	ldw	r7,20(sp)
    4e2c:	39ffffc4 	addi	r7,r7,-1
    4e30:	d9c00515 	stw	r7,20(sp)
    4e34:	003d6d06 	br	43ec <_dtoa_r+0x26c>
    4e38:	dd400a17 	ldw	r21,40(sp)
    4e3c:	dd000817 	ldw	r20,32(sp)
    4e40:	0023883a 	mov	r17,zero
    4e44:	003f4806 	br	4b68 <_dtoa_r+0x9e8>
    4e48:	10e3c83a 	sub	r17,r2,r3
    4e4c:	9448983a 	sll	r4,r18,r17
    4e50:	003d3206 	br	431c <_dtoa_r+0x19c>
    4e54:	d8000e15 	stw	zero,56(sp)
    4e58:	003d7506 	br	4430 <_dtoa_r+0x2b0>
    4e5c:	b005883a 	mov	r2,r22
    4e60:	003f4506 	br	4b78 <_dtoa_r+0x9f8>
    4e64:	dc000915 	stw	r16,36(sp)
    4e68:	d9800a17 	ldw	r6,40(sp)
    4e6c:	d9400917 	ldw	r5,36(sp)
    4e70:	e009883a 	mov	r4,fp
    4e74:	000695c0 	call	695c <__pow5mult>
    4e78:	1021883a 	mov	r16,r2
    4e7c:	003f5a06 	br	4be8 <_dtoa_r+0xa68>
    4e80:	01c00044 	movi	r7,1
    4e84:	d9c00b15 	stw	r7,44(sp)
    4e88:	d8802217 	ldw	r2,136(sp)
    4e8c:	0081280e 	bge	zero,r2,5330 <_dtoa_r+0x11b0>
    4e90:	100d883a 	mov	r6,r2
    4e94:	1021883a 	mov	r16,r2
    4e98:	d8800c15 	stw	r2,48(sp)
    4e9c:	d8800615 	stw	r2,24(sp)
    4ea0:	003d8806 	br	44c4 <_dtoa_r+0x344>
    4ea4:	d8800617 	ldw	r2,24(sp)
    4ea8:	00be9b16 	blt	zero,r2,4918 <_dtoa_r+0x798>
    4eac:	10010f1e 	bne	r2,zero,52ec <_dtoa_r+0x116c>
    4eb0:	880b883a 	mov	r5,r17
    4eb4:	000d883a 	mov	r6,zero
    4eb8:	01d00534 	movhi	r7,16404
    4ebc:	8009883a 	mov	r4,r16
    4ec0:	000b6900 	call	b690 <__muldf3>
    4ec4:	900d883a 	mov	r6,r18
    4ec8:	980f883a 	mov	r7,r19
    4ecc:	1009883a 	mov	r4,r2
    4ed0:	180b883a 	mov	r5,r3
    4ed4:	000b4c00 	call	b4c0 <__gedf2>
    4ed8:	002b883a 	mov	r21,zero
    4edc:	0023883a 	mov	r17,zero
    4ee0:	1000bf16 	blt	r2,zero,51e0 <_dtoa_r+0x1060>
    4ee4:	d9802217 	ldw	r6,136(sp)
    4ee8:	ddc00717 	ldw	r23,28(sp)
    4eec:	018c303a 	nor	r6,zero,r6
    4ef0:	d9800515 	stw	r6,20(sp)
    4ef4:	a80b883a 	mov	r5,r21
    4ef8:	e009883a 	mov	r4,fp
    4efc:	00063c40 	call	63c4 <_Bfree>
    4f00:	883e4926 	beq	r17,zero,4828 <_dtoa_r+0x6a8>
    4f04:	003fad06 	br	4dbc <_dtoa_r+0xc3c>
    4f08:	d9c01117 	ldw	r7,68(sp)
    4f0c:	3801bc26 	beq	r7,zero,5600 <_dtoa_r+0x1480>
    4f10:	10810cc4 	addi	r2,r2,1075
    4f14:	dd400a17 	ldw	r21,40(sp)
    4f18:	dd000817 	ldw	r20,32(sp)
    4f1c:	003f0a06 	br	4b48 <_dtoa_r+0x9c8>
    4f20:	00800704 	movi	r2,28
    4f24:	d9000817 	ldw	r4,32(sp)
    4f28:	a0a9883a 	add	r20,r20,r2
    4f2c:	b0ad883a 	add	r22,r22,r2
    4f30:	2089883a 	add	r4,r4,r2
    4f34:	d9000815 	stw	r4,32(sp)
    4f38:	003f5106 	br	4c80 <_dtoa_r+0xb00>
    4f3c:	d8c00317 	ldw	r3,12(sp)
    4f40:	b8c1fc0e 	bge	r23,r3,5734 <_dtoa_r+0x15b4>
    4f44:	0027883a 	mov	r19,zero
    4f48:	b805883a 	mov	r2,r23
    4f4c:	003f3e06 	br	4c48 <_dtoa_r+0xac8>
    4f50:	880b883a 	mov	r5,r17
    4f54:	e009883a 	mov	r4,fp
    4f58:	000f883a 	mov	r7,zero
    4f5c:	01800284 	movi	r6,10
    4f60:	00063ec0 	call	63ec <__multadd>
    4f64:	d9000c17 	ldw	r4,48(sp)
    4f68:	1023883a 	mov	r17,r2
    4f6c:	0102040e 	bge	zero,r4,5780 <_dtoa_r+0x1600>
    4f70:	d9000615 	stw	r4,24(sp)
    4f74:	0500050e 	bge	zero,r20,4f8c <_dtoa_r+0xe0c>
    4f78:	880b883a 	mov	r5,r17
    4f7c:	a00d883a 	mov	r6,r20
    4f80:	e009883a 	mov	r4,fp
    4f84:	0006a9c0 	call	6a9c <__lshift>
    4f88:	1023883a 	mov	r17,r2
    4f8c:	9801241e 	bne	r19,zero,5420 <_dtoa_r+0x12a0>
    4f90:	8829883a 	mov	r20,r17
    4f94:	d9000617 	ldw	r4,24(sp)
    4f98:	dcc00717 	ldw	r19,28(sp)
    4f9c:	9480004c 	andi	r18,r18,1
    4fa0:	20bfffc4 	addi	r2,r4,-1
    4fa4:	9885883a 	add	r2,r19,r2
    4fa8:	d8800415 	stw	r2,16(sp)
    4fac:	dc800615 	stw	r18,24(sp)
    4fb0:	a80b883a 	mov	r5,r21
    4fb4:	8009883a 	mov	r4,r16
    4fb8:	0003f800 	call	3f80 <quorem>
    4fbc:	880b883a 	mov	r5,r17
    4fc0:	8009883a 	mov	r4,r16
    4fc4:	102f883a 	mov	r23,r2
    4fc8:	0006be40 	call	6be4 <__mcmp>
    4fcc:	a80b883a 	mov	r5,r21
    4fd0:	a00d883a 	mov	r6,r20
    4fd4:	e009883a 	mov	r4,fp
    4fd8:	102d883a 	mov	r22,r2
    4fdc:	0006c440 	call	6c44 <__mdiff>
    4fe0:	1007883a 	mov	r3,r2
    4fe4:	10800317 	ldw	r2,12(r2)
    4fe8:	bc800c04 	addi	r18,r23,48
    4fec:	180b883a 	mov	r5,r3
    4ff0:	10004e1e 	bne	r2,zero,512c <_dtoa_r+0xfac>
    4ff4:	8009883a 	mov	r4,r16
    4ff8:	d8c01615 	stw	r3,88(sp)
    4ffc:	0006be40 	call	6be4 <__mcmp>
    5000:	d8c01617 	ldw	r3,88(sp)
    5004:	e009883a 	mov	r4,fp
    5008:	d8801615 	stw	r2,88(sp)
    500c:	180b883a 	mov	r5,r3
    5010:	00063c40 	call	63c4 <_Bfree>
    5014:	d8801617 	ldw	r2,88(sp)
    5018:	1000041e 	bne	r2,zero,502c <_dtoa_r+0xeac>
    501c:	d9800317 	ldw	r6,12(sp)
    5020:	3000021e 	bne	r6,zero,502c <_dtoa_r+0xeac>
    5024:	d8c00617 	ldw	r3,24(sp)
    5028:	18003726 	beq	r3,zero,5108 <_dtoa_r+0xf88>
    502c:	b0002016 	blt	r22,zero,50b0 <_dtoa_r+0xf30>
    5030:	b000041e 	bne	r22,zero,5044 <_dtoa_r+0xec4>
    5034:	d9000317 	ldw	r4,12(sp)
    5038:	2000021e 	bne	r4,zero,5044 <_dtoa_r+0xec4>
    503c:	d8c00617 	ldw	r3,24(sp)
    5040:	18001b26 	beq	r3,zero,50b0 <_dtoa_r+0xf30>
    5044:	00810716 	blt	zero,r2,5464 <_dtoa_r+0x12e4>
    5048:	d8c00417 	ldw	r3,16(sp)
    504c:	9d800044 	addi	r22,r19,1
    5050:	9c800005 	stb	r18,0(r19)
    5054:	b02f883a 	mov	r23,r22
    5058:	98c10626 	beq	r19,r3,5474 <_dtoa_r+0x12f4>
    505c:	800b883a 	mov	r5,r16
    5060:	000f883a 	mov	r7,zero
    5064:	01800284 	movi	r6,10
    5068:	e009883a 	mov	r4,fp
    506c:	00063ec0 	call	63ec <__multadd>
    5070:	1021883a 	mov	r16,r2
    5074:	000f883a 	mov	r7,zero
    5078:	01800284 	movi	r6,10
    507c:	880b883a 	mov	r5,r17
    5080:	e009883a 	mov	r4,fp
    5084:	8d002526 	beq	r17,r20,511c <_dtoa_r+0xf9c>
    5088:	00063ec0 	call	63ec <__multadd>
    508c:	a00b883a 	mov	r5,r20
    5090:	000f883a 	mov	r7,zero
    5094:	01800284 	movi	r6,10
    5098:	e009883a 	mov	r4,fp
    509c:	1023883a 	mov	r17,r2
    50a0:	00063ec0 	call	63ec <__multadd>
    50a4:	1029883a 	mov	r20,r2
    50a8:	b027883a 	mov	r19,r22
    50ac:	003fc006 	br	4fb0 <_dtoa_r+0xe30>
    50b0:	9011883a 	mov	r8,r18
    50b4:	00800e0e 	bge	zero,r2,50f0 <_dtoa_r+0xf70>
    50b8:	800b883a 	mov	r5,r16
    50bc:	01800044 	movi	r6,1
    50c0:	e009883a 	mov	r4,fp
    50c4:	da001715 	stw	r8,92(sp)
    50c8:	0006a9c0 	call	6a9c <__lshift>
    50cc:	a80b883a 	mov	r5,r21
    50d0:	1009883a 	mov	r4,r2
    50d4:	1021883a 	mov	r16,r2
    50d8:	0006be40 	call	6be4 <__mcmp>
    50dc:	da001717 	ldw	r8,92(sp)
    50e0:	0081960e 	bge	zero,r2,573c <_dtoa_r+0x15bc>
    50e4:	00800e44 	movi	r2,57
    50e8:	40817026 	beq	r8,r2,56ac <_dtoa_r+0x152c>
    50ec:	ba000c44 	addi	r8,r23,49
    50f0:	8825883a 	mov	r18,r17
    50f4:	9dc00044 	addi	r23,r19,1
    50f8:	9a000005 	stb	r8,0(r19)
    50fc:	a023883a 	mov	r17,r20
    5100:	dc000915 	stw	r16,36(sp)
    5104:	003f2406 	br	4d98 <_dtoa_r+0xc18>
    5108:	00800e44 	movi	r2,57
    510c:	9011883a 	mov	r8,r18
    5110:	90816626 	beq	r18,r2,56ac <_dtoa_r+0x152c>
    5114:	05bff516 	blt	zero,r22,50ec <_dtoa_r+0xf6c>
    5118:	003ff506 	br	50f0 <_dtoa_r+0xf70>
    511c:	00063ec0 	call	63ec <__multadd>
    5120:	1023883a 	mov	r17,r2
    5124:	1029883a 	mov	r20,r2
    5128:	003fdf06 	br	50a8 <_dtoa_r+0xf28>
    512c:	e009883a 	mov	r4,fp
    5130:	00063c40 	call	63c4 <_Bfree>
    5134:	00800044 	movi	r2,1
    5138:	003fbc06 	br	502c <_dtoa_r+0xeac>
    513c:	a80b883a 	mov	r5,r21
    5140:	8009883a 	mov	r4,r16
    5144:	0006be40 	call	6be4 <__mcmp>
    5148:	103edb0e 	bge	r2,zero,4cb8 <_dtoa_r+0xb38>
    514c:	800b883a 	mov	r5,r16
    5150:	000f883a 	mov	r7,zero
    5154:	01800284 	movi	r6,10
    5158:	e009883a 	mov	r4,fp
    515c:	00063ec0 	call	63ec <__multadd>
    5160:	1021883a 	mov	r16,r2
    5164:	d8800517 	ldw	r2,20(sp)
    5168:	d8c00b17 	ldw	r3,44(sp)
    516c:	10bfffc4 	addi	r2,r2,-1
    5170:	d8800515 	stw	r2,20(sp)
    5174:	183f761e 	bne	r3,zero,4f50 <_dtoa_r+0xdd0>
    5178:	d9000c17 	ldw	r4,48(sp)
    517c:	0101730e 	bge	zero,r4,574c <_dtoa_r+0x15cc>
    5180:	d9000615 	stw	r4,24(sp)
    5184:	003ed006 	br	4cc8 <_dtoa_r+0xb48>
    5188:	00800084 	movi	r2,2
    518c:	3081861e 	bne	r6,r2,57a8 <_dtoa_r+0x1628>
    5190:	d8000b15 	stw	zero,44(sp)
    5194:	003f3c06 	br	4e88 <_dtoa_r+0xd08>
    5198:	dc000917 	ldw	r16,36(sp)
    519c:	003e9206 	br	4be8 <_dtoa_r+0xa68>
    51a0:	d9c00317 	ldw	r7,12(sp)
    51a4:	00800084 	movi	r2,2
    51a8:	11fec50e 	bge	r2,r7,4cc0 <_dtoa_r+0xb40>
    51ac:	d9000617 	ldw	r4,24(sp)
    51b0:	20013c1e 	bne	r4,zero,56a4 <_dtoa_r+0x1524>
    51b4:	a80b883a 	mov	r5,r21
    51b8:	000f883a 	mov	r7,zero
    51bc:	01800144 	movi	r6,5
    51c0:	e009883a 	mov	r4,fp
    51c4:	00063ec0 	call	63ec <__multadd>
    51c8:	100b883a 	mov	r5,r2
    51cc:	8009883a 	mov	r4,r16
    51d0:	102b883a 	mov	r21,r2
    51d4:	0006be40 	call	6be4 <__mcmp>
    51d8:	dc000915 	stw	r16,36(sp)
    51dc:	00bf410e 	bge	zero,r2,4ee4 <_dtoa_r+0xd64>
    51e0:	d9c00717 	ldw	r7,28(sp)
    51e4:	00800c44 	movi	r2,49
    51e8:	38800005 	stb	r2,0(r7)
    51ec:	d8800517 	ldw	r2,20(sp)
    51f0:	3dc00044 	addi	r23,r7,1
    51f4:	10800044 	addi	r2,r2,1
    51f8:	d8800515 	stw	r2,20(sp)
    51fc:	003f3d06 	br	4ef4 <_dtoa_r+0xd74>
    5200:	d9800517 	ldw	r6,20(sp)
    5204:	d9c00717 	ldw	r7,28(sp)
    5208:	00800c44 	movi	r2,49
    520c:	31800044 	addi	r6,r6,1
    5210:	d9800515 	stw	r6,20(sp)
    5214:	38800005 	stb	r2,0(r7)
    5218:	003edf06 	br	4d98 <_dtoa_r+0xc18>
    521c:	d8000b15 	stw	zero,44(sp)
    5220:	003c9f06 	br	44a0 <_dtoa_r+0x320>
    5224:	903e7e1e 	bne	r18,zero,4c20 <_dtoa_r+0xaa0>
    5228:	00800434 	movhi	r2,16
    522c:	10bfffc4 	addi	r2,r2,-1
    5230:	9884703a 	and	r2,r19,r2
    5234:	1000ea1e 	bne	r2,zero,55e0 <_dtoa_r+0x1460>
    5238:	9cdffc2c 	andhi	r19,r19,32752
    523c:	9800e826 	beq	r19,zero,55e0 <_dtoa_r+0x1460>
    5240:	d9c00817 	ldw	r7,32(sp)
    5244:	b5800044 	addi	r22,r22,1
    5248:	04c00044 	movi	r19,1
    524c:	39c00044 	addi	r7,r7,1
    5250:	d9c00815 	stw	r7,32(sp)
    5254:	d8800d17 	ldw	r2,52(sp)
    5258:	103e721e 	bne	r2,zero,4c24 <_dtoa_r+0xaa4>
    525c:	00800044 	movi	r2,1
    5260:	003e7906 	br	4c48 <_dtoa_r+0xac8>
    5264:	8009883a 	mov	r4,r16
    5268:	000c7240 	call	c724 <__floatsidf>
    526c:	d9800f17 	ldw	r6,60(sp)
    5270:	d9c01017 	ldw	r7,64(sp)
    5274:	1009883a 	mov	r4,r2
    5278:	180b883a 	mov	r5,r3
    527c:	000b6900 	call	b690 <__muldf3>
    5280:	000d883a 	mov	r6,zero
    5284:	01d00734 	movhi	r7,16412
    5288:	1009883a 	mov	r4,r2
    528c:	180b883a 	mov	r5,r3
    5290:	000a2a40 	call	a2a4 <__adddf3>
    5294:	047f3034 	movhi	r17,64704
    5298:	1021883a 	mov	r16,r2
    529c:	1c63883a 	add	r17,r3,r17
    52a0:	d9000f17 	ldw	r4,60(sp)
    52a4:	d9401017 	ldw	r5,64(sp)
    52a8:	000d883a 	mov	r6,zero
    52ac:	01d00534 	movhi	r7,16404
    52b0:	000bda80 	call	bda8 <__subdf3>
    52b4:	800d883a 	mov	r6,r16
    52b8:	880f883a 	mov	r7,r17
    52bc:	1009883a 	mov	r4,r2
    52c0:	180b883a 	mov	r5,r3
    52c4:	102b883a 	mov	r21,r2
    52c8:	1829883a 	mov	r20,r3
    52cc:	000b4c00 	call	b4c0 <__gedf2>
    52d0:	00806c16 	blt	zero,r2,5484 <_dtoa_r+0x1304>
    52d4:	89e0003c 	xorhi	r7,r17,32768
    52d8:	800d883a 	mov	r6,r16
    52dc:	a809883a 	mov	r4,r21
    52e0:	a00b883a 	mov	r5,r20
    52e4:	000b59c0 	call	b59c <__ledf2>
    52e8:	103d7e0e 	bge	r2,zero,48e4 <_dtoa_r+0x764>
    52ec:	002b883a 	mov	r21,zero
    52f0:	0023883a 	mov	r17,zero
    52f4:	003efb06 	br	4ee4 <_dtoa_r+0xd64>
    52f8:	d8800717 	ldw	r2,28(sp)
    52fc:	003bd006 	br	4240 <_dtoa_r+0xc0>
    5300:	d9000a17 	ldw	r4,40(sp)
    5304:	d9800d17 	ldw	r6,52(sp)
    5308:	dd400a15 	stw	r21,40(sp)
    530c:	a905c83a 	sub	r2,r21,r4
    5310:	308d883a 	add	r6,r6,r2
    5314:	d9800d15 	stw	r6,52(sp)
    5318:	002b883a 	mov	r21,zero
    531c:	003e0606 	br	4b38 <_dtoa_r+0x9b8>
    5320:	9023883a 	mov	r17,r18
    5324:	9829883a 	mov	r20,r19
    5328:	04000084 	movi	r16,2
    532c:	003c9206 	br	4578 <_dtoa_r+0x3f8>
    5330:	04000044 	movi	r16,1
    5334:	dc000c15 	stw	r16,48(sp)
    5338:	dc000615 	stw	r16,24(sp)
    533c:	dc002215 	stw	r16,136(sp)
    5340:	e0001115 	stw	zero,68(fp)
    5344:	000b883a 	mov	r5,zero
    5348:	003c6906 	br	44f0 <_dtoa_r+0x370>
    534c:	3021883a 	mov	r16,r6
    5350:	003ffb06 	br	5340 <_dtoa_r+0x11c0>
    5354:	1000021e 	bne	r2,zero,5360 <_dtoa_r+0x11e0>
    5358:	4200004c 	andi	r8,r8,1
    535c:	403e7d1e 	bne	r8,zero,4d54 <_dtoa_r+0xbd4>
    5360:	01000c04 	movi	r4,48
    5364:	00000106 	br	536c <_dtoa_r+0x11ec>
    5368:	102f883a 	mov	r23,r2
    536c:	b8bfffc4 	addi	r2,r23,-1
    5370:	10c00007 	ldb	r3,0(r2)
    5374:	193ffc26 	beq	r3,r4,5368 <_dtoa_r+0x11e8>
    5378:	003e8706 	br	4d98 <_dtoa_r+0xc18>
    537c:	d8800517 	ldw	r2,20(sp)
    5380:	00a3c83a 	sub	r17,zero,r2
    5384:	8800a426 	beq	r17,zero,5618 <_dtoa_r+0x1498>
    5388:	888003cc 	andi	r2,r17,15
    538c:	100490fa 	slli	r2,r2,3
    5390:	00c000b4 	movhi	r3,2
    5394:	18ea0104 	addi	r3,r3,-22524
    5398:	1885883a 	add	r2,r3,r2
    539c:	11800017 	ldw	r6,0(r2)
    53a0:	11c00117 	ldw	r7,4(r2)
    53a4:	9009883a 	mov	r4,r18
    53a8:	980b883a 	mov	r5,r19
    53ac:	8823d13a 	srai	r17,r17,4
    53b0:	000b6900 	call	b690 <__muldf3>
    53b4:	d8800f15 	stw	r2,60(sp)
    53b8:	d8c01015 	stw	r3,64(sp)
    53bc:	8800e826 	beq	r17,zero,5760 <_dtoa_r+0x15e0>
    53c0:	050000b4 	movhi	r20,2
    53c4:	a529f704 	addi	r20,r20,-22564
    53c8:	04000084 	movi	r16,2
    53cc:	8980004c 	andi	r6,r17,1
    53d0:	1009883a 	mov	r4,r2
    53d4:	8823d07a 	srai	r17,r17,1
    53d8:	180b883a 	mov	r5,r3
    53dc:	30000426 	beq	r6,zero,53f0 <_dtoa_r+0x1270>
    53e0:	a1800017 	ldw	r6,0(r20)
    53e4:	a1c00117 	ldw	r7,4(r20)
    53e8:	84000044 	addi	r16,r16,1
    53ec:	000b6900 	call	b690 <__muldf3>
    53f0:	a5000204 	addi	r20,r20,8
    53f4:	883ff51e 	bne	r17,zero,53cc <_dtoa_r+0x124c>
    53f8:	d8800f15 	stw	r2,60(sp)
    53fc:	d8c01015 	stw	r3,64(sp)
    5400:	003c7606 	br	45dc <_dtoa_r+0x45c>
    5404:	00c00c04 	movi	r3,48
    5408:	10c00005 	stb	r3,0(r2)
    540c:	d8c00517 	ldw	r3,20(sp)
    5410:	bd3fffc3 	ldbu	r20,-1(r23)
    5414:	18c00044 	addi	r3,r3,1
    5418:	d8c00515 	stw	r3,20(sp)
    541c:	003db906 	br	4b04 <_dtoa_r+0x984>
    5420:	89400117 	ldw	r5,4(r17)
    5424:	e009883a 	mov	r4,fp
    5428:	000631c0 	call	631c <_Balloc>
    542c:	89800417 	ldw	r6,16(r17)
    5430:	89400304 	addi	r5,r17,12
    5434:	11000304 	addi	r4,r2,12
    5438:	31800084 	addi	r6,r6,2
    543c:	318d883a 	add	r6,r6,r6
    5440:	318d883a 	add	r6,r6,r6
    5444:	1027883a 	mov	r19,r2
    5448:	00061d40 	call	61d4 <memcpy>
    544c:	01800044 	movi	r6,1
    5450:	980b883a 	mov	r5,r19
    5454:	e009883a 	mov	r4,fp
    5458:	0006a9c0 	call	6a9c <__lshift>
    545c:	1029883a 	mov	r20,r2
    5460:	003ecc06 	br	4f94 <_dtoa_r+0xe14>
    5464:	00800e44 	movi	r2,57
    5468:	90809026 	beq	r18,r2,56ac <_dtoa_r+0x152c>
    546c:	92000044 	addi	r8,r18,1
    5470:	003f1f06 	br	50f0 <_dtoa_r+0xf70>
    5474:	9011883a 	mov	r8,r18
    5478:	8825883a 	mov	r18,r17
    547c:	a023883a 	mov	r17,r20
    5480:	003e2906 	br	4d28 <_dtoa_r+0xba8>
    5484:	002b883a 	mov	r21,zero
    5488:	0023883a 	mov	r17,zero
    548c:	003f5406 	br	51e0 <_dtoa_r+0x1060>
    5490:	61bfffc4 	addi	r6,r12,-1
    5494:	300490fa 	slli	r2,r6,3
    5498:	00c000b4 	movhi	r3,2
    549c:	18ea0104 	addi	r3,r3,-22524
    54a0:	1885883a 	add	r2,r3,r2
    54a4:	11000017 	ldw	r4,0(r2)
    54a8:	11400117 	ldw	r5,4(r2)
    54ac:	d8800717 	ldw	r2,28(sp)
    54b0:	880f883a 	mov	r7,r17
    54b4:	d9801215 	stw	r6,72(sp)
    54b8:	800d883a 	mov	r6,r16
    54bc:	db001615 	stw	r12,88(sp)
    54c0:	15c00044 	addi	r23,r2,1
    54c4:	000b6900 	call	b690 <__muldf3>
    54c8:	d9401017 	ldw	r5,64(sp)
    54cc:	d9000f17 	ldw	r4,60(sp)
    54d0:	d8c01515 	stw	r3,84(sp)
    54d4:	d8801415 	stw	r2,80(sp)
    54d8:	000c6a40 	call	c6a4 <__fixdfsi>
    54dc:	1009883a 	mov	r4,r2
    54e0:	1021883a 	mov	r16,r2
    54e4:	000c7240 	call	c724 <__floatsidf>
    54e8:	d9000f17 	ldw	r4,60(sp)
    54ec:	d9401017 	ldw	r5,64(sp)
    54f0:	100d883a 	mov	r6,r2
    54f4:	180f883a 	mov	r7,r3
    54f8:	000bda80 	call	bda8 <__subdf3>
    54fc:	1829883a 	mov	r20,r3
    5500:	d8c00717 	ldw	r3,28(sp)
    5504:	84000c04 	addi	r16,r16,48
    5508:	1023883a 	mov	r17,r2
    550c:	1c000005 	stb	r16,0(r3)
    5510:	db001617 	ldw	r12,88(sp)
    5514:	00800044 	movi	r2,1
    5518:	60802226 	beq	r12,r2,55a4 <_dtoa_r+0x1424>
    551c:	d9c00717 	ldw	r7,28(sp)
    5520:	8805883a 	mov	r2,r17
    5524:	b82b883a 	mov	r21,r23
    5528:	3b19883a 	add	r12,r7,r12
    552c:	6023883a 	mov	r17,r12
    5530:	a007883a 	mov	r3,r20
    5534:	dc800f15 	stw	r18,60(sp)
    5538:	000d883a 	mov	r6,zero
    553c:	01d00934 	movhi	r7,16420
    5540:	1009883a 	mov	r4,r2
    5544:	180b883a 	mov	r5,r3
    5548:	000b6900 	call	b690 <__muldf3>
    554c:	180b883a 	mov	r5,r3
    5550:	1009883a 	mov	r4,r2
    5554:	1829883a 	mov	r20,r3
    5558:	1025883a 	mov	r18,r2
    555c:	000c6a40 	call	c6a4 <__fixdfsi>
    5560:	1009883a 	mov	r4,r2
    5564:	1021883a 	mov	r16,r2
    5568:	000c7240 	call	c724 <__floatsidf>
    556c:	100d883a 	mov	r6,r2
    5570:	180f883a 	mov	r7,r3
    5574:	9009883a 	mov	r4,r18
    5578:	a00b883a 	mov	r5,r20
    557c:	84000c04 	addi	r16,r16,48
    5580:	000bda80 	call	bda8 <__subdf3>
    5584:	ad400044 	addi	r21,r21,1
    5588:	ac3fffc5 	stb	r16,-1(r21)
    558c:	ac7fea1e 	bne	r21,r17,5538 <_dtoa_r+0x13b8>
    5590:	1023883a 	mov	r17,r2
    5594:	d8801217 	ldw	r2,72(sp)
    5598:	dc800f17 	ldw	r18,60(sp)
    559c:	1829883a 	mov	r20,r3
    55a0:	b8af883a 	add	r23,r23,r2
    55a4:	d9001417 	ldw	r4,80(sp)
    55a8:	d9401517 	ldw	r5,84(sp)
    55ac:	000d883a 	mov	r6,zero
    55b0:	01cff834 	movhi	r7,16352
    55b4:	000a2a40 	call	a2a4 <__adddf3>
    55b8:	880d883a 	mov	r6,r17
    55bc:	a00f883a 	mov	r7,r20
    55c0:	1009883a 	mov	r4,r2
    55c4:	180b883a 	mov	r5,r3
    55c8:	000b59c0 	call	b59c <__ledf2>
    55cc:	10003e0e 	bge	r2,zero,56c8 <_dtoa_r+0x1548>
    55d0:	d9001317 	ldw	r4,76(sp)
    55d4:	bd3fffc3 	ldbu	r20,-1(r23)
    55d8:	d9000515 	stw	r4,20(sp)
    55dc:	003d3b06 	br	4acc <_dtoa_r+0x94c>
    55e0:	0027883a 	mov	r19,zero
    55e4:	003f1b06 	br	5254 <_dtoa_r+0x10d4>
    55e8:	d8800817 	ldw	r2,32(sp)
    55ec:	11e9c83a 	sub	r20,r2,r7
    55f0:	0005883a 	mov	r2,zero
    55f4:	003d5406 	br	4b48 <_dtoa_r+0x9c8>
    55f8:	00800044 	movi	r2,1
    55fc:	003dc706 	br	4d1c <_dtoa_r+0xb9c>
    5600:	d8c00217 	ldw	r3,8(sp)
    5604:	00800d84 	movi	r2,54
    5608:	dd400a17 	ldw	r21,40(sp)
    560c:	10c5c83a 	sub	r2,r2,r3
    5610:	dd000817 	ldw	r20,32(sp)
    5614:	003d4c06 	br	4b48 <_dtoa_r+0x9c8>
    5618:	dc800f15 	stw	r18,60(sp)
    561c:	dcc01015 	stw	r19,64(sp)
    5620:	04000084 	movi	r16,2
    5624:	003bed06 	br	45dc <_dtoa_r+0x45c>
    5628:	d9000617 	ldw	r4,24(sp)
    562c:	203f0d26 	beq	r4,zero,5264 <_dtoa_r+0x10e4>
    5630:	d9800c17 	ldw	r6,48(sp)
    5634:	01bcab0e 	bge	zero,r6,48e4 <_dtoa_r+0x764>
    5638:	d9401017 	ldw	r5,64(sp)
    563c:	d9000f17 	ldw	r4,60(sp)
    5640:	000d883a 	mov	r6,zero
    5644:	01d00934 	movhi	r7,16420
    5648:	000b6900 	call	b690 <__muldf3>
    564c:	81000044 	addi	r4,r16,1
    5650:	d8800f15 	stw	r2,60(sp)
    5654:	d8c01015 	stw	r3,64(sp)
    5658:	000c7240 	call	c724 <__floatsidf>
    565c:	d9800f17 	ldw	r6,60(sp)
    5660:	d9c01017 	ldw	r7,64(sp)
    5664:	1009883a 	mov	r4,r2
    5668:	180b883a 	mov	r5,r3
    566c:	000b6900 	call	b690 <__muldf3>
    5670:	01d00734 	movhi	r7,16412
    5674:	000d883a 	mov	r6,zero
    5678:	1009883a 	mov	r4,r2
    567c:	180b883a 	mov	r5,r3
    5680:	000a2a40 	call	a2a4 <__adddf3>
    5684:	d9c00517 	ldw	r7,20(sp)
    5688:	047f3034 	movhi	r17,64704
    568c:	1021883a 	mov	r16,r2
    5690:	39ffffc4 	addi	r7,r7,-1
    5694:	d9c01315 	stw	r7,76(sp)
    5698:	1c63883a 	add	r17,r3,r17
    569c:	db000c17 	ldw	r12,48(sp)
    56a0:	003bea06 	br	464c <_dtoa_r+0x4cc>
    56a4:	dc000915 	stw	r16,36(sp)
    56a8:	003e0e06 	br	4ee4 <_dtoa_r+0xd64>
    56ac:	01000e44 	movi	r4,57
    56b0:	8825883a 	mov	r18,r17
    56b4:	9dc00044 	addi	r23,r19,1
    56b8:	99000005 	stb	r4,0(r19)
    56bc:	a023883a 	mov	r17,r20
    56c0:	dc000915 	stw	r16,36(sp)
    56c4:	003da406 	br	4d58 <_dtoa_r+0xbd8>
    56c8:	d9801417 	ldw	r6,80(sp)
    56cc:	d9c01517 	ldw	r7,84(sp)
    56d0:	0009883a 	mov	r4,zero
    56d4:	014ff834 	movhi	r5,16352
    56d8:	000bda80 	call	bda8 <__subdf3>
    56dc:	880d883a 	mov	r6,r17
    56e0:	a00f883a 	mov	r7,r20
    56e4:	1009883a 	mov	r4,r2
    56e8:	180b883a 	mov	r5,r3
    56ec:	000b4c00 	call	b4c0 <__gedf2>
    56f0:	00bc7c0e 	bge	zero,r2,48e4 <_dtoa_r+0x764>
    56f4:	01000c04 	movi	r4,48
    56f8:	00000106 	br	5700 <_dtoa_r+0x1580>
    56fc:	102f883a 	mov	r23,r2
    5700:	b8bfffc4 	addi	r2,r23,-1
    5704:	10c00007 	ldb	r3,0(r2)
    5708:	193ffc26 	beq	r3,r4,56fc <_dtoa_r+0x157c>
    570c:	d9801317 	ldw	r6,76(sp)
    5710:	d9800515 	stw	r6,20(sp)
    5714:	003c4406 	br	4828 <_dtoa_r+0x6a8>
    5718:	d9801317 	ldw	r6,76(sp)
    571c:	d9800515 	stw	r6,20(sp)
    5720:	003cea06 	br	4acc <_dtoa_r+0x94c>
    5724:	dd800f17 	ldw	r22,60(sp)
    5728:	dcc01017 	ldw	r19,64(sp)
    572c:	dc801217 	ldw	r18,72(sp)
    5730:	003c6c06 	br	48e4 <_dtoa_r+0x764>
    5734:	903e031e 	bne	r18,zero,4f44 <_dtoa_r+0xdc4>
    5738:	003ebb06 	br	5228 <_dtoa_r+0x10a8>
    573c:	103e6c1e 	bne	r2,zero,50f0 <_dtoa_r+0xf70>
    5740:	4080004c 	andi	r2,r8,1
    5744:	103e6a26 	beq	r2,zero,50f0 <_dtoa_r+0xf70>
    5748:	003e6606 	br	50e4 <_dtoa_r+0xf64>
    574c:	d8c00317 	ldw	r3,12(sp)
    5750:	00800084 	movi	r2,2
    5754:	10c02916 	blt	r2,r3,57fc <_dtoa_r+0x167c>
    5758:	d9000c17 	ldw	r4,48(sp)
    575c:	003e8806 	br	5180 <_dtoa_r+0x1000>
    5760:	04000084 	movi	r16,2
    5764:	003b9d06 	br	45dc <_dtoa_r+0x45c>
    5768:	d9001317 	ldw	r4,76(sp)
    576c:	d9000515 	stw	r4,20(sp)
    5770:	003cd606 	br	4acc <_dtoa_r+0x94c>
    5774:	d8801317 	ldw	r2,76(sp)
    5778:	d8800515 	stw	r2,20(sp)
    577c:	003c2a06 	br	4828 <_dtoa_r+0x6a8>
    5780:	d9800317 	ldw	r6,12(sp)
    5784:	00800084 	movi	r2,2
    5788:	11801516 	blt	r2,r6,57e0 <_dtoa_r+0x1660>
    578c:	d9c00c17 	ldw	r7,48(sp)
    5790:	d9c00615 	stw	r7,24(sp)
    5794:	003df706 	br	4f74 <_dtoa_r+0xdf4>
    5798:	193d3926 	beq	r3,r4,4c80 <_dtoa_r+0xb00>
    579c:	00c00f04 	movi	r3,60
    57a0:	1885c83a 	sub	r2,r3,r2
    57a4:	003ddf06 	br	4f24 <_dtoa_r+0xda4>
    57a8:	e009883a 	mov	r4,fp
    57ac:	e0001115 	stw	zero,68(fp)
    57b0:	000b883a 	mov	r5,zero
    57b4:	000631c0 	call	631c <_Balloc>
    57b8:	d8800715 	stw	r2,28(sp)
    57bc:	d8c00717 	ldw	r3,28(sp)
    57c0:	00bfffc4 	movi	r2,-1
    57c4:	01000044 	movi	r4,1
    57c8:	d8800c15 	stw	r2,48(sp)
    57cc:	e0c01015 	stw	r3,64(fp)
    57d0:	d9000b15 	stw	r4,44(sp)
    57d4:	d8800615 	stw	r2,24(sp)
    57d8:	d8002215 	stw	zero,136(sp)
    57dc:	003c4106 	br	48e4 <_dtoa_r+0x764>
    57e0:	d8c00c17 	ldw	r3,48(sp)
    57e4:	d8c00615 	stw	r3,24(sp)
    57e8:	003e7006 	br	51ac <_dtoa_r+0x102c>
    57ec:	04400044 	movi	r17,1
    57f0:	003b2006 	br	4474 <_dtoa_r+0x2f4>
    57f4:	000b883a 	mov	r5,zero
    57f8:	003b3d06 	br	44f0 <_dtoa_r+0x370>
    57fc:	d8800c17 	ldw	r2,48(sp)
    5800:	d8800615 	stw	r2,24(sp)
    5804:	003e6906 	br	51ac <_dtoa_r+0x102c>

00005808 <_setlocale_r>:
    5808:	30001b26 	beq	r6,zero,5878 <_setlocale_r+0x70>
    580c:	014000b4 	movhi	r5,2
    5810:	defffe04 	addi	sp,sp,-8
    5814:	2969e704 	addi	r5,r5,-22628
    5818:	3009883a 	mov	r4,r6
    581c:	dc000015 	stw	r16,0(sp)
    5820:	dfc00115 	stw	ra,4(sp)
    5824:	3021883a 	mov	r16,r6
    5828:	00073e00 	call	73e0 <strcmp>
    582c:	1000061e 	bne	r2,zero,5848 <_setlocale_r+0x40>
    5830:	008000b4 	movhi	r2,2
    5834:	10a9e604 	addi	r2,r2,-22632
    5838:	dfc00117 	ldw	ra,4(sp)
    583c:	dc000017 	ldw	r16,0(sp)
    5840:	dec00204 	addi	sp,sp,8
    5844:	f800283a 	ret
    5848:	014000b4 	movhi	r5,2
    584c:	2969e604 	addi	r5,r5,-22632
    5850:	8009883a 	mov	r4,r16
    5854:	00073e00 	call	73e0 <strcmp>
    5858:	103ff526 	beq	r2,zero,5830 <_setlocale_r+0x28>
    585c:	014000b4 	movhi	r5,2
    5860:	2969d104 	addi	r5,r5,-22716
    5864:	8009883a 	mov	r4,r16
    5868:	00073e00 	call	73e0 <strcmp>
    586c:	103ff026 	beq	r2,zero,5830 <_setlocale_r+0x28>
    5870:	0005883a 	mov	r2,zero
    5874:	003ff006 	br	5838 <_setlocale_r+0x30>
    5878:	008000b4 	movhi	r2,2
    587c:	10a9e604 	addi	r2,r2,-22632
    5880:	f800283a 	ret

00005884 <__locale_charset>:
    5884:	008000b4 	movhi	r2,2
    5888:	10ac4104 	addi	r2,r2,-20220
    588c:	f800283a 	ret

00005890 <__locale_mb_cur_max>:
    5890:	008000b4 	movhi	r2,2
    5894:	10b2a304 	addi	r2,r2,-13684
    5898:	10800017 	ldw	r2,0(r2)
    589c:	f800283a 	ret

000058a0 <__locale_msgcharset>:
    58a0:	008000b4 	movhi	r2,2
    58a4:	10ac3904 	addi	r2,r2,-20252
    58a8:	f800283a 	ret

000058ac <__locale_cjk_lang>:
    58ac:	0005883a 	mov	r2,zero
    58b0:	f800283a 	ret

000058b4 <_localeconv_r>:
    58b4:	008000b4 	movhi	r2,2
    58b8:	10ac4904 	addi	r2,r2,-20188
    58bc:	f800283a 	ret

000058c0 <setlocale>:
    58c0:	008000b4 	movhi	r2,2
    58c4:	10b2a204 	addi	r2,r2,-13688
    58c8:	280d883a 	mov	r6,r5
    58cc:	200b883a 	mov	r5,r4
    58d0:	11000017 	ldw	r4,0(r2)
    58d4:	00058081 	jmpi	5808 <_setlocale_r>

000058d8 <localeconv>:
    58d8:	008000b4 	movhi	r2,2
    58dc:	10ac4904 	addi	r2,r2,-20188
    58e0:	f800283a 	ret

000058e4 <_malloc_r>:
    58e4:	defff504 	addi	sp,sp,-44
    58e8:	dc800315 	stw	r18,12(sp)
    58ec:	dfc00a15 	stw	ra,40(sp)
    58f0:	df000915 	stw	fp,36(sp)
    58f4:	ddc00815 	stw	r23,32(sp)
    58f8:	dd800715 	stw	r22,28(sp)
    58fc:	dd400615 	stw	r21,24(sp)
    5900:	dd000515 	stw	r20,20(sp)
    5904:	dcc00415 	stw	r19,16(sp)
    5908:	dc400215 	stw	r17,8(sp)
    590c:	dc000115 	stw	r16,4(sp)
    5910:	288002c4 	addi	r2,r5,11
    5914:	00c00584 	movi	r3,22
    5918:	2025883a 	mov	r18,r4
    591c:	18807f2e 	bgeu	r3,r2,5b1c <_malloc_r+0x238>
    5920:	047ffe04 	movi	r17,-8
    5924:	1462703a 	and	r17,r2,r17
    5928:	8800a316 	blt	r17,zero,5bb8 <_malloc_r+0x2d4>
    592c:	8940a236 	bltu	r17,r5,5bb8 <_malloc_r+0x2d4>
    5930:	000cc880 	call	cc88 <__malloc_lock>
    5934:	00807dc4 	movi	r2,503
    5938:	1441e92e 	bgeu	r2,r17,60e0 <_malloc_r+0x7fc>
    593c:	8804d27a 	srli	r2,r17,9
    5940:	1000a126 	beq	r2,zero,5bc8 <_malloc_r+0x2e4>
    5944:	00c00104 	movi	r3,4
    5948:	18811e36 	bltu	r3,r2,5dc4 <_malloc_r+0x4e0>
    594c:	8804d1ba 	srli	r2,r17,6
    5950:	12000e44 	addi	r8,r2,57
    5954:	11c00e04 	addi	r7,r2,56
    5958:	4209883a 	add	r4,r8,r8
    595c:	04c000b4 	movhi	r19,2
    5960:	2109883a 	add	r4,r4,r4
    5964:	9cec5704 	addi	r19,r19,-20132
    5968:	2109883a 	add	r4,r4,r4
    596c:	9909883a 	add	r4,r19,r4
    5970:	24000117 	ldw	r16,4(r4)
    5974:	213ffe04 	addi	r4,r4,-8
    5978:	24009726 	beq	r4,r16,5bd8 <_malloc_r+0x2f4>
    597c:	80800117 	ldw	r2,4(r16)
    5980:	01bfff04 	movi	r6,-4
    5984:	014003c4 	movi	r5,15
    5988:	1184703a 	and	r2,r2,r6
    598c:	1447c83a 	sub	r3,r2,r17
    5990:	28c00716 	blt	r5,r3,59b0 <_malloc_r+0xcc>
    5994:	1800920e 	bge	r3,zero,5be0 <_malloc_r+0x2fc>
    5998:	84000317 	ldw	r16,12(r16)
    599c:	24008e26 	beq	r4,r16,5bd8 <_malloc_r+0x2f4>
    59a0:	80800117 	ldw	r2,4(r16)
    59a4:	1184703a 	and	r2,r2,r6
    59a8:	1447c83a 	sub	r3,r2,r17
    59ac:	28fff90e 	bge	r5,r3,5994 <_malloc_r+0xb0>
    59b0:	3809883a 	mov	r4,r7
    59b4:	018000b4 	movhi	r6,2
    59b8:	9c000417 	ldw	r16,16(r19)
    59bc:	31ac5704 	addi	r6,r6,-20132
    59c0:	32000204 	addi	r8,r6,8
    59c4:	82013426 	beq	r16,r8,5e98 <_malloc_r+0x5b4>
    59c8:	80c00117 	ldw	r3,4(r16)
    59cc:	00bfff04 	movi	r2,-4
    59d0:	188e703a 	and	r7,r3,r2
    59d4:	3c45c83a 	sub	r2,r7,r17
    59d8:	00c003c4 	movi	r3,15
    59dc:	18811f16 	blt	r3,r2,5e5c <_malloc_r+0x578>
    59e0:	32000515 	stw	r8,20(r6)
    59e4:	32000415 	stw	r8,16(r6)
    59e8:	10007f0e 	bge	r2,zero,5be8 <_malloc_r+0x304>
    59ec:	00807fc4 	movi	r2,511
    59f0:	11c0fd36 	bltu	r2,r7,5de8 <_malloc_r+0x504>
    59f4:	3806d0fa 	srli	r3,r7,3
    59f8:	01c00044 	movi	r7,1
    59fc:	30800117 	ldw	r2,4(r6)
    5a00:	19400044 	addi	r5,r3,1
    5a04:	294b883a 	add	r5,r5,r5
    5a08:	1807d0ba 	srai	r3,r3,2
    5a0c:	294b883a 	add	r5,r5,r5
    5a10:	294b883a 	add	r5,r5,r5
    5a14:	298b883a 	add	r5,r5,r6
    5a18:	38c6983a 	sll	r3,r7,r3
    5a1c:	29c00017 	ldw	r7,0(r5)
    5a20:	2a7ffe04 	addi	r9,r5,-8
    5a24:	1886b03a 	or	r3,r3,r2
    5a28:	82400315 	stw	r9,12(r16)
    5a2c:	81c00215 	stw	r7,8(r16)
    5a30:	30c00115 	stw	r3,4(r6)
    5a34:	2c000015 	stw	r16,0(r5)
    5a38:	3c000315 	stw	r16,12(r7)
    5a3c:	2005d0ba 	srai	r2,r4,2
    5a40:	01400044 	movi	r5,1
    5a44:	288a983a 	sll	r5,r5,r2
    5a48:	19406f36 	bltu	r3,r5,5c08 <_malloc_r+0x324>
    5a4c:	28c4703a 	and	r2,r5,r3
    5a50:	10000a1e 	bne	r2,zero,5a7c <_malloc_r+0x198>
    5a54:	00bfff04 	movi	r2,-4
    5a58:	294b883a 	add	r5,r5,r5
    5a5c:	2088703a 	and	r4,r4,r2
    5a60:	28c4703a 	and	r2,r5,r3
    5a64:	21000104 	addi	r4,r4,4
    5a68:	1000041e 	bne	r2,zero,5a7c <_malloc_r+0x198>
    5a6c:	294b883a 	add	r5,r5,r5
    5a70:	28c4703a 	and	r2,r5,r3
    5a74:	21000104 	addi	r4,r4,4
    5a78:	103ffc26 	beq	r2,zero,5a6c <_malloc_r+0x188>
    5a7c:	02bfff04 	movi	r10,-4
    5a80:	024003c4 	movi	r9,15
    5a84:	21800044 	addi	r6,r4,1
    5a88:	318d883a 	add	r6,r6,r6
    5a8c:	318d883a 	add	r6,r6,r6
    5a90:	318d883a 	add	r6,r6,r6
    5a94:	998d883a 	add	r6,r19,r6
    5a98:	333ffe04 	addi	r12,r6,-8
    5a9c:	2017883a 	mov	r11,r4
    5aa0:	31800104 	addi	r6,r6,4
    5aa4:	34000017 	ldw	r16,0(r6)
    5aa8:	31fffd04 	addi	r7,r6,-12
    5aac:	81c0041e 	bne	r16,r7,5ac0 <_malloc_r+0x1dc>
    5ab0:	0000fb06 	br	5ea0 <_malloc_r+0x5bc>
    5ab4:	1801030e 	bge	r3,zero,5ec4 <_malloc_r+0x5e0>
    5ab8:	84000317 	ldw	r16,12(r16)
    5abc:	81c0f826 	beq	r16,r7,5ea0 <_malloc_r+0x5bc>
    5ac0:	80800117 	ldw	r2,4(r16)
    5ac4:	1284703a 	and	r2,r2,r10
    5ac8:	1447c83a 	sub	r3,r2,r17
    5acc:	48fff90e 	bge	r9,r3,5ab4 <_malloc_r+0x1d0>
    5ad0:	80800317 	ldw	r2,12(r16)
    5ad4:	81000217 	ldw	r4,8(r16)
    5ad8:	89400054 	ori	r5,r17,1
    5adc:	81400115 	stw	r5,4(r16)
    5ae0:	20800315 	stw	r2,12(r4)
    5ae4:	11000215 	stw	r4,8(r2)
    5ae8:	8463883a 	add	r17,r16,r17
    5aec:	9c400515 	stw	r17,20(r19)
    5af0:	9c400415 	stw	r17,16(r19)
    5af4:	18800054 	ori	r2,r3,1
    5af8:	88800115 	stw	r2,4(r17)
    5afc:	8a000315 	stw	r8,12(r17)
    5b00:	8a000215 	stw	r8,8(r17)
    5b04:	88e3883a 	add	r17,r17,r3
    5b08:	88c00015 	stw	r3,0(r17)
    5b0c:	9009883a 	mov	r4,r18
    5b10:	000cda80 	call	cda8 <__malloc_unlock>
    5b14:	80800204 	addi	r2,r16,8
    5b18:	00001b06 	br	5b88 <_malloc_r+0x2a4>
    5b1c:	04400404 	movi	r17,16
    5b20:	89402536 	bltu	r17,r5,5bb8 <_malloc_r+0x2d4>
    5b24:	000cc880 	call	cc88 <__malloc_lock>
    5b28:	00800184 	movi	r2,6
    5b2c:	01000084 	movi	r4,2
    5b30:	04c000b4 	movhi	r19,2
    5b34:	1085883a 	add	r2,r2,r2
    5b38:	9cec5704 	addi	r19,r19,-20132
    5b3c:	1085883a 	add	r2,r2,r2
    5b40:	9885883a 	add	r2,r19,r2
    5b44:	14000117 	ldw	r16,4(r2)
    5b48:	10fffe04 	addi	r3,r2,-8
    5b4c:	80c0d926 	beq	r16,r3,5eb4 <_malloc_r+0x5d0>
    5b50:	80c00117 	ldw	r3,4(r16)
    5b54:	81000317 	ldw	r4,12(r16)
    5b58:	00bfff04 	movi	r2,-4
    5b5c:	1884703a 	and	r2,r3,r2
    5b60:	81400217 	ldw	r5,8(r16)
    5b64:	8085883a 	add	r2,r16,r2
    5b68:	10c00117 	ldw	r3,4(r2)
    5b6c:	29000315 	stw	r4,12(r5)
    5b70:	21400215 	stw	r5,8(r4)
    5b74:	18c00054 	ori	r3,r3,1
    5b78:	10c00115 	stw	r3,4(r2)
    5b7c:	9009883a 	mov	r4,r18
    5b80:	000cda80 	call	cda8 <__malloc_unlock>
    5b84:	80800204 	addi	r2,r16,8
    5b88:	dfc00a17 	ldw	ra,40(sp)
    5b8c:	df000917 	ldw	fp,36(sp)
    5b90:	ddc00817 	ldw	r23,32(sp)
    5b94:	dd800717 	ldw	r22,28(sp)
    5b98:	dd400617 	ldw	r21,24(sp)
    5b9c:	dd000517 	ldw	r20,20(sp)
    5ba0:	dcc00417 	ldw	r19,16(sp)
    5ba4:	dc800317 	ldw	r18,12(sp)
    5ba8:	dc400217 	ldw	r17,8(sp)
    5bac:	dc000117 	ldw	r16,4(sp)
    5bb0:	dec00b04 	addi	sp,sp,44
    5bb4:	f800283a 	ret
    5bb8:	00800304 	movi	r2,12
    5bbc:	90800015 	stw	r2,0(r18)
    5bc0:	0005883a 	mov	r2,zero
    5bc4:	003ff006 	br	5b88 <_malloc_r+0x2a4>
    5bc8:	01002004 	movi	r4,128
    5bcc:	02001004 	movi	r8,64
    5bd0:	01c00fc4 	movi	r7,63
    5bd4:	003f6106 	br	595c <_malloc_r+0x78>
    5bd8:	4009883a 	mov	r4,r8
    5bdc:	003f7506 	br	59b4 <_malloc_r+0xd0>
    5be0:	81000317 	ldw	r4,12(r16)
    5be4:	003fde06 	br	5b60 <_malloc_r+0x27c>
    5be8:	81c5883a 	add	r2,r16,r7
    5bec:	11400117 	ldw	r5,4(r2)
    5bf0:	9009883a 	mov	r4,r18
    5bf4:	29400054 	ori	r5,r5,1
    5bf8:	11400115 	stw	r5,4(r2)
    5bfc:	000cda80 	call	cda8 <__malloc_unlock>
    5c00:	80800204 	addi	r2,r16,8
    5c04:	003fe006 	br	5b88 <_malloc_r+0x2a4>
    5c08:	9c000217 	ldw	r16,8(r19)
    5c0c:	00bfff04 	movi	r2,-4
    5c10:	85800117 	ldw	r22,4(r16)
    5c14:	b0ac703a 	and	r22,r22,r2
    5c18:	b4400336 	bltu	r22,r17,5c28 <_malloc_r+0x344>
    5c1c:	b445c83a 	sub	r2,r22,r17
    5c20:	00c003c4 	movi	r3,15
    5c24:	18805d16 	blt	r3,r2,5d9c <_malloc_r+0x4b8>
    5c28:	05c000b4 	movhi	r23,2
    5c2c:	008000b4 	movhi	r2,2
    5c30:	10ba8004 	addi	r2,r2,-5632
    5c34:	bdf2a404 	addi	r23,r23,-13680
    5c38:	15400017 	ldw	r21,0(r2)
    5c3c:	b8c00017 	ldw	r3,0(r23)
    5c40:	00bfffc4 	movi	r2,-1
    5c44:	858d883a 	add	r6,r16,r22
    5c48:	8d6b883a 	add	r21,r17,r21
    5c4c:	1880ea26 	beq	r3,r2,5ff8 <_malloc_r+0x714>
    5c50:	ad4403c4 	addi	r21,r21,4111
    5c54:	00bc0004 	movi	r2,-4096
    5c58:	a8aa703a 	and	r21,r21,r2
    5c5c:	a80b883a 	mov	r5,r21
    5c60:	9009883a 	mov	r4,r18
    5c64:	d9800015 	stw	r6,0(sp)
    5c68:	000738c0 	call	738c <_sbrk_r>
    5c6c:	1029883a 	mov	r20,r2
    5c70:	00bfffc4 	movi	r2,-1
    5c74:	d9800017 	ldw	r6,0(sp)
    5c78:	a080e826 	beq	r20,r2,601c <_malloc_r+0x738>
    5c7c:	a180a636 	bltu	r20,r6,5f18 <_malloc_r+0x634>
    5c80:	070000b4 	movhi	fp,2
    5c84:	e73aaa04 	addi	fp,fp,-5464
    5c88:	e0800017 	ldw	r2,0(fp)
    5c8c:	a887883a 	add	r3,r21,r2
    5c90:	e0c00015 	stw	r3,0(fp)
    5c94:	3500e626 	beq	r6,r20,6030 <_malloc_r+0x74c>
    5c98:	b9000017 	ldw	r4,0(r23)
    5c9c:	00bfffc4 	movi	r2,-1
    5ca0:	2080ee26 	beq	r4,r2,605c <_malloc_r+0x778>
    5ca4:	a185c83a 	sub	r2,r20,r6
    5ca8:	10c5883a 	add	r2,r2,r3
    5cac:	e0800015 	stw	r2,0(fp)
    5cb0:	a0c001cc 	andi	r3,r20,7
    5cb4:	1800bc26 	beq	r3,zero,5fa8 <_malloc_r+0x6c4>
    5cb8:	a0e9c83a 	sub	r20,r20,r3
    5cbc:	00840204 	movi	r2,4104
    5cc0:	a5000204 	addi	r20,r20,8
    5cc4:	10c7c83a 	sub	r3,r2,r3
    5cc8:	a545883a 	add	r2,r20,r21
    5ccc:	1083ffcc 	andi	r2,r2,4095
    5cd0:	18abc83a 	sub	r21,r3,r2
    5cd4:	a80b883a 	mov	r5,r21
    5cd8:	9009883a 	mov	r4,r18
    5cdc:	000738c0 	call	738c <_sbrk_r>
    5ce0:	00ffffc4 	movi	r3,-1
    5ce4:	10c0e126 	beq	r2,r3,606c <_malloc_r+0x788>
    5ce8:	1505c83a 	sub	r2,r2,r20
    5cec:	1545883a 	add	r2,r2,r21
    5cf0:	10800054 	ori	r2,r2,1
    5cf4:	e0c00017 	ldw	r3,0(fp)
    5cf8:	9d000215 	stw	r20,8(r19)
    5cfc:	a0800115 	stw	r2,4(r20)
    5d00:	a8c7883a 	add	r3,r21,r3
    5d04:	e0c00015 	stw	r3,0(fp)
    5d08:	84c00e26 	beq	r16,r19,5d44 <_malloc_r+0x460>
    5d0c:	018003c4 	movi	r6,15
    5d10:	3580a72e 	bgeu	r6,r22,5fb0 <_malloc_r+0x6cc>
    5d14:	81400117 	ldw	r5,4(r16)
    5d18:	013ffe04 	movi	r4,-8
    5d1c:	b0bffd04 	addi	r2,r22,-12
    5d20:	1104703a 	and	r2,r2,r4
    5d24:	2900004c 	andi	r4,r5,1
    5d28:	2088b03a 	or	r4,r4,r2
    5d2c:	81000115 	stw	r4,4(r16)
    5d30:	01400144 	movi	r5,5
    5d34:	8089883a 	add	r4,r16,r2
    5d38:	21400115 	stw	r5,4(r4)
    5d3c:	21400215 	stw	r5,8(r4)
    5d40:	3080cd36 	bltu	r6,r2,6078 <_malloc_r+0x794>
    5d44:	008000b4 	movhi	r2,2
    5d48:	10ba7f04 	addi	r2,r2,-5636
    5d4c:	11000017 	ldw	r4,0(r2)
    5d50:	20c0012e 	bgeu	r4,r3,5d58 <_malloc_r+0x474>
    5d54:	10c00015 	stw	r3,0(r2)
    5d58:	008000b4 	movhi	r2,2
    5d5c:	10ba7e04 	addi	r2,r2,-5640
    5d60:	11000017 	ldw	r4,0(r2)
    5d64:	9c000217 	ldw	r16,8(r19)
    5d68:	20c0012e 	bgeu	r4,r3,5d70 <_malloc_r+0x48c>
    5d6c:	10c00015 	stw	r3,0(r2)
    5d70:	80c00117 	ldw	r3,4(r16)
    5d74:	00bfff04 	movi	r2,-4
    5d78:	1886703a 	and	r3,r3,r2
    5d7c:	1c45c83a 	sub	r2,r3,r17
    5d80:	1c400236 	bltu	r3,r17,5d8c <_malloc_r+0x4a8>
    5d84:	00c003c4 	movi	r3,15
    5d88:	18800416 	blt	r3,r2,5d9c <_malloc_r+0x4b8>
    5d8c:	9009883a 	mov	r4,r18
    5d90:	000cda80 	call	cda8 <__malloc_unlock>
    5d94:	0005883a 	mov	r2,zero
    5d98:	003f7b06 	br	5b88 <_malloc_r+0x2a4>
    5d9c:	88c00054 	ori	r3,r17,1
    5da0:	80c00115 	stw	r3,4(r16)
    5da4:	8463883a 	add	r17,r16,r17
    5da8:	10800054 	ori	r2,r2,1
    5dac:	9c400215 	stw	r17,8(r19)
    5db0:	88800115 	stw	r2,4(r17)
    5db4:	9009883a 	mov	r4,r18
    5db8:	000cda80 	call	cda8 <__malloc_unlock>
    5dbc:	80800204 	addi	r2,r16,8
    5dc0:	003f7106 	br	5b88 <_malloc_r+0x2a4>
    5dc4:	00c00504 	movi	r3,20
    5dc8:	18804a2e 	bgeu	r3,r2,5ef4 <_malloc_r+0x610>
    5dcc:	00c01504 	movi	r3,84
    5dd0:	18806e36 	bltu	r3,r2,5f8c <_malloc_r+0x6a8>
    5dd4:	8804d33a 	srli	r2,r17,12
    5dd8:	12001bc4 	addi	r8,r2,111
    5ddc:	11c01b84 	addi	r7,r2,110
    5de0:	4209883a 	add	r4,r8,r8
    5de4:	003edd06 	br	595c <_malloc_r+0x78>
    5de8:	3804d27a 	srli	r2,r7,9
    5dec:	00c00104 	movi	r3,4
    5df0:	1880442e 	bgeu	r3,r2,5f04 <_malloc_r+0x620>
    5df4:	00c00504 	movi	r3,20
    5df8:	18808136 	bltu	r3,r2,6000 <_malloc_r+0x71c>
    5dfc:	11401704 	addi	r5,r2,92
    5e00:	10c016c4 	addi	r3,r2,91
    5e04:	294b883a 	add	r5,r5,r5
    5e08:	294b883a 	add	r5,r5,r5
    5e0c:	294b883a 	add	r5,r5,r5
    5e10:	994b883a 	add	r5,r19,r5
    5e14:	28800017 	ldw	r2,0(r5)
    5e18:	018000b4 	movhi	r6,2
    5e1c:	297ffe04 	addi	r5,r5,-8
    5e20:	31ac5704 	addi	r6,r6,-20132
    5e24:	28806526 	beq	r5,r2,5fbc <_malloc_r+0x6d8>
    5e28:	01bfff04 	movi	r6,-4
    5e2c:	10c00117 	ldw	r3,4(r2)
    5e30:	1986703a 	and	r3,r3,r6
    5e34:	38c0022e 	bgeu	r7,r3,5e40 <_malloc_r+0x55c>
    5e38:	10800217 	ldw	r2,8(r2)
    5e3c:	28bffb1e 	bne	r5,r2,5e2c <_malloc_r+0x548>
    5e40:	11400317 	ldw	r5,12(r2)
    5e44:	98c00117 	ldw	r3,4(r19)
    5e48:	81400315 	stw	r5,12(r16)
    5e4c:	80800215 	stw	r2,8(r16)
    5e50:	2c000215 	stw	r16,8(r5)
    5e54:	14000315 	stw	r16,12(r2)
    5e58:	003ef806 	br	5a3c <_malloc_r+0x158>
    5e5c:	88c00054 	ori	r3,r17,1
    5e60:	80c00115 	stw	r3,4(r16)
    5e64:	8463883a 	add	r17,r16,r17
    5e68:	34400515 	stw	r17,20(r6)
    5e6c:	34400415 	stw	r17,16(r6)
    5e70:	10c00054 	ori	r3,r2,1
    5e74:	8a000315 	stw	r8,12(r17)
    5e78:	8a000215 	stw	r8,8(r17)
    5e7c:	88c00115 	stw	r3,4(r17)
    5e80:	88a3883a 	add	r17,r17,r2
    5e84:	88800015 	stw	r2,0(r17)
    5e88:	9009883a 	mov	r4,r18
    5e8c:	000cda80 	call	cda8 <__malloc_unlock>
    5e90:	80800204 	addi	r2,r16,8
    5e94:	003f3c06 	br	5b88 <_malloc_r+0x2a4>
    5e98:	30c00117 	ldw	r3,4(r6)
    5e9c:	003ee706 	br	5a3c <_malloc_r+0x158>
    5ea0:	5ac00044 	addi	r11,r11,1
    5ea4:	588000cc 	andi	r2,r11,3
    5ea8:	31800204 	addi	r6,r6,8
    5eac:	103efd1e 	bne	r2,zero,5aa4 <_malloc_r+0x1c0>
    5eb0:	00002406 	br	5f44 <_malloc_r+0x660>
    5eb4:	14000317 	ldw	r16,12(r2)
    5eb8:	143f251e 	bne	r2,r16,5b50 <_malloc_r+0x26c>
    5ebc:	21000084 	addi	r4,r4,2
    5ec0:	003ebc06 	br	59b4 <_malloc_r+0xd0>
    5ec4:	8085883a 	add	r2,r16,r2
    5ec8:	10c00117 	ldw	r3,4(r2)
    5ecc:	81000317 	ldw	r4,12(r16)
    5ed0:	81400217 	ldw	r5,8(r16)
    5ed4:	18c00054 	ori	r3,r3,1
    5ed8:	10c00115 	stw	r3,4(r2)
    5edc:	29000315 	stw	r4,12(r5)
    5ee0:	21400215 	stw	r5,8(r4)
    5ee4:	9009883a 	mov	r4,r18
    5ee8:	000cda80 	call	cda8 <__malloc_unlock>
    5eec:	80800204 	addi	r2,r16,8
    5ef0:	003f2506 	br	5b88 <_malloc_r+0x2a4>
    5ef4:	12001704 	addi	r8,r2,92
    5ef8:	11c016c4 	addi	r7,r2,91
    5efc:	4209883a 	add	r4,r8,r8
    5f00:	003e9606 	br	595c <_malloc_r+0x78>
    5f04:	3804d1ba 	srli	r2,r7,6
    5f08:	11400e44 	addi	r5,r2,57
    5f0c:	10c00e04 	addi	r3,r2,56
    5f10:	294b883a 	add	r5,r5,r5
    5f14:	003fbc06 	br	5e08 <_malloc_r+0x524>
    5f18:	84ff5926 	beq	r16,r19,5c80 <_malloc_r+0x39c>
    5f1c:	008000b4 	movhi	r2,2
    5f20:	10ac5704 	addi	r2,r2,-20132
    5f24:	14000217 	ldw	r16,8(r2)
    5f28:	00bfff04 	movi	r2,-4
    5f2c:	80c00117 	ldw	r3,4(r16)
    5f30:	1886703a 	and	r3,r3,r2
    5f34:	003f9106 	br	5d7c <_malloc_r+0x498>
    5f38:	60800217 	ldw	r2,8(r12)
    5f3c:	213fffc4 	addi	r4,r4,-1
    5f40:	1300651e 	bne	r2,r12,60d8 <_malloc_r+0x7f4>
    5f44:	208000cc 	andi	r2,r4,3
    5f48:	633ffe04 	addi	r12,r12,-8
    5f4c:	103ffa1e 	bne	r2,zero,5f38 <_malloc_r+0x654>
    5f50:	98800117 	ldw	r2,4(r19)
    5f54:	0146303a 	nor	r3,zero,r5
    5f58:	1884703a 	and	r2,r3,r2
    5f5c:	98800115 	stw	r2,4(r19)
    5f60:	294b883a 	add	r5,r5,r5
    5f64:	117f2836 	bltu	r2,r5,5c08 <_malloc_r+0x324>
    5f68:	283f2726 	beq	r5,zero,5c08 <_malloc_r+0x324>
    5f6c:	2886703a 	and	r3,r5,r2
    5f70:	5809883a 	mov	r4,r11
    5f74:	183ec31e 	bne	r3,zero,5a84 <_malloc_r+0x1a0>
    5f78:	294b883a 	add	r5,r5,r5
    5f7c:	2886703a 	and	r3,r5,r2
    5f80:	21000104 	addi	r4,r4,4
    5f84:	183ffc26 	beq	r3,zero,5f78 <_malloc_r+0x694>
    5f88:	003ebe06 	br	5a84 <_malloc_r+0x1a0>
    5f8c:	00c05504 	movi	r3,340
    5f90:	18801236 	bltu	r3,r2,5fdc <_malloc_r+0x6f8>
    5f94:	8804d3fa 	srli	r2,r17,15
    5f98:	12001e04 	addi	r8,r2,120
    5f9c:	11c01dc4 	addi	r7,r2,119
    5fa0:	4209883a 	add	r4,r8,r8
    5fa4:	003e6d06 	br	595c <_malloc_r+0x78>
    5fa8:	00c40004 	movi	r3,4096
    5fac:	003f4606 	br	5cc8 <_malloc_r+0x3e4>
    5fb0:	00800044 	movi	r2,1
    5fb4:	a0800115 	stw	r2,4(r20)
    5fb8:	003f7406 	br	5d8c <_malloc_r+0x4a8>
    5fbc:	1805d0ba 	srai	r2,r3,2
    5fc0:	01c00044 	movi	r7,1
    5fc4:	30c00117 	ldw	r3,4(r6)
    5fc8:	388e983a 	sll	r7,r7,r2
    5fcc:	2805883a 	mov	r2,r5
    5fd0:	38c6b03a 	or	r3,r7,r3
    5fd4:	30c00115 	stw	r3,4(r6)
    5fd8:	003f9b06 	br	5e48 <_malloc_r+0x564>
    5fdc:	00c15504 	movi	r3,1364
    5fe0:	18801a36 	bltu	r3,r2,604c <_malloc_r+0x768>
    5fe4:	8804d4ba 	srli	r2,r17,18
    5fe8:	12001f44 	addi	r8,r2,125
    5fec:	11c01f04 	addi	r7,r2,124
    5ff0:	4209883a 	add	r4,r8,r8
    5ff4:	003e5906 	br	595c <_malloc_r+0x78>
    5ff8:	ad400404 	addi	r21,r21,16
    5ffc:	003f1706 	br	5c5c <_malloc_r+0x378>
    6000:	00c01504 	movi	r3,84
    6004:	18802336 	bltu	r3,r2,6094 <_malloc_r+0x7b0>
    6008:	3804d33a 	srli	r2,r7,12
    600c:	11401bc4 	addi	r5,r2,111
    6010:	10c01b84 	addi	r3,r2,110
    6014:	294b883a 	add	r5,r5,r5
    6018:	003f7b06 	br	5e08 <_malloc_r+0x524>
    601c:	9c000217 	ldw	r16,8(r19)
    6020:	00bfff04 	movi	r2,-4
    6024:	80c00117 	ldw	r3,4(r16)
    6028:	1886703a 	and	r3,r3,r2
    602c:	003f5306 	br	5d7c <_malloc_r+0x498>
    6030:	3083ffcc 	andi	r2,r6,4095
    6034:	103f181e 	bne	r2,zero,5c98 <_malloc_r+0x3b4>
    6038:	99000217 	ldw	r4,8(r19)
    603c:	b545883a 	add	r2,r22,r21
    6040:	10800054 	ori	r2,r2,1
    6044:	20800115 	stw	r2,4(r4)
    6048:	003f3e06 	br	5d44 <_malloc_r+0x460>
    604c:	01003f84 	movi	r4,254
    6050:	02001fc4 	movi	r8,127
    6054:	01c01f84 	movi	r7,126
    6058:	003e4006 	br	595c <_malloc_r+0x78>
    605c:	008000b4 	movhi	r2,2
    6060:	10b2a404 	addi	r2,r2,-13680
    6064:	15000015 	stw	r20,0(r2)
    6068:	003f1106 	br	5cb0 <_malloc_r+0x3cc>
    606c:	00800044 	movi	r2,1
    6070:	002b883a 	mov	r21,zero
    6074:	003f1f06 	br	5cf4 <_malloc_r+0x410>
    6078:	81400204 	addi	r5,r16,8
    607c:	9009883a 	mov	r4,r18
    6080:	0008b480 	call	8b48 <_free_r>
    6084:	008000b4 	movhi	r2,2
    6088:	10baaa04 	addi	r2,r2,-5464
    608c:	10c00017 	ldw	r3,0(r2)
    6090:	003f2c06 	br	5d44 <_malloc_r+0x460>
    6094:	00c05504 	movi	r3,340
    6098:	18800536 	bltu	r3,r2,60b0 <_malloc_r+0x7cc>
    609c:	3804d3fa 	srli	r2,r7,15
    60a0:	11401e04 	addi	r5,r2,120
    60a4:	10c01dc4 	addi	r3,r2,119
    60a8:	294b883a 	add	r5,r5,r5
    60ac:	003f5606 	br	5e08 <_malloc_r+0x524>
    60b0:	00c15504 	movi	r3,1364
    60b4:	18800536 	bltu	r3,r2,60cc <_malloc_r+0x7e8>
    60b8:	3804d4ba 	srli	r2,r7,18
    60bc:	11401f44 	addi	r5,r2,125
    60c0:	10c01f04 	addi	r3,r2,124
    60c4:	294b883a 	add	r5,r5,r5
    60c8:	003f4f06 	br	5e08 <_malloc_r+0x524>
    60cc:	01403f84 	movi	r5,254
    60d0:	00c01f84 	movi	r3,126
    60d4:	003f4c06 	br	5e08 <_malloc_r+0x524>
    60d8:	98800117 	ldw	r2,4(r19)
    60dc:	003fa006 	br	5f60 <_malloc_r+0x67c>
    60e0:	8808d0fa 	srli	r4,r17,3
    60e4:	20800044 	addi	r2,r4,1
    60e8:	1085883a 	add	r2,r2,r2
    60ec:	003e9006 	br	5b30 <_malloc_r+0x24c>

000060f0 <memchr>:
    60f0:	208000cc 	andi	r2,r4,3
    60f4:	280f883a 	mov	r7,r5
    60f8:	10003426 	beq	r2,zero,61cc <memchr+0xdc>
    60fc:	30bfffc4 	addi	r2,r6,-1
    6100:	30001a26 	beq	r6,zero,616c <memchr+0x7c>
    6104:	20c00003 	ldbu	r3,0(r4)
    6108:	29803fcc 	andi	r6,r5,255
    610c:	30c0051e 	bne	r6,r3,6124 <memchr+0x34>
    6110:	00001806 	br	6174 <memchr+0x84>
    6114:	10001526 	beq	r2,zero,616c <memchr+0x7c>
    6118:	20c00003 	ldbu	r3,0(r4)
    611c:	10bfffc4 	addi	r2,r2,-1
    6120:	30c01426 	beq	r6,r3,6174 <memchr+0x84>
    6124:	21000044 	addi	r4,r4,1
    6128:	20c000cc 	andi	r3,r4,3
    612c:	183ff91e 	bne	r3,zero,6114 <memchr+0x24>
    6130:	020000c4 	movi	r8,3
    6134:	40801136 	bltu	r8,r2,617c <memchr+0x8c>
    6138:	10000c26 	beq	r2,zero,616c <memchr+0x7c>
    613c:	20c00003 	ldbu	r3,0(r4)
    6140:	29403fcc 	andi	r5,r5,255
    6144:	28c00b26 	beq	r5,r3,6174 <memchr+0x84>
    6148:	20c00044 	addi	r3,r4,1
    614c:	39803fcc 	andi	r6,r7,255
    6150:	2089883a 	add	r4,r4,r2
    6154:	00000306 	br	6164 <memchr+0x74>
    6158:	18c00044 	addi	r3,r3,1
    615c:	197fffc3 	ldbu	r5,-1(r3)
    6160:	31400526 	beq	r6,r5,6178 <memchr+0x88>
    6164:	1805883a 	mov	r2,r3
    6168:	20fffb1e 	bne	r4,r3,6158 <memchr+0x68>
    616c:	0005883a 	mov	r2,zero
    6170:	f800283a 	ret
    6174:	2005883a 	mov	r2,r4
    6178:	f800283a 	ret
    617c:	28c03fcc 	andi	r3,r5,255
    6180:	1812923a 	slli	r9,r3,8
    6184:	02ffbff4 	movhi	r11,65279
    6188:	02a02074 	movhi	r10,32897
    618c:	48d2b03a 	or	r9,r9,r3
    6190:	4806943a 	slli	r3,r9,16
    6194:	5affbfc4 	addi	r11,r11,-257
    6198:	52a02004 	addi	r10,r10,-32640
    619c:	48d2b03a 	or	r9,r9,r3
    61a0:	20c00017 	ldw	r3,0(r4)
    61a4:	48c6f03a 	xor	r3,r9,r3
    61a8:	1acd883a 	add	r6,r3,r11
    61ac:	00c6303a 	nor	r3,zero,r3
    61b0:	30c6703a 	and	r3,r6,r3
    61b4:	1a86703a 	and	r3,r3,r10
    61b8:	183fe01e 	bne	r3,zero,613c <memchr+0x4c>
    61bc:	10bfff04 	addi	r2,r2,-4
    61c0:	21000104 	addi	r4,r4,4
    61c4:	40bff636 	bltu	r8,r2,61a0 <memchr+0xb0>
    61c8:	003fdb06 	br	6138 <memchr+0x48>
    61cc:	3005883a 	mov	r2,r6
    61d0:	003fd706 	br	6130 <memchr+0x40>

000061d4 <memcpy>:
    61d4:	defffd04 	addi	sp,sp,-12
    61d8:	dfc00215 	stw	ra,8(sp)
    61dc:	dc400115 	stw	r17,4(sp)
    61e0:	dc000015 	stw	r16,0(sp)
    61e4:	00c003c4 	movi	r3,15
    61e8:	2005883a 	mov	r2,r4
    61ec:	1980452e 	bgeu	r3,r6,6304 <memcpy+0x130>
    61f0:	2906b03a 	or	r3,r5,r4
    61f4:	18c000cc 	andi	r3,r3,3
    61f8:	1800441e 	bne	r3,zero,630c <memcpy+0x138>
    61fc:	347ffc04 	addi	r17,r6,-16
    6200:	8822d13a 	srli	r17,r17,4
    6204:	28c00104 	addi	r3,r5,4
    6208:	23400104 	addi	r13,r4,4
    620c:	8820913a 	slli	r16,r17,4
    6210:	2b000204 	addi	r12,r5,8
    6214:	22c00204 	addi	r11,r4,8
    6218:	84000504 	addi	r16,r16,20
    621c:	2a800304 	addi	r10,r5,12
    6220:	22400304 	addi	r9,r4,12
    6224:	2c21883a 	add	r16,r5,r16
    6228:	2811883a 	mov	r8,r5
    622c:	200f883a 	mov	r7,r4
    6230:	41000017 	ldw	r4,0(r8)
    6234:	1fc00017 	ldw	ra,0(r3)
    6238:	63c00017 	ldw	r15,0(r12)
    623c:	39000015 	stw	r4,0(r7)
    6240:	53800017 	ldw	r14,0(r10)
    6244:	6fc00015 	stw	ra,0(r13)
    6248:	5bc00015 	stw	r15,0(r11)
    624c:	4b800015 	stw	r14,0(r9)
    6250:	18c00404 	addi	r3,r3,16
    6254:	39c00404 	addi	r7,r7,16
    6258:	42000404 	addi	r8,r8,16
    625c:	6b400404 	addi	r13,r13,16
    6260:	63000404 	addi	r12,r12,16
    6264:	5ac00404 	addi	r11,r11,16
    6268:	52800404 	addi	r10,r10,16
    626c:	4a400404 	addi	r9,r9,16
    6270:	1c3fef1e 	bne	r3,r16,6230 <memcpy+0x5c>
    6274:	89c00044 	addi	r7,r17,1
    6278:	380e913a 	slli	r7,r7,4
    627c:	310003cc 	andi	r4,r6,15
    6280:	02c000c4 	movi	r11,3
    6284:	11c7883a 	add	r3,r2,r7
    6288:	29cb883a 	add	r5,r5,r7
    628c:	5900212e 	bgeu	r11,r4,6314 <memcpy+0x140>
    6290:	1813883a 	mov	r9,r3
    6294:	2811883a 	mov	r8,r5
    6298:	200f883a 	mov	r7,r4
    629c:	42800017 	ldw	r10,0(r8)
    62a0:	4a400104 	addi	r9,r9,4
    62a4:	39ffff04 	addi	r7,r7,-4
    62a8:	4abfff15 	stw	r10,-4(r9)
    62ac:	42000104 	addi	r8,r8,4
    62b0:	59fffa36 	bltu	r11,r7,629c <memcpy+0xc8>
    62b4:	213fff04 	addi	r4,r4,-4
    62b8:	2008d0ba 	srli	r4,r4,2
    62bc:	318000cc 	andi	r6,r6,3
    62c0:	21000044 	addi	r4,r4,1
    62c4:	2109883a 	add	r4,r4,r4
    62c8:	2109883a 	add	r4,r4,r4
    62cc:	1907883a 	add	r3,r3,r4
    62d0:	290b883a 	add	r5,r5,r4
    62d4:	30000626 	beq	r6,zero,62f0 <memcpy+0x11c>
    62d8:	198d883a 	add	r6,r3,r6
    62dc:	29c00003 	ldbu	r7,0(r5)
    62e0:	18c00044 	addi	r3,r3,1
    62e4:	29400044 	addi	r5,r5,1
    62e8:	19ffffc5 	stb	r7,-1(r3)
    62ec:	19bffb1e 	bne	r3,r6,62dc <memcpy+0x108>
    62f0:	dfc00217 	ldw	ra,8(sp)
    62f4:	dc400117 	ldw	r17,4(sp)
    62f8:	dc000017 	ldw	r16,0(sp)
    62fc:	dec00304 	addi	sp,sp,12
    6300:	f800283a 	ret
    6304:	2007883a 	mov	r3,r4
    6308:	003ff206 	br	62d4 <memcpy+0x100>
    630c:	2007883a 	mov	r3,r4
    6310:	003ff106 	br	62d8 <memcpy+0x104>
    6314:	200d883a 	mov	r6,r4
    6318:	003fee06 	br	62d4 <memcpy+0x100>

0000631c <_Balloc>:
    631c:	20801317 	ldw	r2,76(r4)
    6320:	defffc04 	addi	sp,sp,-16
    6324:	dc400115 	stw	r17,4(sp)
    6328:	dc000015 	stw	r16,0(sp)
    632c:	dfc00315 	stw	ra,12(sp)
    6330:	dc800215 	stw	r18,8(sp)
    6334:	2023883a 	mov	r17,r4
    6338:	2821883a 	mov	r16,r5
    633c:	10000f26 	beq	r2,zero,637c <_Balloc+0x60>
    6340:	8407883a 	add	r3,r16,r16
    6344:	18c7883a 	add	r3,r3,r3
    6348:	10c7883a 	add	r3,r2,r3
    634c:	18800017 	ldw	r2,0(r3)
    6350:	10001126 	beq	r2,zero,6398 <_Balloc+0x7c>
    6354:	11000017 	ldw	r4,0(r2)
    6358:	19000015 	stw	r4,0(r3)
    635c:	10000415 	stw	zero,16(r2)
    6360:	10000315 	stw	zero,12(r2)
    6364:	dfc00317 	ldw	ra,12(sp)
    6368:	dc800217 	ldw	r18,8(sp)
    636c:	dc400117 	ldw	r17,4(sp)
    6370:	dc000017 	ldw	r16,0(sp)
    6374:	dec00404 	addi	sp,sp,16
    6378:	f800283a 	ret
    637c:	01800844 	movi	r6,33
    6380:	01400104 	movi	r5,4
    6384:	00089600 	call	8960 <_calloc_r>
    6388:	88801315 	stw	r2,76(r17)
    638c:	103fec1e 	bne	r2,zero,6340 <_Balloc+0x24>
    6390:	0005883a 	mov	r2,zero
    6394:	003ff306 	br	6364 <_Balloc+0x48>
    6398:	01400044 	movi	r5,1
    639c:	2c24983a 	sll	r18,r5,r16
    63a0:	8809883a 	mov	r4,r17
    63a4:	91800144 	addi	r6,r18,5
    63a8:	318d883a 	add	r6,r6,r6
    63ac:	318d883a 	add	r6,r6,r6
    63b0:	00089600 	call	8960 <_calloc_r>
    63b4:	103ff626 	beq	r2,zero,6390 <_Balloc+0x74>
    63b8:	14000115 	stw	r16,4(r2)
    63bc:	14800215 	stw	r18,8(r2)
    63c0:	003fe606 	br	635c <_Balloc+0x40>

000063c4 <_Bfree>:
    63c4:	28000826 	beq	r5,zero,63e8 <_Bfree+0x24>
    63c8:	28c00117 	ldw	r3,4(r5)
    63cc:	20801317 	ldw	r2,76(r4)
    63d0:	18c7883a 	add	r3,r3,r3
    63d4:	18c7883a 	add	r3,r3,r3
    63d8:	10c5883a 	add	r2,r2,r3
    63dc:	10c00017 	ldw	r3,0(r2)
    63e0:	28c00015 	stw	r3,0(r5)
    63e4:	11400015 	stw	r5,0(r2)
    63e8:	f800283a 	ret

000063ec <__multadd>:
    63ec:	defffa04 	addi	sp,sp,-24
    63f0:	dc800315 	stw	r18,12(sp)
    63f4:	dc400215 	stw	r17,8(sp)
    63f8:	dc000115 	stw	r16,4(sp)
    63fc:	2823883a 	mov	r17,r5
    6400:	2c000417 	ldw	r16,16(r5)
    6404:	dfc00515 	stw	ra,20(sp)
    6408:	dcc00415 	stw	r19,16(sp)
    640c:	2025883a 	mov	r18,r4
    6410:	29400504 	addi	r5,r5,20
    6414:	0011883a 	mov	r8,zero
    6418:	28c00017 	ldw	r3,0(r5)
    641c:	29400104 	addi	r5,r5,4
    6420:	42000044 	addi	r8,r8,1
    6424:	18bfffcc 	andi	r2,r3,65535
    6428:	1185383a 	mul	r2,r2,r6
    642c:	1806d43a 	srli	r3,r3,16
    6430:	11cf883a 	add	r7,r2,r7
    6434:	3808d43a 	srli	r4,r7,16
    6438:	1987383a 	mul	r3,r3,r6
    643c:	38bfffcc 	andi	r2,r7,65535
    6440:	1907883a 	add	r3,r3,r4
    6444:	1808943a 	slli	r4,r3,16
    6448:	180ed43a 	srli	r7,r3,16
    644c:	2085883a 	add	r2,r4,r2
    6450:	28bfff15 	stw	r2,-4(r5)
    6454:	443ff016 	blt	r8,r16,6418 <__multadd+0x2c>
    6458:	38000926 	beq	r7,zero,6480 <__multadd+0x94>
    645c:	88800217 	ldw	r2,8(r17)
    6460:	80800f0e 	bge	r16,r2,64a0 <__multadd+0xb4>
    6464:	80800144 	addi	r2,r16,5
    6468:	1085883a 	add	r2,r2,r2
    646c:	1085883a 	add	r2,r2,r2
    6470:	8885883a 	add	r2,r17,r2
    6474:	11c00015 	stw	r7,0(r2)
    6478:	84000044 	addi	r16,r16,1
    647c:	8c000415 	stw	r16,16(r17)
    6480:	8805883a 	mov	r2,r17
    6484:	dfc00517 	ldw	ra,20(sp)
    6488:	dcc00417 	ldw	r19,16(sp)
    648c:	dc800317 	ldw	r18,12(sp)
    6490:	dc400217 	ldw	r17,8(sp)
    6494:	dc000117 	ldw	r16,4(sp)
    6498:	dec00604 	addi	sp,sp,24
    649c:	f800283a 	ret
    64a0:	89400117 	ldw	r5,4(r17)
    64a4:	9009883a 	mov	r4,r18
    64a8:	d9c00015 	stw	r7,0(sp)
    64ac:	29400044 	addi	r5,r5,1
    64b0:	000631c0 	call	631c <_Balloc>
    64b4:	89800417 	ldw	r6,16(r17)
    64b8:	89400304 	addi	r5,r17,12
    64bc:	11000304 	addi	r4,r2,12
    64c0:	31800084 	addi	r6,r6,2
    64c4:	318d883a 	add	r6,r6,r6
    64c8:	318d883a 	add	r6,r6,r6
    64cc:	1027883a 	mov	r19,r2
    64d0:	00061d40 	call	61d4 <memcpy>
    64d4:	d9c00017 	ldw	r7,0(sp)
    64d8:	88000a26 	beq	r17,zero,6504 <__multadd+0x118>
    64dc:	88c00117 	ldw	r3,4(r17)
    64e0:	90801317 	ldw	r2,76(r18)
    64e4:	18c7883a 	add	r3,r3,r3
    64e8:	18c7883a 	add	r3,r3,r3
    64ec:	10c5883a 	add	r2,r2,r3
    64f0:	10c00017 	ldw	r3,0(r2)
    64f4:	88c00015 	stw	r3,0(r17)
    64f8:	14400015 	stw	r17,0(r2)
    64fc:	9823883a 	mov	r17,r19
    6500:	003fd806 	br	6464 <__multadd+0x78>
    6504:	9823883a 	mov	r17,r19
    6508:	003fd606 	br	6464 <__multadd+0x78>

0000650c <__s2b>:
    650c:	defff904 	addi	sp,sp,-28
    6510:	dc400115 	stw	r17,4(sp)
    6514:	dc000015 	stw	r16,0(sp)
    6518:	2023883a 	mov	r17,r4
    651c:	2821883a 	mov	r16,r5
    6520:	39000204 	addi	r4,r7,8
    6524:	01400244 	movi	r5,9
    6528:	dcc00315 	stw	r19,12(sp)
    652c:	dc800215 	stw	r18,8(sp)
    6530:	dfc00615 	stw	ra,24(sp)
    6534:	dd400515 	stw	r21,20(sp)
    6538:	dd000415 	stw	r20,16(sp)
    653c:	3825883a 	mov	r18,r7
    6540:	3027883a 	mov	r19,r6
    6544:	000a0f00 	call	a0f0 <__divsi3>
    6548:	00c00044 	movi	r3,1
    654c:	000b883a 	mov	r5,zero
    6550:	1880030e 	bge	r3,r2,6560 <__s2b+0x54>
    6554:	18c7883a 	add	r3,r3,r3
    6558:	29400044 	addi	r5,r5,1
    655c:	18bffd16 	blt	r3,r2,6554 <__s2b+0x48>
    6560:	8809883a 	mov	r4,r17
    6564:	000631c0 	call	631c <_Balloc>
    6568:	d8c00717 	ldw	r3,28(sp)
    656c:	10c00515 	stw	r3,20(r2)
    6570:	00c00044 	movi	r3,1
    6574:	10c00415 	stw	r3,16(r2)
    6578:	00c00244 	movi	r3,9
    657c:	1cc0210e 	bge	r3,r19,6604 <__s2b+0xf8>
    6580:	80eb883a 	add	r21,r16,r3
    6584:	a829883a 	mov	r20,r21
    6588:	84e1883a 	add	r16,r16,r19
    658c:	a1c00007 	ldb	r7,0(r20)
    6590:	01800284 	movi	r6,10
    6594:	a5000044 	addi	r20,r20,1
    6598:	100b883a 	mov	r5,r2
    659c:	39fff404 	addi	r7,r7,-48
    65a0:	8809883a 	mov	r4,r17
    65a4:	00063ec0 	call	63ec <__multadd>
    65a8:	a43ff81e 	bne	r20,r16,658c <__s2b+0x80>
    65ac:	ace1883a 	add	r16,r21,r19
    65b0:	843ffe04 	addi	r16,r16,-8
    65b4:	9c800a0e 	bge	r19,r18,65e0 <__s2b+0xd4>
    65b8:	94e5c83a 	sub	r18,r18,r19
    65bc:	84a5883a 	add	r18,r16,r18
    65c0:	81c00007 	ldb	r7,0(r16)
    65c4:	01800284 	movi	r6,10
    65c8:	84000044 	addi	r16,r16,1
    65cc:	100b883a 	mov	r5,r2
    65d0:	39fff404 	addi	r7,r7,-48
    65d4:	8809883a 	mov	r4,r17
    65d8:	00063ec0 	call	63ec <__multadd>
    65dc:	84bff81e 	bne	r16,r18,65c0 <__s2b+0xb4>
    65e0:	dfc00617 	ldw	ra,24(sp)
    65e4:	dd400517 	ldw	r21,20(sp)
    65e8:	dd000417 	ldw	r20,16(sp)
    65ec:	dcc00317 	ldw	r19,12(sp)
    65f0:	dc800217 	ldw	r18,8(sp)
    65f4:	dc400117 	ldw	r17,4(sp)
    65f8:	dc000017 	ldw	r16,0(sp)
    65fc:	dec00704 	addi	sp,sp,28
    6600:	f800283a 	ret
    6604:	84000284 	addi	r16,r16,10
    6608:	1827883a 	mov	r19,r3
    660c:	003fe906 	br	65b4 <__s2b+0xa8>

00006610 <__hi0bits>:
    6610:	20bfffec 	andhi	r2,r4,65535
    6614:	1000141e 	bne	r2,zero,6668 <__hi0bits+0x58>
    6618:	2008943a 	slli	r4,r4,16
    661c:	00800404 	movi	r2,16
    6620:	20ffc02c 	andhi	r3,r4,65280
    6624:	1800021e 	bne	r3,zero,6630 <__hi0bits+0x20>
    6628:	2008923a 	slli	r4,r4,8
    662c:	10800204 	addi	r2,r2,8
    6630:	20fc002c 	andhi	r3,r4,61440
    6634:	1800021e 	bne	r3,zero,6640 <__hi0bits+0x30>
    6638:	2008913a 	slli	r4,r4,4
    663c:	10800104 	addi	r2,r2,4
    6640:	20f0002c 	andhi	r3,r4,49152
    6644:	1800031e 	bne	r3,zero,6654 <__hi0bits+0x44>
    6648:	2109883a 	add	r4,r4,r4
    664c:	10800084 	addi	r2,r2,2
    6650:	2109883a 	add	r4,r4,r4
    6654:	20000316 	blt	r4,zero,6664 <__hi0bits+0x54>
    6658:	2110002c 	andhi	r4,r4,16384
    665c:	2000041e 	bne	r4,zero,6670 <__hi0bits+0x60>
    6660:	00800804 	movi	r2,32
    6664:	f800283a 	ret
    6668:	0005883a 	mov	r2,zero
    666c:	003fec06 	br	6620 <__hi0bits+0x10>
    6670:	10800044 	addi	r2,r2,1
    6674:	f800283a 	ret

00006678 <__lo0bits>:
    6678:	20c00017 	ldw	r3,0(r4)
    667c:	188001cc 	andi	r2,r3,7
    6680:	10000826 	beq	r2,zero,66a4 <__lo0bits+0x2c>
    6684:	1880004c 	andi	r2,r3,1
    6688:	1000211e 	bne	r2,zero,6710 <__lo0bits+0x98>
    668c:	1880008c 	andi	r2,r3,2
    6690:	1000211e 	bne	r2,zero,6718 <__lo0bits+0xa0>
    6694:	1806d0ba 	srli	r3,r3,2
    6698:	00800084 	movi	r2,2
    669c:	20c00015 	stw	r3,0(r4)
    66a0:	f800283a 	ret
    66a4:	18bfffcc 	andi	r2,r3,65535
    66a8:	10001326 	beq	r2,zero,66f8 <__lo0bits+0x80>
    66ac:	0005883a 	mov	r2,zero
    66b0:	19403fcc 	andi	r5,r3,255
    66b4:	2800021e 	bne	r5,zero,66c0 <__lo0bits+0x48>
    66b8:	1806d23a 	srli	r3,r3,8
    66bc:	10800204 	addi	r2,r2,8
    66c0:	194003cc 	andi	r5,r3,15
    66c4:	2800021e 	bne	r5,zero,66d0 <__lo0bits+0x58>
    66c8:	1806d13a 	srli	r3,r3,4
    66cc:	10800104 	addi	r2,r2,4
    66d0:	194000cc 	andi	r5,r3,3
    66d4:	2800021e 	bne	r5,zero,66e0 <__lo0bits+0x68>
    66d8:	1806d0ba 	srli	r3,r3,2
    66dc:	10800084 	addi	r2,r2,2
    66e0:	1940004c 	andi	r5,r3,1
    66e4:	2800081e 	bne	r5,zero,6708 <__lo0bits+0x90>
    66e8:	1806d07a 	srli	r3,r3,1
    66ec:	1800051e 	bne	r3,zero,6704 <__lo0bits+0x8c>
    66f0:	00800804 	movi	r2,32
    66f4:	f800283a 	ret
    66f8:	1806d43a 	srli	r3,r3,16
    66fc:	00800404 	movi	r2,16
    6700:	003feb06 	br	66b0 <__lo0bits+0x38>
    6704:	10800044 	addi	r2,r2,1
    6708:	20c00015 	stw	r3,0(r4)
    670c:	f800283a 	ret
    6710:	0005883a 	mov	r2,zero
    6714:	f800283a 	ret
    6718:	1806d07a 	srli	r3,r3,1
    671c:	00800044 	movi	r2,1
    6720:	20c00015 	stw	r3,0(r4)
    6724:	f800283a 	ret

00006728 <__i2b>:
    6728:	defffd04 	addi	sp,sp,-12
    672c:	dc000015 	stw	r16,0(sp)
    6730:	04000044 	movi	r16,1
    6734:	dc400115 	stw	r17,4(sp)
    6738:	2823883a 	mov	r17,r5
    673c:	800b883a 	mov	r5,r16
    6740:	dfc00215 	stw	ra,8(sp)
    6744:	000631c0 	call	631c <_Balloc>
    6748:	14400515 	stw	r17,20(r2)
    674c:	14000415 	stw	r16,16(r2)
    6750:	dfc00217 	ldw	ra,8(sp)
    6754:	dc400117 	ldw	r17,4(sp)
    6758:	dc000017 	ldw	r16,0(sp)
    675c:	dec00304 	addi	sp,sp,12
    6760:	f800283a 	ret

00006764 <__multiply>:
    6764:	defffa04 	addi	sp,sp,-24
    6768:	dcc00315 	stw	r19,12(sp)
    676c:	dc800215 	stw	r18,8(sp)
    6770:	34c00417 	ldw	r19,16(r6)
    6774:	2c800417 	ldw	r18,16(r5)
    6778:	dd000415 	stw	r20,16(sp)
    677c:	dc400115 	stw	r17,4(sp)
    6780:	dfc00515 	stw	ra,20(sp)
    6784:	dc000015 	stw	r16,0(sp)
    6788:	2829883a 	mov	r20,r5
    678c:	3023883a 	mov	r17,r6
    6790:	94c0050e 	bge	r18,r19,67a8 <__multiply+0x44>
    6794:	9007883a 	mov	r3,r18
    6798:	3029883a 	mov	r20,r6
    679c:	9825883a 	mov	r18,r19
    67a0:	2823883a 	mov	r17,r5
    67a4:	1827883a 	mov	r19,r3
    67a8:	a0800217 	ldw	r2,8(r20)
    67ac:	94e1883a 	add	r16,r18,r19
    67b0:	a1400117 	ldw	r5,4(r20)
    67b4:	1400010e 	bge	r2,r16,67bc <__multiply+0x58>
    67b8:	29400044 	addi	r5,r5,1
    67bc:	000631c0 	call	631c <_Balloc>
    67c0:	8415883a 	add	r10,r16,r16
    67c4:	12c00504 	addi	r11,r2,20
    67c8:	5295883a 	add	r10,r10,r10
    67cc:	5a95883a 	add	r10,r11,r10
    67d0:	5807883a 	mov	r3,r11
    67d4:	5a80032e 	bgeu	r11,r10,67e4 <__multiply+0x80>
    67d8:	18000015 	stw	zero,0(r3)
    67dc:	18c00104 	addi	r3,r3,4
    67e0:	1abffd36 	bltu	r3,r10,67d8 <__multiply+0x74>
    67e4:	9ce7883a 	add	r19,r19,r19
    67e8:	94a5883a 	add	r18,r18,r18
    67ec:	89800504 	addi	r6,r17,20
    67f0:	9ce7883a 	add	r19,r19,r19
    67f4:	a3400504 	addi	r13,r20,20
    67f8:	94a5883a 	add	r18,r18,r18
    67fc:	34d9883a 	add	r12,r6,r19
    6800:	6c93883a 	add	r9,r13,r18
    6804:	3300422e 	bgeu	r6,r12,6910 <__multiply+0x1ac>
    6808:	37c00017 	ldw	ra,0(r6)
    680c:	fbffffcc 	andi	r15,ra,65535
    6810:	78001b26 	beq	r15,zero,6880 <__multiply+0x11c>
    6814:	5811883a 	mov	r8,r11
    6818:	681d883a 	mov	r14,r13
    681c:	000f883a 	mov	r7,zero
    6820:	71000017 	ldw	r4,0(r14)
    6824:	40c00017 	ldw	r3,0(r8)
    6828:	73800104 	addi	r14,r14,4
    682c:	217fffcc 	andi	r5,r4,65535
    6830:	2bcb383a 	mul	r5,r5,r15
    6834:	2008d43a 	srli	r4,r4,16
    6838:	1c7fffcc 	andi	r17,r3,65535
    683c:	2c4b883a 	add	r5,r5,r17
    6840:	29cb883a 	add	r5,r5,r7
    6844:	23c9383a 	mul	r4,r4,r15
    6848:	1806d43a 	srli	r3,r3,16
    684c:	280ed43a 	srli	r7,r5,16
    6850:	297fffcc 	andi	r5,r5,65535
    6854:	20c7883a 	add	r3,r4,r3
    6858:	19c7883a 	add	r3,r3,r7
    685c:	1808943a 	slli	r4,r3,16
    6860:	4023883a 	mov	r17,r8
    6864:	180ed43a 	srli	r7,r3,16
    6868:	214ab03a 	or	r5,r4,r5
    686c:	41400015 	stw	r5,0(r8)
    6870:	42000104 	addi	r8,r8,4
    6874:	727fea36 	bltu	r14,r9,6820 <__multiply+0xbc>
    6878:	89c00115 	stw	r7,4(r17)
    687c:	37c00017 	ldw	ra,0(r6)
    6880:	f83ed43a 	srli	ra,ra,16
    6884:	f8001f26 	beq	ra,zero,6904 <__multiply+0x1a0>
    6888:	58c00017 	ldw	r3,0(r11)
    688c:	681d883a 	mov	r14,r13
    6890:	581f883a 	mov	r15,r11
    6894:	1811883a 	mov	r8,r3
    6898:	5825883a 	mov	r18,r11
    689c:	000f883a 	mov	r7,zero
    68a0:	00000106 	br	68a8 <__multiply+0x144>
    68a4:	8825883a 	mov	r18,r17
    68a8:	7140000b 	ldhu	r5,0(r14)
    68ac:	4010d43a 	srli	r8,r8,16
    68b0:	193fffcc 	andi	r4,r3,65535
    68b4:	2fcb383a 	mul	r5,r5,ra
    68b8:	7bc00104 	addi	r15,r15,4
    68bc:	73800104 	addi	r14,r14,4
    68c0:	2a0b883a 	add	r5,r5,r8
    68c4:	29cb883a 	add	r5,r5,r7
    68c8:	2806943a 	slli	r3,r5,16
    68cc:	94400104 	addi	r17,r18,4
    68d0:	280ad43a 	srli	r5,r5,16
    68d4:	1908b03a 	or	r4,r3,r4
    68d8:	793fff15 	stw	r4,-4(r15)
    68dc:	70ffff17 	ldw	r3,-4(r14)
    68e0:	8a000017 	ldw	r8,0(r17)
    68e4:	1806d43a 	srli	r3,r3,16
    68e8:	413fffcc 	andi	r4,r8,65535
    68ec:	1fc7383a 	mul	r3,r3,ra
    68f0:	1907883a 	add	r3,r3,r4
    68f4:	1947883a 	add	r3,r3,r5
    68f8:	180ed43a 	srli	r7,r3,16
    68fc:	727fe936 	bltu	r14,r9,68a4 <__multiply+0x140>
    6900:	90c00115 	stw	r3,4(r18)
    6904:	31800104 	addi	r6,r6,4
    6908:	5ac00104 	addi	r11,r11,4
    690c:	333fbe36 	bltu	r6,r12,6808 <__multiply+0xa4>
    6910:	0400090e 	bge	zero,r16,6938 <__multiply+0x1d4>
    6914:	50ffff17 	ldw	r3,-4(r10)
    6918:	52bfff04 	addi	r10,r10,-4
    691c:	18000326 	beq	r3,zero,692c <__multiply+0x1c8>
    6920:	00000506 	br	6938 <__multiply+0x1d4>
    6924:	50c00017 	ldw	r3,0(r10)
    6928:	1800031e 	bne	r3,zero,6938 <__multiply+0x1d4>
    692c:	843fffc4 	addi	r16,r16,-1
    6930:	52bfff04 	addi	r10,r10,-4
    6934:	803ffb1e 	bne	r16,zero,6924 <__multiply+0x1c0>
    6938:	14000415 	stw	r16,16(r2)
    693c:	dfc00517 	ldw	ra,20(sp)
    6940:	dd000417 	ldw	r20,16(sp)
    6944:	dcc00317 	ldw	r19,12(sp)
    6948:	dc800217 	ldw	r18,8(sp)
    694c:	dc400117 	ldw	r17,4(sp)
    6950:	dc000017 	ldw	r16,0(sp)
    6954:	dec00604 	addi	sp,sp,24
    6958:	f800283a 	ret

0000695c <__pow5mult>:
    695c:	defffa04 	addi	sp,sp,-24
    6960:	dcc00315 	stw	r19,12(sp)
    6964:	dc000015 	stw	r16,0(sp)
    6968:	dfc00515 	stw	ra,20(sp)
    696c:	dd000415 	stw	r20,16(sp)
    6970:	dc800215 	stw	r18,8(sp)
    6974:	dc400115 	stw	r17,4(sp)
    6978:	308000cc 	andi	r2,r6,3
    697c:	3021883a 	mov	r16,r6
    6980:	2027883a 	mov	r19,r4
    6984:	10002f1e 	bne	r2,zero,6a44 <__pow5mult+0xe8>
    6988:	2825883a 	mov	r18,r5
    698c:	8021d0ba 	srai	r16,r16,2
    6990:	80001a26 	beq	r16,zero,69fc <__pow5mult+0xa0>
    6994:	9c401217 	ldw	r17,72(r19)
    6998:	8800061e 	bne	r17,zero,69b4 <__pow5mult+0x58>
    699c:	00003406 	br	6a70 <__pow5mult+0x114>
    69a0:	8021d07a 	srai	r16,r16,1
    69a4:	80001526 	beq	r16,zero,69fc <__pow5mult+0xa0>
    69a8:	88800017 	ldw	r2,0(r17)
    69ac:	10001c26 	beq	r2,zero,6a20 <__pow5mult+0xc4>
    69b0:	1023883a 	mov	r17,r2
    69b4:	8080004c 	andi	r2,r16,1
    69b8:	103ff926 	beq	r2,zero,69a0 <__pow5mult+0x44>
    69bc:	880d883a 	mov	r6,r17
    69c0:	900b883a 	mov	r5,r18
    69c4:	9809883a 	mov	r4,r19
    69c8:	00067640 	call	6764 <__multiply>
    69cc:	90001b26 	beq	r18,zero,6a3c <__pow5mult+0xe0>
    69d0:	91000117 	ldw	r4,4(r18)
    69d4:	98c01317 	ldw	r3,76(r19)
    69d8:	8021d07a 	srai	r16,r16,1
    69dc:	2109883a 	add	r4,r4,r4
    69e0:	2109883a 	add	r4,r4,r4
    69e4:	1907883a 	add	r3,r3,r4
    69e8:	19000017 	ldw	r4,0(r3)
    69ec:	91000015 	stw	r4,0(r18)
    69f0:	1c800015 	stw	r18,0(r3)
    69f4:	1025883a 	mov	r18,r2
    69f8:	803feb1e 	bne	r16,zero,69a8 <__pow5mult+0x4c>
    69fc:	9005883a 	mov	r2,r18
    6a00:	dfc00517 	ldw	ra,20(sp)
    6a04:	dd000417 	ldw	r20,16(sp)
    6a08:	dcc00317 	ldw	r19,12(sp)
    6a0c:	dc800217 	ldw	r18,8(sp)
    6a10:	dc400117 	ldw	r17,4(sp)
    6a14:	dc000017 	ldw	r16,0(sp)
    6a18:	dec00604 	addi	sp,sp,24
    6a1c:	f800283a 	ret
    6a20:	880d883a 	mov	r6,r17
    6a24:	880b883a 	mov	r5,r17
    6a28:	9809883a 	mov	r4,r19
    6a2c:	00067640 	call	6764 <__multiply>
    6a30:	88800015 	stw	r2,0(r17)
    6a34:	10000015 	stw	zero,0(r2)
    6a38:	003fdd06 	br	69b0 <__pow5mult+0x54>
    6a3c:	1025883a 	mov	r18,r2
    6a40:	003fd706 	br	69a0 <__pow5mult+0x44>
    6a44:	10bfffc4 	addi	r2,r2,-1
    6a48:	1085883a 	add	r2,r2,r2
    6a4c:	00c000b4 	movhi	r3,2
    6a50:	18e9ea04 	addi	r3,r3,-22616
    6a54:	1085883a 	add	r2,r2,r2
    6a58:	1885883a 	add	r2,r3,r2
    6a5c:	11800017 	ldw	r6,0(r2)
    6a60:	000f883a 	mov	r7,zero
    6a64:	00063ec0 	call	63ec <__multadd>
    6a68:	1025883a 	mov	r18,r2
    6a6c:	003fc706 	br	698c <__pow5mult+0x30>
    6a70:	05000044 	movi	r20,1
    6a74:	a00b883a 	mov	r5,r20
    6a78:	9809883a 	mov	r4,r19
    6a7c:	000631c0 	call	631c <_Balloc>
    6a80:	1023883a 	mov	r17,r2
    6a84:	00809c44 	movi	r2,625
    6a88:	88800515 	stw	r2,20(r17)
    6a8c:	8d000415 	stw	r20,16(r17)
    6a90:	9c401215 	stw	r17,72(r19)
    6a94:	88000015 	stw	zero,0(r17)
    6a98:	003fc606 	br	69b4 <__pow5mult+0x58>

00006a9c <__lshift>:
    6a9c:	defff904 	addi	sp,sp,-28
    6aa0:	dd400515 	stw	r21,20(sp)
    6aa4:	dcc00315 	stw	r19,12(sp)
    6aa8:	302bd17a 	srai	r21,r6,5
    6aac:	2cc00417 	ldw	r19,16(r5)
    6ab0:	28800217 	ldw	r2,8(r5)
    6ab4:	dd000415 	stw	r20,16(sp)
    6ab8:	ace7883a 	add	r19,r21,r19
    6abc:	dc800215 	stw	r18,8(sp)
    6ac0:	dc400115 	stw	r17,4(sp)
    6ac4:	dc000015 	stw	r16,0(sp)
    6ac8:	dfc00615 	stw	ra,24(sp)
    6acc:	9c000044 	addi	r16,r19,1
    6ad0:	2823883a 	mov	r17,r5
    6ad4:	3029883a 	mov	r20,r6
    6ad8:	2025883a 	mov	r18,r4
    6adc:	29400117 	ldw	r5,4(r5)
    6ae0:	1400030e 	bge	r2,r16,6af0 <__lshift+0x54>
    6ae4:	1085883a 	add	r2,r2,r2
    6ae8:	29400044 	addi	r5,r5,1
    6aec:	143ffd16 	blt	r2,r16,6ae4 <__lshift+0x48>
    6af0:	9009883a 	mov	r4,r18
    6af4:	000631c0 	call	631c <_Balloc>
    6af8:	10c00504 	addi	r3,r2,20
    6afc:	0540070e 	bge	zero,r21,6b1c <__lshift+0x80>
    6b00:	ad6b883a 	add	r21,r21,r21
    6b04:	ad6b883a 	add	r21,r21,r21
    6b08:	1809883a 	mov	r4,r3
    6b0c:	1d47883a 	add	r3,r3,r21
    6b10:	20000015 	stw	zero,0(r4)
    6b14:	21000104 	addi	r4,r4,4
    6b18:	193ffd1e 	bne	r3,r4,6b10 <__lshift+0x74>
    6b1c:	8a000417 	ldw	r8,16(r17)
    6b20:	89000504 	addi	r4,r17,20
    6b24:	a18007cc 	andi	r6,r20,31
    6b28:	4211883a 	add	r8,r8,r8
    6b2c:	4211883a 	add	r8,r8,r8
    6b30:	2211883a 	add	r8,r4,r8
    6b34:	30002326 	beq	r6,zero,6bc4 <__lshift+0x128>
    6b38:	02400804 	movi	r9,32
    6b3c:	4993c83a 	sub	r9,r9,r6
    6b40:	000b883a 	mov	r5,zero
    6b44:	21c00017 	ldw	r7,0(r4)
    6b48:	1815883a 	mov	r10,r3
    6b4c:	18c00104 	addi	r3,r3,4
    6b50:	398e983a 	sll	r7,r7,r6
    6b54:	21000104 	addi	r4,r4,4
    6b58:	394ab03a 	or	r5,r7,r5
    6b5c:	197fff15 	stw	r5,-4(r3)
    6b60:	217fff17 	ldw	r5,-4(r4)
    6b64:	2a4ad83a 	srl	r5,r5,r9
    6b68:	223ff636 	bltu	r4,r8,6b44 <__lshift+0xa8>
    6b6c:	51400115 	stw	r5,4(r10)
    6b70:	28001a1e 	bne	r5,zero,6bdc <__lshift+0x140>
    6b74:	843fffc4 	addi	r16,r16,-1
    6b78:	14000415 	stw	r16,16(r2)
    6b7c:	88000826 	beq	r17,zero,6ba0 <__lshift+0x104>
    6b80:	89000117 	ldw	r4,4(r17)
    6b84:	90c01317 	ldw	r3,76(r18)
    6b88:	2109883a 	add	r4,r4,r4
    6b8c:	2109883a 	add	r4,r4,r4
    6b90:	1907883a 	add	r3,r3,r4
    6b94:	19000017 	ldw	r4,0(r3)
    6b98:	89000015 	stw	r4,0(r17)
    6b9c:	1c400015 	stw	r17,0(r3)
    6ba0:	dfc00617 	ldw	ra,24(sp)
    6ba4:	dd400517 	ldw	r21,20(sp)
    6ba8:	dd000417 	ldw	r20,16(sp)
    6bac:	dcc00317 	ldw	r19,12(sp)
    6bb0:	dc800217 	ldw	r18,8(sp)
    6bb4:	dc400117 	ldw	r17,4(sp)
    6bb8:	dc000017 	ldw	r16,0(sp)
    6bbc:	dec00704 	addi	sp,sp,28
    6bc0:	f800283a 	ret
    6bc4:	21400017 	ldw	r5,0(r4)
    6bc8:	18c00104 	addi	r3,r3,4
    6bcc:	21000104 	addi	r4,r4,4
    6bd0:	197fff15 	stw	r5,-4(r3)
    6bd4:	223ffb36 	bltu	r4,r8,6bc4 <__lshift+0x128>
    6bd8:	003fe606 	br	6b74 <__lshift+0xd8>
    6bdc:	9c000084 	addi	r16,r19,2
    6be0:	003fe406 	br	6b74 <__lshift+0xd8>

00006be4 <__mcmp>:
    6be4:	20800417 	ldw	r2,16(r4)
    6be8:	28c00417 	ldw	r3,16(r5)
    6bec:	10c5c83a 	sub	r2,r2,r3
    6bf0:	1000111e 	bne	r2,zero,6c38 <__mcmp+0x54>
    6bf4:	18c7883a 	add	r3,r3,r3
    6bf8:	18c7883a 	add	r3,r3,r3
    6bfc:	21000504 	addi	r4,r4,20
    6c00:	29400504 	addi	r5,r5,20
    6c04:	20c5883a 	add	r2,r4,r3
    6c08:	28cb883a 	add	r5,r5,r3
    6c0c:	00000106 	br	6c14 <__mcmp+0x30>
    6c10:	20800a2e 	bgeu	r4,r2,6c3c <__mcmp+0x58>
    6c14:	10bfff04 	addi	r2,r2,-4
    6c18:	297fff04 	addi	r5,r5,-4
    6c1c:	11800017 	ldw	r6,0(r2)
    6c20:	28c00017 	ldw	r3,0(r5)
    6c24:	30fffa26 	beq	r6,r3,6c10 <__mcmp+0x2c>
    6c28:	30c00236 	bltu	r6,r3,6c34 <__mcmp+0x50>
    6c2c:	00800044 	movi	r2,1
    6c30:	f800283a 	ret
    6c34:	00bfffc4 	movi	r2,-1
    6c38:	f800283a 	ret
    6c3c:	0005883a 	mov	r2,zero
    6c40:	f800283a 	ret

00006c44 <__mdiff>:
    6c44:	28c00417 	ldw	r3,16(r5)
    6c48:	30800417 	ldw	r2,16(r6)
    6c4c:	defffa04 	addi	sp,sp,-24
    6c50:	dcc00315 	stw	r19,12(sp)
    6c54:	dc800215 	stw	r18,8(sp)
    6c58:	dfc00515 	stw	ra,20(sp)
    6c5c:	dd000415 	stw	r20,16(sp)
    6c60:	dc400115 	stw	r17,4(sp)
    6c64:	dc000015 	stw	r16,0(sp)
    6c68:	1887c83a 	sub	r3,r3,r2
    6c6c:	2825883a 	mov	r18,r5
    6c70:	3027883a 	mov	r19,r6
    6c74:	1800141e 	bne	r3,zero,6cc8 <__mdiff+0x84>
    6c78:	1085883a 	add	r2,r2,r2
    6c7c:	1085883a 	add	r2,r2,r2
    6c80:	2a000504 	addi	r8,r5,20
    6c84:	34000504 	addi	r16,r6,20
    6c88:	4087883a 	add	r3,r8,r2
    6c8c:	8085883a 	add	r2,r16,r2
    6c90:	00000106 	br	6c98 <__mdiff+0x54>
    6c94:	40c0592e 	bgeu	r8,r3,6dfc <__mdiff+0x1b8>
    6c98:	18ffff04 	addi	r3,r3,-4
    6c9c:	10bfff04 	addi	r2,r2,-4
    6ca0:	19c00017 	ldw	r7,0(r3)
    6ca4:	11400017 	ldw	r5,0(r2)
    6ca8:	397ffa26 	beq	r7,r5,6c94 <__mdiff+0x50>
    6cac:	3940592e 	bgeu	r7,r5,6e14 <__mdiff+0x1d0>
    6cb0:	9005883a 	mov	r2,r18
    6cb4:	4023883a 	mov	r17,r8
    6cb8:	9825883a 	mov	r18,r19
    6cbc:	05000044 	movi	r20,1
    6cc0:	1027883a 	mov	r19,r2
    6cc4:	00000406 	br	6cd8 <__mdiff+0x94>
    6cc8:	18005616 	blt	r3,zero,6e24 <__mdiff+0x1e0>
    6ccc:	34400504 	addi	r17,r6,20
    6cd0:	2c000504 	addi	r16,r5,20
    6cd4:	0029883a 	mov	r20,zero
    6cd8:	91400117 	ldw	r5,4(r18)
    6cdc:	000631c0 	call	631c <_Balloc>
    6ce0:	92400417 	ldw	r9,16(r18)
    6ce4:	9b000417 	ldw	r12,16(r19)
    6ce8:	12c00504 	addi	r11,r2,20
    6cec:	4a51883a 	add	r8,r9,r9
    6cf0:	6319883a 	add	r12,r12,r12
    6cf4:	4211883a 	add	r8,r8,r8
    6cf8:	6319883a 	add	r12,r12,r12
    6cfc:	15000315 	stw	r20,12(r2)
    6d00:	8211883a 	add	r8,r16,r8
    6d04:	8b19883a 	add	r12,r17,r12
    6d08:	0007883a 	mov	r3,zero
    6d0c:	81400017 	ldw	r5,0(r16)
    6d10:	89c00017 	ldw	r7,0(r17)
    6d14:	59800104 	addi	r6,r11,4
    6d18:	293fffcc 	andi	r4,r5,65535
    6d1c:	20c7883a 	add	r3,r4,r3
    6d20:	393fffcc 	andi	r4,r7,65535
    6d24:	1909c83a 	sub	r4,r3,r4
    6d28:	280ad43a 	srli	r5,r5,16
    6d2c:	380ed43a 	srli	r7,r7,16
    6d30:	2007d43a 	srai	r3,r4,16
    6d34:	213fffcc 	andi	r4,r4,65535
    6d38:	29cbc83a 	sub	r5,r5,r7
    6d3c:	28c7883a 	add	r3,r5,r3
    6d40:	180a943a 	slli	r5,r3,16
    6d44:	8c400104 	addi	r17,r17,4
    6d48:	84000104 	addi	r16,r16,4
    6d4c:	2908b03a 	or	r4,r5,r4
    6d50:	59000015 	stw	r4,0(r11)
    6d54:	1807d43a 	srai	r3,r3,16
    6d58:	3015883a 	mov	r10,r6
    6d5c:	3017883a 	mov	r11,r6
    6d60:	8b3fea36 	bltu	r17,r12,6d0c <__mdiff+0xc8>
    6d64:	8200162e 	bgeu	r16,r8,6dc0 <__mdiff+0x17c>
    6d68:	8017883a 	mov	r11,r16
    6d6c:	59400017 	ldw	r5,0(r11)
    6d70:	31800104 	addi	r6,r6,4
    6d74:	5ac00104 	addi	r11,r11,4
    6d78:	293fffcc 	andi	r4,r5,65535
    6d7c:	20c7883a 	add	r3,r4,r3
    6d80:	280ed43a 	srli	r7,r5,16
    6d84:	180bd43a 	srai	r5,r3,16
    6d88:	193fffcc 	andi	r4,r3,65535
    6d8c:	3947883a 	add	r3,r7,r5
    6d90:	180a943a 	slli	r5,r3,16
    6d94:	1807d43a 	srai	r3,r3,16
    6d98:	2908b03a 	or	r4,r5,r4
    6d9c:	313fff15 	stw	r4,-4(r6)
    6da0:	5a3ff236 	bltu	r11,r8,6d6c <__mdiff+0x128>
    6da4:	0406303a 	nor	r3,zero,r16
    6da8:	1a07883a 	add	r3,r3,r8
    6dac:	1806d0ba 	srli	r3,r3,2
    6db0:	18c00044 	addi	r3,r3,1
    6db4:	18c7883a 	add	r3,r3,r3
    6db8:	18c7883a 	add	r3,r3,r3
    6dbc:	50d5883a 	add	r10,r10,r3
    6dc0:	50ffff04 	addi	r3,r10,-4
    6dc4:	2000041e 	bne	r4,zero,6dd8 <__mdiff+0x194>
    6dc8:	18ffff04 	addi	r3,r3,-4
    6dcc:	19000017 	ldw	r4,0(r3)
    6dd0:	4a7fffc4 	addi	r9,r9,-1
    6dd4:	203ffc26 	beq	r4,zero,6dc8 <__mdiff+0x184>
    6dd8:	12400415 	stw	r9,16(r2)
    6ddc:	dfc00517 	ldw	ra,20(sp)
    6de0:	dd000417 	ldw	r20,16(sp)
    6de4:	dcc00317 	ldw	r19,12(sp)
    6de8:	dc800217 	ldw	r18,8(sp)
    6dec:	dc400117 	ldw	r17,4(sp)
    6df0:	dc000017 	ldw	r16,0(sp)
    6df4:	dec00604 	addi	sp,sp,24
    6df8:	f800283a 	ret
    6dfc:	000b883a 	mov	r5,zero
    6e00:	000631c0 	call	631c <_Balloc>
    6e04:	00c00044 	movi	r3,1
    6e08:	10c00415 	stw	r3,16(r2)
    6e0c:	10000515 	stw	zero,20(r2)
    6e10:	003ff206 	br	6ddc <__mdiff+0x198>
    6e14:	8023883a 	mov	r17,r16
    6e18:	0029883a 	mov	r20,zero
    6e1c:	4021883a 	mov	r16,r8
    6e20:	003fad06 	br	6cd8 <__mdiff+0x94>
    6e24:	9005883a 	mov	r2,r18
    6e28:	94400504 	addi	r17,r18,20
    6e2c:	9c000504 	addi	r16,r19,20
    6e30:	9825883a 	mov	r18,r19
    6e34:	05000044 	movi	r20,1
    6e38:	1027883a 	mov	r19,r2
    6e3c:	003fa606 	br	6cd8 <__mdiff+0x94>

00006e40 <__ulp>:
    6e40:	295ffc2c 	andhi	r5,r5,32752
    6e44:	00bf3034 	movhi	r2,64704
    6e48:	2887883a 	add	r3,r5,r2
    6e4c:	00c0020e 	bge	zero,r3,6e58 <__ulp+0x18>
    6e50:	0005883a 	mov	r2,zero
    6e54:	f800283a 	ret
    6e58:	00c7c83a 	sub	r3,zero,r3
    6e5c:	1807d53a 	srai	r3,r3,20
    6e60:	008004c4 	movi	r2,19
    6e64:	10c00b0e 	bge	r2,r3,6e94 <__ulp+0x54>
    6e68:	18bffb04 	addi	r2,r3,-20
    6e6c:	01000784 	movi	r4,30
    6e70:	0007883a 	mov	r3,zero
    6e74:	20800516 	blt	r4,r2,6e8c <__ulp+0x4c>
    6e78:	010007c4 	movi	r4,31
    6e7c:	2089c83a 	sub	r4,r4,r2
    6e80:	00800044 	movi	r2,1
    6e84:	1104983a 	sll	r2,r2,r4
    6e88:	f800283a 	ret
    6e8c:	00800044 	movi	r2,1
    6e90:	f800283a 	ret
    6e94:	01400234 	movhi	r5,8
    6e98:	28c7d83a 	sra	r3,r5,r3
    6e9c:	0005883a 	mov	r2,zero
    6ea0:	f800283a 	ret

00006ea4 <__b2d>:
    6ea4:	defffa04 	addi	sp,sp,-24
    6ea8:	dc000015 	stw	r16,0(sp)
    6eac:	24000417 	ldw	r16,16(r4)
    6eb0:	dc400115 	stw	r17,4(sp)
    6eb4:	24400504 	addi	r17,r4,20
    6eb8:	8421883a 	add	r16,r16,r16
    6ebc:	8421883a 	add	r16,r16,r16
    6ec0:	8c21883a 	add	r16,r17,r16
    6ec4:	dc800215 	stw	r18,8(sp)
    6ec8:	84bfff17 	ldw	r18,-4(r16)
    6ecc:	dd000415 	stw	r20,16(sp)
    6ed0:	dcc00315 	stw	r19,12(sp)
    6ed4:	9009883a 	mov	r4,r18
    6ed8:	2829883a 	mov	r20,r5
    6edc:	dfc00515 	stw	ra,20(sp)
    6ee0:	00066100 	call	6610 <__hi0bits>
    6ee4:	00c00804 	movi	r3,32
    6ee8:	1889c83a 	sub	r4,r3,r2
    6eec:	a1000015 	stw	r4,0(r20)
    6ef0:	01000284 	movi	r4,10
    6ef4:	84ffff04 	addi	r19,r16,-4
    6ef8:	20801216 	blt	r4,r2,6f44 <__b2d+0xa0>
    6efc:	018002c4 	movi	r6,11
    6f00:	308dc83a 	sub	r6,r6,r2
    6f04:	9186d83a 	srl	r3,r18,r6
    6f08:	18cffc34 	orhi	r3,r3,16368
    6f0c:	8cc0212e 	bgeu	r17,r19,6f94 <__b2d+0xf0>
    6f10:	813ffe17 	ldw	r4,-8(r16)
    6f14:	218cd83a 	srl	r6,r4,r6
    6f18:	10800544 	addi	r2,r2,21
    6f1c:	9084983a 	sll	r2,r18,r2
    6f20:	1184b03a 	or	r2,r2,r6
    6f24:	dfc00517 	ldw	ra,20(sp)
    6f28:	dd000417 	ldw	r20,16(sp)
    6f2c:	dcc00317 	ldw	r19,12(sp)
    6f30:	dc800217 	ldw	r18,8(sp)
    6f34:	dc400117 	ldw	r17,4(sp)
    6f38:	dc000017 	ldw	r16,0(sp)
    6f3c:	dec00604 	addi	sp,sp,24
    6f40:	f800283a 	ret
    6f44:	8cc00f2e 	bgeu	r17,r19,6f84 <__b2d+0xe0>
    6f48:	117ffd44 	addi	r5,r2,-11
    6f4c:	80bffe17 	ldw	r2,-8(r16)
    6f50:	28000e26 	beq	r5,zero,6f8c <__b2d+0xe8>
    6f54:	1949c83a 	sub	r4,r3,r5
    6f58:	9164983a 	sll	r18,r18,r5
    6f5c:	1106d83a 	srl	r3,r2,r4
    6f60:	81bffe04 	addi	r6,r16,-8
    6f64:	948ffc34 	orhi	r18,r18,16368
    6f68:	90c6b03a 	or	r3,r18,r3
    6f6c:	89800e2e 	bgeu	r17,r6,6fa8 <__b2d+0x104>
    6f70:	81bffd17 	ldw	r6,-12(r16)
    6f74:	1144983a 	sll	r2,r2,r5
    6f78:	310ad83a 	srl	r5,r6,r4
    6f7c:	2884b03a 	or	r2,r5,r2
    6f80:	003fe806 	br	6f24 <__b2d+0x80>
    6f84:	10bffd44 	addi	r2,r2,-11
    6f88:	1000041e 	bne	r2,zero,6f9c <__b2d+0xf8>
    6f8c:	90cffc34 	orhi	r3,r18,16368
    6f90:	003fe406 	br	6f24 <__b2d+0x80>
    6f94:	000d883a 	mov	r6,zero
    6f98:	003fdf06 	br	6f18 <__b2d+0x74>
    6f9c:	90a4983a 	sll	r18,r18,r2
    6fa0:	0005883a 	mov	r2,zero
    6fa4:	003ff906 	br	6f8c <__b2d+0xe8>
    6fa8:	1144983a 	sll	r2,r2,r5
    6fac:	003fdd06 	br	6f24 <__b2d+0x80>

00006fb0 <__d2b>:
    6fb0:	defff804 	addi	sp,sp,-32
    6fb4:	dc000215 	stw	r16,8(sp)
    6fb8:	3021883a 	mov	r16,r6
    6fbc:	dc400315 	stw	r17,12(sp)
    6fc0:	8022907a 	slli	r17,r16,1
    6fc4:	dd000615 	stw	r20,24(sp)
    6fc8:	2829883a 	mov	r20,r5
    6fcc:	01400044 	movi	r5,1
    6fd0:	dcc00515 	stw	r19,20(sp)
    6fd4:	dc800415 	stw	r18,16(sp)
    6fd8:	dfc00715 	stw	ra,28(sp)
    6fdc:	3825883a 	mov	r18,r7
    6fe0:	8822d57a 	srli	r17,r17,21
    6fe4:	000631c0 	call	631c <_Balloc>
    6fe8:	1027883a 	mov	r19,r2
    6fec:	00800434 	movhi	r2,16
    6ff0:	10bfffc4 	addi	r2,r2,-1
    6ff4:	808c703a 	and	r6,r16,r2
    6ff8:	88000126 	beq	r17,zero,7000 <__d2b+0x50>
    6ffc:	31800434 	orhi	r6,r6,16
    7000:	d9800015 	stw	r6,0(sp)
    7004:	a0002426 	beq	r20,zero,7098 <__d2b+0xe8>
    7008:	d9000104 	addi	r4,sp,4
    700c:	dd000115 	stw	r20,4(sp)
    7010:	00066780 	call	6678 <__lo0bits>
    7014:	d8c00017 	ldw	r3,0(sp)
    7018:	10002f1e 	bne	r2,zero,70d8 <__d2b+0x128>
    701c:	d9000117 	ldw	r4,4(sp)
    7020:	99000515 	stw	r4,20(r19)
    7024:	1821003a 	cmpeq	r16,r3,zero
    7028:	01000084 	movi	r4,2
    702c:	2421c83a 	sub	r16,r4,r16
    7030:	98c00615 	stw	r3,24(r19)
    7034:	9c000415 	stw	r16,16(r19)
    7038:	88001f1e 	bne	r17,zero,70b8 <__d2b+0x108>
    703c:	10bef384 	addi	r2,r2,-1074
    7040:	90800015 	stw	r2,0(r18)
    7044:	00900034 	movhi	r2,16384
    7048:	10bfffc4 	addi	r2,r2,-1
    704c:	8085883a 	add	r2,r16,r2
    7050:	1085883a 	add	r2,r2,r2
    7054:	1085883a 	add	r2,r2,r2
    7058:	9885883a 	add	r2,r19,r2
    705c:	11000517 	ldw	r4,20(r2)
    7060:	8020917a 	slli	r16,r16,5
    7064:	00066100 	call	6610 <__hi0bits>
    7068:	d8c00817 	ldw	r3,32(sp)
    706c:	8085c83a 	sub	r2,r16,r2
    7070:	18800015 	stw	r2,0(r3)
    7074:	9805883a 	mov	r2,r19
    7078:	dfc00717 	ldw	ra,28(sp)
    707c:	dd000617 	ldw	r20,24(sp)
    7080:	dcc00517 	ldw	r19,20(sp)
    7084:	dc800417 	ldw	r18,16(sp)
    7088:	dc400317 	ldw	r17,12(sp)
    708c:	dc000217 	ldw	r16,8(sp)
    7090:	dec00804 	addi	sp,sp,32
    7094:	f800283a 	ret
    7098:	d809883a 	mov	r4,sp
    709c:	00066780 	call	6678 <__lo0bits>
    70a0:	d8c00017 	ldw	r3,0(sp)
    70a4:	04000044 	movi	r16,1
    70a8:	9c000415 	stw	r16,16(r19)
    70ac:	98c00515 	stw	r3,20(r19)
    70b0:	10800804 	addi	r2,r2,32
    70b4:	883fe126 	beq	r17,zero,703c <__d2b+0x8c>
    70b8:	00c00d44 	movi	r3,53
    70bc:	8c7ef344 	addi	r17,r17,-1075
    70c0:	88a3883a 	add	r17,r17,r2
    70c4:	1885c83a 	sub	r2,r3,r2
    70c8:	d8c00817 	ldw	r3,32(sp)
    70cc:	94400015 	stw	r17,0(r18)
    70d0:	18800015 	stw	r2,0(r3)
    70d4:	003fe706 	br	7074 <__d2b+0xc4>
    70d8:	01000804 	movi	r4,32
    70dc:	2089c83a 	sub	r4,r4,r2
    70e0:	1908983a 	sll	r4,r3,r4
    70e4:	d9400117 	ldw	r5,4(sp)
    70e8:	1886d83a 	srl	r3,r3,r2
    70ec:	2148b03a 	or	r4,r4,r5
    70f0:	99000515 	stw	r4,20(r19)
    70f4:	d8c00015 	stw	r3,0(sp)
    70f8:	003fca06 	br	7024 <__d2b+0x74>

000070fc <__ratio>:
    70fc:	defff904 	addi	sp,sp,-28
    7100:	dc400315 	stw	r17,12(sp)
    7104:	2823883a 	mov	r17,r5
    7108:	d9400104 	addi	r5,sp,4
    710c:	dfc00615 	stw	ra,24(sp)
    7110:	dcc00515 	stw	r19,20(sp)
    7114:	dc800415 	stw	r18,16(sp)
    7118:	2027883a 	mov	r19,r4
    711c:	dc000215 	stw	r16,8(sp)
    7120:	0006ea40 	call	6ea4 <__b2d>
    7124:	d80b883a 	mov	r5,sp
    7128:	8809883a 	mov	r4,r17
    712c:	1025883a 	mov	r18,r2
    7130:	1821883a 	mov	r16,r3
    7134:	0006ea40 	call	6ea4 <__b2d>
    7138:	8a000417 	ldw	r8,16(r17)
    713c:	99000417 	ldw	r4,16(r19)
    7140:	d9400117 	ldw	r5,4(sp)
    7144:	2209c83a 	sub	r4,r4,r8
    7148:	2010917a 	slli	r8,r4,5
    714c:	d9000017 	ldw	r4,0(sp)
    7150:	2909c83a 	sub	r4,r5,r4
    7154:	4109883a 	add	r4,r8,r4
    7158:	01000e0e 	bge	zero,r4,7194 <__ratio+0x98>
    715c:	2008953a 	slli	r4,r4,20
    7160:	2421883a 	add	r16,r4,r16
    7164:	100d883a 	mov	r6,r2
    7168:	180f883a 	mov	r7,r3
    716c:	9009883a 	mov	r4,r18
    7170:	800b883a 	mov	r5,r16
    7174:	000ab500 	call	ab50 <__divdf3>
    7178:	dfc00617 	ldw	ra,24(sp)
    717c:	dcc00517 	ldw	r19,20(sp)
    7180:	dc800417 	ldw	r18,16(sp)
    7184:	dc400317 	ldw	r17,12(sp)
    7188:	dc000217 	ldw	r16,8(sp)
    718c:	dec00704 	addi	sp,sp,28
    7190:	f800283a 	ret
    7194:	2008953a 	slli	r4,r4,20
    7198:	1907c83a 	sub	r3,r3,r4
    719c:	003ff106 	br	7164 <__ratio+0x68>

000071a0 <_mprec_log10>:
    71a0:	defffe04 	addi	sp,sp,-8
    71a4:	dc000015 	stw	r16,0(sp)
    71a8:	dfc00115 	stw	ra,4(sp)
    71ac:	008005c4 	movi	r2,23
    71b0:	2021883a 	mov	r16,r4
    71b4:	11000d0e 	bge	r2,r4,71ec <_mprec_log10+0x4c>
    71b8:	0005883a 	mov	r2,zero
    71bc:	00cffc34 	movhi	r3,16368
    71c0:	843fffc4 	addi	r16,r16,-1
    71c4:	000d883a 	mov	r6,zero
    71c8:	01d00934 	movhi	r7,16420
    71cc:	1009883a 	mov	r4,r2
    71d0:	180b883a 	mov	r5,r3
    71d4:	000b6900 	call	b690 <__muldf3>
    71d8:	803ff91e 	bne	r16,zero,71c0 <_mprec_log10+0x20>
    71dc:	dfc00117 	ldw	ra,4(sp)
    71e0:	dc000017 	ldw	r16,0(sp)
    71e4:	dec00204 	addi	sp,sp,8
    71e8:	f800283a 	ret
    71ec:	202090fa 	slli	r16,r4,3
    71f0:	008000b4 	movhi	r2,2
    71f4:	10aa0104 	addi	r2,r2,-22524
    71f8:	1421883a 	add	r16,r2,r16
    71fc:	80800017 	ldw	r2,0(r16)
    7200:	80c00117 	ldw	r3,4(r16)
    7204:	dfc00117 	ldw	ra,4(sp)
    7208:	dc000017 	ldw	r16,0(sp)
    720c:	dec00204 	addi	sp,sp,8
    7210:	f800283a 	ret

00007214 <__copybits>:
    7214:	297fffc4 	addi	r5,r5,-1
    7218:	280fd17a 	srai	r7,r5,5
    721c:	30c00417 	ldw	r3,16(r6)
    7220:	30800504 	addi	r2,r6,20
    7224:	39c00044 	addi	r7,r7,1
    7228:	18c7883a 	add	r3,r3,r3
    722c:	39cf883a 	add	r7,r7,r7
    7230:	18c7883a 	add	r3,r3,r3
    7234:	39cf883a 	add	r7,r7,r7
    7238:	10c7883a 	add	r3,r2,r3
    723c:	21cf883a 	add	r7,r4,r7
    7240:	10c00d2e 	bgeu	r2,r3,7278 <__copybits+0x64>
    7244:	200b883a 	mov	r5,r4
    7248:	12000017 	ldw	r8,0(r2)
    724c:	29400104 	addi	r5,r5,4
    7250:	10800104 	addi	r2,r2,4
    7254:	2a3fff15 	stw	r8,-4(r5)
    7258:	10fffb36 	bltu	r2,r3,7248 <__copybits+0x34>
    725c:	1985c83a 	sub	r2,r3,r6
    7260:	10bffac4 	addi	r2,r2,-21
    7264:	1004d0ba 	srli	r2,r2,2
    7268:	10800044 	addi	r2,r2,1
    726c:	1085883a 	add	r2,r2,r2
    7270:	1085883a 	add	r2,r2,r2
    7274:	2089883a 	add	r4,r4,r2
    7278:	21c0032e 	bgeu	r4,r7,7288 <__copybits+0x74>
    727c:	20000015 	stw	zero,0(r4)
    7280:	21000104 	addi	r4,r4,4
    7284:	21fffd36 	bltu	r4,r7,727c <__copybits+0x68>
    7288:	f800283a 	ret

0000728c <__any_on>:
    728c:	20c00417 	ldw	r3,16(r4)
    7290:	2805d17a 	srai	r2,r5,5
    7294:	21000504 	addi	r4,r4,20
    7298:	18800d0e 	bge	r3,r2,72d0 <__any_on+0x44>
    729c:	18c7883a 	add	r3,r3,r3
    72a0:	18c7883a 	add	r3,r3,r3
    72a4:	20c7883a 	add	r3,r4,r3
    72a8:	20c0192e 	bgeu	r4,r3,7310 <__any_on+0x84>
    72ac:	18bfff17 	ldw	r2,-4(r3)
    72b0:	18ffff04 	addi	r3,r3,-4
    72b4:	1000041e 	bne	r2,zero,72c8 <__any_on+0x3c>
    72b8:	20c0142e 	bgeu	r4,r3,730c <__any_on+0x80>
    72bc:	18ffff04 	addi	r3,r3,-4
    72c0:	19400017 	ldw	r5,0(r3)
    72c4:	283ffc26 	beq	r5,zero,72b8 <__any_on+0x2c>
    72c8:	00800044 	movi	r2,1
    72cc:	f800283a 	ret
    72d0:	10c00a0e 	bge	r2,r3,72fc <__any_on+0x70>
    72d4:	1085883a 	add	r2,r2,r2
    72d8:	1085883a 	add	r2,r2,r2
    72dc:	294007cc 	andi	r5,r5,31
    72e0:	2087883a 	add	r3,r4,r2
    72e4:	283ff026 	beq	r5,zero,72a8 <__any_on+0x1c>
    72e8:	19800017 	ldw	r6,0(r3)
    72ec:	3144d83a 	srl	r2,r6,r5
    72f0:	114a983a 	sll	r5,r2,r5
    72f4:	317ff41e 	bne	r6,r5,72c8 <__any_on+0x3c>
    72f8:	003feb06 	br	72a8 <__any_on+0x1c>
    72fc:	1085883a 	add	r2,r2,r2
    7300:	1085883a 	add	r2,r2,r2
    7304:	2087883a 	add	r3,r4,r2
    7308:	003fe706 	br	72a8 <__any_on+0x1c>
    730c:	f800283a 	ret
    7310:	0005883a 	mov	r2,zero
    7314:	f800283a 	ret

00007318 <__fpclassifyd>:
    7318:	00a00034 	movhi	r2,32768
    731c:	10bfffc4 	addi	r2,r2,-1
    7320:	2884703a 	and	r2,r5,r2
    7324:	10000726 	beq	r2,zero,7344 <__fpclassifyd+0x2c>
    7328:	00fffc34 	movhi	r3,65520
    732c:	019ff834 	movhi	r6,32736
    7330:	28c7883a 	add	r3,r5,r3
    7334:	31bfffc4 	addi	r6,r6,-1
    7338:	30c00536 	bltu	r6,r3,7350 <__fpclassifyd+0x38>
    733c:	00800104 	movi	r2,4
    7340:	f800283a 	ret
    7344:	2000021e 	bne	r4,zero,7350 <__fpclassifyd+0x38>
    7348:	00800084 	movi	r2,2
    734c:	f800283a 	ret
    7350:	00dffc34 	movhi	r3,32752
    7354:	019ff834 	movhi	r6,32736
    7358:	28cb883a 	add	r5,r5,r3
    735c:	31bfffc4 	addi	r6,r6,-1
    7360:	317ff62e 	bgeu	r6,r5,733c <__fpclassifyd+0x24>
    7364:	01400434 	movhi	r5,16
    7368:	297fffc4 	addi	r5,r5,-1
    736c:	28800236 	bltu	r5,r2,7378 <__fpclassifyd+0x60>
    7370:	008000c4 	movi	r2,3
    7374:	f800283a 	ret
    7378:	10c00226 	beq	r2,r3,7384 <__fpclassifyd+0x6c>
    737c:	0005883a 	mov	r2,zero
    7380:	f800283a 	ret
    7384:	2005003a 	cmpeq	r2,r4,zero
    7388:	f800283a 	ret

0000738c <_sbrk_r>:
    738c:	defffd04 	addi	sp,sp,-12
    7390:	dc000015 	stw	r16,0(sp)
    7394:	040000b4 	movhi	r16,2
    7398:	dc400115 	stw	r17,4(sp)
    739c:	843a8104 	addi	r16,r16,-5628
    73a0:	2023883a 	mov	r17,r4
    73a4:	2809883a 	mov	r4,r5
    73a8:	dfc00215 	stw	ra,8(sp)
    73ac:	80000015 	stw	zero,0(r16)
    73b0:	000cab40 	call	cab4 <sbrk>
    73b4:	00ffffc4 	movi	r3,-1
    73b8:	10c00526 	beq	r2,r3,73d0 <_sbrk_r+0x44>
    73bc:	dfc00217 	ldw	ra,8(sp)
    73c0:	dc400117 	ldw	r17,4(sp)
    73c4:	dc000017 	ldw	r16,0(sp)
    73c8:	dec00304 	addi	sp,sp,12
    73cc:	f800283a 	ret
    73d0:	80c00017 	ldw	r3,0(r16)
    73d4:	183ff926 	beq	r3,zero,73bc <_sbrk_r+0x30>
    73d8:	88c00015 	stw	r3,0(r17)
    73dc:	003ff706 	br	73bc <_sbrk_r+0x30>

000073e0 <strcmp>:
    73e0:	2144b03a 	or	r2,r4,r5
    73e4:	108000cc 	andi	r2,r2,3
    73e8:	1000171e 	bne	r2,zero,7448 <strcmp+0x68>
    73ec:	20800017 	ldw	r2,0(r4)
    73f0:	28c00017 	ldw	r3,0(r5)
    73f4:	10c0141e 	bne	r2,r3,7448 <strcmp+0x68>
    73f8:	027fbff4 	movhi	r9,65279
    73fc:	4a7fbfc4 	addi	r9,r9,-257
    7400:	0086303a 	nor	r3,zero,r2
    7404:	02202074 	movhi	r8,32897
    7408:	1245883a 	add	r2,r2,r9
    740c:	42202004 	addi	r8,r8,-32640
    7410:	10c4703a 	and	r2,r2,r3
    7414:	1204703a 	and	r2,r2,r8
    7418:	10000226 	beq	r2,zero,7424 <strcmp+0x44>
    741c:	00002306 	br	74ac <strcmp+0xcc>
    7420:	1000221e 	bne	r2,zero,74ac <strcmp+0xcc>
    7424:	21000104 	addi	r4,r4,4
    7428:	20c00017 	ldw	r3,0(r4)
    742c:	29400104 	addi	r5,r5,4
    7430:	29800017 	ldw	r6,0(r5)
    7434:	1a4f883a 	add	r7,r3,r9
    7438:	00c4303a 	nor	r2,zero,r3
    743c:	3884703a 	and	r2,r7,r2
    7440:	1204703a 	and	r2,r2,r8
    7444:	19bff626 	beq	r3,r6,7420 <strcmp+0x40>
    7448:	20800003 	ldbu	r2,0(r4)
    744c:	10c03fcc 	andi	r3,r2,255
    7450:	18c0201c 	xori	r3,r3,128
    7454:	18ffe004 	addi	r3,r3,-128
    7458:	18000c26 	beq	r3,zero,748c <strcmp+0xac>
    745c:	29800007 	ldb	r6,0(r5)
    7460:	19800326 	beq	r3,r6,7470 <strcmp+0x90>
    7464:	00001306 	br	74b4 <strcmp+0xd4>
    7468:	29800007 	ldb	r6,0(r5)
    746c:	11800b1e 	bne	r2,r6,749c <strcmp+0xbc>
    7470:	21000044 	addi	r4,r4,1
    7474:	20c00003 	ldbu	r3,0(r4)
    7478:	29400044 	addi	r5,r5,1
    747c:	18803fcc 	andi	r2,r3,255
    7480:	1080201c 	xori	r2,r2,128
    7484:	10bfe004 	addi	r2,r2,-128
    7488:	103ff71e 	bne	r2,zero,7468 <strcmp+0x88>
    748c:	0007883a 	mov	r3,zero
    7490:	28800003 	ldbu	r2,0(r5)
    7494:	1885c83a 	sub	r2,r3,r2
    7498:	f800283a 	ret
    749c:	28800003 	ldbu	r2,0(r5)
    74a0:	18c03fcc 	andi	r3,r3,255
    74a4:	1885c83a 	sub	r2,r3,r2
    74a8:	f800283a 	ret
    74ac:	0005883a 	mov	r2,zero
    74b0:	f800283a 	ret
    74b4:	10c03fcc 	andi	r3,r2,255
    74b8:	003ff506 	br	7490 <strcmp+0xb0>

000074bc <strlen>:
    74bc:	208000cc 	andi	r2,r4,3
    74c0:	10002026 	beq	r2,zero,7544 <strlen+0x88>
    74c4:	20800007 	ldb	r2,0(r4)
    74c8:	10002026 	beq	r2,zero,754c <strlen+0x90>
    74cc:	2005883a 	mov	r2,r4
    74d0:	00000206 	br	74dc <strlen+0x20>
    74d4:	10c00007 	ldb	r3,0(r2)
    74d8:	18001826 	beq	r3,zero,753c <strlen+0x80>
    74dc:	10800044 	addi	r2,r2,1
    74e0:	10c000cc 	andi	r3,r2,3
    74e4:	183ffb1e 	bne	r3,zero,74d4 <strlen+0x18>
    74e8:	10c00017 	ldw	r3,0(r2)
    74ec:	01ffbff4 	movhi	r7,65279
    74f0:	39ffbfc4 	addi	r7,r7,-257
    74f4:	00ca303a 	nor	r5,zero,r3
    74f8:	01a02074 	movhi	r6,32897
    74fc:	19c7883a 	add	r3,r3,r7
    7500:	31a02004 	addi	r6,r6,-32640
    7504:	1946703a 	and	r3,r3,r5
    7508:	1986703a 	and	r3,r3,r6
    750c:	1800091e 	bne	r3,zero,7534 <strlen+0x78>
    7510:	10800104 	addi	r2,r2,4
    7514:	10c00017 	ldw	r3,0(r2)
    7518:	19cb883a 	add	r5,r3,r7
    751c:	00c6303a 	nor	r3,zero,r3
    7520:	28c6703a 	and	r3,r5,r3
    7524:	1986703a 	and	r3,r3,r6
    7528:	183ff926 	beq	r3,zero,7510 <strlen+0x54>
    752c:	00000106 	br	7534 <strlen+0x78>
    7530:	10800044 	addi	r2,r2,1
    7534:	10c00007 	ldb	r3,0(r2)
    7538:	183ffd1e 	bne	r3,zero,7530 <strlen+0x74>
    753c:	1105c83a 	sub	r2,r2,r4
    7540:	f800283a 	ret
    7544:	2005883a 	mov	r2,r4
    7548:	003fe706 	br	74e8 <strlen+0x2c>
    754c:	0005883a 	mov	r2,zero
    7550:	f800283a 	ret

00007554 <__ssprint_r>:
    7554:	30800217 	ldw	r2,8(r6)
    7558:	defff604 	addi	sp,sp,-40
    755c:	dc800215 	stw	r18,8(sp)
    7560:	dfc00915 	stw	ra,36(sp)
    7564:	df000815 	stw	fp,32(sp)
    7568:	ddc00715 	stw	r23,28(sp)
    756c:	dd800615 	stw	r22,24(sp)
    7570:	dd400515 	stw	r21,20(sp)
    7574:	dd000415 	stw	r20,16(sp)
    7578:	dcc00315 	stw	r19,12(sp)
    757c:	dc400115 	stw	r17,4(sp)
    7580:	dc000015 	stw	r16,0(sp)
    7584:	3025883a 	mov	r18,r6
    7588:	10005826 	beq	r2,zero,76ec <__ssprint_r+0x198>
    758c:	2027883a 	mov	r19,r4
    7590:	35c00017 	ldw	r23,0(r6)
    7594:	29000017 	ldw	r4,0(r5)
    7598:	28800217 	ldw	r2,8(r5)
    759c:	2823883a 	mov	r17,r5
    75a0:	0039883a 	mov	fp,zero
    75a4:	0021883a 	mov	r16,zero
    75a8:	80003926 	beq	r16,zero,7690 <__ssprint_r+0x13c>
    75ac:	102b883a 	mov	r21,r2
    75b0:	102d883a 	mov	r22,r2
    75b4:	80803a36 	bltu	r16,r2,76a0 <__ssprint_r+0x14c>
    75b8:	88c0030b 	ldhu	r3,12(r17)
    75bc:	1881200c 	andi	r2,r3,1152
    75c0:	10002626 	beq	r2,zero,765c <__ssprint_r+0x108>
    75c4:	88800517 	ldw	r2,20(r17)
    75c8:	89400417 	ldw	r5,16(r17)
    75cc:	81800044 	addi	r6,r16,1
    75d0:	108f883a 	add	r7,r2,r2
    75d4:	3885883a 	add	r2,r7,r2
    75d8:	100ed7fa 	srli	r7,r2,31
    75dc:	216dc83a 	sub	r22,r4,r5
    75e0:	3589883a 	add	r4,r6,r22
    75e4:	3885883a 	add	r2,r7,r2
    75e8:	102bd07a 	srai	r21,r2,1
    75ec:	a80d883a 	mov	r6,r21
    75f0:	a900022e 	bgeu	r21,r4,75fc <__ssprint_r+0xa8>
    75f4:	202b883a 	mov	r21,r4
    75f8:	200d883a 	mov	r6,r4
    75fc:	18c1000c 	andi	r3,r3,1024
    7600:	18002a26 	beq	r3,zero,76ac <__ssprint_r+0x158>
    7604:	300b883a 	mov	r5,r6
    7608:	9809883a 	mov	r4,r19
    760c:	00058e40 	call	58e4 <_malloc_r>
    7610:	1029883a 	mov	r20,r2
    7614:	10002c26 	beq	r2,zero,76c8 <__ssprint_r+0x174>
    7618:	89400417 	ldw	r5,16(r17)
    761c:	b00d883a 	mov	r6,r22
    7620:	1009883a 	mov	r4,r2
    7624:	00061d40 	call	61d4 <memcpy>
    7628:	8880030b 	ldhu	r2,12(r17)
    762c:	00fedfc4 	movi	r3,-1153
    7630:	10c4703a 	and	r2,r2,r3
    7634:	10802014 	ori	r2,r2,128
    7638:	8880030d 	sth	r2,12(r17)
    763c:	a589883a 	add	r4,r20,r22
    7640:	adadc83a 	sub	r22,r21,r22
    7644:	8d400515 	stw	r21,20(r17)
    7648:	8d800215 	stw	r22,8(r17)
    764c:	8d000415 	stw	r20,16(r17)
    7650:	89000015 	stw	r4,0(r17)
    7654:	802b883a 	mov	r21,r16
    7658:	802d883a 	mov	r22,r16
    765c:	b00d883a 	mov	r6,r22
    7660:	e00b883a 	mov	r5,fp
    7664:	0008e580 	call	8e58 <memmove>
    7668:	88800217 	ldw	r2,8(r17)
    766c:	89000017 	ldw	r4,0(r17)
    7670:	90c00217 	ldw	r3,8(r18)
    7674:	1545c83a 	sub	r2,r2,r21
    7678:	2589883a 	add	r4,r4,r22
    767c:	88800215 	stw	r2,8(r17)
    7680:	89000015 	stw	r4,0(r17)
    7684:	1c21c83a 	sub	r16,r3,r16
    7688:	94000215 	stw	r16,8(r18)
    768c:	80001726 	beq	r16,zero,76ec <__ssprint_r+0x198>
    7690:	bf000017 	ldw	fp,0(r23)
    7694:	bc000117 	ldw	r16,4(r23)
    7698:	bdc00204 	addi	r23,r23,8
    769c:	003fc206 	br	75a8 <__ssprint_r+0x54>
    76a0:	802b883a 	mov	r21,r16
    76a4:	802d883a 	mov	r22,r16
    76a8:	003fec06 	br	765c <__ssprint_r+0x108>
    76ac:	9809883a 	mov	r4,r19
    76b0:	00090dc0 	call	90dc <_realloc_r>
    76b4:	1029883a 	mov	r20,r2
    76b8:	103fe01e 	bne	r2,zero,763c <__ssprint_r+0xe8>
    76bc:	89400417 	ldw	r5,16(r17)
    76c0:	9809883a 	mov	r4,r19
    76c4:	0008b480 	call	8b48 <_free_r>
    76c8:	88c0030b 	ldhu	r3,12(r17)
    76cc:	00800304 	movi	r2,12
    76d0:	98800015 	stw	r2,0(r19)
    76d4:	18c01014 	ori	r3,r3,64
    76d8:	88c0030d 	sth	r3,12(r17)
    76dc:	00bfffc4 	movi	r2,-1
    76e0:	90000215 	stw	zero,8(r18)
    76e4:	90000115 	stw	zero,4(r18)
    76e8:	00000206 	br	76f4 <__ssprint_r+0x1a0>
    76ec:	90000115 	stw	zero,4(r18)
    76f0:	0005883a 	mov	r2,zero
    76f4:	dfc00917 	ldw	ra,36(sp)
    76f8:	df000817 	ldw	fp,32(sp)
    76fc:	ddc00717 	ldw	r23,28(sp)
    7700:	dd800617 	ldw	r22,24(sp)
    7704:	dd400517 	ldw	r21,20(sp)
    7708:	dd000417 	ldw	r20,16(sp)
    770c:	dcc00317 	ldw	r19,12(sp)
    7710:	dc800217 	ldw	r18,8(sp)
    7714:	dc400117 	ldw	r17,4(sp)
    7718:	dc000017 	ldw	r16,0(sp)
    771c:	dec00a04 	addi	sp,sp,40
    7720:	f800283a 	ret

00007724 <___svfiprintf_internal_r>:
    7724:	2880030b 	ldhu	r2,12(r5)
    7728:	deffc804 	addi	sp,sp,-224
    772c:	dcc03115 	stw	r19,196(sp)
    7730:	dfc03715 	stw	ra,220(sp)
    7734:	df003615 	stw	fp,216(sp)
    7738:	ddc03515 	stw	r23,212(sp)
    773c:	dd803415 	stw	r22,208(sp)
    7740:	dd403315 	stw	r21,204(sp)
    7744:	dd003215 	stw	r20,200(sp)
    7748:	dc803015 	stw	r18,192(sp)
    774c:	dc402f15 	stw	r17,188(sp)
    7750:	dc002e15 	stw	r16,184(sp)
    7754:	d9402715 	stw	r5,156(sp)
    7758:	d9002a15 	stw	r4,168(sp)
    775c:	1080200c 	andi	r2,r2,128
    7760:	d9c02315 	stw	r7,140(sp)
    7764:	3027883a 	mov	r19,r6
    7768:	10000226 	beq	r2,zero,7774 <___svfiprintf_internal_r+0x50>
    776c:	28800417 	ldw	r2,16(r5)
    7770:	10041d26 	beq	r2,zero,87e8 <___svfiprintf_internal_r+0x10c4>
    7774:	dac01a04 	addi	r11,sp,104
    7778:	dac01e15 	stw	r11,120(sp)
    777c:	d8801e17 	ldw	r2,120(sp)
    7780:	dac019c4 	addi	r11,sp,103
    7784:	dd402a17 	ldw	r21,168(sp)
    7788:	ddc02717 	ldw	r23,156(sp)
    778c:	058000b4 	movhi	r22,2
    7790:	050000b4 	movhi	r20,2
    7794:	dac01f15 	stw	r11,124(sp)
    7798:	12d7c83a 	sub	r11,r2,r11
    779c:	b5aa3704 	addi	r22,r22,-22308
    77a0:	a52a3304 	addi	r20,r20,-22324
    77a4:	dec01a15 	stw	sp,104(sp)
    77a8:	d8001c15 	stw	zero,112(sp)
    77ac:	d8001b15 	stw	zero,108(sp)
    77b0:	d811883a 	mov	r8,sp
    77b4:	d8002915 	stw	zero,164(sp)
    77b8:	d8002515 	stw	zero,148(sp)
    77bc:	dac02b15 	stw	r11,172(sp)
    77c0:	98800007 	ldb	r2,0(r19)
    77c4:	1002dd26 	beq	r2,zero,833c <___svfiprintf_internal_r+0xc18>
    77c8:	00c00944 	movi	r3,37
    77cc:	9823883a 	mov	r17,r19
    77d0:	10c0021e 	bne	r2,r3,77dc <___svfiprintf_internal_r+0xb8>
    77d4:	00001406 	br	7828 <___svfiprintf_internal_r+0x104>
    77d8:	10c00326 	beq	r2,r3,77e8 <___svfiprintf_internal_r+0xc4>
    77dc:	8c400044 	addi	r17,r17,1
    77e0:	88800007 	ldb	r2,0(r17)
    77e4:	103ffc1e 	bne	r2,zero,77d8 <___svfiprintf_internal_r+0xb4>
    77e8:	8ce1c83a 	sub	r16,r17,r19
    77ec:	80000e26 	beq	r16,zero,7828 <___svfiprintf_internal_r+0x104>
    77f0:	d8c01c17 	ldw	r3,112(sp)
    77f4:	d8801b17 	ldw	r2,108(sp)
    77f8:	44c00015 	stw	r19,0(r8)
    77fc:	1c07883a 	add	r3,r3,r16
    7800:	10800044 	addi	r2,r2,1
    7804:	d8c01c15 	stw	r3,112(sp)
    7808:	44000115 	stw	r16,4(r8)
    780c:	d8801b15 	stw	r2,108(sp)
    7810:	00c001c4 	movi	r3,7
    7814:	18831e16 	blt	r3,r2,8490 <___svfiprintf_internal_r+0xd6c>
    7818:	42000204 	addi	r8,r8,8
    781c:	dac02517 	ldw	r11,148(sp)
    7820:	5c17883a 	add	r11,r11,r16
    7824:	dac02515 	stw	r11,148(sp)
    7828:	88800007 	ldb	r2,0(r17)
    782c:	1002c526 	beq	r2,zero,8344 <___svfiprintf_internal_r+0xc20>
    7830:	88c00047 	ldb	r3,1(r17)
    7834:	8cc00044 	addi	r19,r17,1
    7838:	d8001d85 	stb	zero,118(sp)
    783c:	0009883a 	mov	r4,zero
    7840:	000f883a 	mov	r7,zero
    7844:	043fffc4 	movi	r16,-1
    7848:	d8002415 	stw	zero,144(sp)
    784c:	0025883a 	mov	r18,zero
    7850:	01401604 	movi	r5,88
    7854:	01800244 	movi	r6,9
    7858:	02800a84 	movi	r10,42
    785c:	02401b04 	movi	r9,108
    7860:	9cc00044 	addi	r19,r19,1
    7864:	18bff804 	addi	r2,r3,-32
    7868:	2881dd36 	bltu	r5,r2,7fe0 <___svfiprintf_internal_r+0x8bc>
    786c:	100490ba 	slli	r2,r2,2
    7870:	02c00034 	movhi	r11,0
    7874:	5ade2104 	addi	r11,r11,30852
    7878:	12c5883a 	add	r2,r2,r11
    787c:	10800017 	ldw	r2,0(r2)
    7880:	1000683a 	jmp	r2
    7884:	00007a80 	call	7a8 <flight_task+0x3dc>
    7888:	00007fe0 	cmpeqi	zero,zero,511
    788c:	00007fe0 	cmpeqi	zero,zero,511
    7890:	00007a74 	movhi	zero,489
    7894:	00007fe0 	cmpeqi	zero,zero,511
    7898:	00007fe0 	cmpeqi	zero,zero,511
    789c:	00007fe0 	cmpeqi	zero,zero,511
    78a0:	00007fe0 	cmpeqi	zero,zero,511
    78a4:	00007fe0 	cmpeqi	zero,zero,511
    78a8:	00007fe0 	cmpeqi	zero,zero,511
    78ac:	000079e8 	cmpgeui	zero,zero,487
    78b0:	00007bc4 	movi	zero,495
    78b4:	00007fe0 	cmpeqi	zero,zero,511
    78b8:	00007a14 	movui	zero,488
    78bc:	00008014 	movui	zero,512
    78c0:	00007fe0 	cmpeqi	zero,zero,511
    78c4:	00008008 	cmpgei	zero,zero,512
    78c8:	00007fa8 	cmpgeui	zero,zero,510
    78cc:	00007fa8 	cmpgeui	zero,zero,510
    78d0:	00007fa8 	cmpgeui	zero,zero,510
    78d4:	00007fa8 	cmpgeui	zero,zero,510
    78d8:	00007fa8 	cmpgeui	zero,zero,510
    78dc:	00007fa8 	cmpgeui	zero,zero,510
    78e0:	00007fa8 	cmpgeui	zero,zero,510
    78e4:	00007fa8 	cmpgeui	zero,zero,510
    78e8:	00007fa8 	cmpgeui	zero,zero,510
    78ec:	00007fe0 	cmpeqi	zero,zero,511
    78f0:	00007fe0 	cmpeqi	zero,zero,511
    78f4:	00007fe0 	cmpeqi	zero,zero,511
    78f8:	00007fe0 	cmpeqi	zero,zero,511
    78fc:	00007fe0 	cmpeqi	zero,zero,511
    7900:	00007fe0 	cmpeqi	zero,zero,511
    7904:	00007fe0 	cmpeqi	zero,zero,511
    7908:	00007fe0 	cmpeqi	zero,zero,511
    790c:	00007fe0 	cmpeqi	zero,zero,511
    7910:	00007fe0 	cmpeqi	zero,zero,511
    7914:	00007f44 	movi	zero,509
    7918:	00007fe0 	cmpeqi	zero,zero,511
    791c:	00007fe0 	cmpeqi	zero,zero,511
    7920:	00007fe0 	cmpeqi	zero,zero,511
    7924:	00007fe0 	cmpeqi	zero,zero,511
    7928:	00007fe0 	cmpeqi	zero,zero,511
    792c:	00007fe0 	cmpeqi	zero,zero,511
    7930:	00007fe0 	cmpeqi	zero,zero,511
    7934:	00007fe0 	cmpeqi	zero,zero,511
    7938:	00007fe0 	cmpeqi	zero,zero,511
    793c:	00007fe0 	cmpeqi	zero,zero,511
    7940:	000080bc 	xorhi	zero,zero,514
    7944:	00007fe0 	cmpeqi	zero,zero,511
    7948:	00007fe0 	cmpeqi	zero,zero,511
    794c:	00007fe0 	cmpeqi	zero,zero,511
    7950:	00007fe0 	cmpeqi	zero,zero,511
    7954:	00007fe0 	cmpeqi	zero,zero,511
    7958:	00008054 	movui	zero,513
    795c:	00007fe0 	cmpeqi	zero,zero,511
    7960:	00007fe0 	cmpeqi	zero,zero,511
    7964:	00007d88 	cmpgei	zero,zero,502
    7968:	00007fe0 	cmpeqi	zero,zero,511
    796c:	00007fe0 	cmpeqi	zero,zero,511
    7970:	00007fe0 	cmpeqi	zero,zero,511
    7974:	00007fe0 	cmpeqi	zero,zero,511
    7978:	00007fe0 	cmpeqi	zero,zero,511
    797c:	00007fe0 	cmpeqi	zero,zero,511
    7980:	00007fe0 	cmpeqi	zero,zero,511
    7984:	00007fe0 	cmpeqi	zero,zero,511
    7988:	00007fe0 	cmpeqi	zero,zero,511
    798c:	00007fe0 	cmpeqi	zero,zero,511
    7990:	00007c78 	rdprs	zero,zero,497
    7994:	00007e24 	muli	zero,zero,504
    7998:	00007fe0 	cmpeqi	zero,zero,511
    799c:	00007fe0 	cmpeqi	zero,zero,511
    79a0:	00007fe0 	cmpeqi	zero,zero,511
    79a4:	00007e18 	cmpnei	zero,zero,504
    79a8:	00007e24 	muli	zero,zero,504
    79ac:	00007fe0 	cmpeqi	zero,zero,511
    79b0:	00007fe0 	cmpeqi	zero,zero,511
    79b4:	00007e08 	cmpgei	zero,zero,504
    79b8:	00007fe0 	cmpeqi	zero,zero,511
    79bc:	00007dcc 	andi	zero,zero,503
    79c0:	00007bd4 	movui	zero,495
    79c4:	00007a20 	cmpeqi	zero,zero,488
    79c8:	00007f38 	rdprs	zero,zero,508
    79cc:	00007fe0 	cmpeqi	zero,zero,511
    79d0:	00007eec 	andhi	zero,zero,507
    79d4:	00007fe0 	cmpeqi	zero,zero,511
    79d8:	00007b44 	movi	zero,493
    79dc:	00007fe0 	cmpeqi	zero,zero,511
    79e0:	00007fe0 	cmpeqi	zero,zero,511
    79e4:	00007aa0 	cmpeqi	zero,zero,490
    79e8:	dac02317 	ldw	r11,140(sp)
    79ec:	5ac00017 	ldw	r11,0(r11)
    79f0:	dac02415 	stw	r11,144(sp)
    79f4:	dac02317 	ldw	r11,140(sp)
    79f8:	58800104 	addi	r2,r11,4
    79fc:	dac02417 	ldw	r11,144(sp)
    7a00:	5802e90e 	bge	r11,zero,85a8 <___svfiprintf_internal_r+0xe84>
    7a04:	dac02417 	ldw	r11,144(sp)
    7a08:	d8802315 	stw	r2,140(sp)
    7a0c:	02d7c83a 	sub	r11,zero,r11
    7a10:	dac02415 	stw	r11,144(sp)
    7a14:	94800114 	ori	r18,r18,4
    7a18:	98c00007 	ldb	r3,0(r19)
    7a1c:	003f9006 	br	7860 <___svfiprintf_internal_r+0x13c>
    7a20:	00800c04 	movi	r2,48
    7a24:	dac02317 	ldw	r11,140(sp)
    7a28:	d8801d05 	stb	r2,116(sp)
    7a2c:	00801e04 	movi	r2,120
    7a30:	d8801d45 	stb	r2,117(sp)
    7a34:	d8001d85 	stb	zero,118(sp)
    7a38:	58c00104 	addi	r3,r11,4
    7a3c:	5f000017 	ldw	fp,0(r11)
    7a40:	0013883a 	mov	r9,zero
    7a44:	90800094 	ori	r2,r18,2
    7a48:	80032b16 	blt	r16,zero,86f8 <___svfiprintf_internal_r+0xfd4>
    7a4c:	00bfdfc4 	movi	r2,-129
    7a50:	90a4703a 	and	r18,r18,r2
    7a54:	d8c02315 	stw	r3,140(sp)
    7a58:	94800094 	ori	r18,r18,2
    7a5c:	e002dc26 	beq	fp,zero,85d0 <___svfiprintf_internal_r+0xeac>
    7a60:	010000b4 	movhi	r4,2
    7a64:	2129d204 	addi	r4,r4,-22712
    7a68:	0015883a 	mov	r10,zero
    7a6c:	d9002915 	stw	r4,164(sp)
    7a70:	00002306 	br	7b00 <___svfiprintf_internal_r+0x3dc>
    7a74:	94800054 	ori	r18,r18,1
    7a78:	98c00007 	ldb	r3,0(r19)
    7a7c:	003f7806 	br	7860 <___svfiprintf_internal_r+0x13c>
    7a80:	38803fcc 	andi	r2,r7,255
    7a84:	1080201c 	xori	r2,r2,128
    7a88:	10bfe004 	addi	r2,r2,-128
    7a8c:	1002f31e 	bne	r2,zero,865c <___svfiprintf_internal_r+0xf38>
    7a90:	01000044 	movi	r4,1
    7a94:	01c00804 	movi	r7,32
    7a98:	98c00007 	ldb	r3,0(r19)
    7a9c:	003f7006 	br	7860 <___svfiprintf_internal_r+0x13c>
    7aa0:	21003fcc 	andi	r4,r4,255
    7aa4:	2003aa1e 	bne	r4,zero,8950 <___svfiprintf_internal_r+0x122c>
    7aa8:	008000b4 	movhi	r2,2
    7aac:	10a9d204 	addi	r2,r2,-22712
    7ab0:	d8802915 	stw	r2,164(sp)
    7ab4:	9080080c 	andi	r2,r18,32
    7ab8:	1000ba26 	beq	r2,zero,7da4 <___svfiprintf_internal_r+0x680>
    7abc:	dac02317 	ldw	r11,140(sp)
    7ac0:	5f000017 	ldw	fp,0(r11)
    7ac4:	5a400117 	ldw	r9,4(r11)
    7ac8:	5ac00204 	addi	r11,r11,8
    7acc:	dac02315 	stw	r11,140(sp)
    7ad0:	9080004c 	andi	r2,r18,1
    7ad4:	10029026 	beq	r2,zero,8518 <___svfiprintf_internal_r+0xdf4>
    7ad8:	e244b03a 	or	r2,fp,r9
    7adc:	1002d41e 	bne	r2,zero,8630 <___svfiprintf_internal_r+0xf0c>
    7ae0:	d8001d85 	stb	zero,118(sp)
    7ae4:	80030b16 	blt	r16,zero,8714 <___svfiprintf_internal_r+0xff0>
    7ae8:	00bfdfc4 	movi	r2,-129
    7aec:	90a4703a 	and	r18,r18,r2
    7af0:	0015883a 	mov	r10,zero
    7af4:	80002426 	beq	r16,zero,7b88 <___svfiprintf_internal_r+0x464>
    7af8:	0039883a 	mov	fp,zero
    7afc:	0013883a 	mov	r9,zero
    7b00:	d9002917 	ldw	r4,164(sp)
    7b04:	dc401a04 	addi	r17,sp,104
    7b08:	e08003cc 	andi	r2,fp,15
    7b0c:	4806973a 	slli	r3,r9,28
    7b10:	2085883a 	add	r2,r4,r2
    7b14:	e038d13a 	srli	fp,fp,4
    7b18:	10800003 	ldbu	r2,0(r2)
    7b1c:	4812d13a 	srli	r9,r9,4
    7b20:	8c7fffc4 	addi	r17,r17,-1
    7b24:	1f38b03a 	or	fp,r3,fp
    7b28:	88800005 	stb	r2,0(r17)
    7b2c:	e244b03a 	or	r2,fp,r9
    7b30:	103ff51e 	bne	r2,zero,7b08 <___svfiprintf_internal_r+0x3e4>
    7b34:	dac01e17 	ldw	r11,120(sp)
    7b38:	5c57c83a 	sub	r11,r11,r17
    7b3c:	dac02115 	stw	r11,132(sp)
    7b40:	00001406 	br	7b94 <___svfiprintf_internal_r+0x470>
    7b44:	21003fcc 	andi	r4,r4,255
    7b48:	2003741e 	bne	r4,zero,891c <___svfiprintf_internal_r+0x11f8>
    7b4c:	9080080c 	andi	r2,r18,32
    7b50:	10014526 	beq	r2,zero,8068 <___svfiprintf_internal_r+0x944>
    7b54:	dac02317 	ldw	r11,140(sp)
    7b58:	d8001d85 	stb	zero,118(sp)
    7b5c:	58c00204 	addi	r3,r11,8
    7b60:	5f000017 	ldw	fp,0(r11)
    7b64:	5a400117 	ldw	r9,4(r11)
    7b68:	8002d916 	blt	r16,zero,86d0 <___svfiprintf_internal_r+0xfac>
    7b6c:	013fdfc4 	movi	r4,-129
    7b70:	e244b03a 	or	r2,fp,r9
    7b74:	d8c02315 	stw	r3,140(sp)
    7b78:	9124703a 	and	r18,r18,r4
    7b7c:	0015883a 	mov	r10,zero
    7b80:	1000b91e 	bne	r2,zero,7e68 <___svfiprintf_internal_r+0x744>
    7b84:	8002e61e 	bne	r16,zero,8720 <___svfiprintf_internal_r+0xffc>
    7b88:	0021883a 	mov	r16,zero
    7b8c:	d8002115 	stw	zero,132(sp)
    7b90:	dc401a04 	addi	r17,sp,104
    7b94:	d8c02117 	ldw	r3,132(sp)
    7b98:	dc002015 	stw	r16,128(sp)
    7b9c:	80c0010e 	bge	r16,r3,7ba4 <___svfiprintf_internal_r+0x480>
    7ba0:	d8c02015 	stw	r3,128(sp)
    7ba4:	52803fcc 	andi	r10,r10,255
    7ba8:	5280201c 	xori	r10,r10,128
    7bac:	52bfe004 	addi	r10,r10,-128
    7bb0:	50003c26 	beq	r10,zero,7ca4 <___svfiprintf_internal_r+0x580>
    7bb4:	dac02017 	ldw	r11,128(sp)
    7bb8:	5ac00044 	addi	r11,r11,1
    7bbc:	dac02015 	stw	r11,128(sp)
    7bc0:	00003806 	br	7ca4 <___svfiprintf_internal_r+0x580>
    7bc4:	01000044 	movi	r4,1
    7bc8:	01c00ac4 	movi	r7,43
    7bcc:	98c00007 	ldb	r3,0(r19)
    7bd0:	003f2306 	br	7860 <___svfiprintf_internal_r+0x13c>
    7bd4:	21003fcc 	andi	r4,r4,255
    7bd8:	2003481e 	bne	r4,zero,88fc <___svfiprintf_internal_r+0x11d8>
    7bdc:	9080080c 	andi	r2,r18,32
    7be0:	10013b26 	beq	r2,zero,80d0 <___svfiprintf_internal_r+0x9ac>
    7be4:	dac02317 	ldw	r11,140(sp)
    7be8:	d8001d85 	stb	zero,118(sp)
    7bec:	58800204 	addi	r2,r11,8
    7bf0:	5f000017 	ldw	fp,0(r11)
    7bf4:	5a400117 	ldw	r9,4(r11)
    7bf8:	8002a816 	blt	r16,zero,869c <___svfiprintf_internal_r+0xf78>
    7bfc:	013fdfc4 	movi	r4,-129
    7c00:	e246b03a 	or	r3,fp,r9
    7c04:	d8802315 	stw	r2,140(sp)
    7c08:	9124703a 	and	r18,r18,r4
    7c0c:	18013c26 	beq	r3,zero,8100 <___svfiprintf_internal_r+0x9dc>
    7c10:	0015883a 	mov	r10,zero
    7c14:	dc401a04 	addi	r17,sp,104
    7c18:	e006d0fa 	srli	r3,fp,3
    7c1c:	4808977a 	slli	r4,r9,29
    7c20:	4812d0fa 	srli	r9,r9,3
    7c24:	e70001cc 	andi	fp,fp,7
    7c28:	e0800c04 	addi	r2,fp,48
    7c2c:	8c7fffc4 	addi	r17,r17,-1
    7c30:	20f8b03a 	or	fp,r4,r3
    7c34:	88800005 	stb	r2,0(r17)
    7c38:	e246b03a 	or	r3,fp,r9
    7c3c:	183ff61e 	bne	r3,zero,7c18 <___svfiprintf_internal_r+0x4f4>
    7c40:	90c0004c 	andi	r3,r18,1
    7c44:	1800a526 	beq	r3,zero,7edc <___svfiprintf_internal_r+0x7b8>
    7c48:	10803fcc 	andi	r2,r2,255
    7c4c:	1080201c 	xori	r2,r2,128
    7c50:	10bfe004 	addi	r2,r2,-128
    7c54:	00c00c04 	movi	r3,48
    7c58:	10ffb626 	beq	r2,r3,7b34 <___svfiprintf_internal_r+0x410>
    7c5c:	88ffffc5 	stb	r3,-1(r17)
    7c60:	d8c01e17 	ldw	r3,120(sp)
    7c64:	88bfffc4 	addi	r2,r17,-1
    7c68:	1023883a 	mov	r17,r2
    7c6c:	1887c83a 	sub	r3,r3,r2
    7c70:	d8c02115 	stw	r3,132(sp)
    7c74:	003fc706 	br	7b94 <___svfiprintf_internal_r+0x470>
    7c78:	dac02317 	ldw	r11,140(sp)
    7c7c:	00c00044 	movi	r3,1
    7c80:	d8c02015 	stw	r3,128(sp)
    7c84:	58800017 	ldw	r2,0(r11)
    7c88:	5ac00104 	addi	r11,r11,4
    7c8c:	d8001d85 	stb	zero,118(sp)
    7c90:	d8801005 	stb	r2,64(sp)
    7c94:	dac02315 	stw	r11,140(sp)
    7c98:	d8c02115 	stw	r3,132(sp)
    7c9c:	dc401004 	addi	r17,sp,64
    7ca0:	0021883a 	mov	r16,zero
    7ca4:	90c0008c 	andi	r3,r18,2
    7ca8:	d8c02215 	stw	r3,136(sp)
    7cac:	18000326 	beq	r3,zero,7cbc <___svfiprintf_internal_r+0x598>
    7cb0:	dac02017 	ldw	r11,128(sp)
    7cb4:	5ac00084 	addi	r11,r11,2
    7cb8:	dac02015 	stw	r11,128(sp)
    7cbc:	90c0210c 	andi	r3,r18,132
    7cc0:	d8c02615 	stw	r3,152(sp)
    7cc4:	1801131e 	bne	r3,zero,8114 <___svfiprintf_internal_r+0x9f0>
    7cc8:	dac02417 	ldw	r11,144(sp)
    7ccc:	d8c02017 	ldw	r3,128(sp)
    7cd0:	58f9c83a 	sub	fp,r11,r3
    7cd4:	07010f0e 	bge	zero,fp,8114 <___svfiprintf_internal_r+0x9f0>
    7cd8:	02400404 	movi	r9,16
    7cdc:	d8c01c17 	ldw	r3,112(sp)
    7ce0:	d8801b17 	ldw	r2,108(sp)
    7ce4:	4f02d60e 	bge	r9,fp,8840 <___svfiprintf_internal_r+0x111c>
    7ce8:	014000b4 	movhi	r5,2
    7cec:	296a3704 	addi	r5,r5,-22308
    7cf0:	d9402815 	stw	r5,160(sp)
    7cf4:	028001c4 	movi	r10,7
    7cf8:	00000306 	br	7d08 <___svfiprintf_internal_r+0x5e4>
    7cfc:	e73ffc04 	addi	fp,fp,-16
    7d00:	42000204 	addi	r8,r8,8
    7d04:	4f00150e 	bge	r9,fp,7d5c <___svfiprintf_internal_r+0x638>
    7d08:	18c00404 	addi	r3,r3,16
    7d0c:	10800044 	addi	r2,r2,1
    7d10:	45800015 	stw	r22,0(r8)
    7d14:	42400115 	stw	r9,4(r8)
    7d18:	d8c01c15 	stw	r3,112(sp)
    7d1c:	d8801b15 	stw	r2,108(sp)
    7d20:	50bff60e 	bge	r10,r2,7cfc <___svfiprintf_internal_r+0x5d8>
    7d24:	d9801a04 	addi	r6,sp,104
    7d28:	b80b883a 	mov	r5,r23
    7d2c:	a809883a 	mov	r4,r21
    7d30:	da402c15 	stw	r9,176(sp)
    7d34:	da802d15 	stw	r10,180(sp)
    7d38:	00075540 	call	7554 <__ssprint_r>
    7d3c:	da402c17 	ldw	r9,176(sp)
    7d40:	da802d17 	ldw	r10,180(sp)
    7d44:	1001851e 	bne	r2,zero,835c <___svfiprintf_internal_r+0xc38>
    7d48:	e73ffc04 	addi	fp,fp,-16
    7d4c:	d8c01c17 	ldw	r3,112(sp)
    7d50:	d8801b17 	ldw	r2,108(sp)
    7d54:	d811883a 	mov	r8,sp
    7d58:	4f3feb16 	blt	r9,fp,7d08 <___svfiprintf_internal_r+0x5e4>
    7d5c:	dac02817 	ldw	r11,160(sp)
    7d60:	e0c7883a 	add	r3,fp,r3
    7d64:	10800044 	addi	r2,r2,1
    7d68:	42c00015 	stw	r11,0(r8)
    7d6c:	47000115 	stw	fp,4(r8)
    7d70:	d8c01c15 	stw	r3,112(sp)
    7d74:	d8801b15 	stw	r2,108(sp)
    7d78:	010001c4 	movi	r4,7
    7d7c:	2081ee16 	blt	r4,r2,8538 <___svfiprintf_internal_r+0xe14>
    7d80:	42000204 	addi	r8,r8,8
    7d84:	0000e506 	br	811c <___svfiprintf_internal_r+0x9f8>
    7d88:	21003fcc 	andi	r4,r4,255
    7d8c:	2002dd1e 	bne	r4,zero,8904 <___svfiprintf_internal_r+0x11e0>
    7d90:	008000b4 	movhi	r2,2
    7d94:	10a9cd04 	addi	r2,r2,-22732
    7d98:	d8802915 	stw	r2,164(sp)
    7d9c:	9080080c 	andi	r2,r18,32
    7da0:	103f461e 	bne	r2,zero,7abc <___svfiprintf_internal_r+0x398>
    7da4:	9080040c 	andi	r2,r18,16
    7da8:	10022e1e 	bne	r2,zero,8664 <___svfiprintf_internal_r+0xf40>
    7dac:	9080100c 	andi	r2,r18,64
    7db0:	dac02317 	ldw	r11,140(sp)
    7db4:	10027326 	beq	r2,zero,8784 <___svfiprintf_internal_r+0x1060>
    7db8:	5f00000b 	ldhu	fp,0(r11)
    7dbc:	5ac00104 	addi	r11,r11,4
    7dc0:	0013883a 	mov	r9,zero
    7dc4:	dac02315 	stw	r11,140(sp)
    7dc8:	003f4106 	br	7ad0 <___svfiprintf_internal_r+0x3ac>
    7dcc:	21003fcc 	andi	r4,r4,255
    7dd0:	2002e11e 	bne	r4,zero,8958 <___svfiprintf_internal_r+0x1234>
    7dd4:	9080080c 	andi	r2,r18,32
    7dd8:	1002011e 	bne	r2,zero,85e0 <___svfiprintf_internal_r+0xebc>
    7ddc:	9080040c 	andi	r2,r18,16
    7de0:	10023e1e 	bne	r2,zero,86dc <___svfiprintf_internal_r+0xfb8>
    7de4:	9480100c 	andi	r18,r18,64
    7de8:	90023c26 	beq	r18,zero,86dc <___svfiprintf_internal_r+0xfb8>
    7dec:	dac02317 	ldw	r11,140(sp)
    7df0:	58800017 	ldw	r2,0(r11)
    7df4:	5ac00104 	addi	r11,r11,4
    7df8:	dac02315 	stw	r11,140(sp)
    7dfc:	dac02517 	ldw	r11,148(sp)
    7e00:	12c0000d 	sth	r11,0(r2)
    7e04:	003e6e06 	br	77c0 <___svfiprintf_internal_r+0x9c>
    7e08:	98c00007 	ldb	r3,0(r19)
    7e0c:	1a422926 	beq	r3,r9,86b4 <___svfiprintf_internal_r+0xf90>
    7e10:	94800414 	ori	r18,r18,16
    7e14:	003e9206 	br	7860 <___svfiprintf_internal_r+0x13c>
    7e18:	94801014 	ori	r18,r18,64
    7e1c:	98c00007 	ldb	r3,0(r19)
    7e20:	003e8f06 	br	7860 <___svfiprintf_internal_r+0x13c>
    7e24:	21003fcc 	andi	r4,r4,255
    7e28:	2002c71e 	bne	r4,zero,8948 <___svfiprintf_internal_r+0x1224>
    7e2c:	9080080c 	andi	r2,r18,32
    7e30:	10004926 	beq	r2,zero,7f58 <___svfiprintf_internal_r+0x834>
    7e34:	dac02317 	ldw	r11,140(sp)
    7e38:	58800117 	ldw	r2,4(r11)
    7e3c:	5f000017 	ldw	fp,0(r11)
    7e40:	5ac00204 	addi	r11,r11,8
    7e44:	dac02315 	stw	r11,140(sp)
    7e48:	1013883a 	mov	r9,r2
    7e4c:	10004b16 	blt	r2,zero,7f7c <___svfiprintf_internal_r+0x858>
    7e50:	da801d83 	ldbu	r10,118(sp)
    7e54:	8001cb16 	blt	r16,zero,8584 <___svfiprintf_internal_r+0xe60>
    7e58:	00ffdfc4 	movi	r3,-129
    7e5c:	e244b03a 	or	r2,fp,r9
    7e60:	90e4703a 	and	r18,r18,r3
    7e64:	103f4726 	beq	r2,zero,7b84 <___svfiprintf_internal_r+0x460>
    7e68:	48008c26 	beq	r9,zero,809c <___svfiprintf_internal_r+0x978>
    7e6c:	dc802015 	stw	r18,128(sp)
    7e70:	dc002115 	stw	r16,132(sp)
    7e74:	dc401a04 	addi	r17,sp,104
    7e78:	e021883a 	mov	r16,fp
    7e7c:	da002215 	stw	r8,136(sp)
    7e80:	5039883a 	mov	fp,r10
    7e84:	4825883a 	mov	r18,r9
    7e88:	8009883a 	mov	r4,r16
    7e8c:	900b883a 	mov	r5,r18
    7e90:	01800284 	movi	r6,10
    7e94:	000f883a 	mov	r7,zero
    7e98:	0009bb80 	call	9bb8 <__umoddi3>
    7e9c:	10800c04 	addi	r2,r2,48
    7ea0:	8c7fffc4 	addi	r17,r17,-1
    7ea4:	8009883a 	mov	r4,r16
    7ea8:	900b883a 	mov	r5,r18
    7eac:	88800005 	stb	r2,0(r17)
    7eb0:	01800284 	movi	r6,10
    7eb4:	000f883a 	mov	r7,zero
    7eb8:	00096400 	call	9640 <__udivdi3>
    7ebc:	1021883a 	mov	r16,r2
    7ec0:	10c4b03a 	or	r2,r2,r3
    7ec4:	1825883a 	mov	r18,r3
    7ec8:	103fef1e 	bne	r2,zero,7e88 <___svfiprintf_internal_r+0x764>
    7ecc:	dc802017 	ldw	r18,128(sp)
    7ed0:	dc002117 	ldw	r16,132(sp)
    7ed4:	da002217 	ldw	r8,136(sp)
    7ed8:	e015883a 	mov	r10,fp
    7edc:	d8c01e17 	ldw	r3,120(sp)
    7ee0:	1c47c83a 	sub	r3,r3,r17
    7ee4:	d8c02115 	stw	r3,132(sp)
    7ee8:	003f2a06 	br	7b94 <___svfiprintf_internal_r+0x470>
    7eec:	dac02317 	ldw	r11,140(sp)
    7ef0:	d8001d85 	stb	zero,118(sp)
    7ef4:	5c400017 	ldw	r17,0(r11)
    7ef8:	5f000104 	addi	fp,r11,4
    7efc:	88022f26 	beq	r17,zero,87bc <___svfiprintf_internal_r+0x1098>
    7f00:	80022516 	blt	r16,zero,8798 <___svfiprintf_internal_r+0x1074>
    7f04:	800d883a 	mov	r6,r16
    7f08:	000b883a 	mov	r5,zero
    7f0c:	8809883a 	mov	r4,r17
    7f10:	da002c15 	stw	r8,176(sp)
    7f14:	00060f00 	call	60f0 <memchr>
    7f18:	da002c17 	ldw	r8,176(sp)
    7f1c:	10026426 	beq	r2,zero,88b0 <___svfiprintf_internal_r+0x118c>
    7f20:	1445c83a 	sub	r2,r2,r17
    7f24:	d8802115 	stw	r2,132(sp)
    7f28:	da801d83 	ldbu	r10,118(sp)
    7f2c:	df002315 	stw	fp,140(sp)
    7f30:	0021883a 	mov	r16,zero
    7f34:	003f1706 	br	7b94 <___svfiprintf_internal_r+0x470>
    7f38:	94800814 	ori	r18,r18,32
    7f3c:	98c00007 	ldb	r3,0(r19)
    7f40:	003e4706 	br	7860 <___svfiprintf_internal_r+0x13c>
    7f44:	21003fcc 	andi	r4,r4,255
    7f48:	2002701e 	bne	r4,zero,890c <___svfiprintf_internal_r+0x11e8>
    7f4c:	94800414 	ori	r18,r18,16
    7f50:	9080080c 	andi	r2,r18,32
    7f54:	103fb71e 	bne	r2,zero,7e34 <___svfiprintf_internal_r+0x710>
    7f58:	9080040c 	andi	r2,r18,16
    7f5c:	1001ab26 	beq	r2,zero,860c <___svfiprintf_internal_r+0xee8>
    7f60:	dac02317 	ldw	r11,140(sp)
    7f64:	5f000017 	ldw	fp,0(r11)
    7f68:	5ac00104 	addi	r11,r11,4
    7f6c:	dac02315 	stw	r11,140(sp)
    7f70:	e013d7fa 	srai	r9,fp,31
    7f74:	4805883a 	mov	r2,r9
    7f78:	103fb50e 	bge	r2,zero,7e50 <___svfiprintf_internal_r+0x72c>
    7f7c:	0739c83a 	sub	fp,zero,fp
    7f80:	02800b44 	movi	r10,45
    7f84:	e004c03a 	cmpne	r2,fp,zero
    7f88:	0253c83a 	sub	r9,zero,r9
    7f8c:	da801d85 	stb	r10,118(sp)
    7f90:	4893c83a 	sub	r9,r9,r2
    7f94:	80023016 	blt	r16,zero,8858 <___svfiprintf_internal_r+0x1134>
    7f98:	00bfdfc4 	movi	r2,-129
    7f9c:	90a4703a 	and	r18,r18,r2
    7fa0:	483fb21e 	bne	r9,zero,7e6c <___svfiprintf_internal_r+0x748>
    7fa4:	00003d06 	br	809c <___svfiprintf_internal_r+0x978>
    7fa8:	9817883a 	mov	r11,r19
    7fac:	d8002415 	stw	zero,144(sp)
    7fb0:	18bff404 	addi	r2,r3,-48
    7fb4:	0019883a 	mov	r12,zero
    7fb8:	58c00007 	ldb	r3,0(r11)
    7fbc:	630002a4 	muli	r12,r12,10
    7fc0:	9cc00044 	addi	r19,r19,1
    7fc4:	9817883a 	mov	r11,r19
    7fc8:	1319883a 	add	r12,r2,r12
    7fcc:	18bff404 	addi	r2,r3,-48
    7fd0:	30bff92e 	bgeu	r6,r2,7fb8 <___svfiprintf_internal_r+0x894>
    7fd4:	db002415 	stw	r12,144(sp)
    7fd8:	18bff804 	addi	r2,r3,-32
    7fdc:	28be232e 	bgeu	r5,r2,786c <___svfiprintf_internal_r+0x148>
    7fe0:	21003fcc 	andi	r4,r4,255
    7fe4:	20024b1e 	bne	r4,zero,8914 <___svfiprintf_internal_r+0x11f0>
    7fe8:	1800d626 	beq	r3,zero,8344 <___svfiprintf_internal_r+0xc20>
    7fec:	02c00044 	movi	r11,1
    7ff0:	dac02015 	stw	r11,128(sp)
    7ff4:	d8c01005 	stb	r3,64(sp)
    7ff8:	d8001d85 	stb	zero,118(sp)
    7ffc:	dac02115 	stw	r11,132(sp)
    8000:	dc401004 	addi	r17,sp,64
    8004:	003f2606 	br	7ca0 <___svfiprintf_internal_r+0x57c>
    8008:	94802014 	ori	r18,r18,128
    800c:	98c00007 	ldb	r3,0(r19)
    8010:	003e1306 	br	7860 <___svfiprintf_internal_r+0x13c>
    8014:	98c00007 	ldb	r3,0(r19)
    8018:	9ac00044 	addi	r11,r19,1
    801c:	1a822b26 	beq	r3,r10,88cc <___svfiprintf_internal_r+0x11a8>
    8020:	18bff404 	addi	r2,r3,-48
    8024:	0021883a 	mov	r16,zero
    8028:	30821e36 	bltu	r6,r2,88a4 <___svfiprintf_internal_r+0x1180>
    802c:	58c00007 	ldb	r3,0(r11)
    8030:	840002a4 	muli	r16,r16,10
    8034:	5cc00044 	addi	r19,r11,1
    8038:	9817883a 	mov	r11,r19
    803c:	80a1883a 	add	r16,r16,r2
    8040:	18bff404 	addi	r2,r3,-48
    8044:	30bff92e 	bgeu	r6,r2,802c <___svfiprintf_internal_r+0x908>
    8048:	803e060e 	bge	r16,zero,7864 <___svfiprintf_internal_r+0x140>
    804c:	043fffc4 	movi	r16,-1
    8050:	003e0406 	br	7864 <___svfiprintf_internal_r+0x140>
    8054:	21003fcc 	andi	r4,r4,255
    8058:	2002371e 	bne	r4,zero,8938 <___svfiprintf_internal_r+0x1214>
    805c:	94800414 	ori	r18,r18,16
    8060:	9080080c 	andi	r2,r18,32
    8064:	103ebb1e 	bne	r2,zero,7b54 <___svfiprintf_internal_r+0x430>
    8068:	9080040c 	andi	r2,r18,16
    806c:	10013b26 	beq	r2,zero,855c <___svfiprintf_internal_r+0xe38>
    8070:	dac02317 	ldw	r11,140(sp)
    8074:	d8001d85 	stb	zero,118(sp)
    8078:	0013883a 	mov	r9,zero
    807c:	58800104 	addi	r2,r11,4
    8080:	5f000017 	ldw	fp,0(r11)
    8084:	80013d16 	blt	r16,zero,857c <___svfiprintf_internal_r+0xe58>
    8088:	00ffdfc4 	movi	r3,-129
    808c:	d8802315 	stw	r2,140(sp)
    8090:	90e4703a 	and	r18,r18,r3
    8094:	0015883a 	mov	r10,zero
    8098:	e03eba26 	beq	fp,zero,7b84 <___svfiprintf_internal_r+0x460>
    809c:	00800244 	movi	r2,9
    80a0:	173f7236 	bltu	r2,fp,7e6c <___svfiprintf_internal_r+0x748>
    80a4:	dac02b17 	ldw	r11,172(sp)
    80a8:	e7000c04 	addi	fp,fp,48
    80ac:	df0019c5 	stb	fp,103(sp)
    80b0:	dac02115 	stw	r11,132(sp)
    80b4:	dc4019c4 	addi	r17,sp,103
    80b8:	003eb606 	br	7b94 <___svfiprintf_internal_r+0x470>
    80bc:	21003fcc 	andi	r4,r4,255
    80c0:	20021f1e 	bne	r4,zero,8940 <___svfiprintf_internal_r+0x121c>
    80c4:	94800414 	ori	r18,r18,16
    80c8:	9080080c 	andi	r2,r18,32
    80cc:	103ec51e 	bne	r2,zero,7be4 <___svfiprintf_internal_r+0x4c0>
    80d0:	9080040c 	andi	r2,r18,16
    80d4:	10016926 	beq	r2,zero,867c <___svfiprintf_internal_r+0xf58>
    80d8:	dac02317 	ldw	r11,140(sp)
    80dc:	d8001d85 	stb	zero,118(sp)
    80e0:	0013883a 	mov	r9,zero
    80e4:	58800104 	addi	r2,r11,4
    80e8:	5f000017 	ldw	fp,0(r11)
    80ec:	80016b16 	blt	r16,zero,869c <___svfiprintf_internal_r+0xf78>
    80f0:	00ffdfc4 	movi	r3,-129
    80f4:	d8802315 	stw	r2,140(sp)
    80f8:	90e4703a 	and	r18,r18,r3
    80fc:	e03ec41e 	bne	fp,zero,7c10 <___svfiprintf_internal_r+0x4ec>
    8100:	0015883a 	mov	r10,zero
    8104:	8001c226 	beq	r16,zero,8810 <___svfiprintf_internal_r+0x10ec>
    8108:	0039883a 	mov	fp,zero
    810c:	0013883a 	mov	r9,zero
    8110:	003ec006 	br	7c14 <___svfiprintf_internal_r+0x4f0>
    8114:	d8c01c17 	ldw	r3,112(sp)
    8118:	d8801b17 	ldw	r2,108(sp)
    811c:	d9001d87 	ldb	r4,118(sp)
    8120:	20000b26 	beq	r4,zero,8150 <___svfiprintf_internal_r+0xa2c>
    8124:	d9001d84 	addi	r4,sp,118
    8128:	18c00044 	addi	r3,r3,1
    812c:	10800044 	addi	r2,r2,1
    8130:	41000015 	stw	r4,0(r8)
    8134:	01000044 	movi	r4,1
    8138:	41000115 	stw	r4,4(r8)
    813c:	d8c01c15 	stw	r3,112(sp)
    8140:	d8801b15 	stw	r2,108(sp)
    8144:	010001c4 	movi	r4,7
    8148:	2080e116 	blt	r4,r2,84d0 <___svfiprintf_internal_r+0xdac>
    814c:	42000204 	addi	r8,r8,8
    8150:	dac02217 	ldw	r11,136(sp)
    8154:	58000b26 	beq	r11,zero,8184 <___svfiprintf_internal_r+0xa60>
    8158:	d9001d04 	addi	r4,sp,116
    815c:	18c00084 	addi	r3,r3,2
    8160:	10800044 	addi	r2,r2,1
    8164:	41000015 	stw	r4,0(r8)
    8168:	01000084 	movi	r4,2
    816c:	41000115 	stw	r4,4(r8)
    8170:	d8c01c15 	stw	r3,112(sp)
    8174:	d8801b15 	stw	r2,108(sp)
    8178:	010001c4 	movi	r4,7
    817c:	2080dd16 	blt	r4,r2,84f4 <___svfiprintf_internal_r+0xdd0>
    8180:	42000204 	addi	r8,r8,8
    8184:	dac02617 	ldw	r11,152(sp)
    8188:	01002004 	movi	r4,128
    818c:	59008426 	beq	r11,r4,83a0 <___svfiprintf_internal_r+0xc7c>
    8190:	dac02117 	ldw	r11,132(sp)
    8194:	82e1c83a 	sub	r16,r16,r11
    8198:	0400270e 	bge	zero,r16,8238 <___svfiprintf_internal_r+0xb14>
    819c:	01c00404 	movi	r7,16
    81a0:	3c016a0e 	bge	r7,r16,874c <___svfiprintf_internal_r+0x1028>
    81a4:	014000b4 	movhi	r5,2
    81a8:	296a3304 	addi	r5,r5,-22324
    81ac:	d9402215 	stw	r5,136(sp)
    81b0:	070001c4 	movi	fp,7
    81b4:	00000306 	br	81c4 <___svfiprintf_internal_r+0xaa0>
    81b8:	843ffc04 	addi	r16,r16,-16
    81bc:	42000204 	addi	r8,r8,8
    81c0:	3c00130e 	bge	r7,r16,8210 <___svfiprintf_internal_r+0xaec>
    81c4:	18c00404 	addi	r3,r3,16
    81c8:	10800044 	addi	r2,r2,1
    81cc:	45000015 	stw	r20,0(r8)
    81d0:	41c00115 	stw	r7,4(r8)
    81d4:	d8c01c15 	stw	r3,112(sp)
    81d8:	d8801b15 	stw	r2,108(sp)
    81dc:	e0bff60e 	bge	fp,r2,81b8 <___svfiprintf_internal_r+0xa94>
    81e0:	d9801a04 	addi	r6,sp,104
    81e4:	b80b883a 	mov	r5,r23
    81e8:	a809883a 	mov	r4,r21
    81ec:	d9c02c15 	stw	r7,176(sp)
    81f0:	00075540 	call	7554 <__ssprint_r>
    81f4:	d9c02c17 	ldw	r7,176(sp)
    81f8:	1000581e 	bne	r2,zero,835c <___svfiprintf_internal_r+0xc38>
    81fc:	843ffc04 	addi	r16,r16,-16
    8200:	d8c01c17 	ldw	r3,112(sp)
    8204:	d8801b17 	ldw	r2,108(sp)
    8208:	d811883a 	mov	r8,sp
    820c:	3c3fed16 	blt	r7,r16,81c4 <___svfiprintf_internal_r+0xaa0>
    8210:	dac02217 	ldw	r11,136(sp)
    8214:	1c07883a 	add	r3,r3,r16
    8218:	10800044 	addi	r2,r2,1
    821c:	42c00015 	stw	r11,0(r8)
    8220:	44000115 	stw	r16,4(r8)
    8224:	d8c01c15 	stw	r3,112(sp)
    8228:	d8801b15 	stw	r2,108(sp)
    822c:	010001c4 	movi	r4,7
    8230:	20809e16 	blt	r4,r2,84ac <___svfiprintf_internal_r+0xd88>
    8234:	42000204 	addi	r8,r8,8
    8238:	dac02117 	ldw	r11,132(sp)
    823c:	10800044 	addi	r2,r2,1
    8240:	44400015 	stw	r17,0(r8)
    8244:	58c7883a 	add	r3,r11,r3
    8248:	42c00115 	stw	r11,4(r8)
    824c:	d8c01c15 	stw	r3,112(sp)
    8250:	d8801b15 	stw	r2,108(sp)
    8254:	010001c4 	movi	r4,7
    8258:	20807f16 	blt	r4,r2,8458 <___svfiprintf_internal_r+0xd34>
    825c:	42000204 	addi	r8,r8,8
    8260:	9480010c 	andi	r18,r18,4
    8264:	90002926 	beq	r18,zero,830c <___svfiprintf_internal_r+0xbe8>
    8268:	dac02417 	ldw	r11,144(sp)
    826c:	d8802017 	ldw	r2,128(sp)
    8270:	58a1c83a 	sub	r16,r11,r2
    8274:	0400250e 	bge	zero,r16,830c <___svfiprintf_internal_r+0xbe8>
    8278:	04400404 	movi	r17,16
    827c:	d8801b17 	ldw	r2,108(sp)
    8280:	8c017c0e 	bge	r17,r16,8874 <___svfiprintf_internal_r+0x1150>
    8284:	014000b4 	movhi	r5,2
    8288:	296a3704 	addi	r5,r5,-22308
    828c:	d9402815 	stw	r5,160(sp)
    8290:	048001c4 	movi	r18,7
    8294:	00000306 	br	82a4 <___svfiprintf_internal_r+0xb80>
    8298:	843ffc04 	addi	r16,r16,-16
    829c:	42000204 	addi	r8,r8,8
    82a0:	8c00110e 	bge	r17,r16,82e8 <___svfiprintf_internal_r+0xbc4>
    82a4:	18c00404 	addi	r3,r3,16
    82a8:	10800044 	addi	r2,r2,1
    82ac:	45800015 	stw	r22,0(r8)
    82b0:	44400115 	stw	r17,4(r8)
    82b4:	d8c01c15 	stw	r3,112(sp)
    82b8:	d8801b15 	stw	r2,108(sp)
    82bc:	90bff60e 	bge	r18,r2,8298 <___svfiprintf_internal_r+0xb74>
    82c0:	d9801a04 	addi	r6,sp,104
    82c4:	b80b883a 	mov	r5,r23
    82c8:	a809883a 	mov	r4,r21
    82cc:	00075540 	call	7554 <__ssprint_r>
    82d0:	1000221e 	bne	r2,zero,835c <___svfiprintf_internal_r+0xc38>
    82d4:	843ffc04 	addi	r16,r16,-16
    82d8:	d8c01c17 	ldw	r3,112(sp)
    82dc:	d8801b17 	ldw	r2,108(sp)
    82e0:	d811883a 	mov	r8,sp
    82e4:	8c3fef16 	blt	r17,r16,82a4 <___svfiprintf_internal_r+0xb80>
    82e8:	dac02817 	ldw	r11,160(sp)
    82ec:	1c07883a 	add	r3,r3,r16
    82f0:	10800044 	addi	r2,r2,1
    82f4:	42c00015 	stw	r11,0(r8)
    82f8:	44000115 	stw	r16,4(r8)
    82fc:	d8c01c15 	stw	r3,112(sp)
    8300:	d8801b15 	stw	r2,108(sp)
    8304:	010001c4 	movi	r4,7
    8308:	2080aa16 	blt	r4,r2,85b4 <___svfiprintf_internal_r+0xe90>
    830c:	d8802417 	ldw	r2,144(sp)
    8310:	dac02017 	ldw	r11,128(sp)
    8314:	12c0010e 	bge	r2,r11,831c <___svfiprintf_internal_r+0xbf8>
    8318:	5805883a 	mov	r2,r11
    831c:	dac02517 	ldw	r11,148(sp)
    8320:	5897883a 	add	r11,r11,r2
    8324:	dac02515 	stw	r11,148(sp)
    8328:	1800531e 	bne	r3,zero,8478 <___svfiprintf_internal_r+0xd54>
    832c:	98800007 	ldb	r2,0(r19)
    8330:	d8001b15 	stw	zero,108(sp)
    8334:	d811883a 	mov	r8,sp
    8338:	103d231e 	bne	r2,zero,77c8 <___svfiprintf_internal_r+0xa4>
    833c:	9823883a 	mov	r17,r19
    8340:	003d3906 	br	7828 <___svfiprintf_internal_r+0x104>
    8344:	d8801c17 	ldw	r2,112(sp)
    8348:	10000426 	beq	r2,zero,835c <___svfiprintf_internal_r+0xc38>
    834c:	d9402717 	ldw	r5,156(sp)
    8350:	d9002a17 	ldw	r4,168(sp)
    8354:	d9801a04 	addi	r6,sp,104
    8358:	00075540 	call	7554 <__ssprint_r>
    835c:	dac02717 	ldw	r11,156(sp)
    8360:	d8802517 	ldw	r2,148(sp)
    8364:	58c0030b 	ldhu	r3,12(r11)
    8368:	18c0100c 	andi	r3,r3,64
    836c:	1801381e 	bne	r3,zero,8850 <___svfiprintf_internal_r+0x112c>
    8370:	dfc03717 	ldw	ra,220(sp)
    8374:	df003617 	ldw	fp,216(sp)
    8378:	ddc03517 	ldw	r23,212(sp)
    837c:	dd803417 	ldw	r22,208(sp)
    8380:	dd403317 	ldw	r21,204(sp)
    8384:	dd003217 	ldw	r20,200(sp)
    8388:	dcc03117 	ldw	r19,196(sp)
    838c:	dc803017 	ldw	r18,192(sp)
    8390:	dc402f17 	ldw	r17,188(sp)
    8394:	dc002e17 	ldw	r16,184(sp)
    8398:	dec03804 	addi	sp,sp,224
    839c:	f800283a 	ret
    83a0:	dac02417 	ldw	r11,144(sp)
    83a4:	d9002017 	ldw	r4,128(sp)
    83a8:	5939c83a 	sub	fp,r11,r4
    83ac:	073f780e 	bge	zero,fp,8190 <___svfiprintf_internal_r+0xa6c>
    83b0:	02400404 	movi	r9,16
    83b4:	4f01370e 	bge	r9,fp,8894 <___svfiprintf_internal_r+0x1170>
    83b8:	02c000b4 	movhi	r11,2
    83bc:	5aea3304 	addi	r11,r11,-22324
    83c0:	dac02215 	stw	r11,136(sp)
    83c4:	028001c4 	movi	r10,7
    83c8:	00000306 	br	83d8 <___svfiprintf_internal_r+0xcb4>
    83cc:	e73ffc04 	addi	fp,fp,-16
    83d0:	42000204 	addi	r8,r8,8
    83d4:	4f00150e 	bge	r9,fp,842c <___svfiprintf_internal_r+0xd08>
    83d8:	18c00404 	addi	r3,r3,16
    83dc:	10800044 	addi	r2,r2,1
    83e0:	45000015 	stw	r20,0(r8)
    83e4:	42400115 	stw	r9,4(r8)
    83e8:	d8c01c15 	stw	r3,112(sp)
    83ec:	d8801b15 	stw	r2,108(sp)
    83f0:	50bff60e 	bge	r10,r2,83cc <___svfiprintf_internal_r+0xca8>
    83f4:	d9801a04 	addi	r6,sp,104
    83f8:	b80b883a 	mov	r5,r23
    83fc:	a809883a 	mov	r4,r21
    8400:	da402c15 	stw	r9,176(sp)
    8404:	da802d15 	stw	r10,180(sp)
    8408:	00075540 	call	7554 <__ssprint_r>
    840c:	da402c17 	ldw	r9,176(sp)
    8410:	da802d17 	ldw	r10,180(sp)
    8414:	103fd11e 	bne	r2,zero,835c <___svfiprintf_internal_r+0xc38>
    8418:	e73ffc04 	addi	fp,fp,-16
    841c:	d8c01c17 	ldw	r3,112(sp)
    8420:	d8801b17 	ldw	r2,108(sp)
    8424:	d811883a 	mov	r8,sp
    8428:	4f3feb16 	blt	r9,fp,83d8 <___svfiprintf_internal_r+0xcb4>
    842c:	dac02217 	ldw	r11,136(sp)
    8430:	1f07883a 	add	r3,r3,fp
    8434:	10800044 	addi	r2,r2,1
    8438:	42c00015 	stw	r11,0(r8)
    843c:	47000115 	stw	fp,4(r8)
    8440:	d8c01c15 	stw	r3,112(sp)
    8444:	d8801b15 	stw	r2,108(sp)
    8448:	010001c4 	movi	r4,7
    844c:	2080b616 	blt	r4,r2,8728 <___svfiprintf_internal_r+0x1004>
    8450:	42000204 	addi	r8,r8,8
    8454:	003f4e06 	br	8190 <___svfiprintf_internal_r+0xa6c>
    8458:	d9801a04 	addi	r6,sp,104
    845c:	b80b883a 	mov	r5,r23
    8460:	a809883a 	mov	r4,r21
    8464:	00075540 	call	7554 <__ssprint_r>
    8468:	103fbc1e 	bne	r2,zero,835c <___svfiprintf_internal_r+0xc38>
    846c:	d8c01c17 	ldw	r3,112(sp)
    8470:	d811883a 	mov	r8,sp
    8474:	003f7a06 	br	8260 <___svfiprintf_internal_r+0xb3c>
    8478:	d9801a04 	addi	r6,sp,104
    847c:	b80b883a 	mov	r5,r23
    8480:	a809883a 	mov	r4,r21
    8484:	00075540 	call	7554 <__ssprint_r>
    8488:	103fa826 	beq	r2,zero,832c <___svfiprintf_internal_r+0xc08>
    848c:	003fb306 	br	835c <___svfiprintf_internal_r+0xc38>
    8490:	d9801a04 	addi	r6,sp,104
    8494:	b80b883a 	mov	r5,r23
    8498:	a809883a 	mov	r4,r21
    849c:	00075540 	call	7554 <__ssprint_r>
    84a0:	103fae1e 	bne	r2,zero,835c <___svfiprintf_internal_r+0xc38>
    84a4:	d811883a 	mov	r8,sp
    84a8:	003cdc06 	br	781c <___svfiprintf_internal_r+0xf8>
    84ac:	d9801a04 	addi	r6,sp,104
    84b0:	b80b883a 	mov	r5,r23
    84b4:	a809883a 	mov	r4,r21
    84b8:	00075540 	call	7554 <__ssprint_r>
    84bc:	103fa71e 	bne	r2,zero,835c <___svfiprintf_internal_r+0xc38>
    84c0:	d8c01c17 	ldw	r3,112(sp)
    84c4:	d8801b17 	ldw	r2,108(sp)
    84c8:	d811883a 	mov	r8,sp
    84cc:	003f5a06 	br	8238 <___svfiprintf_internal_r+0xb14>
    84d0:	d9801a04 	addi	r6,sp,104
    84d4:	b80b883a 	mov	r5,r23
    84d8:	a809883a 	mov	r4,r21
    84dc:	00075540 	call	7554 <__ssprint_r>
    84e0:	103f9e1e 	bne	r2,zero,835c <___svfiprintf_internal_r+0xc38>
    84e4:	d8c01c17 	ldw	r3,112(sp)
    84e8:	d8801b17 	ldw	r2,108(sp)
    84ec:	d811883a 	mov	r8,sp
    84f0:	003f1706 	br	8150 <___svfiprintf_internal_r+0xa2c>
    84f4:	d9801a04 	addi	r6,sp,104
    84f8:	b80b883a 	mov	r5,r23
    84fc:	a809883a 	mov	r4,r21
    8500:	00075540 	call	7554 <__ssprint_r>
    8504:	103f951e 	bne	r2,zero,835c <___svfiprintf_internal_r+0xc38>
    8508:	d8c01c17 	ldw	r3,112(sp)
    850c:	d8801b17 	ldw	r2,108(sp)
    8510:	d811883a 	mov	r8,sp
    8514:	003f1b06 	br	8184 <___svfiprintf_internal_r+0xa60>
    8518:	d8001d85 	stb	zero,118(sp)
    851c:	80007b16 	blt	r16,zero,870c <___svfiprintf_internal_r+0xfe8>
    8520:	00ffdfc4 	movi	r3,-129
    8524:	e244b03a 	or	r2,fp,r9
    8528:	90e4703a 	and	r18,r18,r3
    852c:	103d7026 	beq	r2,zero,7af0 <___svfiprintf_internal_r+0x3cc>
    8530:	0015883a 	mov	r10,zero
    8534:	003d7206 	br	7b00 <___svfiprintf_internal_r+0x3dc>
    8538:	d9801a04 	addi	r6,sp,104
    853c:	b80b883a 	mov	r5,r23
    8540:	a809883a 	mov	r4,r21
    8544:	00075540 	call	7554 <__ssprint_r>
    8548:	103f841e 	bne	r2,zero,835c <___svfiprintf_internal_r+0xc38>
    854c:	d8c01c17 	ldw	r3,112(sp)
    8550:	d8801b17 	ldw	r2,108(sp)
    8554:	d811883a 	mov	r8,sp
    8558:	003ef006 	br	811c <___svfiprintf_internal_r+0x9f8>
    855c:	9080100c 	andi	r2,r18,64
    8560:	d8001d85 	stb	zero,118(sp)
    8564:	dac02317 	ldw	r11,140(sp)
    8568:	10008126 	beq	r2,zero,8770 <___svfiprintf_internal_r+0x104c>
    856c:	58800104 	addi	r2,r11,4
    8570:	5f00000b 	ldhu	fp,0(r11)
    8574:	0013883a 	mov	r9,zero
    8578:	803ec30e 	bge	r16,zero,8088 <___svfiprintf_internal_r+0x964>
    857c:	d8802315 	stw	r2,140(sp)
    8580:	0015883a 	mov	r10,zero
    8584:	e244b03a 	or	r2,fp,r9
    8588:	103e371e 	bne	r2,zero,7e68 <___svfiprintf_internal_r+0x744>
    858c:	00800044 	movi	r2,1
    8590:	10803fcc 	andi	r2,r2,255
    8594:	00c00044 	movi	r3,1
    8598:	10c06126 	beq	r2,r3,8720 <___svfiprintf_internal_r+0xffc>
    859c:	00c00084 	movi	r3,2
    85a0:	10fd5526 	beq	r2,r3,7af8 <___svfiprintf_internal_r+0x3d4>
    85a4:	003ed806 	br	8108 <___svfiprintf_internal_r+0x9e4>
    85a8:	d8802315 	stw	r2,140(sp)
    85ac:	98c00007 	ldb	r3,0(r19)
    85b0:	003cab06 	br	7860 <___svfiprintf_internal_r+0x13c>
    85b4:	d9801a04 	addi	r6,sp,104
    85b8:	b80b883a 	mov	r5,r23
    85bc:	a809883a 	mov	r4,r21
    85c0:	00075540 	call	7554 <__ssprint_r>
    85c4:	103f651e 	bne	r2,zero,835c <___svfiprintf_internal_r+0xc38>
    85c8:	d8c01c17 	ldw	r3,112(sp)
    85cc:	003f4f06 	br	830c <___svfiprintf_internal_r+0xbe8>
    85d0:	008000b4 	movhi	r2,2
    85d4:	10a9d204 	addi	r2,r2,-22712
    85d8:	d8802915 	stw	r2,164(sp)
    85dc:	003d4406 	br	7af0 <___svfiprintf_internal_r+0x3cc>
    85e0:	dac02317 	ldw	r11,140(sp)
    85e4:	58800017 	ldw	r2,0(r11)
    85e8:	dac02517 	ldw	r11,148(sp)
    85ec:	5807d7fa 	srai	r3,r11,31
    85f0:	dac02317 	ldw	r11,140(sp)
    85f4:	10c00115 	stw	r3,4(r2)
    85f8:	5ac00104 	addi	r11,r11,4
    85fc:	dac02315 	stw	r11,140(sp)
    8600:	dac02517 	ldw	r11,148(sp)
    8604:	12c00015 	stw	r11,0(r2)
    8608:	003c6d06 	br	77c0 <___svfiprintf_internal_r+0x9c>
    860c:	9080100c 	andi	r2,r18,64
    8610:	dac02317 	ldw	r11,140(sp)
    8614:	103e5326 	beq	r2,zero,7f64 <___svfiprintf_internal_r+0x840>
    8618:	5f00000f 	ldh	fp,0(r11)
    861c:	5ac00104 	addi	r11,r11,4
    8620:	dac02315 	stw	r11,140(sp)
    8624:	e013d7fa 	srai	r9,fp,31
    8628:	4805883a 	mov	r2,r9
    862c:	003e0706 	br	7e4c <___svfiprintf_internal_r+0x728>
    8630:	00800c04 	movi	r2,48
    8634:	d8801d05 	stb	r2,116(sp)
    8638:	d8c01d45 	stb	r3,117(sp)
    863c:	d8001d85 	stb	zero,118(sp)
    8640:	90800094 	ori	r2,r18,2
    8644:	80008f16 	blt	r16,zero,8884 <___svfiprintf_internal_r+0x1160>
    8648:	00bfdfc4 	movi	r2,-129
    864c:	90a4703a 	and	r18,r18,r2
    8650:	94800094 	ori	r18,r18,2
    8654:	0015883a 	mov	r10,zero
    8658:	003d2906 	br	7b00 <___svfiprintf_internal_r+0x3dc>
    865c:	98c00007 	ldb	r3,0(r19)
    8660:	003c7f06 	br	7860 <___svfiprintf_internal_r+0x13c>
    8664:	dac02317 	ldw	r11,140(sp)
    8668:	0013883a 	mov	r9,zero
    866c:	5f000017 	ldw	fp,0(r11)
    8670:	5ac00104 	addi	r11,r11,4
    8674:	dac02315 	stw	r11,140(sp)
    8678:	003d1506 	br	7ad0 <___svfiprintf_internal_r+0x3ac>
    867c:	9080100c 	andi	r2,r18,64
    8680:	d8001d85 	stb	zero,118(sp)
    8684:	dac02317 	ldw	r11,140(sp)
    8688:	10003426 	beq	r2,zero,875c <___svfiprintf_internal_r+0x1038>
    868c:	58800104 	addi	r2,r11,4
    8690:	5f00000b 	ldhu	fp,0(r11)
    8694:	0013883a 	mov	r9,zero
    8698:	803e950e 	bge	r16,zero,80f0 <___svfiprintf_internal_r+0x9cc>
    869c:	e246b03a 	or	r3,fp,r9
    86a0:	d8802315 	stw	r2,140(sp)
    86a4:	183d5a1e 	bne	r3,zero,7c10 <___svfiprintf_internal_r+0x4ec>
    86a8:	0015883a 	mov	r10,zero
    86ac:	0005883a 	mov	r2,zero
    86b0:	003fb706 	br	8590 <___svfiprintf_internal_r+0xe6c>
    86b4:	98c00043 	ldbu	r3,1(r19)
    86b8:	94800814 	ori	r18,r18,32
    86bc:	9cc00044 	addi	r19,r19,1
    86c0:	18c03fcc 	andi	r3,r3,255
    86c4:	18c0201c 	xori	r3,r3,128
    86c8:	18ffe004 	addi	r3,r3,-128
    86cc:	003c6406 	br	7860 <___svfiprintf_internal_r+0x13c>
    86d0:	d8c02315 	stw	r3,140(sp)
    86d4:	0015883a 	mov	r10,zero
    86d8:	003faa06 	br	8584 <___svfiprintf_internal_r+0xe60>
    86dc:	dac02317 	ldw	r11,140(sp)
    86e0:	58800017 	ldw	r2,0(r11)
    86e4:	5ac00104 	addi	r11,r11,4
    86e8:	dac02315 	stw	r11,140(sp)
    86ec:	dac02517 	ldw	r11,148(sp)
    86f0:	12c00015 	stw	r11,0(r2)
    86f4:	003c3206 	br	77c0 <___svfiprintf_internal_r+0x9c>
    86f8:	010000b4 	movhi	r4,2
    86fc:	2129d204 	addi	r4,r4,-22712
    8700:	d9002915 	stw	r4,164(sp)
    8704:	d8c02315 	stw	r3,140(sp)
    8708:	1025883a 	mov	r18,r2
    870c:	e244b03a 	or	r2,fp,r9
    8710:	103f871e 	bne	r2,zero,8530 <___svfiprintf_internal_r+0xe0c>
    8714:	0015883a 	mov	r10,zero
    8718:	00800084 	movi	r2,2
    871c:	003f9c06 	br	8590 <___svfiprintf_internal_r+0xe6c>
    8720:	0039883a 	mov	fp,zero
    8724:	003e5f06 	br	80a4 <___svfiprintf_internal_r+0x980>
    8728:	d9801a04 	addi	r6,sp,104
    872c:	b80b883a 	mov	r5,r23
    8730:	a809883a 	mov	r4,r21
    8734:	00075540 	call	7554 <__ssprint_r>
    8738:	103f081e 	bne	r2,zero,835c <___svfiprintf_internal_r+0xc38>
    873c:	d8c01c17 	ldw	r3,112(sp)
    8740:	d8801b17 	ldw	r2,108(sp)
    8744:	d811883a 	mov	r8,sp
    8748:	003e9106 	br	8190 <___svfiprintf_internal_r+0xa6c>
    874c:	010000b4 	movhi	r4,2
    8750:	212a3304 	addi	r4,r4,-22324
    8754:	d9002215 	stw	r4,136(sp)
    8758:	003ead06 	br	8210 <___svfiprintf_internal_r+0xaec>
    875c:	58800104 	addi	r2,r11,4
    8760:	5f000017 	ldw	fp,0(r11)
    8764:	0013883a 	mov	r9,zero
    8768:	803e610e 	bge	r16,zero,80f0 <___svfiprintf_internal_r+0x9cc>
    876c:	003fcb06 	br	869c <___svfiprintf_internal_r+0xf78>
    8770:	58800104 	addi	r2,r11,4
    8774:	5f000017 	ldw	fp,0(r11)
    8778:	0013883a 	mov	r9,zero
    877c:	803e420e 	bge	r16,zero,8088 <___svfiprintf_internal_r+0x964>
    8780:	003f7e06 	br	857c <___svfiprintf_internal_r+0xe58>
    8784:	5f000017 	ldw	fp,0(r11)
    8788:	5ac00104 	addi	r11,r11,4
    878c:	0013883a 	mov	r9,zero
    8790:	dac02315 	stw	r11,140(sp)
    8794:	003cce06 	br	7ad0 <___svfiprintf_internal_r+0x3ac>
    8798:	8809883a 	mov	r4,r17
    879c:	da002c15 	stw	r8,176(sp)
    87a0:	00074bc0 	call	74bc <strlen>
    87a4:	d8802115 	stw	r2,132(sp)
    87a8:	da801d83 	ldbu	r10,118(sp)
    87ac:	df002315 	stw	fp,140(sp)
    87b0:	0021883a 	mov	r16,zero
    87b4:	da002c17 	ldw	r8,176(sp)
    87b8:	003cf606 	br	7b94 <___svfiprintf_internal_r+0x470>
    87bc:	00800184 	movi	r2,6
    87c0:	1400012e 	bgeu	r2,r16,87c8 <___svfiprintf_internal_r+0x10a4>
    87c4:	1021883a 	mov	r16,r2
    87c8:	dc002115 	stw	r16,132(sp)
    87cc:	8005883a 	mov	r2,r16
    87d0:	80003c16 	blt	r16,zero,88c4 <___svfiprintf_internal_r+0x11a0>
    87d4:	044000b4 	movhi	r17,2
    87d8:	d8802015 	stw	r2,128(sp)
    87dc:	df002315 	stw	fp,140(sp)
    87e0:	8c69d704 	addi	r17,r17,-22692
    87e4:	003d2e06 	br	7ca0 <___svfiprintf_internal_r+0x57c>
    87e8:	04001004 	movi	r16,64
    87ec:	800b883a 	mov	r5,r16
    87f0:	00058e40 	call	58e4 <_malloc_r>
    87f4:	dac02717 	ldw	r11,156(sp)
    87f8:	58800015 	stw	r2,0(r11)
    87fc:	58800415 	stw	r2,16(r11)
    8800:	10004826 	beq	r2,zero,8924 <___svfiprintf_internal_r+0x1200>
    8804:	dac02717 	ldw	r11,156(sp)
    8808:	5c000515 	stw	r16,20(r11)
    880c:	003bd906 	br	7774 <___svfiprintf_internal_r+0x50>
    8810:	9080004c 	andi	r2,r18,1
    8814:	0015883a 	mov	r10,zero
    8818:	10000626 	beq	r2,zero,8834 <___svfiprintf_internal_r+0x1110>
    881c:	dac02b17 	ldw	r11,172(sp)
    8820:	00800c04 	movi	r2,48
    8824:	d88019c5 	stb	r2,103(sp)
    8828:	dac02115 	stw	r11,132(sp)
    882c:	dc4019c4 	addi	r17,sp,103
    8830:	003cd806 	br	7b94 <___svfiprintf_internal_r+0x470>
    8834:	d8002115 	stw	zero,132(sp)
    8838:	dc401a04 	addi	r17,sp,104
    883c:	003cd506 	br	7b94 <___svfiprintf_internal_r+0x470>
    8840:	010000b4 	movhi	r4,2
    8844:	212a3704 	addi	r4,r4,-22308
    8848:	d9002815 	stw	r4,160(sp)
    884c:	003d4306 	br	7d5c <___svfiprintf_internal_r+0x638>
    8850:	00bfffc4 	movi	r2,-1
    8854:	003ec606 	br	8370 <___svfiprintf_internal_r+0xc4c>
    8858:	00800044 	movi	r2,1
    885c:	10803fcc 	andi	r2,r2,255
    8860:	00c00044 	movi	r3,1
    8864:	10fd8026 	beq	r2,r3,7e68 <___svfiprintf_internal_r+0x744>
    8868:	00c00084 	movi	r3,2
    886c:	10fca426 	beq	r2,r3,7b00 <___svfiprintf_internal_r+0x3dc>
    8870:	003ce806 	br	7c14 <___svfiprintf_internal_r+0x4f0>
    8874:	010000b4 	movhi	r4,2
    8878:	212a3704 	addi	r4,r4,-22308
    887c:	d9002815 	stw	r4,160(sp)
    8880:	003e9906 	br	82e8 <___svfiprintf_internal_r+0xbc4>
    8884:	1025883a 	mov	r18,r2
    8888:	0015883a 	mov	r10,zero
    888c:	00800084 	movi	r2,2
    8890:	003ff206 	br	885c <___svfiprintf_internal_r+0x1138>
    8894:	014000b4 	movhi	r5,2
    8898:	296a3304 	addi	r5,r5,-22324
    889c:	d9402215 	stw	r5,136(sp)
    88a0:	003ee206 	br	842c <___svfiprintf_internal_r+0xd08>
    88a4:	5827883a 	mov	r19,r11
    88a8:	0021883a 	mov	r16,zero
    88ac:	003bed06 	br	7864 <___svfiprintf_internal_r+0x140>
    88b0:	dc002115 	stw	r16,132(sp)
    88b4:	da801d83 	ldbu	r10,118(sp)
    88b8:	df002315 	stw	fp,140(sp)
    88bc:	0021883a 	mov	r16,zero
    88c0:	003cb406 	br	7b94 <___svfiprintf_internal_r+0x470>
    88c4:	0005883a 	mov	r2,zero
    88c8:	003fc206 	br	87d4 <___svfiprintf_internal_r+0x10b0>
    88cc:	d8802317 	ldw	r2,140(sp)
    88d0:	98c00043 	ldbu	r3,1(r19)
    88d4:	5827883a 	mov	r19,r11
    88d8:	14000017 	ldw	r16,0(r2)
    88dc:	10800104 	addi	r2,r2,4
    88e0:	d8802315 	stw	r2,140(sp)
    88e4:	803f760e 	bge	r16,zero,86c0 <___svfiprintf_internal_r+0xf9c>
    88e8:	18c03fcc 	andi	r3,r3,255
    88ec:	18c0201c 	xori	r3,r3,128
    88f0:	043fffc4 	movi	r16,-1
    88f4:	18ffe004 	addi	r3,r3,-128
    88f8:	003bd906 	br	7860 <___svfiprintf_internal_r+0x13c>
    88fc:	d9c01d85 	stb	r7,118(sp)
    8900:	003cb606 	br	7bdc <___svfiprintf_internal_r+0x4b8>
    8904:	d9c01d85 	stb	r7,118(sp)
    8908:	003d2106 	br	7d90 <___svfiprintf_internal_r+0x66c>
    890c:	d9c01d85 	stb	r7,118(sp)
    8910:	003d8e06 	br	7f4c <___svfiprintf_internal_r+0x828>
    8914:	d9c01d85 	stb	r7,118(sp)
    8918:	003db306 	br	7fe8 <___svfiprintf_internal_r+0x8c4>
    891c:	d9c01d85 	stb	r7,118(sp)
    8920:	003c8a06 	br	7b4c <___svfiprintf_internal_r+0x428>
    8924:	dac02a17 	ldw	r11,168(sp)
    8928:	00800304 	movi	r2,12
    892c:	58800015 	stw	r2,0(r11)
    8930:	00bfffc4 	movi	r2,-1
    8934:	003e8e06 	br	8370 <___svfiprintf_internal_r+0xc4c>
    8938:	d9c01d85 	stb	r7,118(sp)
    893c:	003dc706 	br	805c <___svfiprintf_internal_r+0x938>
    8940:	d9c01d85 	stb	r7,118(sp)
    8944:	003ddf06 	br	80c4 <___svfiprintf_internal_r+0x9a0>
    8948:	d9c01d85 	stb	r7,118(sp)
    894c:	003d3706 	br	7e2c <___svfiprintf_internal_r+0x708>
    8950:	d9c01d85 	stb	r7,118(sp)
    8954:	003c5406 	br	7aa8 <___svfiprintf_internal_r+0x384>
    8958:	d9c01d85 	stb	r7,118(sp)
    895c:	003d1d06 	br	7dd4 <___svfiprintf_internal_r+0x6b0>

00008960 <_calloc_r>:
    8960:	298b383a 	mul	r5,r5,r6
    8964:	defffe04 	addi	sp,sp,-8
    8968:	dfc00115 	stw	ra,4(sp)
    896c:	dc000015 	stw	r16,0(sp)
    8970:	00058e40 	call	58e4 <_malloc_r>
    8974:	10002926 	beq	r2,zero,8a1c <_calloc_r+0xbc>
    8978:	11bfff17 	ldw	r6,-4(r2)
    897c:	1021883a 	mov	r16,r2
    8980:	00bfff04 	movi	r2,-4
    8984:	308c703a 	and	r6,r6,r2
    8988:	00c00904 	movi	r3,36
    898c:	308d883a 	add	r6,r6,r2
    8990:	19801636 	bltu	r3,r6,89ec <_calloc_r+0x8c>
    8994:	008004c4 	movi	r2,19
    8998:	11800b2e 	bgeu	r2,r6,89c8 <_calloc_r+0x68>
    899c:	80000015 	stw	zero,0(r16)
    89a0:	80000115 	stw	zero,4(r16)
    89a4:	008006c4 	movi	r2,27
    89a8:	11801a2e 	bgeu	r2,r6,8a14 <_calloc_r+0xb4>
    89ac:	80000215 	stw	zero,8(r16)
    89b0:	80000315 	stw	zero,12(r16)
    89b4:	30c0151e 	bne	r6,r3,8a0c <_calloc_r+0xac>
    89b8:	80000415 	stw	zero,16(r16)
    89bc:	80800604 	addi	r2,r16,24
    89c0:	80000515 	stw	zero,20(r16)
    89c4:	00000106 	br	89cc <_calloc_r+0x6c>
    89c8:	8005883a 	mov	r2,r16
    89cc:	10000015 	stw	zero,0(r2)
    89d0:	10000115 	stw	zero,4(r2)
    89d4:	10000215 	stw	zero,8(r2)
    89d8:	8005883a 	mov	r2,r16
    89dc:	dfc00117 	ldw	ra,4(sp)
    89e0:	dc000017 	ldw	r16,0(sp)
    89e4:	dec00204 	addi	sp,sp,8
    89e8:	f800283a 	ret
    89ec:	000b883a 	mov	r5,zero
    89f0:	8009883a 	mov	r4,r16
    89f4:	0008fb40 	call	8fb4 <memset>
    89f8:	8005883a 	mov	r2,r16
    89fc:	dfc00117 	ldw	ra,4(sp)
    8a00:	dc000017 	ldw	r16,0(sp)
    8a04:	dec00204 	addi	sp,sp,8
    8a08:	f800283a 	ret
    8a0c:	80800404 	addi	r2,r16,16
    8a10:	003fee06 	br	89cc <_calloc_r+0x6c>
    8a14:	80800204 	addi	r2,r16,8
    8a18:	003fec06 	br	89cc <_calloc_r+0x6c>
    8a1c:	0005883a 	mov	r2,zero
    8a20:	003fee06 	br	89dc <_calloc_r+0x7c>

00008a24 <_malloc_trim_r>:
    8a24:	defffb04 	addi	sp,sp,-20
    8a28:	dcc00315 	stw	r19,12(sp)
    8a2c:	04c000b4 	movhi	r19,2
    8a30:	dc800215 	stw	r18,8(sp)
    8a34:	dc400115 	stw	r17,4(sp)
    8a38:	dc000015 	stw	r16,0(sp)
    8a3c:	dfc00415 	stw	ra,16(sp)
    8a40:	2821883a 	mov	r16,r5
    8a44:	9cec5704 	addi	r19,r19,-20132
    8a48:	2025883a 	mov	r18,r4
    8a4c:	000cc880 	call	cc88 <__malloc_lock>
    8a50:	98800217 	ldw	r2,8(r19)
    8a54:	14400117 	ldw	r17,4(r2)
    8a58:	00bfff04 	movi	r2,-4
    8a5c:	88a2703a 	and	r17,r17,r2
    8a60:	8c21c83a 	sub	r16,r17,r16
    8a64:	8403fbc4 	addi	r16,r16,4079
    8a68:	8020d33a 	srli	r16,r16,12
    8a6c:	0083ffc4 	movi	r2,4095
    8a70:	843fffc4 	addi	r16,r16,-1
    8a74:	8020933a 	slli	r16,r16,12
    8a78:	1400060e 	bge	r2,r16,8a94 <_malloc_trim_r+0x70>
    8a7c:	000b883a 	mov	r5,zero
    8a80:	9009883a 	mov	r4,r18
    8a84:	000738c0 	call	738c <_sbrk_r>
    8a88:	98c00217 	ldw	r3,8(r19)
    8a8c:	1c47883a 	add	r3,r3,r17
    8a90:	10c00a26 	beq	r2,r3,8abc <_malloc_trim_r+0x98>
    8a94:	9009883a 	mov	r4,r18
    8a98:	000cda80 	call	cda8 <__malloc_unlock>
    8a9c:	0005883a 	mov	r2,zero
    8aa0:	dfc00417 	ldw	ra,16(sp)
    8aa4:	dcc00317 	ldw	r19,12(sp)
    8aa8:	dc800217 	ldw	r18,8(sp)
    8aac:	dc400117 	ldw	r17,4(sp)
    8ab0:	dc000017 	ldw	r16,0(sp)
    8ab4:	dec00504 	addi	sp,sp,20
    8ab8:	f800283a 	ret
    8abc:	040bc83a 	sub	r5,zero,r16
    8ac0:	9009883a 	mov	r4,r18
    8ac4:	000738c0 	call	738c <_sbrk_r>
    8ac8:	00ffffc4 	movi	r3,-1
    8acc:	10c00d26 	beq	r2,r3,8b04 <_malloc_trim_r+0xe0>
    8ad0:	00c000b4 	movhi	r3,2
    8ad4:	18faaa04 	addi	r3,r3,-5464
    8ad8:	18800017 	ldw	r2,0(r3)
    8adc:	99000217 	ldw	r4,8(r19)
    8ae0:	8c23c83a 	sub	r17,r17,r16
    8ae4:	8c400054 	ori	r17,r17,1
    8ae8:	1421c83a 	sub	r16,r2,r16
    8aec:	24400115 	stw	r17,4(r4)
    8af0:	9009883a 	mov	r4,r18
    8af4:	1c000015 	stw	r16,0(r3)
    8af8:	000cda80 	call	cda8 <__malloc_unlock>
    8afc:	00800044 	movi	r2,1
    8b00:	003fe706 	br	8aa0 <_malloc_trim_r+0x7c>
    8b04:	000b883a 	mov	r5,zero
    8b08:	9009883a 	mov	r4,r18
    8b0c:	000738c0 	call	738c <_sbrk_r>
    8b10:	99000217 	ldw	r4,8(r19)
    8b14:	014003c4 	movi	r5,15
    8b18:	1107c83a 	sub	r3,r2,r4
    8b1c:	28ffdd0e 	bge	r5,r3,8a94 <_malloc_trim_r+0x70>
    8b20:	014000b4 	movhi	r5,2
    8b24:	2972a404 	addi	r5,r5,-13680
    8b28:	29400017 	ldw	r5,0(r5)
    8b2c:	18c00054 	ori	r3,r3,1
    8b30:	20c00115 	stw	r3,4(r4)
    8b34:	00c000b4 	movhi	r3,2
    8b38:	1145c83a 	sub	r2,r2,r5
    8b3c:	18faaa04 	addi	r3,r3,-5464
    8b40:	18800015 	stw	r2,0(r3)
    8b44:	003fd306 	br	8a94 <_malloc_trim_r+0x70>

00008b48 <_free_r>:
    8b48:	28004126 	beq	r5,zero,8c50 <_free_r+0x108>
    8b4c:	defffd04 	addi	sp,sp,-12
    8b50:	dc400115 	stw	r17,4(sp)
    8b54:	dc000015 	stw	r16,0(sp)
    8b58:	2023883a 	mov	r17,r4
    8b5c:	2821883a 	mov	r16,r5
    8b60:	dfc00215 	stw	ra,8(sp)
    8b64:	000cc880 	call	cc88 <__malloc_lock>
    8b68:	81ffff17 	ldw	r7,-4(r16)
    8b6c:	00bfff84 	movi	r2,-2
    8b70:	010000b4 	movhi	r4,2
    8b74:	81bffe04 	addi	r6,r16,-8
    8b78:	3884703a 	and	r2,r7,r2
    8b7c:	212c5704 	addi	r4,r4,-20132
    8b80:	308b883a 	add	r5,r6,r2
    8b84:	2a400117 	ldw	r9,4(r5)
    8b88:	22000217 	ldw	r8,8(r4)
    8b8c:	00ffff04 	movi	r3,-4
    8b90:	48c6703a 	and	r3,r9,r3
    8b94:	2a005726 	beq	r5,r8,8cf4 <_free_r+0x1ac>
    8b98:	28c00115 	stw	r3,4(r5)
    8b9c:	39c0004c 	andi	r7,r7,1
    8ba0:	3800091e 	bne	r7,zero,8bc8 <_free_r+0x80>
    8ba4:	823ffe17 	ldw	r8,-8(r16)
    8ba8:	22400204 	addi	r9,r4,8
    8bac:	320dc83a 	sub	r6,r6,r8
    8bb0:	31c00217 	ldw	r7,8(r6)
    8bb4:	1205883a 	add	r2,r2,r8
    8bb8:	3a406526 	beq	r7,r9,8d50 <_free_r+0x208>
    8bbc:	32000317 	ldw	r8,12(r6)
    8bc0:	3a000315 	stw	r8,12(r7)
    8bc4:	41c00215 	stw	r7,8(r8)
    8bc8:	28cf883a 	add	r7,r5,r3
    8bcc:	39c00117 	ldw	r7,4(r7)
    8bd0:	39c0004c 	andi	r7,r7,1
    8bd4:	38003a26 	beq	r7,zero,8cc0 <_free_r+0x178>
    8bd8:	10c00054 	ori	r3,r2,1
    8bdc:	30c00115 	stw	r3,4(r6)
    8be0:	3087883a 	add	r3,r6,r2
    8be4:	18800015 	stw	r2,0(r3)
    8be8:	00c07fc4 	movi	r3,511
    8bec:	18801936 	bltu	r3,r2,8c54 <_free_r+0x10c>
    8bf0:	1004d0fa 	srli	r2,r2,3
    8bf4:	01c00044 	movi	r7,1
    8bf8:	21400117 	ldw	r5,4(r4)
    8bfc:	10c00044 	addi	r3,r2,1
    8c00:	18c7883a 	add	r3,r3,r3
    8c04:	1005d0ba 	srai	r2,r2,2
    8c08:	18c7883a 	add	r3,r3,r3
    8c0c:	18c7883a 	add	r3,r3,r3
    8c10:	1907883a 	add	r3,r3,r4
    8c14:	3884983a 	sll	r2,r7,r2
    8c18:	19c00017 	ldw	r7,0(r3)
    8c1c:	1a3ffe04 	addi	r8,r3,-8
    8c20:	1144b03a 	or	r2,r2,r5
    8c24:	32000315 	stw	r8,12(r6)
    8c28:	31c00215 	stw	r7,8(r6)
    8c2c:	20800115 	stw	r2,4(r4)
    8c30:	19800015 	stw	r6,0(r3)
    8c34:	39800315 	stw	r6,12(r7)
    8c38:	8809883a 	mov	r4,r17
    8c3c:	dfc00217 	ldw	ra,8(sp)
    8c40:	dc400117 	ldw	r17,4(sp)
    8c44:	dc000017 	ldw	r16,0(sp)
    8c48:	dec00304 	addi	sp,sp,12
    8c4c:	000cda81 	jmpi	cda8 <__malloc_unlock>
    8c50:	f800283a 	ret
    8c54:	100ad27a 	srli	r5,r2,9
    8c58:	00c00104 	movi	r3,4
    8c5c:	19404a36 	bltu	r3,r5,8d88 <_free_r+0x240>
    8c60:	100ad1ba 	srli	r5,r2,6
    8c64:	28c00e44 	addi	r3,r5,57
    8c68:	18c7883a 	add	r3,r3,r3
    8c6c:	29400e04 	addi	r5,r5,56
    8c70:	18c7883a 	add	r3,r3,r3
    8c74:	18c7883a 	add	r3,r3,r3
    8c78:	1909883a 	add	r4,r3,r4
    8c7c:	20c00017 	ldw	r3,0(r4)
    8c80:	01c000b4 	movhi	r7,2
    8c84:	213ffe04 	addi	r4,r4,-8
    8c88:	39ec5704 	addi	r7,r7,-20132
    8c8c:	20c04426 	beq	r4,r3,8da0 <_free_r+0x258>
    8c90:	01ffff04 	movi	r7,-4
    8c94:	19400117 	ldw	r5,4(r3)
    8c98:	29ca703a 	and	r5,r5,r7
    8c9c:	1140022e 	bgeu	r2,r5,8ca8 <_free_r+0x160>
    8ca0:	18c00217 	ldw	r3,8(r3)
    8ca4:	20fffb1e 	bne	r4,r3,8c94 <_free_r+0x14c>
    8ca8:	19000317 	ldw	r4,12(r3)
    8cac:	31000315 	stw	r4,12(r6)
    8cb0:	30c00215 	stw	r3,8(r6)
    8cb4:	21800215 	stw	r6,8(r4)
    8cb8:	19800315 	stw	r6,12(r3)
    8cbc:	003fde06 	br	8c38 <_free_r+0xf0>
    8cc0:	29c00217 	ldw	r7,8(r5)
    8cc4:	10c5883a 	add	r2,r2,r3
    8cc8:	00c000b4 	movhi	r3,2
    8ccc:	18ec5904 	addi	r3,r3,-20124
    8cd0:	38c03b26 	beq	r7,r3,8dc0 <_free_r+0x278>
    8cd4:	2a000317 	ldw	r8,12(r5)
    8cd8:	11400054 	ori	r5,r2,1
    8cdc:	3087883a 	add	r3,r6,r2
    8ce0:	3a000315 	stw	r8,12(r7)
    8ce4:	41c00215 	stw	r7,8(r8)
    8ce8:	31400115 	stw	r5,4(r6)
    8cec:	18800015 	stw	r2,0(r3)
    8cf0:	003fbd06 	br	8be8 <_free_r+0xa0>
    8cf4:	39c0004c 	andi	r7,r7,1
    8cf8:	10c5883a 	add	r2,r2,r3
    8cfc:	3800071e 	bne	r7,zero,8d1c <_free_r+0x1d4>
    8d00:	81fffe17 	ldw	r7,-8(r16)
    8d04:	31cdc83a 	sub	r6,r6,r7
    8d08:	30c00317 	ldw	r3,12(r6)
    8d0c:	31400217 	ldw	r5,8(r6)
    8d10:	11c5883a 	add	r2,r2,r7
    8d14:	28c00315 	stw	r3,12(r5)
    8d18:	19400215 	stw	r5,8(r3)
    8d1c:	10c00054 	ori	r3,r2,1
    8d20:	30c00115 	stw	r3,4(r6)
    8d24:	00c000b4 	movhi	r3,2
    8d28:	18f2a504 	addi	r3,r3,-13676
    8d2c:	18c00017 	ldw	r3,0(r3)
    8d30:	21800215 	stw	r6,8(r4)
    8d34:	10ffc036 	bltu	r2,r3,8c38 <_free_r+0xf0>
    8d38:	008000b4 	movhi	r2,2
    8d3c:	10ba8004 	addi	r2,r2,-5632
    8d40:	11400017 	ldw	r5,0(r2)
    8d44:	8809883a 	mov	r4,r17
    8d48:	0008a240 	call	8a24 <_malloc_trim_r>
    8d4c:	003fba06 	br	8c38 <_free_r+0xf0>
    8d50:	28c9883a 	add	r4,r5,r3
    8d54:	21000117 	ldw	r4,4(r4)
    8d58:	2100004c 	andi	r4,r4,1
    8d5c:	2000391e 	bne	r4,zero,8e44 <_free_r+0x2fc>
    8d60:	29c00217 	ldw	r7,8(r5)
    8d64:	29000317 	ldw	r4,12(r5)
    8d68:	1885883a 	add	r2,r3,r2
    8d6c:	10c00054 	ori	r3,r2,1
    8d70:	39000315 	stw	r4,12(r7)
    8d74:	21c00215 	stw	r7,8(r4)
    8d78:	30c00115 	stw	r3,4(r6)
    8d7c:	308d883a 	add	r6,r6,r2
    8d80:	30800015 	stw	r2,0(r6)
    8d84:	003fac06 	br	8c38 <_free_r+0xf0>
    8d88:	00c00504 	movi	r3,20
    8d8c:	19401536 	bltu	r3,r5,8de4 <_free_r+0x29c>
    8d90:	28c01704 	addi	r3,r5,92
    8d94:	18c7883a 	add	r3,r3,r3
    8d98:	294016c4 	addi	r5,r5,91
    8d9c:	003fb406 	br	8c70 <_free_r+0x128>
    8da0:	280bd0ba 	srai	r5,r5,2
    8da4:	00c00044 	movi	r3,1
    8da8:	38800117 	ldw	r2,4(r7)
    8dac:	194a983a 	sll	r5,r3,r5
    8db0:	2007883a 	mov	r3,r4
    8db4:	2884b03a 	or	r2,r5,r2
    8db8:	38800115 	stw	r2,4(r7)
    8dbc:	003fbb06 	br	8cac <_free_r+0x164>
    8dc0:	21800515 	stw	r6,20(r4)
    8dc4:	21800415 	stw	r6,16(r4)
    8dc8:	10c00054 	ori	r3,r2,1
    8dcc:	31c00315 	stw	r7,12(r6)
    8dd0:	31c00215 	stw	r7,8(r6)
    8dd4:	30c00115 	stw	r3,4(r6)
    8dd8:	308d883a 	add	r6,r6,r2
    8ddc:	30800015 	stw	r2,0(r6)
    8de0:	003f9506 	br	8c38 <_free_r+0xf0>
    8de4:	00c01504 	movi	r3,84
    8de8:	19400536 	bltu	r3,r5,8e00 <_free_r+0x2b8>
    8dec:	100ad33a 	srli	r5,r2,12
    8df0:	28c01bc4 	addi	r3,r5,111
    8df4:	18c7883a 	add	r3,r3,r3
    8df8:	29401b84 	addi	r5,r5,110
    8dfc:	003f9c06 	br	8c70 <_free_r+0x128>
    8e00:	00c05504 	movi	r3,340
    8e04:	19400536 	bltu	r3,r5,8e1c <_free_r+0x2d4>
    8e08:	100ad3fa 	srli	r5,r2,15
    8e0c:	28c01e04 	addi	r3,r5,120
    8e10:	18c7883a 	add	r3,r3,r3
    8e14:	29401dc4 	addi	r5,r5,119
    8e18:	003f9506 	br	8c70 <_free_r+0x128>
    8e1c:	00c15504 	movi	r3,1364
    8e20:	19400536 	bltu	r3,r5,8e38 <_free_r+0x2f0>
    8e24:	100ad4ba 	srli	r5,r2,18
    8e28:	28c01f44 	addi	r3,r5,125
    8e2c:	18c7883a 	add	r3,r3,r3
    8e30:	29401f04 	addi	r5,r5,124
    8e34:	003f8e06 	br	8c70 <_free_r+0x128>
    8e38:	00c03f84 	movi	r3,254
    8e3c:	01401f84 	movi	r5,126
    8e40:	003f8b06 	br	8c70 <_free_r+0x128>
    8e44:	10c00054 	ori	r3,r2,1
    8e48:	30c00115 	stw	r3,4(r6)
    8e4c:	308d883a 	add	r6,r6,r2
    8e50:	30800015 	stw	r2,0(r6)
    8e54:	003f7806 	br	8c38 <_free_r+0xf0>

00008e58 <memmove>:
    8e58:	2005883a 	mov	r2,r4
    8e5c:	29000b2e 	bgeu	r5,r4,8e8c <memmove+0x34>
    8e60:	298f883a 	add	r7,r5,r6
    8e64:	21c0092e 	bgeu	r4,r7,8e8c <memmove+0x34>
    8e68:	2187883a 	add	r3,r4,r6
    8e6c:	198bc83a 	sub	r5,r3,r6
    8e70:	30004826 	beq	r6,zero,8f94 <memmove+0x13c>
    8e74:	39ffffc4 	addi	r7,r7,-1
    8e78:	39000003 	ldbu	r4,0(r7)
    8e7c:	18ffffc4 	addi	r3,r3,-1
    8e80:	19000005 	stb	r4,0(r3)
    8e84:	28fffb1e 	bne	r5,r3,8e74 <memmove+0x1c>
    8e88:	f800283a 	ret
    8e8c:	00c003c4 	movi	r3,15
    8e90:	1980412e 	bgeu	r3,r6,8f98 <memmove+0x140>
    8e94:	2886b03a 	or	r3,r5,r2
    8e98:	18c000cc 	andi	r3,r3,3
    8e9c:	1800401e 	bne	r3,zero,8fa0 <memmove+0x148>
    8ea0:	33fffc04 	addi	r15,r6,-16
    8ea4:	781ed13a 	srli	r15,r15,4
    8ea8:	28c00104 	addi	r3,r5,4
    8eac:	13400104 	addi	r13,r2,4
    8eb0:	781c913a 	slli	r14,r15,4
    8eb4:	2b000204 	addi	r12,r5,8
    8eb8:	12c00204 	addi	r11,r2,8
    8ebc:	73800504 	addi	r14,r14,20
    8ec0:	2a800304 	addi	r10,r5,12
    8ec4:	12400304 	addi	r9,r2,12
    8ec8:	2b9d883a 	add	r14,r5,r14
    8ecc:	2811883a 	mov	r8,r5
    8ed0:	100f883a 	mov	r7,r2
    8ed4:	41000017 	ldw	r4,0(r8)
    8ed8:	39c00404 	addi	r7,r7,16
    8edc:	18c00404 	addi	r3,r3,16
    8ee0:	393ffc15 	stw	r4,-16(r7)
    8ee4:	193ffc17 	ldw	r4,-16(r3)
    8ee8:	6b400404 	addi	r13,r13,16
    8eec:	5ac00404 	addi	r11,r11,16
    8ef0:	693ffc15 	stw	r4,-16(r13)
    8ef4:	61000017 	ldw	r4,0(r12)
    8ef8:	4a400404 	addi	r9,r9,16
    8efc:	42000404 	addi	r8,r8,16
    8f00:	593ffc15 	stw	r4,-16(r11)
    8f04:	51000017 	ldw	r4,0(r10)
    8f08:	63000404 	addi	r12,r12,16
    8f0c:	52800404 	addi	r10,r10,16
    8f10:	493ffc15 	stw	r4,-16(r9)
    8f14:	1bbfef1e 	bne	r3,r14,8ed4 <memmove+0x7c>
    8f18:	79000044 	addi	r4,r15,1
    8f1c:	2008913a 	slli	r4,r4,4
    8f20:	328003cc 	andi	r10,r6,15
    8f24:	02c000c4 	movi	r11,3
    8f28:	1107883a 	add	r3,r2,r4
    8f2c:	290b883a 	add	r5,r5,r4
    8f30:	5a801e2e 	bgeu	r11,r10,8fac <memmove+0x154>
    8f34:	1813883a 	mov	r9,r3
    8f38:	2811883a 	mov	r8,r5
    8f3c:	500f883a 	mov	r7,r10
    8f40:	41000017 	ldw	r4,0(r8)
    8f44:	4a400104 	addi	r9,r9,4
    8f48:	39ffff04 	addi	r7,r7,-4
    8f4c:	493fff15 	stw	r4,-4(r9)
    8f50:	42000104 	addi	r8,r8,4
    8f54:	59fffa36 	bltu	r11,r7,8f40 <memmove+0xe8>
    8f58:	513fff04 	addi	r4,r10,-4
    8f5c:	2008d0ba 	srli	r4,r4,2
    8f60:	318000cc 	andi	r6,r6,3
    8f64:	21000044 	addi	r4,r4,1
    8f68:	2109883a 	add	r4,r4,r4
    8f6c:	2109883a 	add	r4,r4,r4
    8f70:	1907883a 	add	r3,r3,r4
    8f74:	290b883a 	add	r5,r5,r4
    8f78:	30000b26 	beq	r6,zero,8fa8 <memmove+0x150>
    8f7c:	198d883a 	add	r6,r3,r6
    8f80:	29c00003 	ldbu	r7,0(r5)
    8f84:	18c00044 	addi	r3,r3,1
    8f88:	29400044 	addi	r5,r5,1
    8f8c:	19ffffc5 	stb	r7,-1(r3)
    8f90:	19bffb1e 	bne	r3,r6,8f80 <memmove+0x128>
    8f94:	f800283a 	ret
    8f98:	1007883a 	mov	r3,r2
    8f9c:	003ff606 	br	8f78 <memmove+0x120>
    8fa0:	1007883a 	mov	r3,r2
    8fa4:	003ff506 	br	8f7c <memmove+0x124>
    8fa8:	f800283a 	ret
    8fac:	500d883a 	mov	r6,r10
    8fb0:	003ff106 	br	8f78 <memmove+0x120>

00008fb4 <memset>:
    8fb4:	20c000cc 	andi	r3,r4,3
    8fb8:	2005883a 	mov	r2,r4
    8fbc:	18004426 	beq	r3,zero,90d0 <memset+0x11c>
    8fc0:	31ffffc4 	addi	r7,r6,-1
    8fc4:	30004026 	beq	r6,zero,90c8 <memset+0x114>
    8fc8:	2813883a 	mov	r9,r5
    8fcc:	200d883a 	mov	r6,r4
    8fd0:	2007883a 	mov	r3,r4
    8fd4:	00000406 	br	8fe8 <memset+0x34>
    8fd8:	3a3fffc4 	addi	r8,r7,-1
    8fdc:	31800044 	addi	r6,r6,1
    8fe0:	38003926 	beq	r7,zero,90c8 <memset+0x114>
    8fe4:	400f883a 	mov	r7,r8
    8fe8:	18c00044 	addi	r3,r3,1
    8fec:	32400005 	stb	r9,0(r6)
    8ff0:	1a0000cc 	andi	r8,r3,3
    8ff4:	403ff81e 	bne	r8,zero,8fd8 <memset+0x24>
    8ff8:	010000c4 	movi	r4,3
    8ffc:	21c02d2e 	bgeu	r4,r7,90b4 <memset+0x100>
    9000:	29003fcc 	andi	r4,r5,255
    9004:	200c923a 	slli	r6,r4,8
    9008:	3108b03a 	or	r4,r6,r4
    900c:	200c943a 	slli	r6,r4,16
    9010:	218cb03a 	or	r6,r4,r6
    9014:	010003c4 	movi	r4,15
    9018:	21c0182e 	bgeu	r4,r7,907c <memset+0xc8>
    901c:	3b3ffc04 	addi	r12,r7,-16
    9020:	6018d13a 	srli	r12,r12,4
    9024:	1a000104 	addi	r8,r3,4
    9028:	1ac00204 	addi	r11,r3,8
    902c:	6008913a 	slli	r4,r12,4
    9030:	1a800304 	addi	r10,r3,12
    9034:	1813883a 	mov	r9,r3
    9038:	21000504 	addi	r4,r4,20
    903c:	1909883a 	add	r4,r3,r4
    9040:	49800015 	stw	r6,0(r9)
    9044:	41800015 	stw	r6,0(r8)
    9048:	59800015 	stw	r6,0(r11)
    904c:	51800015 	stw	r6,0(r10)
    9050:	42000404 	addi	r8,r8,16
    9054:	4a400404 	addi	r9,r9,16
    9058:	5ac00404 	addi	r11,r11,16
    905c:	52800404 	addi	r10,r10,16
    9060:	413ff71e 	bne	r8,r4,9040 <memset+0x8c>
    9064:	63000044 	addi	r12,r12,1
    9068:	6018913a 	slli	r12,r12,4
    906c:	39c003cc 	andi	r7,r7,15
    9070:	010000c4 	movi	r4,3
    9074:	1b07883a 	add	r3,r3,r12
    9078:	21c00e2e 	bgeu	r4,r7,90b4 <memset+0x100>
    907c:	1813883a 	mov	r9,r3
    9080:	3811883a 	mov	r8,r7
    9084:	010000c4 	movi	r4,3
    9088:	49800015 	stw	r6,0(r9)
    908c:	423fff04 	addi	r8,r8,-4
    9090:	4a400104 	addi	r9,r9,4
    9094:	223ffc36 	bltu	r4,r8,9088 <memset+0xd4>
    9098:	393fff04 	addi	r4,r7,-4
    909c:	2008d0ba 	srli	r4,r4,2
    90a0:	39c000cc 	andi	r7,r7,3
    90a4:	21000044 	addi	r4,r4,1
    90a8:	2109883a 	add	r4,r4,r4
    90ac:	2109883a 	add	r4,r4,r4
    90b0:	1907883a 	add	r3,r3,r4
    90b4:	38000526 	beq	r7,zero,90cc <memset+0x118>
    90b8:	19cf883a 	add	r7,r3,r7
    90bc:	19400005 	stb	r5,0(r3)
    90c0:	18c00044 	addi	r3,r3,1
    90c4:	38fffd1e 	bne	r7,r3,90bc <memset+0x108>
    90c8:	f800283a 	ret
    90cc:	f800283a 	ret
    90d0:	2007883a 	mov	r3,r4
    90d4:	300f883a 	mov	r7,r6
    90d8:	003fc706 	br	8ff8 <memset+0x44>

000090dc <_realloc_r>:
    90dc:	defff604 	addi	sp,sp,-40
    90e0:	dc800215 	stw	r18,8(sp)
    90e4:	dfc00915 	stw	ra,36(sp)
    90e8:	df000815 	stw	fp,32(sp)
    90ec:	ddc00715 	stw	r23,28(sp)
    90f0:	dd800615 	stw	r22,24(sp)
    90f4:	dd400515 	stw	r21,20(sp)
    90f8:	dd000415 	stw	r20,16(sp)
    90fc:	dcc00315 	stw	r19,12(sp)
    9100:	dc400115 	stw	r17,4(sp)
    9104:	dc000015 	stw	r16,0(sp)
    9108:	3025883a 	mov	r18,r6
    910c:	2800b726 	beq	r5,zero,93ec <_realloc_r+0x310>
    9110:	282b883a 	mov	r21,r5
    9114:	2029883a 	mov	r20,r4
    9118:	000cc880 	call	cc88 <__malloc_lock>
    911c:	a8bfff17 	ldw	r2,-4(r21)
    9120:	043fff04 	movi	r16,-4
    9124:	90c002c4 	addi	r3,r18,11
    9128:	01000584 	movi	r4,22
    912c:	acfffe04 	addi	r19,r21,-8
    9130:	1420703a 	and	r16,r2,r16
    9134:	20c0332e 	bgeu	r4,r3,9204 <_realloc_r+0x128>
    9138:	047ffe04 	movi	r17,-8
    913c:	1c62703a 	and	r17,r3,r17
    9140:	8807883a 	mov	r3,r17
    9144:	88005816 	blt	r17,zero,92a8 <_realloc_r+0x1cc>
    9148:	8c805736 	bltu	r17,r18,92a8 <_realloc_r+0x1cc>
    914c:	80c0300e 	bge	r16,r3,9210 <_realloc_r+0x134>
    9150:	070000b4 	movhi	fp,2
    9154:	e72c5704 	addi	fp,fp,-20132
    9158:	e1c00217 	ldw	r7,8(fp)
    915c:	9c09883a 	add	r4,r19,r16
    9160:	22000117 	ldw	r8,4(r4)
    9164:	21c06326 	beq	r4,r7,92f4 <_realloc_r+0x218>
    9168:	017fff84 	movi	r5,-2
    916c:	414a703a 	and	r5,r8,r5
    9170:	214b883a 	add	r5,r4,r5
    9174:	29800117 	ldw	r6,4(r5)
    9178:	3180004c 	andi	r6,r6,1
    917c:	30003f26 	beq	r6,zero,927c <_realloc_r+0x1a0>
    9180:	1080004c 	andi	r2,r2,1
    9184:	10008326 	beq	r2,zero,9394 <_realloc_r+0x2b8>
    9188:	900b883a 	mov	r5,r18
    918c:	a009883a 	mov	r4,r20
    9190:	00058e40 	call	58e4 <_malloc_r>
    9194:	1025883a 	mov	r18,r2
    9198:	10011e26 	beq	r2,zero,9614 <_realloc_r+0x538>
    919c:	a93fff17 	ldw	r4,-4(r21)
    91a0:	10fffe04 	addi	r3,r2,-8
    91a4:	00bfff84 	movi	r2,-2
    91a8:	2084703a 	and	r2,r4,r2
    91ac:	9885883a 	add	r2,r19,r2
    91b0:	1880ee26 	beq	r3,r2,956c <_realloc_r+0x490>
    91b4:	81bfff04 	addi	r6,r16,-4
    91b8:	00800904 	movi	r2,36
    91bc:	1180b836 	bltu	r2,r6,94a0 <_realloc_r+0x3c4>
    91c0:	00c004c4 	movi	r3,19
    91c4:	19809636 	bltu	r3,r6,9420 <_realloc_r+0x344>
    91c8:	9005883a 	mov	r2,r18
    91cc:	a807883a 	mov	r3,r21
    91d0:	19000017 	ldw	r4,0(r3)
    91d4:	11000015 	stw	r4,0(r2)
    91d8:	19000117 	ldw	r4,4(r3)
    91dc:	11000115 	stw	r4,4(r2)
    91e0:	18c00217 	ldw	r3,8(r3)
    91e4:	10c00215 	stw	r3,8(r2)
    91e8:	a80b883a 	mov	r5,r21
    91ec:	a009883a 	mov	r4,r20
    91f0:	0008b480 	call	8b48 <_free_r>
    91f4:	a009883a 	mov	r4,r20
    91f8:	000cda80 	call	cda8 <__malloc_unlock>
    91fc:	9005883a 	mov	r2,r18
    9200:	00001206 	br	924c <_realloc_r+0x170>
    9204:	00c00404 	movi	r3,16
    9208:	1823883a 	mov	r17,r3
    920c:	003fce06 	br	9148 <_realloc_r+0x6c>
    9210:	a825883a 	mov	r18,r21
    9214:	8445c83a 	sub	r2,r16,r17
    9218:	00c003c4 	movi	r3,15
    921c:	18802636 	bltu	r3,r2,92b8 <_realloc_r+0x1dc>
    9220:	99800117 	ldw	r6,4(r19)
    9224:	9c07883a 	add	r3,r19,r16
    9228:	3180004c 	andi	r6,r6,1
    922c:	3420b03a 	or	r16,r6,r16
    9230:	9c000115 	stw	r16,4(r19)
    9234:	18800117 	ldw	r2,4(r3)
    9238:	10800054 	ori	r2,r2,1
    923c:	18800115 	stw	r2,4(r3)
    9240:	a009883a 	mov	r4,r20
    9244:	000cda80 	call	cda8 <__malloc_unlock>
    9248:	9005883a 	mov	r2,r18
    924c:	dfc00917 	ldw	ra,36(sp)
    9250:	df000817 	ldw	fp,32(sp)
    9254:	ddc00717 	ldw	r23,28(sp)
    9258:	dd800617 	ldw	r22,24(sp)
    925c:	dd400517 	ldw	r21,20(sp)
    9260:	dd000417 	ldw	r20,16(sp)
    9264:	dcc00317 	ldw	r19,12(sp)
    9268:	dc800217 	ldw	r18,8(sp)
    926c:	dc400117 	ldw	r17,4(sp)
    9270:	dc000017 	ldw	r16,0(sp)
    9274:	dec00a04 	addi	sp,sp,40
    9278:	f800283a 	ret
    927c:	017fff04 	movi	r5,-4
    9280:	414a703a 	and	r5,r8,r5
    9284:	814d883a 	add	r6,r16,r5
    9288:	30c01f16 	blt	r6,r3,9308 <_realloc_r+0x22c>
    928c:	20800317 	ldw	r2,12(r4)
    9290:	20c00217 	ldw	r3,8(r4)
    9294:	a825883a 	mov	r18,r21
    9298:	3021883a 	mov	r16,r6
    929c:	18800315 	stw	r2,12(r3)
    92a0:	10c00215 	stw	r3,8(r2)
    92a4:	003fdb06 	br	9214 <_realloc_r+0x138>
    92a8:	00800304 	movi	r2,12
    92ac:	a0800015 	stw	r2,0(r20)
    92b0:	0005883a 	mov	r2,zero
    92b4:	003fe506 	br	924c <_realloc_r+0x170>
    92b8:	98c00117 	ldw	r3,4(r19)
    92bc:	9c4b883a 	add	r5,r19,r17
    92c0:	11000054 	ori	r4,r2,1
    92c4:	18c0004c 	andi	r3,r3,1
    92c8:	1c62b03a 	or	r17,r3,r17
    92cc:	9c400115 	stw	r17,4(r19)
    92d0:	29000115 	stw	r4,4(r5)
    92d4:	2885883a 	add	r2,r5,r2
    92d8:	10c00117 	ldw	r3,4(r2)
    92dc:	29400204 	addi	r5,r5,8
    92e0:	a009883a 	mov	r4,r20
    92e4:	18c00054 	ori	r3,r3,1
    92e8:	10c00115 	stw	r3,4(r2)
    92ec:	0008b480 	call	8b48 <_free_r>
    92f0:	003fd306 	br	9240 <_realloc_r+0x164>
    92f4:	017fff04 	movi	r5,-4
    92f8:	414a703a 	and	r5,r8,r5
    92fc:	89800404 	addi	r6,r17,16
    9300:	8151883a 	add	r8,r16,r5
    9304:	4180590e 	bge	r8,r6,946c <_realloc_r+0x390>
    9308:	1080004c 	andi	r2,r2,1
    930c:	103f9e1e 	bne	r2,zero,9188 <_realloc_r+0xac>
    9310:	adbffe17 	ldw	r22,-8(r21)
    9314:	00bfff04 	movi	r2,-4
    9318:	9dadc83a 	sub	r22,r19,r22
    931c:	b1800117 	ldw	r6,4(r22)
    9320:	3084703a 	and	r2,r6,r2
    9324:	20002026 	beq	r4,zero,93a8 <_realloc_r+0x2cc>
    9328:	80af883a 	add	r23,r16,r2
    932c:	b96f883a 	add	r23,r23,r5
    9330:	21c05f26 	beq	r4,r7,94b0 <_realloc_r+0x3d4>
    9334:	b8c01c16 	blt	r23,r3,93a8 <_realloc_r+0x2cc>
    9338:	20800317 	ldw	r2,12(r4)
    933c:	20c00217 	ldw	r3,8(r4)
    9340:	81bfff04 	addi	r6,r16,-4
    9344:	01000904 	movi	r4,36
    9348:	18800315 	stw	r2,12(r3)
    934c:	10c00215 	stw	r3,8(r2)
    9350:	b0c00217 	ldw	r3,8(r22)
    9354:	b0800317 	ldw	r2,12(r22)
    9358:	b4800204 	addi	r18,r22,8
    935c:	18800315 	stw	r2,12(r3)
    9360:	10c00215 	stw	r3,8(r2)
    9364:	21801b36 	bltu	r4,r6,93d4 <_realloc_r+0x2f8>
    9368:	008004c4 	movi	r2,19
    936c:	1180352e 	bgeu	r2,r6,9444 <_realloc_r+0x368>
    9370:	a8800017 	ldw	r2,0(r21)
    9374:	b0800215 	stw	r2,8(r22)
    9378:	a8800117 	ldw	r2,4(r21)
    937c:	b0800315 	stw	r2,12(r22)
    9380:	008006c4 	movi	r2,27
    9384:	11807f36 	bltu	r2,r6,9584 <_realloc_r+0x4a8>
    9388:	b0800404 	addi	r2,r22,16
    938c:	ad400204 	addi	r21,r21,8
    9390:	00002d06 	br	9448 <_realloc_r+0x36c>
    9394:	adbffe17 	ldw	r22,-8(r21)
    9398:	00bfff04 	movi	r2,-4
    939c:	9dadc83a 	sub	r22,r19,r22
    93a0:	b1000117 	ldw	r4,4(r22)
    93a4:	2084703a 	and	r2,r4,r2
    93a8:	b03f7726 	beq	r22,zero,9188 <_realloc_r+0xac>
    93ac:	80af883a 	add	r23,r16,r2
    93b0:	b8ff7516 	blt	r23,r3,9188 <_realloc_r+0xac>
    93b4:	b0800317 	ldw	r2,12(r22)
    93b8:	b0c00217 	ldw	r3,8(r22)
    93bc:	81bfff04 	addi	r6,r16,-4
    93c0:	01000904 	movi	r4,36
    93c4:	18800315 	stw	r2,12(r3)
    93c8:	10c00215 	stw	r3,8(r2)
    93cc:	b4800204 	addi	r18,r22,8
    93d0:	21bfe52e 	bgeu	r4,r6,9368 <_realloc_r+0x28c>
    93d4:	a80b883a 	mov	r5,r21
    93d8:	9009883a 	mov	r4,r18
    93dc:	0008e580 	call	8e58 <memmove>
    93e0:	b821883a 	mov	r16,r23
    93e4:	b027883a 	mov	r19,r22
    93e8:	003f8a06 	br	9214 <_realloc_r+0x138>
    93ec:	300b883a 	mov	r5,r6
    93f0:	dfc00917 	ldw	ra,36(sp)
    93f4:	df000817 	ldw	fp,32(sp)
    93f8:	ddc00717 	ldw	r23,28(sp)
    93fc:	dd800617 	ldw	r22,24(sp)
    9400:	dd400517 	ldw	r21,20(sp)
    9404:	dd000417 	ldw	r20,16(sp)
    9408:	dcc00317 	ldw	r19,12(sp)
    940c:	dc800217 	ldw	r18,8(sp)
    9410:	dc400117 	ldw	r17,4(sp)
    9414:	dc000017 	ldw	r16,0(sp)
    9418:	dec00a04 	addi	sp,sp,40
    941c:	00058e41 	jmpi	58e4 <_malloc_r>
    9420:	a8c00017 	ldw	r3,0(r21)
    9424:	90c00015 	stw	r3,0(r18)
    9428:	a8c00117 	ldw	r3,4(r21)
    942c:	90c00115 	stw	r3,4(r18)
    9430:	00c006c4 	movi	r3,27
    9434:	19804536 	bltu	r3,r6,954c <_realloc_r+0x470>
    9438:	90800204 	addi	r2,r18,8
    943c:	a8c00204 	addi	r3,r21,8
    9440:	003f6306 	br	91d0 <_realloc_r+0xf4>
    9444:	9005883a 	mov	r2,r18
    9448:	a8c00017 	ldw	r3,0(r21)
    944c:	b821883a 	mov	r16,r23
    9450:	b027883a 	mov	r19,r22
    9454:	10c00015 	stw	r3,0(r2)
    9458:	a8c00117 	ldw	r3,4(r21)
    945c:	10c00115 	stw	r3,4(r2)
    9460:	a8c00217 	ldw	r3,8(r21)
    9464:	10c00215 	stw	r3,8(r2)
    9468:	003f6a06 	br	9214 <_realloc_r+0x138>
    946c:	9c67883a 	add	r19,r19,r17
    9470:	4445c83a 	sub	r2,r8,r17
    9474:	e4c00215 	stw	r19,8(fp)
    9478:	10800054 	ori	r2,r2,1
    947c:	98800115 	stw	r2,4(r19)
    9480:	a8bfff17 	ldw	r2,-4(r21)
    9484:	a009883a 	mov	r4,r20
    9488:	1080004c 	andi	r2,r2,1
    948c:	1462b03a 	or	r17,r2,r17
    9490:	ac7fff15 	stw	r17,-4(r21)
    9494:	000cda80 	call	cda8 <__malloc_unlock>
    9498:	a805883a 	mov	r2,r21
    949c:	003f6b06 	br	924c <_realloc_r+0x170>
    94a0:	a80b883a 	mov	r5,r21
    94a4:	9009883a 	mov	r4,r18
    94a8:	0008e580 	call	8e58 <memmove>
    94ac:	003f4e06 	br	91e8 <_realloc_r+0x10c>
    94b0:	89000404 	addi	r4,r17,16
    94b4:	b93fbc16 	blt	r23,r4,93a8 <_realloc_r+0x2cc>
    94b8:	b0800317 	ldw	r2,12(r22)
    94bc:	b0c00217 	ldw	r3,8(r22)
    94c0:	81bfff04 	addi	r6,r16,-4
    94c4:	01000904 	movi	r4,36
    94c8:	18800315 	stw	r2,12(r3)
    94cc:	10c00215 	stw	r3,8(r2)
    94d0:	b4800204 	addi	r18,r22,8
    94d4:	21804336 	bltu	r4,r6,95e4 <_realloc_r+0x508>
    94d8:	008004c4 	movi	r2,19
    94dc:	11803f2e 	bgeu	r2,r6,95dc <_realloc_r+0x500>
    94e0:	a8800017 	ldw	r2,0(r21)
    94e4:	b0800215 	stw	r2,8(r22)
    94e8:	a8800117 	ldw	r2,4(r21)
    94ec:	b0800315 	stw	r2,12(r22)
    94f0:	008006c4 	movi	r2,27
    94f4:	11803f36 	bltu	r2,r6,95f4 <_realloc_r+0x518>
    94f8:	b0800404 	addi	r2,r22,16
    94fc:	ad400204 	addi	r21,r21,8
    9500:	a8c00017 	ldw	r3,0(r21)
    9504:	10c00015 	stw	r3,0(r2)
    9508:	a8c00117 	ldw	r3,4(r21)
    950c:	10c00115 	stw	r3,4(r2)
    9510:	a8c00217 	ldw	r3,8(r21)
    9514:	10c00215 	stw	r3,8(r2)
    9518:	b447883a 	add	r3,r22,r17
    951c:	bc45c83a 	sub	r2,r23,r17
    9520:	e0c00215 	stw	r3,8(fp)
    9524:	10800054 	ori	r2,r2,1
    9528:	18800115 	stw	r2,4(r3)
    952c:	b0800117 	ldw	r2,4(r22)
    9530:	a009883a 	mov	r4,r20
    9534:	1080004c 	andi	r2,r2,1
    9538:	1462b03a 	or	r17,r2,r17
    953c:	b4400115 	stw	r17,4(r22)
    9540:	000cda80 	call	cda8 <__malloc_unlock>
    9544:	9005883a 	mov	r2,r18
    9548:	003f4006 	br	924c <_realloc_r+0x170>
    954c:	a8c00217 	ldw	r3,8(r21)
    9550:	90c00215 	stw	r3,8(r18)
    9554:	a8c00317 	ldw	r3,12(r21)
    9558:	90c00315 	stw	r3,12(r18)
    955c:	30801126 	beq	r6,r2,95a4 <_realloc_r+0x4c8>
    9560:	90800404 	addi	r2,r18,16
    9564:	a8c00404 	addi	r3,r21,16
    9568:	003f1906 	br	91d0 <_realloc_r+0xf4>
    956c:	90ffff17 	ldw	r3,-4(r18)
    9570:	00bfff04 	movi	r2,-4
    9574:	a825883a 	mov	r18,r21
    9578:	1884703a 	and	r2,r3,r2
    957c:	80a1883a 	add	r16,r16,r2
    9580:	003f2406 	br	9214 <_realloc_r+0x138>
    9584:	a8800217 	ldw	r2,8(r21)
    9588:	b0800415 	stw	r2,16(r22)
    958c:	a8800317 	ldw	r2,12(r21)
    9590:	b0800515 	stw	r2,20(r22)
    9594:	31000a26 	beq	r6,r4,95c0 <_realloc_r+0x4e4>
    9598:	b0800604 	addi	r2,r22,24
    959c:	ad400404 	addi	r21,r21,16
    95a0:	003fa906 	br	9448 <_realloc_r+0x36c>
    95a4:	a9000417 	ldw	r4,16(r21)
    95a8:	90800604 	addi	r2,r18,24
    95ac:	a8c00604 	addi	r3,r21,24
    95b0:	91000415 	stw	r4,16(r18)
    95b4:	a9000517 	ldw	r4,20(r21)
    95b8:	91000515 	stw	r4,20(r18)
    95bc:	003f0406 	br	91d0 <_realloc_r+0xf4>
    95c0:	a8c00417 	ldw	r3,16(r21)
    95c4:	ad400604 	addi	r21,r21,24
    95c8:	b0800804 	addi	r2,r22,32
    95cc:	b0c00615 	stw	r3,24(r22)
    95d0:	a8ffff17 	ldw	r3,-4(r21)
    95d4:	b0c00715 	stw	r3,28(r22)
    95d8:	003f9b06 	br	9448 <_realloc_r+0x36c>
    95dc:	9005883a 	mov	r2,r18
    95e0:	003fc706 	br	9500 <_realloc_r+0x424>
    95e4:	a80b883a 	mov	r5,r21
    95e8:	9009883a 	mov	r4,r18
    95ec:	0008e580 	call	8e58 <memmove>
    95f0:	003fc906 	br	9518 <_realloc_r+0x43c>
    95f4:	a8800217 	ldw	r2,8(r21)
    95f8:	b0800415 	stw	r2,16(r22)
    95fc:	a8800317 	ldw	r2,12(r21)
    9600:	b0800515 	stw	r2,20(r22)
    9604:	31000726 	beq	r6,r4,9624 <_realloc_r+0x548>
    9608:	b0800604 	addi	r2,r22,24
    960c:	ad400404 	addi	r21,r21,16
    9610:	003fbb06 	br	9500 <_realloc_r+0x424>
    9614:	a009883a 	mov	r4,r20
    9618:	000cda80 	call	cda8 <__malloc_unlock>
    961c:	0005883a 	mov	r2,zero
    9620:	003f0a06 	br	924c <_realloc_r+0x170>
    9624:	a8c00417 	ldw	r3,16(r21)
    9628:	ad400604 	addi	r21,r21,24
    962c:	b0800804 	addi	r2,r22,32
    9630:	b0c00615 	stw	r3,24(r22)
    9634:	a8ffff17 	ldw	r3,-4(r21)
    9638:	b0c00715 	stw	r3,28(r22)
    963c:	003fb006 	br	9500 <_realloc_r+0x424>

00009640 <__udivdi3>:
    9640:	defff504 	addi	sp,sp,-44
    9644:	dcc00415 	stw	r19,16(sp)
    9648:	dc000115 	stw	r16,4(sp)
    964c:	dfc00a15 	stw	ra,40(sp)
    9650:	df000915 	stw	fp,36(sp)
    9654:	ddc00815 	stw	r23,32(sp)
    9658:	dd800715 	stw	r22,28(sp)
    965c:	dd400615 	stw	r21,24(sp)
    9660:	dd000515 	stw	r20,20(sp)
    9664:	dc800315 	stw	r18,12(sp)
    9668:	dc400215 	stw	r17,8(sp)
    966c:	2027883a 	mov	r19,r4
    9670:	2821883a 	mov	r16,r5
    9674:	3800411e 	bne	r7,zero,977c <__udivdi3+0x13c>
    9678:	3023883a 	mov	r17,r6
    967c:	2025883a 	mov	r18,r4
    9680:	2980522e 	bgeu	r5,r6,97cc <__udivdi3+0x18c>
    9684:	00bfffd4 	movui	r2,65535
    9688:	282d883a 	mov	r22,r5
    968c:	1180a836 	bltu	r2,r6,9930 <__udivdi3+0x2f0>
    9690:	00803fc4 	movi	r2,255
    9694:	1185803a 	cmpltu	r2,r2,r6
    9698:	100490fa 	slli	r2,r2,3
    969c:	3086d83a 	srl	r3,r6,r2
    96a0:	010000b4 	movhi	r4,2
    96a4:	212a3b04 	addi	r4,r4,-22292
    96a8:	20c7883a 	add	r3,r4,r3
    96ac:	18c00003 	ldbu	r3,0(r3)
    96b0:	1885883a 	add	r2,r3,r2
    96b4:	00c00804 	movi	r3,32
    96b8:	1887c83a 	sub	r3,r3,r2
    96bc:	18000526 	beq	r3,zero,96d4 <__udivdi3+0x94>
    96c0:	80e0983a 	sll	r16,r16,r3
    96c4:	9884d83a 	srl	r2,r19,r2
    96c8:	30e2983a 	sll	r17,r6,r3
    96cc:	98e4983a 	sll	r18,r19,r3
    96d0:	142cb03a 	or	r22,r2,r16
    96d4:	882ad43a 	srli	r21,r17,16
    96d8:	b009883a 	mov	r4,r22
    96dc:	8d3fffcc 	andi	r20,r17,65535
    96e0:	a80b883a 	mov	r5,r21
    96e4:	000a24c0 	call	a24c <__umodsi3>
    96e8:	b009883a 	mov	r4,r22
    96ec:	a80b883a 	mov	r5,r21
    96f0:	1027883a 	mov	r19,r2
    96f4:	000a1e80 	call	a1e8 <__udivsi3>
    96f8:	102d883a 	mov	r22,r2
    96fc:	9826943a 	slli	r19,r19,16
    9700:	9004d43a 	srli	r2,r18,16
    9704:	a5a1383a 	mul	r16,r20,r22
    9708:	14c4b03a 	or	r2,r2,r19
    970c:	1400052e 	bgeu	r2,r16,9724 <__udivdi3+0xe4>
    9710:	1445883a 	add	r2,r2,r17
    9714:	b0ffffc4 	addi	r3,r22,-1
    9718:	14400136 	bltu	r2,r17,9720 <__udivdi3+0xe0>
    971c:	14012336 	bltu	r2,r16,9bac <__udivdi3+0x56c>
    9720:	182d883a 	mov	r22,r3
    9724:	1421c83a 	sub	r16,r2,r16
    9728:	a80b883a 	mov	r5,r21
    972c:	8009883a 	mov	r4,r16
    9730:	000a24c0 	call	a24c <__umodsi3>
    9734:	1027883a 	mov	r19,r2
    9738:	a80b883a 	mov	r5,r21
    973c:	8009883a 	mov	r4,r16
    9740:	000a1e80 	call	a1e8 <__udivsi3>
    9744:	9826943a 	slli	r19,r19,16
    9748:	a0a9383a 	mul	r20,r20,r2
    974c:	94bfffcc 	andi	r18,r18,65535
    9750:	94e4b03a 	or	r18,r18,r19
    9754:	9500052e 	bgeu	r18,r20,976c <__udivdi3+0x12c>
    9758:	8ca5883a 	add	r18,r17,r18
    975c:	10ffffc4 	addi	r3,r2,-1
    9760:	9440f136 	bltu	r18,r17,9b28 <__udivdi3+0x4e8>
    9764:	9500f02e 	bgeu	r18,r20,9b28 <__udivdi3+0x4e8>
    9768:	10bfff84 	addi	r2,r2,-2
    976c:	b00c943a 	slli	r6,r22,16
    9770:	0007883a 	mov	r3,zero
    9774:	3084b03a 	or	r2,r6,r2
    9778:	00005906 	br	98e0 <__udivdi3+0x2a0>
    977c:	29c05636 	bltu	r5,r7,98d8 <__udivdi3+0x298>
    9780:	00bfffd4 	movui	r2,65535
    9784:	11c0622e 	bgeu	r2,r7,9910 <__udivdi3+0x2d0>
    9788:	00804034 	movhi	r2,256
    978c:	10bfffc4 	addi	r2,r2,-1
    9790:	11c0ee36 	bltu	r2,r7,9b4c <__udivdi3+0x50c>
    9794:	00800404 	movi	r2,16
    9798:	3886d83a 	srl	r3,r7,r2
    979c:	010000b4 	movhi	r4,2
    97a0:	212a3b04 	addi	r4,r4,-22292
    97a4:	20c7883a 	add	r3,r4,r3
    97a8:	18c00003 	ldbu	r3,0(r3)
    97ac:	05400804 	movi	r21,32
    97b0:	1885883a 	add	r2,r3,r2
    97b4:	a8abc83a 	sub	r21,r21,r2
    97b8:	a800621e 	bne	r21,zero,9944 <__udivdi3+0x304>
    97bc:	3c00e936 	bltu	r7,r16,9b64 <__udivdi3+0x524>
    97c0:	9985403a 	cmpgeu	r2,r19,r6
    97c4:	0007883a 	mov	r3,zero
    97c8:	00004506 	br	98e0 <__udivdi3+0x2a0>
    97cc:	3000041e 	bne	r6,zero,97e0 <__udivdi3+0x1a0>
    97d0:	000b883a 	mov	r5,zero
    97d4:	01000044 	movi	r4,1
    97d8:	000a1e80 	call	a1e8 <__udivsi3>
    97dc:	1023883a 	mov	r17,r2
    97e0:	00bfffd4 	movui	r2,65535
    97e4:	14404e2e 	bgeu	r2,r17,9920 <__udivdi3+0x2e0>
    97e8:	00804034 	movhi	r2,256
    97ec:	10bfffc4 	addi	r2,r2,-1
    97f0:	1440d836 	bltu	r2,r17,9b54 <__udivdi3+0x514>
    97f4:	00800404 	movi	r2,16
    97f8:	8886d83a 	srl	r3,r17,r2
    97fc:	010000b4 	movhi	r4,2
    9800:	212a3b04 	addi	r4,r4,-22292
    9804:	20c7883a 	add	r3,r4,r3
    9808:	18c00003 	ldbu	r3,0(r3)
    980c:	1885883a 	add	r2,r3,r2
    9810:	00c00804 	movi	r3,32
    9814:	1887c83a 	sub	r3,r3,r2
    9818:	18008f1e 	bne	r3,zero,9a58 <__udivdi3+0x418>
    981c:	882ad43a 	srli	r21,r17,16
    9820:	8461c83a 	sub	r16,r16,r17
    9824:	8d3fffcc 	andi	r20,r17,65535
    9828:	00c00044 	movi	r3,1
    982c:	8009883a 	mov	r4,r16
    9830:	a80b883a 	mov	r5,r21
    9834:	d8c00015 	stw	r3,0(sp)
    9838:	000a24c0 	call	a24c <__umodsi3>
    983c:	8009883a 	mov	r4,r16
    9840:	a80b883a 	mov	r5,r21
    9844:	1027883a 	mov	r19,r2
    9848:	000a1e80 	call	a1e8 <__udivsi3>
    984c:	9826943a 	slli	r19,r19,16
    9850:	9008d43a 	srli	r4,r18,16
    9854:	1521383a 	mul	r16,r2,r20
    9858:	102d883a 	mov	r22,r2
    985c:	24c8b03a 	or	r4,r4,r19
    9860:	d8c00017 	ldw	r3,0(sp)
    9864:	2400052e 	bgeu	r4,r16,987c <__udivdi3+0x23c>
    9868:	2449883a 	add	r4,r4,r17
    986c:	b0bfffc4 	addi	r2,r22,-1
    9870:	24400136 	bltu	r4,r17,9878 <__udivdi3+0x238>
    9874:	2400ca36 	bltu	r4,r16,9ba0 <__udivdi3+0x560>
    9878:	102d883a 	mov	r22,r2
    987c:	2421c83a 	sub	r16,r4,r16
    9880:	a80b883a 	mov	r5,r21
    9884:	8009883a 	mov	r4,r16
    9888:	d8c00015 	stw	r3,0(sp)
    988c:	000a24c0 	call	a24c <__umodsi3>
    9890:	1027883a 	mov	r19,r2
    9894:	a80b883a 	mov	r5,r21
    9898:	8009883a 	mov	r4,r16
    989c:	000a1e80 	call	a1e8 <__udivsi3>
    98a0:	9826943a 	slli	r19,r19,16
    98a4:	1529383a 	mul	r20,r2,r20
    98a8:	94bfffcc 	andi	r18,r18,65535
    98ac:	94e4b03a 	or	r18,r18,r19
    98b0:	d8c00017 	ldw	r3,0(sp)
    98b4:	9500052e 	bgeu	r18,r20,98cc <__udivdi3+0x28c>
    98b8:	8ca5883a 	add	r18,r17,r18
    98bc:	113fffc4 	addi	r4,r2,-1
    98c0:	94409736 	bltu	r18,r17,9b20 <__udivdi3+0x4e0>
    98c4:	9500962e 	bgeu	r18,r20,9b20 <__udivdi3+0x4e0>
    98c8:	10bfff84 	addi	r2,r2,-2
    98cc:	b00c943a 	slli	r6,r22,16
    98d0:	3084b03a 	or	r2,r6,r2
    98d4:	00000206 	br	98e0 <__udivdi3+0x2a0>
    98d8:	0007883a 	mov	r3,zero
    98dc:	0005883a 	mov	r2,zero
    98e0:	dfc00a17 	ldw	ra,40(sp)
    98e4:	df000917 	ldw	fp,36(sp)
    98e8:	ddc00817 	ldw	r23,32(sp)
    98ec:	dd800717 	ldw	r22,28(sp)
    98f0:	dd400617 	ldw	r21,24(sp)
    98f4:	dd000517 	ldw	r20,20(sp)
    98f8:	dcc00417 	ldw	r19,16(sp)
    98fc:	dc800317 	ldw	r18,12(sp)
    9900:	dc400217 	ldw	r17,8(sp)
    9904:	dc000117 	ldw	r16,4(sp)
    9908:	dec00b04 	addi	sp,sp,44
    990c:	f800283a 	ret
    9910:	00803fc4 	movi	r2,255
    9914:	11c5803a 	cmpltu	r2,r2,r7
    9918:	100490fa 	slli	r2,r2,3
    991c:	003f9e06 	br	9798 <__udivdi3+0x158>
    9920:	00803fc4 	movi	r2,255
    9924:	1445803a 	cmpltu	r2,r2,r17
    9928:	100490fa 	slli	r2,r2,3
    992c:	003fb206 	br	97f8 <__udivdi3+0x1b8>
    9930:	00804034 	movhi	r2,256
    9934:	10bfffc4 	addi	r2,r2,-1
    9938:	11808836 	bltu	r2,r6,9b5c <__udivdi3+0x51c>
    993c:	00800404 	movi	r2,16
    9940:	003f5606 	br	969c <__udivdi3+0x5c>
    9944:	30aed83a 	srl	r23,r6,r2
    9948:	3d4e983a 	sll	r7,r7,r21
    994c:	80acd83a 	srl	r22,r16,r2
    9950:	9884d83a 	srl	r2,r19,r2
    9954:	3deeb03a 	or	r23,r7,r23
    9958:	b824d43a 	srli	r18,r23,16
    995c:	8560983a 	sll	r16,r16,r21
    9960:	b009883a 	mov	r4,r22
    9964:	900b883a 	mov	r5,r18
    9968:	3568983a 	sll	r20,r6,r21
    996c:	1420b03a 	or	r16,r2,r16
    9970:	000a24c0 	call	a24c <__umodsi3>
    9974:	b009883a 	mov	r4,r22
    9978:	900b883a 	mov	r5,r18
    997c:	1023883a 	mov	r17,r2
    9980:	000a1e80 	call	a1e8 <__udivsi3>
    9984:	8808943a 	slli	r4,r17,16
    9988:	bf3fffcc 	andi	fp,r23,65535
    998c:	8006d43a 	srli	r3,r16,16
    9990:	e0a3383a 	mul	r17,fp,r2
    9994:	100d883a 	mov	r6,r2
    9998:	1906b03a 	or	r3,r3,r4
    999c:	1c40042e 	bgeu	r3,r17,99b0 <__udivdi3+0x370>
    99a0:	1dc7883a 	add	r3,r3,r23
    99a4:	10bfffc4 	addi	r2,r2,-1
    99a8:	1dc0752e 	bgeu	r3,r23,9b80 <__udivdi3+0x540>
    99ac:	100d883a 	mov	r6,r2
    99b0:	1c63c83a 	sub	r17,r3,r17
    99b4:	900b883a 	mov	r5,r18
    99b8:	8809883a 	mov	r4,r17
    99bc:	d9800015 	stw	r6,0(sp)
    99c0:	000a24c0 	call	a24c <__umodsi3>
    99c4:	102d883a 	mov	r22,r2
    99c8:	8809883a 	mov	r4,r17
    99cc:	900b883a 	mov	r5,r18
    99d0:	000a1e80 	call	a1e8 <__udivsi3>
    99d4:	b02c943a 	slli	r22,r22,16
    99d8:	e089383a 	mul	r4,fp,r2
    99dc:	843fffcc 	andi	r16,r16,65535
    99e0:	85a0b03a 	or	r16,r16,r22
    99e4:	d9800017 	ldw	r6,0(sp)
    99e8:	8100042e 	bgeu	r16,r4,99fc <__udivdi3+0x3bc>
    99ec:	85e1883a 	add	r16,r16,r23
    99f0:	10ffffc4 	addi	r3,r2,-1
    99f4:	85c05e2e 	bgeu	r16,r23,9b70 <__udivdi3+0x530>
    99f8:	1805883a 	mov	r2,r3
    99fc:	300c943a 	slli	r6,r6,16
    9a00:	a17fffcc 	andi	r5,r20,65535
    9a04:	a028d43a 	srli	r20,r20,16
    9a08:	3084b03a 	or	r2,r6,r2
    9a0c:	10ffffcc 	andi	r3,r2,65535
    9a10:	100cd43a 	srli	r6,r2,16
    9a14:	194f383a 	mul	r7,r3,r5
    9a18:	1d07383a 	mul	r3,r3,r20
    9a1c:	314b383a 	mul	r5,r6,r5
    9a20:	3810d43a 	srli	r8,r7,16
    9a24:	8121c83a 	sub	r16,r16,r4
    9a28:	1947883a 	add	r3,r3,r5
    9a2c:	40c7883a 	add	r3,r8,r3
    9a30:	350d383a 	mul	r6,r6,r20
    9a34:	1940022e 	bgeu	r3,r5,9a40 <__udivdi3+0x400>
    9a38:	01000074 	movhi	r4,1
    9a3c:	310d883a 	add	r6,r6,r4
    9a40:	1828d43a 	srli	r20,r3,16
    9a44:	a18d883a 	add	r6,r20,r6
    9a48:	81803e36 	bltu	r16,r6,9b44 <__udivdi3+0x504>
    9a4c:	81803826 	beq	r16,r6,9b30 <__udivdi3+0x4f0>
    9a50:	0007883a 	mov	r3,zero
    9a54:	003fa206 	br	98e0 <__udivdi3+0x2a0>
    9a58:	88e2983a 	sll	r17,r17,r3
    9a5c:	80a8d83a 	srl	r20,r16,r2
    9a60:	80e0983a 	sll	r16,r16,r3
    9a64:	882ad43a 	srli	r21,r17,16
    9a68:	9884d83a 	srl	r2,r19,r2
    9a6c:	a009883a 	mov	r4,r20
    9a70:	a80b883a 	mov	r5,r21
    9a74:	142eb03a 	or	r23,r2,r16
    9a78:	98e4983a 	sll	r18,r19,r3
    9a7c:	000a24c0 	call	a24c <__umodsi3>
    9a80:	a009883a 	mov	r4,r20
    9a84:	a80b883a 	mov	r5,r21
    9a88:	1021883a 	mov	r16,r2
    9a8c:	000a1e80 	call	a1e8 <__udivsi3>
    9a90:	1039883a 	mov	fp,r2
    9a94:	8d3fffcc 	andi	r20,r17,65535
    9a98:	8020943a 	slli	r16,r16,16
    9a9c:	b804d43a 	srli	r2,r23,16
    9aa0:	a72d383a 	mul	r22,r20,fp
    9aa4:	1404b03a 	or	r2,r2,r16
    9aa8:	1580062e 	bgeu	r2,r22,9ac4 <__udivdi3+0x484>
    9aac:	1445883a 	add	r2,r2,r17
    9ab0:	e0ffffc4 	addi	r3,fp,-1
    9ab4:	14403836 	bltu	r2,r17,9b98 <__udivdi3+0x558>
    9ab8:	1580372e 	bgeu	r2,r22,9b98 <__udivdi3+0x558>
    9abc:	e73fff84 	addi	fp,fp,-2
    9ac0:	1445883a 	add	r2,r2,r17
    9ac4:	15adc83a 	sub	r22,r2,r22
    9ac8:	a80b883a 	mov	r5,r21
    9acc:	b009883a 	mov	r4,r22
    9ad0:	000a24c0 	call	a24c <__umodsi3>
    9ad4:	1027883a 	mov	r19,r2
    9ad8:	b009883a 	mov	r4,r22
    9adc:	a80b883a 	mov	r5,r21
    9ae0:	000a1e80 	call	a1e8 <__udivsi3>
    9ae4:	9826943a 	slli	r19,r19,16
    9ae8:	a0a1383a 	mul	r16,r20,r2
    9aec:	b93fffcc 	andi	r4,r23,65535
    9af0:	24c8b03a 	or	r4,r4,r19
    9af4:	2400062e 	bgeu	r4,r16,9b10 <__udivdi3+0x4d0>
    9af8:	2449883a 	add	r4,r4,r17
    9afc:	10ffffc4 	addi	r3,r2,-1
    9b00:	24402336 	bltu	r4,r17,9b90 <__udivdi3+0x550>
    9b04:	2400222e 	bgeu	r4,r16,9b90 <__udivdi3+0x550>
    9b08:	10bfff84 	addi	r2,r2,-2
    9b0c:	2449883a 	add	r4,r4,r17
    9b10:	e038943a 	slli	fp,fp,16
    9b14:	2421c83a 	sub	r16,r4,r16
    9b18:	e086b03a 	or	r3,fp,r2
    9b1c:	003f4306 	br	982c <__udivdi3+0x1ec>
    9b20:	2005883a 	mov	r2,r4
    9b24:	003f6906 	br	98cc <__udivdi3+0x28c>
    9b28:	1805883a 	mov	r2,r3
    9b2c:	003f0f06 	br	976c <__udivdi3+0x12c>
    9b30:	1806943a 	slli	r3,r3,16
    9b34:	9d66983a 	sll	r19,r19,r21
    9b38:	39ffffcc 	andi	r7,r7,65535
    9b3c:	19c7883a 	add	r3,r3,r7
    9b40:	98ffc32e 	bgeu	r19,r3,9a50 <__udivdi3+0x410>
    9b44:	10bfffc4 	addi	r2,r2,-1
    9b48:	003fc106 	br	9a50 <__udivdi3+0x410>
    9b4c:	00800604 	movi	r2,24
    9b50:	003f1106 	br	9798 <__udivdi3+0x158>
    9b54:	00800604 	movi	r2,24
    9b58:	003f2706 	br	97f8 <__udivdi3+0x1b8>
    9b5c:	00800604 	movi	r2,24
    9b60:	003ece06 	br	969c <__udivdi3+0x5c>
    9b64:	0007883a 	mov	r3,zero
    9b68:	00800044 	movi	r2,1
    9b6c:	003f5c06 	br	98e0 <__udivdi3+0x2a0>
    9b70:	813fa12e 	bgeu	r16,r4,99f8 <__udivdi3+0x3b8>
    9b74:	10bfff84 	addi	r2,r2,-2
    9b78:	85e1883a 	add	r16,r16,r23
    9b7c:	003f9f06 	br	99fc <__udivdi3+0x3bc>
    9b80:	1c7f8a2e 	bgeu	r3,r17,99ac <__udivdi3+0x36c>
    9b84:	31bfff84 	addi	r6,r6,-2
    9b88:	1dc7883a 	add	r3,r3,r23
    9b8c:	003f8806 	br	99b0 <__udivdi3+0x370>
    9b90:	1805883a 	mov	r2,r3
    9b94:	003fde06 	br	9b10 <__udivdi3+0x4d0>
    9b98:	1839883a 	mov	fp,r3
    9b9c:	003fc906 	br	9ac4 <__udivdi3+0x484>
    9ba0:	b5bfff84 	addi	r22,r22,-2
    9ba4:	2449883a 	add	r4,r4,r17
    9ba8:	003f3406 	br	987c <__udivdi3+0x23c>
    9bac:	b5bfff84 	addi	r22,r22,-2
    9bb0:	1445883a 	add	r2,r2,r17
    9bb4:	003edb06 	br	9724 <__udivdi3+0xe4>

00009bb8 <__umoddi3>:
    9bb8:	defff404 	addi	sp,sp,-48
    9bbc:	df000a15 	stw	fp,40(sp)
    9bc0:	dc400315 	stw	r17,12(sp)
    9bc4:	dc000215 	stw	r16,8(sp)
    9bc8:	dfc00b15 	stw	ra,44(sp)
    9bcc:	ddc00915 	stw	r23,36(sp)
    9bd0:	dd800815 	stw	r22,32(sp)
    9bd4:	dd400715 	stw	r21,28(sp)
    9bd8:	dd000615 	stw	r20,24(sp)
    9bdc:	dcc00515 	stw	r19,20(sp)
    9be0:	dc800415 	stw	r18,16(sp)
    9be4:	2021883a 	mov	r16,r4
    9be8:	2823883a 	mov	r17,r5
    9bec:	2839883a 	mov	fp,r5
    9bf0:	38003c1e 	bne	r7,zero,9ce4 <__umoddi3+0x12c>
    9bf4:	3027883a 	mov	r19,r6
    9bf8:	2029883a 	mov	r20,r4
    9bfc:	2980512e 	bgeu	r5,r6,9d44 <__umoddi3+0x18c>
    9c00:	00bfffd4 	movui	r2,65535
    9c04:	11809a36 	bltu	r2,r6,9e70 <__umoddi3+0x2b8>
    9c08:	01003fc4 	movi	r4,255
    9c0c:	2189803a 	cmpltu	r4,r4,r6
    9c10:	200890fa 	slli	r4,r4,3
    9c14:	3104d83a 	srl	r2,r6,r4
    9c18:	00c000b4 	movhi	r3,2
    9c1c:	18ea3b04 	addi	r3,r3,-22292
    9c20:	1885883a 	add	r2,r3,r2
    9c24:	10c00003 	ldbu	r3,0(r2)
    9c28:	00800804 	movi	r2,32
    9c2c:	1909883a 	add	r4,r3,r4
    9c30:	1125c83a 	sub	r18,r2,r4
    9c34:	90000526 	beq	r18,zero,9c4c <__umoddi3+0x94>
    9c38:	8ca2983a 	sll	r17,r17,r18
    9c3c:	8108d83a 	srl	r4,r16,r4
    9c40:	34a6983a 	sll	r19,r6,r18
    9c44:	84a8983a 	sll	r20,r16,r18
    9c48:	2478b03a 	or	fp,r4,r17
    9c4c:	982ed43a 	srli	r23,r19,16
    9c50:	e009883a 	mov	r4,fp
    9c54:	9dbfffcc 	andi	r22,r19,65535
    9c58:	b80b883a 	mov	r5,r23
    9c5c:	000a24c0 	call	a24c <__umodsi3>
    9c60:	e009883a 	mov	r4,fp
    9c64:	b80b883a 	mov	r5,r23
    9c68:	102b883a 	mov	r21,r2
    9c6c:	000a1e80 	call	a1e8 <__udivsi3>
    9c70:	a806943a 	slli	r3,r21,16
    9c74:	a008d43a 	srli	r4,r20,16
    9c78:	b085383a 	mul	r2,r22,r2
    9c7c:	20c8b03a 	or	r4,r4,r3
    9c80:	2080032e 	bgeu	r4,r2,9c90 <__umoddi3+0xd8>
    9c84:	24c9883a 	add	r4,r4,r19
    9c88:	24c00136 	bltu	r4,r19,9c90 <__umoddi3+0xd8>
    9c8c:	20811036 	bltu	r4,r2,a0d0 <__umoddi3+0x518>
    9c90:	20abc83a 	sub	r21,r4,r2
    9c94:	b80b883a 	mov	r5,r23
    9c98:	a809883a 	mov	r4,r21
    9c9c:	000a24c0 	call	a24c <__umodsi3>
    9ca0:	1023883a 	mov	r17,r2
    9ca4:	b80b883a 	mov	r5,r23
    9ca8:	a809883a 	mov	r4,r21
    9cac:	000a1e80 	call	a1e8 <__udivsi3>
    9cb0:	8822943a 	slli	r17,r17,16
    9cb4:	b085383a 	mul	r2,r22,r2
    9cb8:	a0ffffcc 	andi	r3,r20,65535
    9cbc:	1c46b03a 	or	r3,r3,r17
    9cc0:	1880042e 	bgeu	r3,r2,9cd4 <__umoddi3+0x11c>
    9cc4:	1cc7883a 	add	r3,r3,r19
    9cc8:	1cc00236 	bltu	r3,r19,9cd4 <__umoddi3+0x11c>
    9ccc:	1880012e 	bgeu	r3,r2,9cd4 <__umoddi3+0x11c>
    9cd0:	1cc7883a 	add	r3,r3,r19
    9cd4:	1885c83a 	sub	r2,r3,r2
    9cd8:	1484d83a 	srl	r2,r2,r18
    9cdc:	0007883a 	mov	r3,zero
    9ce0:	00004f06 	br	9e20 <__umoddi3+0x268>
    9ce4:	29c04c36 	bltu	r5,r7,9e18 <__umoddi3+0x260>
    9ce8:	00bfffd4 	movui	r2,65535
    9cec:	11c0582e 	bgeu	r2,r7,9e50 <__umoddi3+0x298>
    9cf0:	00804034 	movhi	r2,256
    9cf4:	10bfffc4 	addi	r2,r2,-1
    9cf8:	11c0e736 	bltu	r2,r7,a098 <__umoddi3+0x4e0>
    9cfc:	01000404 	movi	r4,16
    9d00:	3904d83a 	srl	r2,r7,r4
    9d04:	00c000b4 	movhi	r3,2
    9d08:	18ea3b04 	addi	r3,r3,-22292
    9d0c:	1885883a 	add	r2,r3,r2
    9d10:	14c00003 	ldbu	r19,0(r2)
    9d14:	00c00804 	movi	r3,32
    9d18:	9927883a 	add	r19,r19,r4
    9d1c:	1ce9c83a 	sub	r20,r3,r19
    9d20:	a000581e 	bne	r20,zero,9e84 <__umoddi3+0x2cc>
    9d24:	3c400136 	bltu	r7,r17,9d2c <__umoddi3+0x174>
    9d28:	8180eb36 	bltu	r16,r6,a0d8 <__umoddi3+0x520>
    9d2c:	8185c83a 	sub	r2,r16,r6
    9d30:	89e3c83a 	sub	r17,r17,r7
    9d34:	8089803a 	cmpltu	r4,r16,r2
    9d38:	8939c83a 	sub	fp,r17,r4
    9d3c:	e007883a 	mov	r3,fp
    9d40:	00003706 	br	9e20 <__umoddi3+0x268>
    9d44:	3000041e 	bne	r6,zero,9d58 <__umoddi3+0x1a0>
    9d48:	000b883a 	mov	r5,zero
    9d4c:	01000044 	movi	r4,1
    9d50:	000a1e80 	call	a1e8 <__udivsi3>
    9d54:	1027883a 	mov	r19,r2
    9d58:	00bfffd4 	movui	r2,65535
    9d5c:	14c0402e 	bgeu	r2,r19,9e60 <__umoddi3+0x2a8>
    9d60:	00804034 	movhi	r2,256
    9d64:	10bfffc4 	addi	r2,r2,-1
    9d68:	14c0cd36 	bltu	r2,r19,a0a0 <__umoddi3+0x4e8>
    9d6c:	00800404 	movi	r2,16
    9d70:	9886d83a 	srl	r3,r19,r2
    9d74:	010000b4 	movhi	r4,2
    9d78:	212a3b04 	addi	r4,r4,-22292
    9d7c:	20c7883a 	add	r3,r4,r3
    9d80:	18c00003 	ldbu	r3,0(r3)
    9d84:	1887883a 	add	r3,r3,r2
    9d88:	00800804 	movi	r2,32
    9d8c:	10e5c83a 	sub	r18,r2,r3
    9d90:	9000901e 	bne	r18,zero,9fd4 <__umoddi3+0x41c>
    9d94:	982cd43a 	srli	r22,r19,16
    9d98:	8ce3c83a 	sub	r17,r17,r19
    9d9c:	9d7fffcc 	andi	r21,r19,65535
    9da0:	b00b883a 	mov	r5,r22
    9da4:	8809883a 	mov	r4,r17
    9da8:	000a24c0 	call	a24c <__umodsi3>
    9dac:	8809883a 	mov	r4,r17
    9db0:	b00b883a 	mov	r5,r22
    9db4:	1021883a 	mov	r16,r2
    9db8:	000a1e80 	call	a1e8 <__udivsi3>
    9dbc:	8006943a 	slli	r3,r16,16
    9dc0:	a008d43a 	srli	r4,r20,16
    9dc4:	1545383a 	mul	r2,r2,r21
    9dc8:	20c8b03a 	or	r4,r4,r3
    9dcc:	2080042e 	bgeu	r4,r2,9de0 <__umoddi3+0x228>
    9dd0:	24c9883a 	add	r4,r4,r19
    9dd4:	24c00236 	bltu	r4,r19,9de0 <__umoddi3+0x228>
    9dd8:	2080012e 	bgeu	r4,r2,9de0 <__umoddi3+0x228>
    9ddc:	24c9883a 	add	r4,r4,r19
    9de0:	20a1c83a 	sub	r16,r4,r2
    9de4:	b00b883a 	mov	r5,r22
    9de8:	8009883a 	mov	r4,r16
    9dec:	000a24c0 	call	a24c <__umodsi3>
    9df0:	1023883a 	mov	r17,r2
    9df4:	b00b883a 	mov	r5,r22
    9df8:	8009883a 	mov	r4,r16
    9dfc:	000a1e80 	call	a1e8 <__udivsi3>
    9e00:	8822943a 	slli	r17,r17,16
    9e04:	1545383a 	mul	r2,r2,r21
    9e08:	a53fffcc 	andi	r20,r20,65535
    9e0c:	a446b03a 	or	r3,r20,r17
    9e10:	18bfb02e 	bgeu	r3,r2,9cd4 <__umoddi3+0x11c>
    9e14:	003fab06 	br	9cc4 <__umoddi3+0x10c>
    9e18:	2005883a 	mov	r2,r4
    9e1c:	2807883a 	mov	r3,r5
    9e20:	dfc00b17 	ldw	ra,44(sp)
    9e24:	df000a17 	ldw	fp,40(sp)
    9e28:	ddc00917 	ldw	r23,36(sp)
    9e2c:	dd800817 	ldw	r22,32(sp)
    9e30:	dd400717 	ldw	r21,28(sp)
    9e34:	dd000617 	ldw	r20,24(sp)
    9e38:	dcc00517 	ldw	r19,20(sp)
    9e3c:	dc800417 	ldw	r18,16(sp)
    9e40:	dc400317 	ldw	r17,12(sp)
    9e44:	dc000217 	ldw	r16,8(sp)
    9e48:	dec00c04 	addi	sp,sp,48
    9e4c:	f800283a 	ret
    9e50:	04c03fc4 	movi	r19,255
    9e54:	99c9803a 	cmpltu	r4,r19,r7
    9e58:	200890fa 	slli	r4,r4,3
    9e5c:	003fa806 	br	9d00 <__umoddi3+0x148>
    9e60:	00803fc4 	movi	r2,255
    9e64:	14c5803a 	cmpltu	r2,r2,r19
    9e68:	100490fa 	slli	r2,r2,3
    9e6c:	003fc006 	br	9d70 <__umoddi3+0x1b8>
    9e70:	00804034 	movhi	r2,256
    9e74:	10bfffc4 	addi	r2,r2,-1
    9e78:	11808b36 	bltu	r2,r6,a0a8 <__umoddi3+0x4f0>
    9e7c:	01000404 	movi	r4,16
    9e80:	003f6406 	br	9c14 <__umoddi3+0x5c>
    9e84:	34c4d83a 	srl	r2,r6,r19
    9e88:	3d0e983a 	sll	r7,r7,r20
    9e8c:	8cf8d83a 	srl	fp,r17,r19
    9e90:	8d10983a 	sll	r8,r17,r20
    9e94:	38aab03a 	or	r21,r7,r2
    9e98:	a82cd43a 	srli	r22,r21,16
    9e9c:	84e2d83a 	srl	r17,r16,r19
    9ea0:	e009883a 	mov	r4,fp
    9ea4:	b00b883a 	mov	r5,r22
    9ea8:	8a22b03a 	or	r17,r17,r8
    9eac:	3524983a 	sll	r18,r6,r20
    9eb0:	000a24c0 	call	a24c <__umodsi3>
    9eb4:	e009883a 	mov	r4,fp
    9eb8:	b00b883a 	mov	r5,r22
    9ebc:	102f883a 	mov	r23,r2
    9ec0:	000a1e80 	call	a1e8 <__udivsi3>
    9ec4:	100d883a 	mov	r6,r2
    9ec8:	b808943a 	slli	r4,r23,16
    9ecc:	aa3fffcc 	andi	r8,r21,65535
    9ed0:	8804d43a 	srli	r2,r17,16
    9ed4:	41af383a 	mul	r23,r8,r6
    9ed8:	8520983a 	sll	r16,r16,r20
    9edc:	1104b03a 	or	r2,r2,r4
    9ee0:	15c0042e 	bgeu	r2,r23,9ef4 <__umoddi3+0x33c>
    9ee4:	1545883a 	add	r2,r2,r21
    9ee8:	30ffffc4 	addi	r3,r6,-1
    9eec:	1540742e 	bgeu	r2,r21,a0c0 <__umoddi3+0x508>
    9ef0:	180d883a 	mov	r6,r3
    9ef4:	15efc83a 	sub	r23,r2,r23
    9ef8:	b00b883a 	mov	r5,r22
    9efc:	b809883a 	mov	r4,r23
    9f00:	d9800115 	stw	r6,4(sp)
    9f04:	da000015 	stw	r8,0(sp)
    9f08:	000a24c0 	call	a24c <__umodsi3>
    9f0c:	b00b883a 	mov	r5,r22
    9f10:	b809883a 	mov	r4,r23
    9f14:	1039883a 	mov	fp,r2
    9f18:	000a1e80 	call	a1e8 <__udivsi3>
    9f1c:	da000017 	ldw	r8,0(sp)
    9f20:	e038943a 	slli	fp,fp,16
    9f24:	100b883a 	mov	r5,r2
    9f28:	4089383a 	mul	r4,r8,r2
    9f2c:	8a3fffcc 	andi	r8,r17,65535
    9f30:	4710b03a 	or	r8,r8,fp
    9f34:	d9800117 	ldw	r6,4(sp)
    9f38:	4100042e 	bgeu	r8,r4,9f4c <__umoddi3+0x394>
    9f3c:	4551883a 	add	r8,r8,r21
    9f40:	10bfffc4 	addi	r2,r2,-1
    9f44:	45405a2e 	bgeu	r8,r21,a0b0 <__umoddi3+0x4f8>
    9f48:	100b883a 	mov	r5,r2
    9f4c:	300c943a 	slli	r6,r6,16
    9f50:	91ffffcc 	andi	r7,r18,65535
    9f54:	9004d43a 	srli	r2,r18,16
    9f58:	314cb03a 	or	r6,r6,r5
    9f5c:	317fffcc 	andi	r5,r6,65535
    9f60:	300cd43a 	srli	r6,r6,16
    9f64:	29d3383a 	mul	r9,r5,r7
    9f68:	288b383a 	mul	r5,r5,r2
    9f6c:	31cf383a 	mul	r7,r6,r7
    9f70:	4806d43a 	srli	r3,r9,16
    9f74:	4111c83a 	sub	r8,r8,r4
    9f78:	29cb883a 	add	r5,r5,r7
    9f7c:	194b883a 	add	r5,r3,r5
    9f80:	3085383a 	mul	r2,r6,r2
    9f84:	29c0022e 	bgeu	r5,r7,9f90 <__umoddi3+0x3d8>
    9f88:	00c00074 	movhi	r3,1
    9f8c:	10c5883a 	add	r2,r2,r3
    9f90:	2808d43a 	srli	r4,r5,16
    9f94:	280a943a 	slli	r5,r5,16
    9f98:	4a7fffcc 	andi	r9,r9,65535
    9f9c:	2085883a 	add	r2,r4,r2
    9fa0:	2a4b883a 	add	r5,r5,r9
    9fa4:	40803636 	bltu	r8,r2,a080 <__umoddi3+0x4c8>
    9fa8:	40804d26 	beq	r8,r2,a0e0 <__umoddi3+0x528>
    9fac:	4089c83a 	sub	r4,r8,r2
    9fb0:	280f883a 	mov	r7,r5
    9fb4:	81cfc83a 	sub	r7,r16,r7
    9fb8:	81c7803a 	cmpltu	r3,r16,r7
    9fbc:	20c7c83a 	sub	r3,r4,r3
    9fc0:	1cc4983a 	sll	r2,r3,r19
    9fc4:	3d0ed83a 	srl	r7,r7,r20
    9fc8:	1d06d83a 	srl	r3,r3,r20
    9fcc:	11c4b03a 	or	r2,r2,r7
    9fd0:	003f9306 	br	9e20 <__umoddi3+0x268>
    9fd4:	9ca6983a 	sll	r19,r19,r18
    9fd8:	88e8d83a 	srl	r20,r17,r3
    9fdc:	80c4d83a 	srl	r2,r16,r3
    9fe0:	982cd43a 	srli	r22,r19,16
    9fe4:	8ca2983a 	sll	r17,r17,r18
    9fe8:	a009883a 	mov	r4,r20
    9fec:	b00b883a 	mov	r5,r22
    9ff0:	1478b03a 	or	fp,r2,r17
    9ff4:	000a24c0 	call	a24c <__umodsi3>
    9ff8:	a009883a 	mov	r4,r20
    9ffc:	b00b883a 	mov	r5,r22
    a000:	1023883a 	mov	r17,r2
    a004:	000a1e80 	call	a1e8 <__udivsi3>
    a008:	9d7fffcc 	andi	r21,r19,65535
    a00c:	880a943a 	slli	r5,r17,16
    a010:	e008d43a 	srli	r4,fp,16
    a014:	a885383a 	mul	r2,r21,r2
    a018:	84a8983a 	sll	r20,r16,r18
    a01c:	2148b03a 	or	r4,r4,r5
    a020:	2080042e 	bgeu	r4,r2,a034 <__umoddi3+0x47c>
    a024:	24c9883a 	add	r4,r4,r19
    a028:	24c00236 	bltu	r4,r19,a034 <__umoddi3+0x47c>
    a02c:	2080012e 	bgeu	r4,r2,a034 <__umoddi3+0x47c>
    a030:	24c9883a 	add	r4,r4,r19
    a034:	20a3c83a 	sub	r17,r4,r2
    a038:	b00b883a 	mov	r5,r22
    a03c:	8809883a 	mov	r4,r17
    a040:	000a24c0 	call	a24c <__umodsi3>
    a044:	102f883a 	mov	r23,r2
    a048:	8809883a 	mov	r4,r17
    a04c:	b00b883a 	mov	r5,r22
    a050:	000a1e80 	call	a1e8 <__udivsi3>
    a054:	b82e943a 	slli	r23,r23,16
    a058:	a885383a 	mul	r2,r21,r2
    a05c:	e13fffcc 	andi	r4,fp,65535
    a060:	25c8b03a 	or	r4,r4,r23
    a064:	2080042e 	bgeu	r4,r2,a078 <__umoddi3+0x4c0>
    a068:	24c9883a 	add	r4,r4,r19
    a06c:	24c00236 	bltu	r4,r19,a078 <__umoddi3+0x4c0>
    a070:	2080012e 	bgeu	r4,r2,a078 <__umoddi3+0x4c0>
    a074:	24c9883a 	add	r4,r4,r19
    a078:	20a3c83a 	sub	r17,r4,r2
    a07c:	003f4806 	br	9da0 <__umoddi3+0x1e8>
    a080:	2c8fc83a 	sub	r7,r5,r18
    a084:	1545c83a 	sub	r2,r2,r21
    a088:	29cb803a 	cmpltu	r5,r5,r7
    a08c:	1145c83a 	sub	r2,r2,r5
    a090:	4089c83a 	sub	r4,r8,r2
    a094:	003fc706 	br	9fb4 <__umoddi3+0x3fc>
    a098:	01000604 	movi	r4,24
    a09c:	003f1806 	br	9d00 <__umoddi3+0x148>
    a0a0:	00800604 	movi	r2,24
    a0a4:	003f3206 	br	9d70 <__umoddi3+0x1b8>
    a0a8:	01000604 	movi	r4,24
    a0ac:	003ed906 	br	9c14 <__umoddi3+0x5c>
    a0b0:	413fa52e 	bgeu	r8,r4,9f48 <__umoddi3+0x390>
    a0b4:	297fff84 	addi	r5,r5,-2
    a0b8:	4551883a 	add	r8,r8,r21
    a0bc:	003fa306 	br	9f4c <__umoddi3+0x394>
    a0c0:	15ff8b2e 	bgeu	r2,r23,9ef0 <__umoddi3+0x338>
    a0c4:	31bfff84 	addi	r6,r6,-2
    a0c8:	1545883a 	add	r2,r2,r21
    a0cc:	003f8906 	br	9ef4 <__umoddi3+0x33c>
    a0d0:	24c9883a 	add	r4,r4,r19
    a0d4:	003eee06 	br	9c90 <__umoddi3+0xd8>
    a0d8:	8005883a 	mov	r2,r16
    a0dc:	003f1706 	br	9d3c <__umoddi3+0x184>
    a0e0:	817fe736 	bltu	r16,r5,a080 <__umoddi3+0x4c8>
    a0e4:	280f883a 	mov	r7,r5
    a0e8:	0009883a 	mov	r4,zero
    a0ec:	003fb106 	br	9fb4 <__umoddi3+0x3fc>

0000a0f0 <__divsi3>:
    a0f0:	20001b16 	blt	r4,zero,a160 <__divsi3+0x70>
    a0f4:	000f883a 	mov	r7,zero
    a0f8:	28001616 	blt	r5,zero,a154 <__divsi3+0x64>
    a0fc:	200d883a 	mov	r6,r4
    a100:	29001a2e 	bgeu	r5,r4,a16c <__divsi3+0x7c>
    a104:	00800804 	movi	r2,32
    a108:	00c00044 	movi	r3,1
    a10c:	00000106 	br	a114 <__divsi3+0x24>
    a110:	10000d26 	beq	r2,zero,a148 <__divsi3+0x58>
    a114:	294b883a 	add	r5,r5,r5
    a118:	10bfffc4 	addi	r2,r2,-1
    a11c:	18c7883a 	add	r3,r3,r3
    a120:	293ffb36 	bltu	r5,r4,a110 <__divsi3+0x20>
    a124:	0005883a 	mov	r2,zero
    a128:	18000726 	beq	r3,zero,a148 <__divsi3+0x58>
    a12c:	0005883a 	mov	r2,zero
    a130:	31400236 	bltu	r6,r5,a13c <__divsi3+0x4c>
    a134:	314dc83a 	sub	r6,r6,r5
    a138:	10c4b03a 	or	r2,r2,r3
    a13c:	1806d07a 	srli	r3,r3,1
    a140:	280ad07a 	srli	r5,r5,1
    a144:	183ffa1e 	bne	r3,zero,a130 <__divsi3+0x40>
    a148:	38000126 	beq	r7,zero,a150 <__divsi3+0x60>
    a14c:	0085c83a 	sub	r2,zero,r2
    a150:	f800283a 	ret
    a154:	014bc83a 	sub	r5,zero,r5
    a158:	39c0005c 	xori	r7,r7,1
    a15c:	003fe706 	br	a0fc <__divsi3+0xc>
    a160:	0109c83a 	sub	r4,zero,r4
    a164:	01c00044 	movi	r7,1
    a168:	003fe306 	br	a0f8 <__divsi3+0x8>
    a16c:	00c00044 	movi	r3,1
    a170:	003fee06 	br	a12c <__divsi3+0x3c>

0000a174 <__modsi3>:
    a174:	20001716 	blt	r4,zero,a1d4 <__modsi3+0x60>
    a178:	000f883a 	mov	r7,zero
    a17c:	2005883a 	mov	r2,r4
    a180:	28001216 	blt	r5,zero,a1cc <__modsi3+0x58>
    a184:	2900162e 	bgeu	r5,r4,a1e0 <__modsi3+0x6c>
    a188:	01800804 	movi	r6,32
    a18c:	00c00044 	movi	r3,1
    a190:	00000106 	br	a198 <__modsi3+0x24>
    a194:	30000a26 	beq	r6,zero,a1c0 <__modsi3+0x4c>
    a198:	294b883a 	add	r5,r5,r5
    a19c:	31bfffc4 	addi	r6,r6,-1
    a1a0:	18c7883a 	add	r3,r3,r3
    a1a4:	293ffb36 	bltu	r5,r4,a194 <__modsi3+0x20>
    a1a8:	18000526 	beq	r3,zero,a1c0 <__modsi3+0x4c>
    a1ac:	1806d07a 	srli	r3,r3,1
    a1b0:	11400136 	bltu	r2,r5,a1b8 <__modsi3+0x44>
    a1b4:	1145c83a 	sub	r2,r2,r5
    a1b8:	280ad07a 	srli	r5,r5,1
    a1bc:	183ffb1e 	bne	r3,zero,a1ac <__modsi3+0x38>
    a1c0:	38000126 	beq	r7,zero,a1c8 <__modsi3+0x54>
    a1c4:	0085c83a 	sub	r2,zero,r2
    a1c8:	f800283a 	ret
    a1cc:	014bc83a 	sub	r5,zero,r5
    a1d0:	003fec06 	br	a184 <__modsi3+0x10>
    a1d4:	0109c83a 	sub	r4,zero,r4
    a1d8:	01c00044 	movi	r7,1
    a1dc:	003fe706 	br	a17c <__modsi3+0x8>
    a1e0:	00c00044 	movi	r3,1
    a1e4:	003ff106 	br	a1ac <__modsi3+0x38>

0000a1e8 <__udivsi3>:
    a1e8:	200d883a 	mov	r6,r4
    a1ec:	2900152e 	bgeu	r5,r4,a244 <__udivsi3+0x5c>
    a1f0:	28001416 	blt	r5,zero,a244 <__udivsi3+0x5c>
    a1f4:	00800804 	movi	r2,32
    a1f8:	00c00044 	movi	r3,1
    a1fc:	00000206 	br	a208 <__udivsi3+0x20>
    a200:	10000e26 	beq	r2,zero,a23c <__udivsi3+0x54>
    a204:	28000516 	blt	r5,zero,a21c <__udivsi3+0x34>
    a208:	294b883a 	add	r5,r5,r5
    a20c:	10bfffc4 	addi	r2,r2,-1
    a210:	18c7883a 	add	r3,r3,r3
    a214:	293ffa36 	bltu	r5,r4,a200 <__udivsi3+0x18>
    a218:	18000826 	beq	r3,zero,a23c <__udivsi3+0x54>
    a21c:	0005883a 	mov	r2,zero
    a220:	31400236 	bltu	r6,r5,a22c <__udivsi3+0x44>
    a224:	314dc83a 	sub	r6,r6,r5
    a228:	10c4b03a 	or	r2,r2,r3
    a22c:	1806d07a 	srli	r3,r3,1
    a230:	280ad07a 	srli	r5,r5,1
    a234:	183ffa1e 	bne	r3,zero,a220 <__udivsi3+0x38>
    a238:	f800283a 	ret
    a23c:	0005883a 	mov	r2,zero
    a240:	f800283a 	ret
    a244:	00c00044 	movi	r3,1
    a248:	003ff406 	br	a21c <__udivsi3+0x34>

0000a24c <__umodsi3>:
    a24c:	2005883a 	mov	r2,r4
    a250:	2900122e 	bgeu	r5,r4,a29c <__umodsi3+0x50>
    a254:	28001116 	blt	r5,zero,a29c <__umodsi3+0x50>
    a258:	01800804 	movi	r6,32
    a25c:	00c00044 	movi	r3,1
    a260:	00000206 	br	a26c <__umodsi3+0x20>
    a264:	30000c26 	beq	r6,zero,a298 <__umodsi3+0x4c>
    a268:	28000516 	blt	r5,zero,a280 <__umodsi3+0x34>
    a26c:	294b883a 	add	r5,r5,r5
    a270:	31bfffc4 	addi	r6,r6,-1
    a274:	18c7883a 	add	r3,r3,r3
    a278:	293ffa36 	bltu	r5,r4,a264 <__umodsi3+0x18>
    a27c:	18000626 	beq	r3,zero,a298 <__umodsi3+0x4c>
    a280:	1806d07a 	srli	r3,r3,1
    a284:	11400136 	bltu	r2,r5,a28c <__umodsi3+0x40>
    a288:	1145c83a 	sub	r2,r2,r5
    a28c:	280ad07a 	srli	r5,r5,1
    a290:	183ffb1e 	bne	r3,zero,a280 <__umodsi3+0x34>
    a294:	f800283a 	ret
    a298:	f800283a 	ret
    a29c:	00c00044 	movi	r3,1
    a2a0:	003ff706 	br	a280 <__umodsi3+0x34>

0000a2a4 <__adddf3>:
    a2a4:	02c00434 	movhi	r11,16
    a2a8:	5affffc4 	addi	r11,r11,-1
    a2ac:	2806d7fa 	srli	r3,r5,31
    a2b0:	2ad4703a 	and	r10,r5,r11
    a2b4:	3ad2703a 	and	r9,r7,r11
    a2b8:	3804d53a 	srli	r2,r7,20
    a2bc:	3018d77a 	srli	r12,r6,29
    a2c0:	280ad53a 	srli	r5,r5,20
    a2c4:	501490fa 	slli	r10,r10,3
    a2c8:	2010d77a 	srli	r8,r4,29
    a2cc:	481290fa 	slli	r9,r9,3
    a2d0:	380ed7fa 	srli	r7,r7,31
    a2d4:	defffb04 	addi	sp,sp,-20
    a2d8:	dc800215 	stw	r18,8(sp)
    a2dc:	dc400115 	stw	r17,4(sp)
    a2e0:	dc000015 	stw	r16,0(sp)
    a2e4:	dfc00415 	stw	ra,16(sp)
    a2e8:	dcc00315 	stw	r19,12(sp)
    a2ec:	1c803fcc 	andi	r18,r3,255
    a2f0:	2c01ffcc 	andi	r16,r5,2047
    a2f4:	5210b03a 	or	r8,r10,r8
    a2f8:	202290fa 	slli	r17,r4,3
    a2fc:	1081ffcc 	andi	r2,r2,2047
    a300:	4b12b03a 	or	r9,r9,r12
    a304:	300c90fa 	slli	r6,r6,3
    a308:	91c07526 	beq	r18,r7,a4e0 <__adddf3+0x23c>
    a30c:	8087c83a 	sub	r3,r16,r2
    a310:	00c0ab0e 	bge	zero,r3,a5c0 <__adddf3+0x31c>
    a314:	10002a1e 	bne	r2,zero,a3c0 <__adddf3+0x11c>
    a318:	4984b03a 	or	r2,r9,r6
    a31c:	1000961e 	bne	r2,zero,a578 <__adddf3+0x2d4>
    a320:	888001cc 	andi	r2,r17,7
    a324:	10000726 	beq	r2,zero,a344 <__adddf3+0xa0>
    a328:	888003cc 	andi	r2,r17,15
    a32c:	00c00104 	movi	r3,4
    a330:	10c00426 	beq	r2,r3,a344 <__adddf3+0xa0>
    a334:	88c7883a 	add	r3,r17,r3
    a338:	1c63803a 	cmpltu	r17,r3,r17
    a33c:	4451883a 	add	r8,r8,r17
    a340:	1823883a 	mov	r17,r3
    a344:	4080202c 	andhi	r2,r8,128
    a348:	10005926 	beq	r2,zero,a4b0 <__adddf3+0x20c>
    a34c:	84000044 	addi	r16,r16,1
    a350:	0081ffc4 	movi	r2,2047
    a354:	8080ba26 	beq	r16,r2,a640 <__adddf3+0x39c>
    a358:	00bfe034 	movhi	r2,65408
    a35c:	10bfffc4 	addi	r2,r2,-1
    a360:	4090703a 	and	r8,r8,r2
    a364:	4004977a 	slli	r2,r8,29
    a368:	4010927a 	slli	r8,r8,9
    a36c:	8822d0fa 	srli	r17,r17,3
    a370:	8401ffcc 	andi	r16,r16,2047
    a374:	4010d33a 	srli	r8,r8,12
    a378:	9007883a 	mov	r3,r18
    a37c:	1444b03a 	or	r2,r2,r17
    a380:	8401ffcc 	andi	r16,r16,2047
    a384:	8020953a 	slli	r16,r16,20
    a388:	18c03fcc 	andi	r3,r3,255
    a38c:	01000434 	movhi	r4,16
    a390:	213fffc4 	addi	r4,r4,-1
    a394:	180697fa 	slli	r3,r3,31
    a398:	4110703a 	and	r8,r8,r4
    a39c:	4410b03a 	or	r8,r8,r16
    a3a0:	40c6b03a 	or	r3,r8,r3
    a3a4:	dfc00417 	ldw	ra,16(sp)
    a3a8:	dcc00317 	ldw	r19,12(sp)
    a3ac:	dc800217 	ldw	r18,8(sp)
    a3b0:	dc400117 	ldw	r17,4(sp)
    a3b4:	dc000017 	ldw	r16,0(sp)
    a3b8:	dec00504 	addi	sp,sp,20
    a3bc:	f800283a 	ret
    a3c0:	0081ffc4 	movi	r2,2047
    a3c4:	80bfd626 	beq	r16,r2,a320 <__adddf3+0x7c>
    a3c8:	4a402034 	orhi	r9,r9,128
    a3cc:	00800e04 	movi	r2,56
    a3d0:	10c09f16 	blt	r2,r3,a650 <__adddf3+0x3ac>
    a3d4:	008007c4 	movi	r2,31
    a3d8:	10c0c216 	blt	r2,r3,a6e4 <__adddf3+0x440>
    a3dc:	00800804 	movi	r2,32
    a3e0:	10c5c83a 	sub	r2,r2,r3
    a3e4:	488a983a 	sll	r5,r9,r2
    a3e8:	30c8d83a 	srl	r4,r6,r3
    a3ec:	3084983a 	sll	r2,r6,r2
    a3f0:	48c6d83a 	srl	r3,r9,r3
    a3f4:	290cb03a 	or	r6,r5,r4
    a3f8:	1004c03a 	cmpne	r2,r2,zero
    a3fc:	308cb03a 	or	r6,r6,r2
    a400:	898dc83a 	sub	r6,r17,r6
    a404:	89a3803a 	cmpltu	r17,r17,r6
    a408:	40d1c83a 	sub	r8,r8,r3
    a40c:	4451c83a 	sub	r8,r8,r17
    a410:	3023883a 	mov	r17,r6
    a414:	4080202c 	andhi	r2,r8,128
    a418:	10002326 	beq	r2,zero,a4a8 <__adddf3+0x204>
    a41c:	04c02034 	movhi	r19,128
    a420:	9cffffc4 	addi	r19,r19,-1
    a424:	44e6703a 	and	r19,r8,r19
    a428:	98007626 	beq	r19,zero,a604 <__adddf3+0x360>
    a42c:	9809883a 	mov	r4,r19
    a430:	000c8a80 	call	c8a8 <__clzsi2>
    a434:	10fffe04 	addi	r3,r2,-8
    a438:	010007c4 	movi	r4,31
    a43c:	20c07716 	blt	r4,r3,a61c <__adddf3+0x378>
    a440:	00800804 	movi	r2,32
    a444:	10c5c83a 	sub	r2,r2,r3
    a448:	8884d83a 	srl	r2,r17,r2
    a44c:	98d0983a 	sll	r8,r19,r3
    a450:	88e2983a 	sll	r17,r17,r3
    a454:	1204b03a 	or	r2,r2,r8
    a458:	1c007416 	blt	r3,r16,a62c <__adddf3+0x388>
    a45c:	1c21c83a 	sub	r16,r3,r16
    a460:	82000044 	addi	r8,r16,1
    a464:	00c007c4 	movi	r3,31
    a468:	1a009116 	blt	r3,r8,a6b0 <__adddf3+0x40c>
    a46c:	00c00804 	movi	r3,32
    a470:	1a07c83a 	sub	r3,r3,r8
    a474:	8a08d83a 	srl	r4,r17,r8
    a478:	88e2983a 	sll	r17,r17,r3
    a47c:	10c6983a 	sll	r3,r2,r3
    a480:	1210d83a 	srl	r8,r2,r8
    a484:	8804c03a 	cmpne	r2,r17,zero
    a488:	1906b03a 	or	r3,r3,r4
    a48c:	18a2b03a 	or	r17,r3,r2
    a490:	0021883a 	mov	r16,zero
    a494:	003fa206 	br	a320 <__adddf3+0x7c>
    a498:	1890b03a 	or	r8,r3,r2
    a49c:	40017d26 	beq	r8,zero,aa94 <__adddf3+0x7f0>
    a4a0:	1011883a 	mov	r8,r2
    a4a4:	1823883a 	mov	r17,r3
    a4a8:	888001cc 	andi	r2,r17,7
    a4ac:	103f9e1e 	bne	r2,zero,a328 <__adddf3+0x84>
    a4b0:	4004977a 	slli	r2,r8,29
    a4b4:	8822d0fa 	srli	r17,r17,3
    a4b8:	4010d0fa 	srli	r8,r8,3
    a4bc:	9007883a 	mov	r3,r18
    a4c0:	1444b03a 	or	r2,r2,r17
    a4c4:	0101ffc4 	movi	r4,2047
    a4c8:	81002426 	beq	r16,r4,a55c <__adddf3+0x2b8>
    a4cc:	8120703a 	and	r16,r16,r4
    a4d0:	01000434 	movhi	r4,16
    a4d4:	213fffc4 	addi	r4,r4,-1
    a4d8:	4110703a 	and	r8,r8,r4
    a4dc:	003fa806 	br	a380 <__adddf3+0xdc>
    a4e0:	8089c83a 	sub	r4,r16,r2
    a4e4:	01005e0e 	bge	zero,r4,a660 <__adddf3+0x3bc>
    a4e8:	10002b26 	beq	r2,zero,a598 <__adddf3+0x2f4>
    a4ec:	0081ffc4 	movi	r2,2047
    a4f0:	80bf8b26 	beq	r16,r2,a320 <__adddf3+0x7c>
    a4f4:	4a402034 	orhi	r9,r9,128
    a4f8:	00800e04 	movi	r2,56
    a4fc:	1100a40e 	bge	r2,r4,a790 <__adddf3+0x4ec>
    a500:	498cb03a 	or	r6,r9,r6
    a504:	300ac03a 	cmpne	r5,r6,zero
    a508:	0013883a 	mov	r9,zero
    a50c:	2c4b883a 	add	r5,r5,r17
    a510:	2c63803a 	cmpltu	r17,r5,r17
    a514:	4a11883a 	add	r8,r9,r8
    a518:	8a11883a 	add	r8,r17,r8
    a51c:	2823883a 	mov	r17,r5
    a520:	4080202c 	andhi	r2,r8,128
    a524:	103fe026 	beq	r2,zero,a4a8 <__adddf3+0x204>
    a528:	84000044 	addi	r16,r16,1
    a52c:	0081ffc4 	movi	r2,2047
    a530:	8080d226 	beq	r16,r2,a87c <__adddf3+0x5d8>
    a534:	00bfe034 	movhi	r2,65408
    a538:	10bfffc4 	addi	r2,r2,-1
    a53c:	4090703a 	and	r8,r8,r2
    a540:	880ad07a 	srli	r5,r17,1
    a544:	400897fa 	slli	r4,r8,31
    a548:	88c0004c 	andi	r3,r17,1
    a54c:	28e2b03a 	or	r17,r5,r3
    a550:	4010d07a 	srli	r8,r8,1
    a554:	2462b03a 	or	r17,r4,r17
    a558:	003f7106 	br	a320 <__adddf3+0x7c>
    a55c:	4088b03a 	or	r4,r8,r2
    a560:	20014526 	beq	r4,zero,aa78 <__adddf3+0x7d4>
    a564:	01000434 	movhi	r4,16
    a568:	42000234 	orhi	r8,r8,8
    a56c:	213fffc4 	addi	r4,r4,-1
    a570:	4110703a 	and	r8,r8,r4
    a574:	003f8206 	br	a380 <__adddf3+0xdc>
    a578:	18ffffc4 	addi	r3,r3,-1
    a57c:	1800491e 	bne	r3,zero,a6a4 <__adddf3+0x400>
    a580:	898bc83a 	sub	r5,r17,r6
    a584:	8963803a 	cmpltu	r17,r17,r5
    a588:	4251c83a 	sub	r8,r8,r9
    a58c:	4451c83a 	sub	r8,r8,r17
    a590:	2823883a 	mov	r17,r5
    a594:	003f9f06 	br	a414 <__adddf3+0x170>
    a598:	4984b03a 	or	r2,r9,r6
    a59c:	103f6026 	beq	r2,zero,a320 <__adddf3+0x7c>
    a5a0:	213fffc4 	addi	r4,r4,-1
    a5a4:	2000931e 	bne	r4,zero,a7f4 <__adddf3+0x550>
    a5a8:	898d883a 	add	r6,r17,r6
    a5ac:	3463803a 	cmpltu	r17,r6,r17
    a5b0:	4251883a 	add	r8,r8,r9
    a5b4:	8a11883a 	add	r8,r17,r8
    a5b8:	3023883a 	mov	r17,r6
    a5bc:	003fd806 	br	a520 <__adddf3+0x27c>
    a5c0:	1800541e 	bne	r3,zero,a714 <__adddf3+0x470>
    a5c4:	80800044 	addi	r2,r16,1
    a5c8:	1081ffcc 	andi	r2,r2,2047
    a5cc:	00c00044 	movi	r3,1
    a5d0:	1880a00e 	bge	r3,r2,a854 <__adddf3+0x5b0>
    a5d4:	8989c83a 	sub	r4,r17,r6
    a5d8:	8905803a 	cmpltu	r2,r17,r4
    a5dc:	4267c83a 	sub	r19,r8,r9
    a5e0:	98a7c83a 	sub	r19,r19,r2
    a5e4:	9880202c 	andhi	r2,r19,128
    a5e8:	10006326 	beq	r2,zero,a778 <__adddf3+0x4d4>
    a5ec:	3463c83a 	sub	r17,r6,r17
    a5f0:	4a07c83a 	sub	r3,r9,r8
    a5f4:	344d803a 	cmpltu	r6,r6,r17
    a5f8:	19a7c83a 	sub	r19,r3,r6
    a5fc:	3825883a 	mov	r18,r7
    a600:	983f8a1e 	bne	r19,zero,a42c <__adddf3+0x188>
    a604:	8809883a 	mov	r4,r17
    a608:	000c8a80 	call	c8a8 <__clzsi2>
    a60c:	10800804 	addi	r2,r2,32
    a610:	10fffe04 	addi	r3,r2,-8
    a614:	010007c4 	movi	r4,31
    a618:	20ff890e 	bge	r4,r3,a440 <__adddf3+0x19c>
    a61c:	10bff604 	addi	r2,r2,-40
    a620:	8884983a 	sll	r2,r17,r2
    a624:	0023883a 	mov	r17,zero
    a628:	1c3f8c0e 	bge	r3,r16,a45c <__adddf3+0x1b8>
    a62c:	023fe034 	movhi	r8,65408
    a630:	423fffc4 	addi	r8,r8,-1
    a634:	80e1c83a 	sub	r16,r16,r3
    a638:	1210703a 	and	r8,r2,r8
    a63c:	003f3806 	br	a320 <__adddf3+0x7c>
    a640:	9007883a 	mov	r3,r18
    a644:	0011883a 	mov	r8,zero
    a648:	0005883a 	mov	r2,zero
    a64c:	003f4c06 	br	a380 <__adddf3+0xdc>
    a650:	498cb03a 	or	r6,r9,r6
    a654:	300cc03a 	cmpne	r6,r6,zero
    a658:	0007883a 	mov	r3,zero
    a65c:	003f6806 	br	a400 <__adddf3+0x15c>
    a660:	20009c1e 	bne	r4,zero,a8d4 <__adddf3+0x630>
    a664:	80800044 	addi	r2,r16,1
    a668:	1141ffcc 	andi	r5,r2,2047
    a66c:	01000044 	movi	r4,1
    a670:	2140670e 	bge	r4,r5,a810 <__adddf3+0x56c>
    a674:	0101ffc4 	movi	r4,2047
    a678:	11007f26 	beq	r2,r4,a878 <__adddf3+0x5d4>
    a67c:	898d883a 	add	r6,r17,r6
    a680:	4247883a 	add	r3,r8,r9
    a684:	3451803a 	cmpltu	r8,r6,r17
    a688:	40d1883a 	add	r8,r8,r3
    a68c:	402297fa 	slli	r17,r8,31
    a690:	300cd07a 	srli	r6,r6,1
    a694:	4010d07a 	srli	r8,r8,1
    a698:	1021883a 	mov	r16,r2
    a69c:	89a2b03a 	or	r17,r17,r6
    a6a0:	003f1f06 	br	a320 <__adddf3+0x7c>
    a6a4:	0081ffc4 	movi	r2,2047
    a6a8:	80bf481e 	bne	r16,r2,a3cc <__adddf3+0x128>
    a6ac:	003f1c06 	br	a320 <__adddf3+0x7c>
    a6b0:	843ff844 	addi	r16,r16,-31
    a6b4:	01000804 	movi	r4,32
    a6b8:	1406d83a 	srl	r3,r2,r16
    a6bc:	41005026 	beq	r8,r4,a800 <__adddf3+0x55c>
    a6c0:	01001004 	movi	r4,64
    a6c4:	2211c83a 	sub	r8,r4,r8
    a6c8:	1204983a 	sll	r2,r2,r8
    a6cc:	88a2b03a 	or	r17,r17,r2
    a6d0:	8822c03a 	cmpne	r17,r17,zero
    a6d4:	1c62b03a 	or	r17,r3,r17
    a6d8:	0011883a 	mov	r8,zero
    a6dc:	0021883a 	mov	r16,zero
    a6e0:	003f7106 	br	a4a8 <__adddf3+0x204>
    a6e4:	193ff804 	addi	r4,r3,-32
    a6e8:	00800804 	movi	r2,32
    a6ec:	4908d83a 	srl	r4,r9,r4
    a6f0:	18804526 	beq	r3,r2,a808 <__adddf3+0x564>
    a6f4:	00801004 	movi	r2,64
    a6f8:	10c5c83a 	sub	r2,r2,r3
    a6fc:	4886983a 	sll	r3,r9,r2
    a700:	198cb03a 	or	r6,r3,r6
    a704:	300cc03a 	cmpne	r6,r6,zero
    a708:	218cb03a 	or	r6,r4,r6
    a70c:	0007883a 	mov	r3,zero
    a710:	003f3b06 	br	a400 <__adddf3+0x15c>
    a714:	80002a26 	beq	r16,zero,a7c0 <__adddf3+0x51c>
    a718:	0101ffc4 	movi	r4,2047
    a71c:	11006826 	beq	r2,r4,a8c0 <__adddf3+0x61c>
    a720:	00c7c83a 	sub	r3,zero,r3
    a724:	42002034 	orhi	r8,r8,128
    a728:	01000e04 	movi	r4,56
    a72c:	20c07c16 	blt	r4,r3,a920 <__adddf3+0x67c>
    a730:	010007c4 	movi	r4,31
    a734:	20c0da16 	blt	r4,r3,aaa0 <__adddf3+0x7fc>
    a738:	01000804 	movi	r4,32
    a73c:	20c9c83a 	sub	r4,r4,r3
    a740:	4114983a 	sll	r10,r8,r4
    a744:	88cad83a 	srl	r5,r17,r3
    a748:	8908983a 	sll	r4,r17,r4
    a74c:	40c6d83a 	srl	r3,r8,r3
    a750:	5162b03a 	or	r17,r10,r5
    a754:	2008c03a 	cmpne	r4,r4,zero
    a758:	8922b03a 	or	r17,r17,r4
    a75c:	3463c83a 	sub	r17,r6,r17
    a760:	48c7c83a 	sub	r3,r9,r3
    a764:	344d803a 	cmpltu	r6,r6,r17
    a768:	1991c83a 	sub	r8,r3,r6
    a76c:	1021883a 	mov	r16,r2
    a770:	3825883a 	mov	r18,r7
    a774:	003f2706 	br	a414 <__adddf3+0x170>
    a778:	24d0b03a 	or	r8,r4,r19
    a77c:	40001b1e 	bne	r8,zero,a7ec <__adddf3+0x548>
    a780:	0005883a 	mov	r2,zero
    a784:	0007883a 	mov	r3,zero
    a788:	0021883a 	mov	r16,zero
    a78c:	003f4d06 	br	a4c4 <__adddf3+0x220>
    a790:	008007c4 	movi	r2,31
    a794:	11003c16 	blt	r2,r4,a888 <__adddf3+0x5e4>
    a798:	00800804 	movi	r2,32
    a79c:	1105c83a 	sub	r2,r2,r4
    a7a0:	488e983a 	sll	r7,r9,r2
    a7a4:	310ad83a 	srl	r5,r6,r4
    a7a8:	3084983a 	sll	r2,r6,r2
    a7ac:	4912d83a 	srl	r9,r9,r4
    a7b0:	394ab03a 	or	r5,r7,r5
    a7b4:	1004c03a 	cmpne	r2,r2,zero
    a7b8:	288ab03a 	or	r5,r5,r2
    a7bc:	003f5306 	br	a50c <__adddf3+0x268>
    a7c0:	4448b03a 	or	r4,r8,r17
    a7c4:	20003e26 	beq	r4,zero,a8c0 <__adddf3+0x61c>
    a7c8:	00c6303a 	nor	r3,zero,r3
    a7cc:	18003a1e 	bne	r3,zero,a8b8 <__adddf3+0x614>
    a7d0:	3463c83a 	sub	r17,r6,r17
    a7d4:	4a07c83a 	sub	r3,r9,r8
    a7d8:	344d803a 	cmpltu	r6,r6,r17
    a7dc:	1991c83a 	sub	r8,r3,r6
    a7e0:	1021883a 	mov	r16,r2
    a7e4:	3825883a 	mov	r18,r7
    a7e8:	003f0a06 	br	a414 <__adddf3+0x170>
    a7ec:	2023883a 	mov	r17,r4
    a7f0:	003f0d06 	br	a428 <__adddf3+0x184>
    a7f4:	0081ffc4 	movi	r2,2047
    a7f8:	80bf3f1e 	bne	r16,r2,a4f8 <__adddf3+0x254>
    a7fc:	003ec806 	br	a320 <__adddf3+0x7c>
    a800:	0005883a 	mov	r2,zero
    a804:	003fb106 	br	a6cc <__adddf3+0x428>
    a808:	0007883a 	mov	r3,zero
    a80c:	003fbc06 	br	a700 <__adddf3+0x45c>
    a810:	4444b03a 	or	r2,r8,r17
    a814:	8000871e 	bne	r16,zero,aa34 <__adddf3+0x790>
    a818:	1000ba26 	beq	r2,zero,ab04 <__adddf3+0x860>
    a81c:	4984b03a 	or	r2,r9,r6
    a820:	103ebf26 	beq	r2,zero,a320 <__adddf3+0x7c>
    a824:	8985883a 	add	r2,r17,r6
    a828:	4247883a 	add	r3,r8,r9
    a82c:	1451803a 	cmpltu	r8,r2,r17
    a830:	40d1883a 	add	r8,r8,r3
    a834:	40c0202c 	andhi	r3,r8,128
    a838:	1023883a 	mov	r17,r2
    a83c:	183f1a26 	beq	r3,zero,a4a8 <__adddf3+0x204>
    a840:	00bfe034 	movhi	r2,65408
    a844:	10bfffc4 	addi	r2,r2,-1
    a848:	2021883a 	mov	r16,r4
    a84c:	4090703a 	and	r8,r8,r2
    a850:	003eb306 	br	a320 <__adddf3+0x7c>
    a854:	4444b03a 	or	r2,r8,r17
    a858:	8000291e 	bne	r16,zero,a900 <__adddf3+0x65c>
    a85c:	10004b1e 	bne	r2,zero,a98c <__adddf3+0x6e8>
    a860:	4990b03a 	or	r8,r9,r6
    a864:	40008b26 	beq	r8,zero,aa94 <__adddf3+0x7f0>
    a868:	4811883a 	mov	r8,r9
    a86c:	3023883a 	mov	r17,r6
    a870:	3825883a 	mov	r18,r7
    a874:	003eaa06 	br	a320 <__adddf3+0x7c>
    a878:	1021883a 	mov	r16,r2
    a87c:	0011883a 	mov	r8,zero
    a880:	0005883a 	mov	r2,zero
    a884:	003f0f06 	br	a4c4 <__adddf3+0x220>
    a888:	217ff804 	addi	r5,r4,-32
    a88c:	00800804 	movi	r2,32
    a890:	494ad83a 	srl	r5,r9,r5
    a894:	20807d26 	beq	r4,r2,aa8c <__adddf3+0x7e8>
    a898:	00801004 	movi	r2,64
    a89c:	1109c83a 	sub	r4,r2,r4
    a8a0:	4912983a 	sll	r9,r9,r4
    a8a4:	498cb03a 	or	r6,r9,r6
    a8a8:	300cc03a 	cmpne	r6,r6,zero
    a8ac:	298ab03a 	or	r5,r5,r6
    a8b0:	0013883a 	mov	r9,zero
    a8b4:	003f1506 	br	a50c <__adddf3+0x268>
    a8b8:	0101ffc4 	movi	r4,2047
    a8bc:	113f9a1e 	bne	r2,r4,a728 <__adddf3+0x484>
    a8c0:	4811883a 	mov	r8,r9
    a8c4:	3023883a 	mov	r17,r6
    a8c8:	1021883a 	mov	r16,r2
    a8cc:	3825883a 	mov	r18,r7
    a8d0:	003e9306 	br	a320 <__adddf3+0x7c>
    a8d4:	8000161e 	bne	r16,zero,a930 <__adddf3+0x68c>
    a8d8:	444ab03a 	or	r5,r8,r17
    a8dc:	28005126 	beq	r5,zero,aa24 <__adddf3+0x780>
    a8e0:	0108303a 	nor	r4,zero,r4
    a8e4:	20004d1e 	bne	r4,zero,aa1c <__adddf3+0x778>
    a8e8:	89a3883a 	add	r17,r17,r6
    a8ec:	4253883a 	add	r9,r8,r9
    a8f0:	898d803a 	cmpltu	r6,r17,r6
    a8f4:	3251883a 	add	r8,r6,r9
    a8f8:	1021883a 	mov	r16,r2
    a8fc:	003f0806 	br	a520 <__adddf3+0x27c>
    a900:	1000301e 	bne	r2,zero,a9c4 <__adddf3+0x720>
    a904:	4984b03a 	or	r2,r9,r6
    a908:	10007126 	beq	r2,zero,aad0 <__adddf3+0x82c>
    a90c:	4811883a 	mov	r8,r9
    a910:	3023883a 	mov	r17,r6
    a914:	3825883a 	mov	r18,r7
    a918:	0401ffc4 	movi	r16,2047
    a91c:	003e8006 	br	a320 <__adddf3+0x7c>
    a920:	4462b03a 	or	r17,r8,r17
    a924:	8822c03a 	cmpne	r17,r17,zero
    a928:	0007883a 	mov	r3,zero
    a92c:	003f8b06 	br	a75c <__adddf3+0x4b8>
    a930:	0141ffc4 	movi	r5,2047
    a934:	11403b26 	beq	r2,r5,aa24 <__adddf3+0x780>
    a938:	0109c83a 	sub	r4,zero,r4
    a93c:	42002034 	orhi	r8,r8,128
    a940:	01400e04 	movi	r5,56
    a944:	29006716 	blt	r5,r4,aae4 <__adddf3+0x840>
    a948:	014007c4 	movi	r5,31
    a94c:	29007016 	blt	r5,r4,ab10 <__adddf3+0x86c>
    a950:	01400804 	movi	r5,32
    a954:	290bc83a 	sub	r5,r5,r4
    a958:	4154983a 	sll	r10,r8,r5
    a95c:	890ed83a 	srl	r7,r17,r4
    a960:	894a983a 	sll	r5,r17,r5
    a964:	4108d83a 	srl	r4,r8,r4
    a968:	51e2b03a 	or	r17,r10,r7
    a96c:	280ac03a 	cmpne	r5,r5,zero
    a970:	8962b03a 	or	r17,r17,r5
    a974:	89a3883a 	add	r17,r17,r6
    a978:	2253883a 	add	r9,r4,r9
    a97c:	898d803a 	cmpltu	r6,r17,r6
    a980:	3251883a 	add	r8,r6,r9
    a984:	1021883a 	mov	r16,r2
    a988:	003ee506 	br	a520 <__adddf3+0x27c>
    a98c:	4984b03a 	or	r2,r9,r6
    a990:	103e6326 	beq	r2,zero,a320 <__adddf3+0x7c>
    a994:	8987c83a 	sub	r3,r17,r6
    a998:	88c9803a 	cmpltu	r4,r17,r3
    a99c:	4245c83a 	sub	r2,r8,r9
    a9a0:	1105c83a 	sub	r2,r2,r4
    a9a4:	1100202c 	andhi	r4,r2,128
    a9a8:	203ebb26 	beq	r4,zero,a498 <__adddf3+0x1f4>
    a9ac:	3463c83a 	sub	r17,r6,r17
    a9b0:	4a07c83a 	sub	r3,r9,r8
    a9b4:	344d803a 	cmpltu	r6,r6,r17
    a9b8:	1991c83a 	sub	r8,r3,r6
    a9bc:	3825883a 	mov	r18,r7
    a9c0:	003e5706 	br	a320 <__adddf3+0x7c>
    a9c4:	4984b03a 	or	r2,r9,r6
    a9c8:	10002e26 	beq	r2,zero,aa84 <__adddf3+0x7e0>
    a9cc:	4004d0fa 	srli	r2,r8,3
    a9d0:	8822d0fa 	srli	r17,r17,3
    a9d4:	4010977a 	slli	r8,r8,29
    a9d8:	10c0022c 	andhi	r3,r2,8
    a9dc:	4462b03a 	or	r17,r8,r17
    a9e0:	18000826 	beq	r3,zero,aa04 <__adddf3+0x760>
    a9e4:	4808d0fa 	srli	r4,r9,3
    a9e8:	20c0022c 	andhi	r3,r4,8
    a9ec:	1800051e 	bne	r3,zero,aa04 <__adddf3+0x760>
    a9f0:	300cd0fa 	srli	r6,r6,3
    a9f4:	4806977a 	slli	r3,r9,29
    a9f8:	2005883a 	mov	r2,r4
    a9fc:	3825883a 	mov	r18,r7
    aa00:	19a2b03a 	or	r17,r3,r6
    aa04:	8810d77a 	srli	r8,r17,29
    aa08:	100490fa 	slli	r2,r2,3
    aa0c:	882290fa 	slli	r17,r17,3
    aa10:	0401ffc4 	movi	r16,2047
    aa14:	4090b03a 	or	r8,r8,r2
    aa18:	003e4106 	br	a320 <__adddf3+0x7c>
    aa1c:	0141ffc4 	movi	r5,2047
    aa20:	117fc71e 	bne	r2,r5,a940 <__adddf3+0x69c>
    aa24:	4811883a 	mov	r8,r9
    aa28:	3023883a 	mov	r17,r6
    aa2c:	1021883a 	mov	r16,r2
    aa30:	003e3b06 	br	a320 <__adddf3+0x7c>
    aa34:	10002f26 	beq	r2,zero,aaf4 <__adddf3+0x850>
    aa38:	4984b03a 	or	r2,r9,r6
    aa3c:	10001126 	beq	r2,zero,aa84 <__adddf3+0x7e0>
    aa40:	4004d0fa 	srli	r2,r8,3
    aa44:	8822d0fa 	srli	r17,r17,3
    aa48:	4010977a 	slli	r8,r8,29
    aa4c:	10c0022c 	andhi	r3,r2,8
    aa50:	4462b03a 	or	r17,r8,r17
    aa54:	183feb26 	beq	r3,zero,aa04 <__adddf3+0x760>
    aa58:	4808d0fa 	srli	r4,r9,3
    aa5c:	20c0022c 	andhi	r3,r4,8
    aa60:	183fe81e 	bne	r3,zero,aa04 <__adddf3+0x760>
    aa64:	300cd0fa 	srli	r6,r6,3
    aa68:	4806977a 	slli	r3,r9,29
    aa6c:	2005883a 	mov	r2,r4
    aa70:	19a2b03a 	or	r17,r3,r6
    aa74:	003fe306 	br	aa04 <__adddf3+0x760>
    aa78:	0011883a 	mov	r8,zero
    aa7c:	0005883a 	mov	r2,zero
    aa80:	003e3f06 	br	a380 <__adddf3+0xdc>
    aa84:	0401ffc4 	movi	r16,2047
    aa88:	003e2506 	br	a320 <__adddf3+0x7c>
    aa8c:	0013883a 	mov	r9,zero
    aa90:	003f8406 	br	a8a4 <__adddf3+0x600>
    aa94:	0005883a 	mov	r2,zero
    aa98:	0007883a 	mov	r3,zero
    aa9c:	003e8906 	br	a4c4 <__adddf3+0x220>
    aaa0:	197ff804 	addi	r5,r3,-32
    aaa4:	01000804 	movi	r4,32
    aaa8:	414ad83a 	srl	r5,r8,r5
    aaac:	19002426 	beq	r3,r4,ab40 <__adddf3+0x89c>
    aab0:	01001004 	movi	r4,64
    aab4:	20c7c83a 	sub	r3,r4,r3
    aab8:	40c6983a 	sll	r3,r8,r3
    aabc:	1c46b03a 	or	r3,r3,r17
    aac0:	1806c03a 	cmpne	r3,r3,zero
    aac4:	28e2b03a 	or	r17,r5,r3
    aac8:	0007883a 	mov	r3,zero
    aacc:	003f2306 	br	a75c <__adddf3+0x4b8>
    aad0:	0007883a 	mov	r3,zero
    aad4:	5811883a 	mov	r8,r11
    aad8:	00bfffc4 	movi	r2,-1
    aadc:	0401ffc4 	movi	r16,2047
    aae0:	003e7806 	br	a4c4 <__adddf3+0x220>
    aae4:	4462b03a 	or	r17,r8,r17
    aae8:	8822c03a 	cmpne	r17,r17,zero
    aaec:	0009883a 	mov	r4,zero
    aaf0:	003fa006 	br	a974 <__adddf3+0x6d0>
    aaf4:	4811883a 	mov	r8,r9
    aaf8:	3023883a 	mov	r17,r6
    aafc:	0401ffc4 	movi	r16,2047
    ab00:	003e0706 	br	a320 <__adddf3+0x7c>
    ab04:	4811883a 	mov	r8,r9
    ab08:	3023883a 	mov	r17,r6
    ab0c:	003e0406 	br	a320 <__adddf3+0x7c>
    ab10:	21fff804 	addi	r7,r4,-32
    ab14:	01400804 	movi	r5,32
    ab18:	41ced83a 	srl	r7,r8,r7
    ab1c:	21400a26 	beq	r4,r5,ab48 <__adddf3+0x8a4>
    ab20:	01401004 	movi	r5,64
    ab24:	2909c83a 	sub	r4,r5,r4
    ab28:	4108983a 	sll	r4,r8,r4
    ab2c:	2448b03a 	or	r4,r4,r17
    ab30:	2008c03a 	cmpne	r4,r4,zero
    ab34:	3922b03a 	or	r17,r7,r4
    ab38:	0009883a 	mov	r4,zero
    ab3c:	003f8d06 	br	a974 <__adddf3+0x6d0>
    ab40:	0007883a 	mov	r3,zero
    ab44:	003fdd06 	br	aabc <__adddf3+0x818>
    ab48:	0009883a 	mov	r4,zero
    ab4c:	003ff706 	br	ab2c <__adddf3+0x888>

0000ab50 <__divdf3>:
    ab50:	defff204 	addi	sp,sp,-56
    ab54:	dd400915 	stw	r21,36(sp)
    ab58:	282ad53a 	srli	r21,r5,20
    ab5c:	dd000815 	stw	r20,32(sp)
    ab60:	2828d7fa 	srli	r20,r5,31
    ab64:	dc000415 	stw	r16,16(sp)
    ab68:	04000434 	movhi	r16,16
    ab6c:	df000c15 	stw	fp,48(sp)
    ab70:	843fffc4 	addi	r16,r16,-1
    ab74:	dfc00d15 	stw	ra,52(sp)
    ab78:	ddc00b15 	stw	r23,44(sp)
    ab7c:	dd800a15 	stw	r22,40(sp)
    ab80:	dcc00715 	stw	r19,28(sp)
    ab84:	dc800615 	stw	r18,24(sp)
    ab88:	dc400515 	stw	r17,20(sp)
    ab8c:	ad41ffcc 	andi	r21,r21,2047
    ab90:	2c20703a 	and	r16,r5,r16
    ab94:	a7003fcc 	andi	fp,r20,255
    ab98:	a8006126 	beq	r21,zero,ad20 <__divdf3+0x1d0>
    ab9c:	0081ffc4 	movi	r2,2047
    aba0:	2025883a 	mov	r18,r4
    aba4:	a8803726 	beq	r21,r2,ac84 <__divdf3+0x134>
    aba8:	80800434 	orhi	r2,r16,16
    abac:	100490fa 	slli	r2,r2,3
    abb0:	2020d77a 	srli	r16,r4,29
    abb4:	202490fa 	slli	r18,r4,3
    abb8:	ad7f0044 	addi	r21,r21,-1023
    abbc:	80a0b03a 	or	r16,r16,r2
    abc0:	0027883a 	mov	r19,zero
    abc4:	0013883a 	mov	r9,zero
    abc8:	3804d53a 	srli	r2,r7,20
    abcc:	382cd7fa 	srli	r22,r7,31
    abd0:	04400434 	movhi	r17,16
    abd4:	8c7fffc4 	addi	r17,r17,-1
    abd8:	1081ffcc 	andi	r2,r2,2047
    abdc:	3011883a 	mov	r8,r6
    abe0:	3c62703a 	and	r17,r7,r17
    abe4:	b5c03fcc 	andi	r23,r22,255
    abe8:	10006c26 	beq	r2,zero,ad9c <__divdf3+0x24c>
    abec:	00c1ffc4 	movi	r3,2047
    abf0:	10c06426 	beq	r2,r3,ad84 <__divdf3+0x234>
    abf4:	88c00434 	orhi	r3,r17,16
    abf8:	180690fa 	slli	r3,r3,3
    abfc:	3022d77a 	srli	r17,r6,29
    ac00:	301090fa 	slli	r8,r6,3
    ac04:	10bf0044 	addi	r2,r2,-1023
    ac08:	88e2b03a 	or	r17,r17,r3
    ac0c:	000f883a 	mov	r7,zero
    ac10:	a58cf03a 	xor	r6,r20,r22
    ac14:	3cc8b03a 	or	r4,r7,r19
    ac18:	a8abc83a 	sub	r21,r21,r2
    ac1c:	008003c4 	movi	r2,15
    ac20:	3007883a 	mov	r3,r6
    ac24:	34c03fcc 	andi	r19,r6,255
    ac28:	11009036 	bltu	r2,r4,ae6c <__divdf3+0x31c>
    ac2c:	200890ba 	slli	r4,r4,2
    ac30:	00800074 	movhi	r2,1
    ac34:	10ab1104 	addi	r2,r2,-21436
    ac38:	2089883a 	add	r4,r4,r2
    ac3c:	20800017 	ldw	r2,0(r4)
    ac40:	1000683a 	jmp	r2
    ac44:	0000ae6c 	andhi	zero,zero,697
    ac48:	0000acbc 	xorhi	zero,zero,690
    ac4c:	0000ae5c 	xori	zero,zero,697
    ac50:	0000acb0 	cmpltui	zero,zero,690
    ac54:	0000ae5c 	xori	zero,zero,697
    ac58:	0000ae30 	cmpltui	zero,zero,696
    ac5c:	0000ae5c 	xori	zero,zero,697
    ac60:	0000acb0 	cmpltui	zero,zero,690
    ac64:	0000acbc 	xorhi	zero,zero,690
    ac68:	0000acbc 	xorhi	zero,zero,690
    ac6c:	0000ae30 	cmpltui	zero,zero,696
    ac70:	0000acb0 	cmpltui	zero,zero,690
    ac74:	0000aca0 	cmpeqi	zero,zero,690
    ac78:	0000aca0 	cmpeqi	zero,zero,690
    ac7c:	0000aca0 	cmpeqi	zero,zero,690
    ac80:	0000b150 	cmplti	zero,zero,709
    ac84:	2404b03a 	or	r2,r4,r16
    ac88:	1000661e 	bne	r2,zero,ae24 <__divdf3+0x2d4>
    ac8c:	04c00204 	movi	r19,8
    ac90:	0021883a 	mov	r16,zero
    ac94:	0025883a 	mov	r18,zero
    ac98:	02400084 	movi	r9,2
    ac9c:	003fca06 	br	abc8 <__divdf3+0x78>
    aca0:	8023883a 	mov	r17,r16
    aca4:	9011883a 	mov	r8,r18
    aca8:	e02f883a 	mov	r23,fp
    acac:	480f883a 	mov	r7,r9
    acb0:	00800084 	movi	r2,2
    acb4:	3881311e 	bne	r7,r2,b17c <__divdf3+0x62c>
    acb8:	b827883a 	mov	r19,r23
    acbc:	98c0004c 	andi	r3,r19,1
    acc0:	0081ffc4 	movi	r2,2047
    acc4:	000b883a 	mov	r5,zero
    acc8:	0025883a 	mov	r18,zero
    accc:	1004953a 	slli	r2,r2,20
    acd0:	18c03fcc 	andi	r3,r3,255
    acd4:	04400434 	movhi	r17,16
    acd8:	8c7fffc4 	addi	r17,r17,-1
    acdc:	180697fa 	slli	r3,r3,31
    ace0:	2c4a703a 	and	r5,r5,r17
    ace4:	288ab03a 	or	r5,r5,r2
    ace8:	28c6b03a 	or	r3,r5,r3
    acec:	9005883a 	mov	r2,r18
    acf0:	dfc00d17 	ldw	ra,52(sp)
    acf4:	df000c17 	ldw	fp,48(sp)
    acf8:	ddc00b17 	ldw	r23,44(sp)
    acfc:	dd800a17 	ldw	r22,40(sp)
    ad00:	dd400917 	ldw	r21,36(sp)
    ad04:	dd000817 	ldw	r20,32(sp)
    ad08:	dcc00717 	ldw	r19,28(sp)
    ad0c:	dc800617 	ldw	r18,24(sp)
    ad10:	dc400517 	ldw	r17,20(sp)
    ad14:	dc000417 	ldw	r16,16(sp)
    ad18:	dec00e04 	addi	sp,sp,56
    ad1c:	f800283a 	ret
    ad20:	2404b03a 	or	r2,r4,r16
    ad24:	2027883a 	mov	r19,r4
    ad28:	10003926 	beq	r2,zero,ae10 <__divdf3+0x2c0>
    ad2c:	80012e26 	beq	r16,zero,b1e8 <__divdf3+0x698>
    ad30:	8009883a 	mov	r4,r16
    ad34:	d9800315 	stw	r6,12(sp)
    ad38:	d9c00215 	stw	r7,8(sp)
    ad3c:	000c8a80 	call	c8a8 <__clzsi2>
    ad40:	d9800317 	ldw	r6,12(sp)
    ad44:	d9c00217 	ldw	r7,8(sp)
    ad48:	113ffd44 	addi	r4,r2,-11
    ad4c:	00c00704 	movi	r3,28
    ad50:	19012116 	blt	r3,r4,b1d8 <__divdf3+0x688>
    ad54:	00c00744 	movi	r3,29
    ad58:	147ffe04 	addi	r17,r2,-8
    ad5c:	1907c83a 	sub	r3,r3,r4
    ad60:	8460983a 	sll	r16,r16,r17
    ad64:	98c6d83a 	srl	r3,r19,r3
    ad68:	9c64983a 	sll	r18,r19,r17
    ad6c:	1c20b03a 	or	r16,r3,r16
    ad70:	1080fcc4 	addi	r2,r2,1011
    ad74:	00abc83a 	sub	r21,zero,r2
    ad78:	0027883a 	mov	r19,zero
    ad7c:	0013883a 	mov	r9,zero
    ad80:	003f9106 	br	abc8 <__divdf3+0x78>
    ad84:	3446b03a 	or	r3,r6,r17
    ad88:	18001f1e 	bne	r3,zero,ae08 <__divdf3+0x2b8>
    ad8c:	0023883a 	mov	r17,zero
    ad90:	0011883a 	mov	r8,zero
    ad94:	01c00084 	movi	r7,2
    ad98:	003f9d06 	br	ac10 <__divdf3+0xc0>
    ad9c:	3446b03a 	or	r3,r6,r17
    ada0:	18001526 	beq	r3,zero,adf8 <__divdf3+0x2a8>
    ada4:	88011b26 	beq	r17,zero,b214 <__divdf3+0x6c4>
    ada8:	8809883a 	mov	r4,r17
    adac:	d9800315 	stw	r6,12(sp)
    adb0:	da400115 	stw	r9,4(sp)
    adb4:	000c8a80 	call	c8a8 <__clzsi2>
    adb8:	d9800317 	ldw	r6,12(sp)
    adbc:	da400117 	ldw	r9,4(sp)
    adc0:	113ffd44 	addi	r4,r2,-11
    adc4:	00c00704 	movi	r3,28
    adc8:	19010e16 	blt	r3,r4,b204 <__divdf3+0x6b4>
    adcc:	00c00744 	movi	r3,29
    add0:	123ffe04 	addi	r8,r2,-8
    add4:	1907c83a 	sub	r3,r3,r4
    add8:	8a22983a 	sll	r17,r17,r8
    addc:	30c6d83a 	srl	r3,r6,r3
    ade0:	3210983a 	sll	r8,r6,r8
    ade4:	1c62b03a 	or	r17,r3,r17
    ade8:	1080fcc4 	addi	r2,r2,1011
    adec:	0085c83a 	sub	r2,zero,r2
    adf0:	000f883a 	mov	r7,zero
    adf4:	003f8606 	br	ac10 <__divdf3+0xc0>
    adf8:	0023883a 	mov	r17,zero
    adfc:	0011883a 	mov	r8,zero
    ae00:	01c00044 	movi	r7,1
    ae04:	003f8206 	br	ac10 <__divdf3+0xc0>
    ae08:	01c000c4 	movi	r7,3
    ae0c:	003f8006 	br	ac10 <__divdf3+0xc0>
    ae10:	04c00104 	movi	r19,4
    ae14:	0021883a 	mov	r16,zero
    ae18:	0025883a 	mov	r18,zero
    ae1c:	02400044 	movi	r9,1
    ae20:	003f6906 	br	abc8 <__divdf3+0x78>
    ae24:	04c00304 	movi	r19,12
    ae28:	024000c4 	movi	r9,3
    ae2c:	003f6606 	br	abc8 <__divdf3+0x78>
    ae30:	01400434 	movhi	r5,16
    ae34:	0007883a 	mov	r3,zero
    ae38:	297fffc4 	addi	r5,r5,-1
    ae3c:	04bfffc4 	movi	r18,-1
    ae40:	0081ffc4 	movi	r2,2047
    ae44:	003fa106 	br	accc <__divdf3+0x17c>
    ae48:	00c00044 	movi	r3,1
    ae4c:	1887c83a 	sub	r3,r3,r2
    ae50:	01000e04 	movi	r4,56
    ae54:	20c1210e 	bge	r4,r3,b2dc <__divdf3+0x78c>
    ae58:	98c0004c 	andi	r3,r19,1
    ae5c:	0005883a 	mov	r2,zero
    ae60:	000b883a 	mov	r5,zero
    ae64:	0025883a 	mov	r18,zero
    ae68:	003f9806 	br	accc <__divdf3+0x17c>
    ae6c:	8c00fd36 	bltu	r17,r16,b264 <__divdf3+0x714>
    ae70:	8440fb26 	beq	r16,r17,b260 <__divdf3+0x710>
    ae74:	8007883a 	mov	r3,r16
    ae78:	ad7fffc4 	addi	r21,r21,-1
    ae7c:	0021883a 	mov	r16,zero
    ae80:	4004d63a 	srli	r2,r8,24
    ae84:	8822923a 	slli	r17,r17,8
    ae88:	1809883a 	mov	r4,r3
    ae8c:	402c923a 	slli	r22,r8,8
    ae90:	88b8b03a 	or	fp,r17,r2
    ae94:	e028d43a 	srli	r20,fp,16
    ae98:	d8c00015 	stw	r3,0(sp)
    ae9c:	e5ffffcc 	andi	r23,fp,65535
    aea0:	a00b883a 	mov	r5,r20
    aea4:	000a1e80 	call	a1e8 <__udivsi3>
    aea8:	d8c00017 	ldw	r3,0(sp)
    aeac:	a00b883a 	mov	r5,r20
    aeb0:	d8800315 	stw	r2,12(sp)
    aeb4:	1809883a 	mov	r4,r3
    aeb8:	000a24c0 	call	a24c <__umodsi3>
    aebc:	d9800317 	ldw	r6,12(sp)
    aec0:	1006943a 	slli	r3,r2,16
    aec4:	9004d43a 	srli	r2,r18,16
    aec8:	b9a3383a 	mul	r17,r23,r6
    aecc:	10c4b03a 	or	r2,r2,r3
    aed0:	1440062e 	bgeu	r2,r17,aeec <__divdf3+0x39c>
    aed4:	1705883a 	add	r2,r2,fp
    aed8:	30ffffc4 	addi	r3,r6,-1
    aedc:	1700ee36 	bltu	r2,fp,b298 <__divdf3+0x748>
    aee0:	1440ed2e 	bgeu	r2,r17,b298 <__divdf3+0x748>
    aee4:	31bfff84 	addi	r6,r6,-2
    aee8:	1705883a 	add	r2,r2,fp
    aeec:	1463c83a 	sub	r17,r2,r17
    aef0:	a00b883a 	mov	r5,r20
    aef4:	8809883a 	mov	r4,r17
    aef8:	d9800315 	stw	r6,12(sp)
    aefc:	000a1e80 	call	a1e8 <__udivsi3>
    af00:	a00b883a 	mov	r5,r20
    af04:	8809883a 	mov	r4,r17
    af08:	d8800215 	stw	r2,8(sp)
    af0c:	000a24c0 	call	a24c <__umodsi3>
    af10:	d9c00217 	ldw	r7,8(sp)
    af14:	1004943a 	slli	r2,r2,16
    af18:	94bfffcc 	andi	r18,r18,65535
    af1c:	b9d1383a 	mul	r8,r23,r7
    af20:	90a4b03a 	or	r18,r18,r2
    af24:	d9800317 	ldw	r6,12(sp)
    af28:	9200062e 	bgeu	r18,r8,af44 <__divdf3+0x3f4>
    af2c:	9725883a 	add	r18,r18,fp
    af30:	38bfffc4 	addi	r2,r7,-1
    af34:	9700d636 	bltu	r18,fp,b290 <__divdf3+0x740>
    af38:	9200d52e 	bgeu	r18,r8,b290 <__divdf3+0x740>
    af3c:	39ffff84 	addi	r7,r7,-2
    af40:	9725883a 	add	r18,r18,fp
    af44:	3004943a 	slli	r2,r6,16
    af48:	b012d43a 	srli	r9,r22,16
    af4c:	b1bfffcc 	andi	r6,r22,65535
    af50:	11e2b03a 	or	r17,r2,r7
    af54:	8806d43a 	srli	r3,r17,16
    af58:	893fffcc 	andi	r4,r17,65535
    af5c:	218b383a 	mul	r5,r4,r6
    af60:	30c5383a 	mul	r2,r6,r3
    af64:	2249383a 	mul	r4,r4,r9
    af68:	280ed43a 	srli	r7,r5,16
    af6c:	9225c83a 	sub	r18,r18,r8
    af70:	2089883a 	add	r4,r4,r2
    af74:	3909883a 	add	r4,r7,r4
    af78:	1a47383a 	mul	r3,r3,r9
    af7c:	2080022e 	bgeu	r4,r2,af88 <__divdf3+0x438>
    af80:	00800074 	movhi	r2,1
    af84:	1887883a 	add	r3,r3,r2
    af88:	2004d43a 	srli	r2,r4,16
    af8c:	2008943a 	slli	r4,r4,16
    af90:	297fffcc 	andi	r5,r5,65535
    af94:	10c7883a 	add	r3,r2,r3
    af98:	2149883a 	add	r4,r4,r5
    af9c:	90c0a536 	bltu	r18,r3,b234 <__divdf3+0x6e4>
    afa0:	90c0bf26 	beq	r18,r3,b2a0 <__divdf3+0x750>
    afa4:	90c7c83a 	sub	r3,r18,r3
    afa8:	810fc83a 	sub	r7,r16,r4
    afac:	81e5803a 	cmpltu	r18,r16,r7
    afb0:	1ca5c83a 	sub	r18,r3,r18
    afb4:	e480c126 	beq	fp,r18,b2bc <__divdf3+0x76c>
    afb8:	a00b883a 	mov	r5,r20
    afbc:	9009883a 	mov	r4,r18
    afc0:	d9800315 	stw	r6,12(sp)
    afc4:	d9c00215 	stw	r7,8(sp)
    afc8:	da400115 	stw	r9,4(sp)
    afcc:	000a1e80 	call	a1e8 <__udivsi3>
    afd0:	a00b883a 	mov	r5,r20
    afd4:	9009883a 	mov	r4,r18
    afd8:	d8800015 	stw	r2,0(sp)
    afdc:	000a24c0 	call	a24c <__umodsi3>
    afe0:	d9c00217 	ldw	r7,8(sp)
    afe4:	da000017 	ldw	r8,0(sp)
    afe8:	1006943a 	slli	r3,r2,16
    afec:	3804d43a 	srli	r2,r7,16
    aff0:	ba21383a 	mul	r16,r23,r8
    aff4:	d9800317 	ldw	r6,12(sp)
    aff8:	10c4b03a 	or	r2,r2,r3
    affc:	da400117 	ldw	r9,4(sp)
    b000:	1400062e 	bgeu	r2,r16,b01c <__divdf3+0x4cc>
    b004:	1705883a 	add	r2,r2,fp
    b008:	40ffffc4 	addi	r3,r8,-1
    b00c:	1700ad36 	bltu	r2,fp,b2c4 <__divdf3+0x774>
    b010:	1400ac2e 	bgeu	r2,r16,b2c4 <__divdf3+0x774>
    b014:	423fff84 	addi	r8,r8,-2
    b018:	1705883a 	add	r2,r2,fp
    b01c:	1421c83a 	sub	r16,r2,r16
    b020:	a00b883a 	mov	r5,r20
    b024:	8009883a 	mov	r4,r16
    b028:	d9800315 	stw	r6,12(sp)
    b02c:	d9c00215 	stw	r7,8(sp)
    b030:	da000015 	stw	r8,0(sp)
    b034:	da400115 	stw	r9,4(sp)
    b038:	000a1e80 	call	a1e8 <__udivsi3>
    b03c:	8009883a 	mov	r4,r16
    b040:	a00b883a 	mov	r5,r20
    b044:	1025883a 	mov	r18,r2
    b048:	000a24c0 	call	a24c <__umodsi3>
    b04c:	d9c00217 	ldw	r7,8(sp)
    b050:	1004943a 	slli	r2,r2,16
    b054:	bcaf383a 	mul	r23,r23,r18
    b058:	393fffcc 	andi	r4,r7,65535
    b05c:	2088b03a 	or	r4,r4,r2
    b060:	d9800317 	ldw	r6,12(sp)
    b064:	da000017 	ldw	r8,0(sp)
    b068:	da400117 	ldw	r9,4(sp)
    b06c:	25c0062e 	bgeu	r4,r23,b088 <__divdf3+0x538>
    b070:	2709883a 	add	r4,r4,fp
    b074:	90bfffc4 	addi	r2,r18,-1
    b078:	27009436 	bltu	r4,fp,b2cc <__divdf3+0x77c>
    b07c:	25c0932e 	bgeu	r4,r23,b2cc <__divdf3+0x77c>
    b080:	94bfff84 	addi	r18,r18,-2
    b084:	2709883a 	add	r4,r4,fp
    b088:	4004943a 	slli	r2,r8,16
    b08c:	25efc83a 	sub	r23,r4,r23
    b090:	1490b03a 	or	r8,r2,r18
    b094:	4008d43a 	srli	r4,r8,16
    b098:	40ffffcc 	andi	r3,r8,65535
    b09c:	30c5383a 	mul	r2,r6,r3
    b0a0:	1a47383a 	mul	r3,r3,r9
    b0a4:	310d383a 	mul	r6,r6,r4
    b0a8:	100ad43a 	srli	r5,r2,16
    b0ac:	4913383a 	mul	r9,r9,r4
    b0b0:	1987883a 	add	r3,r3,r6
    b0b4:	28c7883a 	add	r3,r5,r3
    b0b8:	1980022e 	bgeu	r3,r6,b0c4 <__divdf3+0x574>
    b0bc:	01000074 	movhi	r4,1
    b0c0:	4913883a 	add	r9,r9,r4
    b0c4:	1808d43a 	srli	r4,r3,16
    b0c8:	1806943a 	slli	r3,r3,16
    b0cc:	10bfffcc 	andi	r2,r2,65535
    b0d0:	2253883a 	add	r9,r4,r9
    b0d4:	1887883a 	add	r3,r3,r2
    b0d8:	ba403836 	bltu	r23,r9,b1bc <__divdf3+0x66c>
    b0dc:	ba403626 	beq	r23,r9,b1b8 <__divdf3+0x668>
    b0e0:	42000054 	ori	r8,r8,1
    b0e4:	a880ffc4 	addi	r2,r21,1023
    b0e8:	00bf570e 	bge	zero,r2,ae48 <__divdf3+0x2f8>
    b0ec:	40c001cc 	andi	r3,r8,7
    b0f0:	18000726 	beq	r3,zero,b110 <__divdf3+0x5c0>
    b0f4:	40c003cc 	andi	r3,r8,15
    b0f8:	01000104 	movi	r4,4
    b0fc:	19000426 	beq	r3,r4,b110 <__divdf3+0x5c0>
    b100:	4107883a 	add	r3,r8,r4
    b104:	1a11803a 	cmpltu	r8,r3,r8
    b108:	8a23883a 	add	r17,r17,r8
    b10c:	1811883a 	mov	r8,r3
    b110:	88c0402c 	andhi	r3,r17,256
    b114:	18000426 	beq	r3,zero,b128 <__divdf3+0x5d8>
    b118:	00ffc034 	movhi	r3,65280
    b11c:	18ffffc4 	addi	r3,r3,-1
    b120:	a8810004 	addi	r2,r21,1024
    b124:	88e2703a 	and	r17,r17,r3
    b128:	00c1ff84 	movi	r3,2046
    b12c:	18bee316 	blt	r3,r2,acbc <__divdf3+0x16c>
    b130:	8824977a 	slli	r18,r17,29
    b134:	4010d0fa 	srli	r8,r8,3
    b138:	8822927a 	slli	r17,r17,9
    b13c:	1081ffcc 	andi	r2,r2,2047
    b140:	9224b03a 	or	r18,r18,r8
    b144:	880ad33a 	srli	r5,r17,12
    b148:	98c0004c 	andi	r3,r19,1
    b14c:	003edf06 	br	accc <__divdf3+0x17c>
    b150:	8080022c 	andhi	r2,r16,8
    b154:	10001226 	beq	r2,zero,b1a0 <__divdf3+0x650>
    b158:	8880022c 	andhi	r2,r17,8
    b15c:	1000101e 	bne	r2,zero,b1a0 <__divdf3+0x650>
    b160:	00800434 	movhi	r2,16
    b164:	89400234 	orhi	r5,r17,8
    b168:	10bfffc4 	addi	r2,r2,-1
    b16c:	b007883a 	mov	r3,r22
    b170:	288a703a 	and	r5,r5,r2
    b174:	4025883a 	mov	r18,r8
    b178:	003f3106 	br	ae40 <__divdf3+0x2f0>
    b17c:	008000c4 	movi	r2,3
    b180:	3880a626 	beq	r7,r2,b41c <__divdf3+0x8cc>
    b184:	00800044 	movi	r2,1
    b188:	3880521e 	bne	r7,r2,b2d4 <__divdf3+0x784>
    b18c:	b807883a 	mov	r3,r23
    b190:	0005883a 	mov	r2,zero
    b194:	000b883a 	mov	r5,zero
    b198:	0025883a 	mov	r18,zero
    b19c:	003ecb06 	br	accc <__divdf3+0x17c>
    b1a0:	00800434 	movhi	r2,16
    b1a4:	81400234 	orhi	r5,r16,8
    b1a8:	10bfffc4 	addi	r2,r2,-1
    b1ac:	a007883a 	mov	r3,r20
    b1b0:	288a703a 	and	r5,r5,r2
    b1b4:	003f2206 	br	ae40 <__divdf3+0x2f0>
    b1b8:	183fca26 	beq	r3,zero,b0e4 <__divdf3+0x594>
    b1bc:	e5ef883a 	add	r23,fp,r23
    b1c0:	40bfffc4 	addi	r2,r8,-1
    b1c4:	bf00392e 	bgeu	r23,fp,b2ac <__divdf3+0x75c>
    b1c8:	1011883a 	mov	r8,r2
    b1cc:	ba7fc41e 	bne	r23,r9,b0e0 <__divdf3+0x590>
    b1d0:	b0ffc31e 	bne	r22,r3,b0e0 <__divdf3+0x590>
    b1d4:	003fc306 	br	b0e4 <__divdf3+0x594>
    b1d8:	143ff604 	addi	r16,r2,-40
    b1dc:	9c20983a 	sll	r16,r19,r16
    b1e0:	0025883a 	mov	r18,zero
    b1e4:	003ee206 	br	ad70 <__divdf3+0x220>
    b1e8:	d9800315 	stw	r6,12(sp)
    b1ec:	d9c00215 	stw	r7,8(sp)
    b1f0:	000c8a80 	call	c8a8 <__clzsi2>
    b1f4:	10800804 	addi	r2,r2,32
    b1f8:	d9c00217 	ldw	r7,8(sp)
    b1fc:	d9800317 	ldw	r6,12(sp)
    b200:	003ed106 	br	ad48 <__divdf3+0x1f8>
    b204:	147ff604 	addi	r17,r2,-40
    b208:	3462983a 	sll	r17,r6,r17
    b20c:	0011883a 	mov	r8,zero
    b210:	003ef506 	br	ade8 <__divdf3+0x298>
    b214:	3009883a 	mov	r4,r6
    b218:	d9800315 	stw	r6,12(sp)
    b21c:	da400115 	stw	r9,4(sp)
    b220:	000c8a80 	call	c8a8 <__clzsi2>
    b224:	10800804 	addi	r2,r2,32
    b228:	da400117 	ldw	r9,4(sp)
    b22c:	d9800317 	ldw	r6,12(sp)
    b230:	003ee306 	br	adc0 <__divdf3+0x270>
    b234:	85a1883a 	add	r16,r16,r22
    b238:	8585803a 	cmpltu	r2,r16,r22
    b23c:	1705883a 	add	r2,r2,fp
    b240:	14a5883a 	add	r18,r2,r18
    b244:	88bfffc4 	addi	r2,r17,-1
    b248:	e4800c2e 	bgeu	fp,r18,b27c <__divdf3+0x72c>
    b24c:	90c03e36 	bltu	r18,r3,b348 <__divdf3+0x7f8>
    b250:	1c806926 	beq	r3,r18,b3f8 <__divdf3+0x8a8>
    b254:	90c7c83a 	sub	r3,r18,r3
    b258:	1023883a 	mov	r17,r2
    b25c:	003f5206 	br	afa8 <__divdf3+0x458>
    b260:	923f0436 	bltu	r18,r8,ae74 <__divdf3+0x324>
    b264:	800897fa 	slli	r4,r16,31
    b268:	9004d07a 	srli	r2,r18,1
    b26c:	8006d07a 	srli	r3,r16,1
    b270:	902097fa 	slli	r16,r18,31
    b274:	20a4b03a 	or	r18,r4,r2
    b278:	003f0106 	br	ae80 <__divdf3+0x330>
    b27c:	e4bff51e 	bne	fp,r18,b254 <__divdf3+0x704>
    b280:	85bff22e 	bgeu	r16,r22,b24c <__divdf3+0x6fc>
    b284:	e0c7c83a 	sub	r3,fp,r3
    b288:	1023883a 	mov	r17,r2
    b28c:	003f4606 	br	afa8 <__divdf3+0x458>
    b290:	100f883a 	mov	r7,r2
    b294:	003f2b06 	br	af44 <__divdf3+0x3f4>
    b298:	180d883a 	mov	r6,r3
    b29c:	003f1306 	br	aeec <__divdf3+0x39c>
    b2a0:	813fe436 	bltu	r16,r4,b234 <__divdf3+0x6e4>
    b2a4:	0007883a 	mov	r3,zero
    b2a8:	003f3f06 	br	afa8 <__divdf3+0x458>
    b2ac:	ba402c36 	bltu	r23,r9,b360 <__divdf3+0x810>
    b2b0:	4dc05426 	beq	r9,r23,b404 <__divdf3+0x8b4>
    b2b4:	1011883a 	mov	r8,r2
    b2b8:	003f8906 	br	b0e0 <__divdf3+0x590>
    b2bc:	023fffc4 	movi	r8,-1
    b2c0:	003f8806 	br	b0e4 <__divdf3+0x594>
    b2c4:	1811883a 	mov	r8,r3
    b2c8:	003f5406 	br	b01c <__divdf3+0x4cc>
    b2cc:	1025883a 	mov	r18,r2
    b2d0:	003f6d06 	br	b088 <__divdf3+0x538>
    b2d4:	b827883a 	mov	r19,r23
    b2d8:	003f8206 	br	b0e4 <__divdf3+0x594>
    b2dc:	010007c4 	movi	r4,31
    b2e0:	20c02616 	blt	r4,r3,b37c <__divdf3+0x82c>
    b2e4:	00800804 	movi	r2,32
    b2e8:	10c5c83a 	sub	r2,r2,r3
    b2ec:	888a983a 	sll	r5,r17,r2
    b2f0:	40c8d83a 	srl	r4,r8,r3
    b2f4:	4084983a 	sll	r2,r8,r2
    b2f8:	88e2d83a 	srl	r17,r17,r3
    b2fc:	2906b03a 	or	r3,r5,r4
    b300:	1004c03a 	cmpne	r2,r2,zero
    b304:	1886b03a 	or	r3,r3,r2
    b308:	188001cc 	andi	r2,r3,7
    b30c:	10000726 	beq	r2,zero,b32c <__divdf3+0x7dc>
    b310:	188003cc 	andi	r2,r3,15
    b314:	01000104 	movi	r4,4
    b318:	11000426 	beq	r2,r4,b32c <__divdf3+0x7dc>
    b31c:	1805883a 	mov	r2,r3
    b320:	10c00104 	addi	r3,r2,4
    b324:	1885803a 	cmpltu	r2,r3,r2
    b328:	88a3883a 	add	r17,r17,r2
    b32c:	8880202c 	andhi	r2,r17,128
    b330:	10002726 	beq	r2,zero,b3d0 <__divdf3+0x880>
    b334:	98c0004c 	andi	r3,r19,1
    b338:	00800044 	movi	r2,1
    b33c:	000b883a 	mov	r5,zero
    b340:	0025883a 	mov	r18,zero
    b344:	003e6106 	br	accc <__divdf3+0x17c>
    b348:	85a1883a 	add	r16,r16,r22
    b34c:	8585803a 	cmpltu	r2,r16,r22
    b350:	1705883a 	add	r2,r2,fp
    b354:	14a5883a 	add	r18,r2,r18
    b358:	8c7fff84 	addi	r17,r17,-2
    b35c:	003f1106 	br	afa4 <__divdf3+0x454>
    b360:	b589883a 	add	r4,r22,r22
    b364:	25ad803a 	cmpltu	r22,r4,r22
    b368:	b739883a 	add	fp,r22,fp
    b36c:	40bfff84 	addi	r2,r8,-2
    b370:	bf2f883a 	add	r23,r23,fp
    b374:	202d883a 	mov	r22,r4
    b378:	003f9306 	br	b1c8 <__divdf3+0x678>
    b37c:	013ff844 	movi	r4,-31
    b380:	2085c83a 	sub	r2,r4,r2
    b384:	8888d83a 	srl	r4,r17,r2
    b388:	00800804 	movi	r2,32
    b38c:	18802126 	beq	r3,r2,b414 <__divdf3+0x8c4>
    b390:	00801004 	movi	r2,64
    b394:	10c5c83a 	sub	r2,r2,r3
    b398:	8884983a 	sll	r2,r17,r2
    b39c:	1204b03a 	or	r2,r2,r8
    b3a0:	1004c03a 	cmpne	r2,r2,zero
    b3a4:	2084b03a 	or	r2,r4,r2
    b3a8:	144001cc 	andi	r17,r2,7
    b3ac:	88000d1e 	bne	r17,zero,b3e4 <__divdf3+0x894>
    b3b0:	000b883a 	mov	r5,zero
    b3b4:	1024d0fa 	srli	r18,r2,3
    b3b8:	98c0004c 	andi	r3,r19,1
    b3bc:	0005883a 	mov	r2,zero
    b3c0:	9464b03a 	or	r18,r18,r17
    b3c4:	003e4106 	br	accc <__divdf3+0x17c>
    b3c8:	1007883a 	mov	r3,r2
    b3cc:	0023883a 	mov	r17,zero
    b3d0:	880a927a 	slli	r5,r17,9
    b3d4:	1805883a 	mov	r2,r3
    b3d8:	8822977a 	slli	r17,r17,29
    b3dc:	280ad33a 	srli	r5,r5,12
    b3e0:	003ff406 	br	b3b4 <__divdf3+0x864>
    b3e4:	10c003cc 	andi	r3,r2,15
    b3e8:	01000104 	movi	r4,4
    b3ec:	193ff626 	beq	r3,r4,b3c8 <__divdf3+0x878>
    b3f0:	0023883a 	mov	r17,zero
    b3f4:	003fca06 	br	b320 <__divdf3+0x7d0>
    b3f8:	813fd336 	bltu	r16,r4,b348 <__divdf3+0x7f8>
    b3fc:	1023883a 	mov	r17,r2
    b400:	003fa806 	br	b2a4 <__divdf3+0x754>
    b404:	b0ffd636 	bltu	r22,r3,b360 <__divdf3+0x810>
    b408:	1011883a 	mov	r8,r2
    b40c:	b0ff341e 	bne	r22,r3,b0e0 <__divdf3+0x590>
    b410:	003f3406 	br	b0e4 <__divdf3+0x594>
    b414:	0005883a 	mov	r2,zero
    b418:	003fe006 	br	b39c <__divdf3+0x84c>
    b41c:	00800434 	movhi	r2,16
    b420:	89400234 	orhi	r5,r17,8
    b424:	10bfffc4 	addi	r2,r2,-1
    b428:	b807883a 	mov	r3,r23
    b42c:	288a703a 	and	r5,r5,r2
    b430:	4025883a 	mov	r18,r8
    b434:	003e8206 	br	ae40 <__divdf3+0x2f0>

0000b438 <__eqdf2>:
    b438:	2804d53a 	srli	r2,r5,20
    b43c:	3806d53a 	srli	r3,r7,20
    b440:	02000434 	movhi	r8,16
    b444:	423fffc4 	addi	r8,r8,-1
    b448:	1081ffcc 	andi	r2,r2,2047
    b44c:	0281ffc4 	movi	r10,2047
    b450:	2a12703a 	and	r9,r5,r8
    b454:	18c1ffcc 	andi	r3,r3,2047
    b458:	3a10703a 	and	r8,r7,r8
    b45c:	280ad7fa 	srli	r5,r5,31
    b460:	380ed7fa 	srli	r7,r7,31
    b464:	12801026 	beq	r2,r10,b4a8 <__eqdf2+0x70>
    b468:	0281ffc4 	movi	r10,2047
    b46c:	1a800a26 	beq	r3,r10,b498 <__eqdf2+0x60>
    b470:	10c00226 	beq	r2,r3,b47c <__eqdf2+0x44>
    b474:	00800044 	movi	r2,1
    b478:	f800283a 	ret
    b47c:	4a3ffd1e 	bne	r9,r8,b474 <__eqdf2+0x3c>
    b480:	21bffc1e 	bne	r4,r6,b474 <__eqdf2+0x3c>
    b484:	29c00c26 	beq	r5,r7,b4b8 <__eqdf2+0x80>
    b488:	103ffa1e 	bne	r2,zero,b474 <__eqdf2+0x3c>
    b48c:	2244b03a 	or	r2,r4,r9
    b490:	1004c03a 	cmpne	r2,r2,zero
    b494:	f800283a 	ret
    b498:	3214b03a 	or	r10,r6,r8
    b49c:	503ff426 	beq	r10,zero,b470 <__eqdf2+0x38>
    b4a0:	00800044 	movi	r2,1
    b4a4:	f800283a 	ret
    b4a8:	2254b03a 	or	r10,r4,r9
    b4ac:	503fee26 	beq	r10,zero,b468 <__eqdf2+0x30>
    b4b0:	00800044 	movi	r2,1
    b4b4:	f800283a 	ret
    b4b8:	0005883a 	mov	r2,zero
    b4bc:	f800283a 	ret

0000b4c0 <__gedf2>:
    b4c0:	2804d53a 	srli	r2,r5,20
    b4c4:	3806d53a 	srli	r3,r7,20
    b4c8:	02000434 	movhi	r8,16
    b4cc:	423fffc4 	addi	r8,r8,-1
    b4d0:	1081ffcc 	andi	r2,r2,2047
    b4d4:	0241ffc4 	movi	r9,2047
    b4d8:	2a14703a 	and	r10,r5,r8
    b4dc:	18c1ffcc 	andi	r3,r3,2047
    b4e0:	3a10703a 	and	r8,r7,r8
    b4e4:	280ad7fa 	srli	r5,r5,31
    b4e8:	380ed7fa 	srli	r7,r7,31
    b4ec:	12401d26 	beq	r2,r9,b564 <__gedf2+0xa4>
    b4f0:	0241ffc4 	movi	r9,2047
    b4f4:	1a401226 	beq	r3,r9,b540 <__gedf2+0x80>
    b4f8:	1000081e 	bne	r2,zero,b51c <__gedf2+0x5c>
    b4fc:	2296b03a 	or	r11,r4,r10
    b500:	5813003a 	cmpeq	r9,r11,zero
    b504:	1800091e 	bne	r3,zero,b52c <__gedf2+0x6c>
    b508:	3218b03a 	or	r12,r6,r8
    b50c:	6000071e 	bne	r12,zero,b52c <__gedf2+0x6c>
    b510:	0005883a 	mov	r2,zero
    b514:	5800101e 	bne	r11,zero,b558 <__gedf2+0x98>
    b518:	f800283a 	ret
    b51c:	18000c1e 	bne	r3,zero,b550 <__gedf2+0x90>
    b520:	3212b03a 	or	r9,r6,r8
    b524:	48000c26 	beq	r9,zero,b558 <__gedf2+0x98>
    b528:	0013883a 	mov	r9,zero
    b52c:	39c03fcc 	andi	r7,r7,255
    b530:	48000826 	beq	r9,zero,b554 <__gedf2+0x94>
    b534:	38000926 	beq	r7,zero,b55c <__gedf2+0x9c>
    b538:	00800044 	movi	r2,1
    b53c:	f800283a 	ret
    b540:	3212b03a 	or	r9,r6,r8
    b544:	483fec26 	beq	r9,zero,b4f8 <__gedf2+0x38>
    b548:	00bfff84 	movi	r2,-2
    b54c:	f800283a 	ret
    b550:	39c03fcc 	andi	r7,r7,255
    b554:	29c00626 	beq	r5,r7,b570 <__gedf2+0xb0>
    b558:	283ff726 	beq	r5,zero,b538 <__gedf2+0x78>
    b55c:	00bfffc4 	movi	r2,-1
    b560:	f800283a 	ret
    b564:	2292b03a 	or	r9,r4,r10
    b568:	483fe126 	beq	r9,zero,b4f0 <__gedf2+0x30>
    b56c:	003ff606 	br	b548 <__gedf2+0x88>
    b570:	18bff916 	blt	r3,r2,b558 <__gedf2+0x98>
    b574:	10c00316 	blt	r2,r3,b584 <__gedf2+0xc4>
    b578:	42bff736 	bltu	r8,r10,b558 <__gedf2+0x98>
    b57c:	52000326 	beq	r10,r8,b58c <__gedf2+0xcc>
    b580:	5200042e 	bgeu	r10,r8,b594 <__gedf2+0xd4>
    b584:	283fec1e 	bne	r5,zero,b538 <__gedf2+0x78>
    b588:	003ff406 	br	b55c <__gedf2+0x9c>
    b58c:	313ff236 	bltu	r6,r4,b558 <__gedf2+0x98>
    b590:	21bffc36 	bltu	r4,r6,b584 <__gedf2+0xc4>
    b594:	0005883a 	mov	r2,zero
    b598:	f800283a 	ret

0000b59c <__ledf2>:
    b59c:	2804d53a 	srli	r2,r5,20
    b5a0:	3810d53a 	srli	r8,r7,20
    b5a4:	00c00434 	movhi	r3,16
    b5a8:	18ffffc4 	addi	r3,r3,-1
    b5ac:	1081ffcc 	andi	r2,r2,2047
    b5b0:	0241ffc4 	movi	r9,2047
    b5b4:	28d4703a 	and	r10,r5,r3
    b5b8:	4201ffcc 	andi	r8,r8,2047
    b5bc:	38c6703a 	and	r3,r7,r3
    b5c0:	280ad7fa 	srli	r5,r5,31
    b5c4:	380ed7fa 	srli	r7,r7,31
    b5c8:	12401f26 	beq	r2,r9,b648 <__ledf2+0xac>
    b5cc:	0241ffc4 	movi	r9,2047
    b5d0:	42401426 	beq	r8,r9,b624 <__ledf2+0x88>
    b5d4:	1000091e 	bne	r2,zero,b5fc <__ledf2+0x60>
    b5d8:	2296b03a 	or	r11,r4,r10
    b5dc:	5813003a 	cmpeq	r9,r11,zero
    b5e0:	29403fcc 	andi	r5,r5,255
    b5e4:	40000a1e 	bne	r8,zero,b610 <__ledf2+0x74>
    b5e8:	30d8b03a 	or	r12,r6,r3
    b5ec:	6000081e 	bne	r12,zero,b610 <__ledf2+0x74>
    b5f0:	0005883a 	mov	r2,zero
    b5f4:	5800111e 	bne	r11,zero,b63c <__ledf2+0xa0>
    b5f8:	f800283a 	ret
    b5fc:	29403fcc 	andi	r5,r5,255
    b600:	40000c1e 	bne	r8,zero,b634 <__ledf2+0x98>
    b604:	30d2b03a 	or	r9,r6,r3
    b608:	48000c26 	beq	r9,zero,b63c <__ledf2+0xa0>
    b60c:	0013883a 	mov	r9,zero
    b610:	39c03fcc 	andi	r7,r7,255
    b614:	48000826 	beq	r9,zero,b638 <__ledf2+0x9c>
    b618:	38001126 	beq	r7,zero,b660 <__ledf2+0xc4>
    b61c:	00800044 	movi	r2,1
    b620:	f800283a 	ret
    b624:	30d2b03a 	or	r9,r6,r3
    b628:	483fea26 	beq	r9,zero,b5d4 <__ledf2+0x38>
    b62c:	00800084 	movi	r2,2
    b630:	f800283a 	ret
    b634:	39c03fcc 	andi	r7,r7,255
    b638:	39400726 	beq	r7,r5,b658 <__ledf2+0xbc>
    b63c:	2800081e 	bne	r5,zero,b660 <__ledf2+0xc4>
    b640:	00800044 	movi	r2,1
    b644:	f800283a 	ret
    b648:	2292b03a 	or	r9,r4,r10
    b64c:	483fdf26 	beq	r9,zero,b5cc <__ledf2+0x30>
    b650:	00800084 	movi	r2,2
    b654:	f800283a 	ret
    b658:	4080030e 	bge	r8,r2,b668 <__ledf2+0xcc>
    b65c:	383fef26 	beq	r7,zero,b61c <__ledf2+0x80>
    b660:	00bfffc4 	movi	r2,-1
    b664:	f800283a 	ret
    b668:	123feb16 	blt	r2,r8,b618 <__ledf2+0x7c>
    b66c:	1abff336 	bltu	r3,r10,b63c <__ledf2+0xa0>
    b670:	50c00326 	beq	r10,r3,b680 <__ledf2+0xe4>
    b674:	50c0042e 	bgeu	r10,r3,b688 <__ledf2+0xec>
    b678:	283fe81e 	bne	r5,zero,b61c <__ledf2+0x80>
    b67c:	003ff806 	br	b660 <__ledf2+0xc4>
    b680:	313fee36 	bltu	r6,r4,b63c <__ledf2+0xa0>
    b684:	21bffc36 	bltu	r4,r6,b678 <__ledf2+0xdc>
    b688:	0005883a 	mov	r2,zero
    b68c:	f800283a 	ret

0000b690 <__muldf3>:
    b690:	defff304 	addi	sp,sp,-52
    b694:	2804d53a 	srli	r2,r5,20
    b698:	dd800915 	stw	r22,36(sp)
    b69c:	282cd7fa 	srli	r22,r5,31
    b6a0:	dc000315 	stw	r16,12(sp)
    b6a4:	04000434 	movhi	r16,16
    b6a8:	dd400815 	stw	r21,32(sp)
    b6ac:	dc800515 	stw	r18,20(sp)
    b6b0:	843fffc4 	addi	r16,r16,-1
    b6b4:	dfc00c15 	stw	ra,48(sp)
    b6b8:	df000b15 	stw	fp,44(sp)
    b6bc:	ddc00a15 	stw	r23,40(sp)
    b6c0:	dd000715 	stw	r20,28(sp)
    b6c4:	dcc00615 	stw	r19,24(sp)
    b6c8:	dc400415 	stw	r17,16(sp)
    b6cc:	1481ffcc 	andi	r18,r2,2047
    b6d0:	2c20703a 	and	r16,r5,r16
    b6d4:	b02b883a 	mov	r21,r22
    b6d8:	b2403fcc 	andi	r9,r22,255
    b6dc:	90006026 	beq	r18,zero,b860 <__muldf3+0x1d0>
    b6e0:	0081ffc4 	movi	r2,2047
    b6e4:	2029883a 	mov	r20,r4
    b6e8:	90803626 	beq	r18,r2,b7c4 <__muldf3+0x134>
    b6ec:	80800434 	orhi	r2,r16,16
    b6f0:	100490fa 	slli	r2,r2,3
    b6f4:	2020d77a 	srli	r16,r4,29
    b6f8:	202890fa 	slli	r20,r4,3
    b6fc:	94bf0044 	addi	r18,r18,-1023
    b700:	80a0b03a 	or	r16,r16,r2
    b704:	0027883a 	mov	r19,zero
    b708:	0039883a 	mov	fp,zero
    b70c:	3804d53a 	srli	r2,r7,20
    b710:	382ed7fa 	srli	r23,r7,31
    b714:	04400434 	movhi	r17,16
    b718:	8c7fffc4 	addi	r17,r17,-1
    b71c:	1081ffcc 	andi	r2,r2,2047
    b720:	3011883a 	mov	r8,r6
    b724:	3c62703a 	and	r17,r7,r17
    b728:	ba803fcc 	andi	r10,r23,255
    b72c:	10006d26 	beq	r2,zero,b8e4 <__muldf3+0x254>
    b730:	00c1ffc4 	movi	r3,2047
    b734:	10c06526 	beq	r2,r3,b8cc <__muldf3+0x23c>
    b738:	88c00434 	orhi	r3,r17,16
    b73c:	180690fa 	slli	r3,r3,3
    b740:	3022d77a 	srli	r17,r6,29
    b744:	301090fa 	slli	r8,r6,3
    b748:	10bf0044 	addi	r2,r2,-1023
    b74c:	88e2b03a 	or	r17,r17,r3
    b750:	000b883a 	mov	r5,zero
    b754:	9085883a 	add	r2,r18,r2
    b758:	2cc8b03a 	or	r4,r5,r19
    b75c:	00c003c4 	movi	r3,15
    b760:	bdacf03a 	xor	r22,r23,r22
    b764:	12c00044 	addi	r11,r2,1
    b768:	19009936 	bltu	r3,r4,b9d0 <__muldf3+0x340>
    b76c:	200890ba 	slli	r4,r4,2
    b770:	00c00074 	movhi	r3,1
    b774:	18ede104 	addi	r3,r3,-18556
    b778:	20c9883a 	add	r4,r4,r3
    b77c:	20c00017 	ldw	r3,0(r4)
    b780:	1800683a 	jmp	r3
    b784:	0000b9d0 	cmplti	zero,zero,743
    b788:	0000b7e4 	muli	zero,zero,735
    b78c:	0000b7e4 	muli	zero,zero,735
    b790:	0000b7e0 	cmpeqi	zero,zero,735
    b794:	0000b9ac 	andhi	zero,zero,742
    b798:	0000b9ac 	andhi	zero,zero,742
    b79c:	0000b994 	movui	zero,742
    b7a0:	0000b7e0 	cmpeqi	zero,zero,735
    b7a4:	0000b9ac 	andhi	zero,zero,742
    b7a8:	0000b994 	movui	zero,742
    b7ac:	0000b9ac 	andhi	zero,zero,742
    b7b0:	0000b7e0 	cmpeqi	zero,zero,735
    b7b4:	0000b9bc 	xorhi	zero,zero,742
    b7b8:	0000b9bc 	xorhi	zero,zero,742
    b7bc:	0000b9bc 	xorhi	zero,zero,742
    b7c0:	0000bbd8 	cmpnei	zero,zero,751
    b7c4:	2404b03a 	or	r2,r4,r16
    b7c8:	10006f1e 	bne	r2,zero,b988 <__muldf3+0x2f8>
    b7cc:	04c00204 	movi	r19,8
    b7d0:	0021883a 	mov	r16,zero
    b7d4:	0029883a 	mov	r20,zero
    b7d8:	07000084 	movi	fp,2
    b7dc:	003fcb06 	br	b70c <__muldf3+0x7c>
    b7e0:	502d883a 	mov	r22,r10
    b7e4:	00800084 	movi	r2,2
    b7e8:	28805726 	beq	r5,r2,b948 <__muldf3+0x2b8>
    b7ec:	008000c4 	movi	r2,3
    b7f0:	28816626 	beq	r5,r2,bd8c <__muldf3+0x6fc>
    b7f4:	00800044 	movi	r2,1
    b7f8:	2881411e 	bne	r5,r2,bd00 <__muldf3+0x670>
    b7fc:	b02b883a 	mov	r21,r22
    b800:	0005883a 	mov	r2,zero
    b804:	000b883a 	mov	r5,zero
    b808:	0029883a 	mov	r20,zero
    b80c:	1004953a 	slli	r2,r2,20
    b810:	a8c03fcc 	andi	r3,r21,255
    b814:	04400434 	movhi	r17,16
    b818:	8c7fffc4 	addi	r17,r17,-1
    b81c:	180697fa 	slli	r3,r3,31
    b820:	2c4a703a 	and	r5,r5,r17
    b824:	288ab03a 	or	r5,r5,r2
    b828:	28c6b03a 	or	r3,r5,r3
    b82c:	a005883a 	mov	r2,r20
    b830:	dfc00c17 	ldw	ra,48(sp)
    b834:	df000b17 	ldw	fp,44(sp)
    b838:	ddc00a17 	ldw	r23,40(sp)
    b83c:	dd800917 	ldw	r22,36(sp)
    b840:	dd400817 	ldw	r21,32(sp)
    b844:	dd000717 	ldw	r20,28(sp)
    b848:	dcc00617 	ldw	r19,24(sp)
    b84c:	dc800517 	ldw	r18,20(sp)
    b850:	dc400417 	ldw	r17,16(sp)
    b854:	dc000317 	ldw	r16,12(sp)
    b858:	dec00d04 	addi	sp,sp,52
    b85c:	f800283a 	ret
    b860:	2404b03a 	or	r2,r4,r16
    b864:	2027883a 	mov	r19,r4
    b868:	10004226 	beq	r2,zero,b974 <__muldf3+0x2e4>
    b86c:	8000fc26 	beq	r16,zero,bc60 <__muldf3+0x5d0>
    b870:	8009883a 	mov	r4,r16
    b874:	d9800215 	stw	r6,8(sp)
    b878:	d9c00015 	stw	r7,0(sp)
    b87c:	da400115 	stw	r9,4(sp)
    b880:	000c8a80 	call	c8a8 <__clzsi2>
    b884:	d9800217 	ldw	r6,8(sp)
    b888:	d9c00017 	ldw	r7,0(sp)
    b88c:	da400117 	ldw	r9,4(sp)
    b890:	113ffd44 	addi	r4,r2,-11
    b894:	00c00704 	movi	r3,28
    b898:	1900ed16 	blt	r3,r4,bc50 <__muldf3+0x5c0>
    b89c:	00c00744 	movi	r3,29
    b8a0:	147ffe04 	addi	r17,r2,-8
    b8a4:	1907c83a 	sub	r3,r3,r4
    b8a8:	8460983a 	sll	r16,r16,r17
    b8ac:	98c6d83a 	srl	r3,r19,r3
    b8b0:	9c68983a 	sll	r20,r19,r17
    b8b4:	1c20b03a 	or	r16,r3,r16
    b8b8:	1080fcc4 	addi	r2,r2,1011
    b8bc:	00a5c83a 	sub	r18,zero,r2
    b8c0:	0027883a 	mov	r19,zero
    b8c4:	0039883a 	mov	fp,zero
    b8c8:	003f9006 	br	b70c <__muldf3+0x7c>
    b8cc:	3446b03a 	or	r3,r6,r17
    b8d0:	1800261e 	bne	r3,zero,b96c <__muldf3+0x2dc>
    b8d4:	0023883a 	mov	r17,zero
    b8d8:	0011883a 	mov	r8,zero
    b8dc:	01400084 	movi	r5,2
    b8e0:	003f9c06 	br	b754 <__muldf3+0xc4>
    b8e4:	3446b03a 	or	r3,r6,r17
    b8e8:	18001c26 	beq	r3,zero,b95c <__muldf3+0x2cc>
    b8ec:	8800ce26 	beq	r17,zero,bc28 <__muldf3+0x598>
    b8f0:	8809883a 	mov	r4,r17
    b8f4:	d9800215 	stw	r6,8(sp)
    b8f8:	da400115 	stw	r9,4(sp)
    b8fc:	da800015 	stw	r10,0(sp)
    b900:	000c8a80 	call	c8a8 <__clzsi2>
    b904:	d9800217 	ldw	r6,8(sp)
    b908:	da400117 	ldw	r9,4(sp)
    b90c:	da800017 	ldw	r10,0(sp)
    b910:	113ffd44 	addi	r4,r2,-11
    b914:	00c00704 	movi	r3,28
    b918:	1900bf16 	blt	r3,r4,bc18 <__muldf3+0x588>
    b91c:	00c00744 	movi	r3,29
    b920:	123ffe04 	addi	r8,r2,-8
    b924:	1907c83a 	sub	r3,r3,r4
    b928:	8a22983a 	sll	r17,r17,r8
    b92c:	30c6d83a 	srl	r3,r6,r3
    b930:	3210983a 	sll	r8,r6,r8
    b934:	1c62b03a 	or	r17,r3,r17
    b938:	1080fcc4 	addi	r2,r2,1011
    b93c:	0085c83a 	sub	r2,zero,r2
    b940:	000b883a 	mov	r5,zero
    b944:	003f8306 	br	b754 <__muldf3+0xc4>
    b948:	b02b883a 	mov	r21,r22
    b94c:	0081ffc4 	movi	r2,2047
    b950:	000b883a 	mov	r5,zero
    b954:	0029883a 	mov	r20,zero
    b958:	003fac06 	br	b80c <__muldf3+0x17c>
    b95c:	0023883a 	mov	r17,zero
    b960:	0011883a 	mov	r8,zero
    b964:	01400044 	movi	r5,1
    b968:	003f7a06 	br	b754 <__muldf3+0xc4>
    b96c:	014000c4 	movi	r5,3
    b970:	003f7806 	br	b754 <__muldf3+0xc4>
    b974:	04c00104 	movi	r19,4
    b978:	0021883a 	mov	r16,zero
    b97c:	0029883a 	mov	r20,zero
    b980:	07000044 	movi	fp,1
    b984:	003f6106 	br	b70c <__muldf3+0x7c>
    b988:	04c00304 	movi	r19,12
    b98c:	070000c4 	movi	fp,3
    b990:	003f5e06 	br	b70c <__muldf3+0x7c>
    b994:	01400434 	movhi	r5,16
    b998:	002b883a 	mov	r21,zero
    b99c:	297fffc4 	addi	r5,r5,-1
    b9a0:	053fffc4 	movi	r20,-1
    b9a4:	0081ffc4 	movi	r2,2047
    b9a8:	003f9806 	br	b80c <__muldf3+0x17c>
    b9ac:	8023883a 	mov	r17,r16
    b9b0:	a011883a 	mov	r8,r20
    b9b4:	e00b883a 	mov	r5,fp
    b9b8:	003f8a06 	br	b7e4 <__muldf3+0x154>
    b9bc:	8023883a 	mov	r17,r16
    b9c0:	a011883a 	mov	r8,r20
    b9c4:	482d883a 	mov	r22,r9
    b9c8:	e00b883a 	mov	r5,fp
    b9cc:	003f8506 	br	b7e4 <__muldf3+0x154>
    b9d0:	a00ad43a 	srli	r5,r20,16
    b9d4:	401ad43a 	srli	r13,r8,16
    b9d8:	a53fffcc 	andi	r20,r20,65535
    b9dc:	423fffcc 	andi	r8,r8,65535
    b9e0:	4519383a 	mul	r12,r8,r20
    b9e4:	4147383a 	mul	r3,r8,r5
    b9e8:	6d09383a 	mul	r4,r13,r20
    b9ec:	600cd43a 	srli	r6,r12,16
    b9f0:	2b5d383a 	mul	r14,r5,r13
    b9f4:	20c9883a 	add	r4,r4,r3
    b9f8:	310d883a 	add	r6,r6,r4
    b9fc:	30c0022e 	bgeu	r6,r3,ba08 <__muldf3+0x378>
    ba00:	00c00074 	movhi	r3,1
    ba04:	70dd883a 	add	r14,r14,r3
    ba08:	8826d43a 	srli	r19,r17,16
    ba0c:	8bffffcc 	andi	r15,r17,65535
    ba10:	7d23383a 	mul	r17,r15,r20
    ba14:	7949383a 	mul	r4,r15,r5
    ba18:	9d29383a 	mul	r20,r19,r20
    ba1c:	8814d43a 	srli	r10,r17,16
    ba20:	3012943a 	slli	r9,r6,16
    ba24:	a129883a 	add	r20,r20,r4
    ba28:	633fffcc 	andi	r12,r12,65535
    ba2c:	5515883a 	add	r10,r10,r20
    ba30:	3006d43a 	srli	r3,r6,16
    ba34:	4b13883a 	add	r9,r9,r12
    ba38:	2ccb383a 	mul	r5,r5,r19
    ba3c:	5100022e 	bgeu	r10,r4,ba48 <__muldf3+0x3b8>
    ba40:	01000074 	movhi	r4,1
    ba44:	290b883a 	add	r5,r5,r4
    ba48:	802ad43a 	srli	r21,r16,16
    ba4c:	843fffcc 	andi	r16,r16,65535
    ba50:	440d383a 	mul	r6,r8,r16
    ba54:	4565383a 	mul	r18,r8,r21
    ba58:	8349383a 	mul	r4,r16,r13
    ba5c:	500e943a 	slli	r7,r10,16
    ba60:	3010d43a 	srli	r8,r6,16
    ba64:	5028d43a 	srli	r20,r10,16
    ba68:	2489883a 	add	r4,r4,r18
    ba6c:	8abfffcc 	andi	r10,r17,65535
    ba70:	3a95883a 	add	r10,r7,r10
    ba74:	4119883a 	add	r12,r8,r4
    ba78:	a169883a 	add	r20,r20,r5
    ba7c:	1a87883a 	add	r3,r3,r10
    ba80:	6d5b383a 	mul	r13,r13,r21
    ba84:	6480022e 	bgeu	r12,r18,ba90 <__muldf3+0x400>
    ba88:	01000074 	movhi	r4,1
    ba8c:	691b883a 	add	r13,r13,r4
    ba90:	7c25383a 	mul	r18,r15,r16
    ba94:	7d4b383a 	mul	r5,r15,r21
    ba98:	84cf383a 	mul	r7,r16,r19
    ba9c:	901ed43a 	srli	r15,r18,16
    baa0:	6008d43a 	srli	r4,r12,16
    baa4:	6010943a 	slli	r8,r12,16
    baa8:	394f883a 	add	r7,r7,r5
    baac:	333fffcc 	andi	r12,r6,65535
    bab0:	79df883a 	add	r15,r15,r7
    bab4:	235b883a 	add	r13,r4,r13
    bab8:	9d63383a 	mul	r17,r19,r21
    babc:	4309883a 	add	r4,r8,r12
    bac0:	7940022e 	bgeu	r15,r5,bacc <__muldf3+0x43c>
    bac4:	01400074 	movhi	r5,1
    bac8:	8963883a 	add	r17,r17,r5
    bacc:	780a943a 	slli	r5,r15,16
    bad0:	91bfffcc 	andi	r6,r18,65535
    bad4:	70c7883a 	add	r3,r14,r3
    bad8:	298d883a 	add	r6,r5,r6
    badc:	1a8f803a 	cmpltu	r7,r3,r10
    bae0:	350b883a 	add	r5,r6,r20
    bae4:	20c7883a 	add	r3,r4,r3
    bae8:	3955883a 	add	r10,r7,r5
    baec:	1909803a 	cmpltu	r4,r3,r4
    baf0:	6a91883a 	add	r8,r13,r10
    baf4:	780cd43a 	srli	r6,r15,16
    baf8:	2219883a 	add	r12,r4,r8
    bafc:	2d0b803a 	cmpltu	r5,r5,r20
    bb00:	51cf803a 	cmpltu	r7,r10,r7
    bb04:	29ceb03a 	or	r7,r5,r7
    bb08:	4351803a 	cmpltu	r8,r8,r13
    bb0c:	610b803a 	cmpltu	r5,r12,r4
    bb10:	4148b03a 	or	r4,r8,r5
    bb14:	398f883a 	add	r7,r7,r6
    bb18:	3909883a 	add	r4,r7,r4
    bb1c:	1810927a 	slli	r8,r3,9
    bb20:	2449883a 	add	r4,r4,r17
    bb24:	2008927a 	slli	r4,r4,9
    bb28:	6022d5fa 	srli	r17,r12,23
    bb2c:	1806d5fa 	srli	r3,r3,23
    bb30:	4252b03a 	or	r9,r8,r9
    bb34:	600a927a 	slli	r5,r12,9
    bb38:	4810c03a 	cmpne	r8,r9,zero
    bb3c:	2462b03a 	or	r17,r4,r17
    bb40:	40c6b03a 	or	r3,r8,r3
    bb44:	8900402c 	andhi	r4,r17,256
    bb48:	1950b03a 	or	r8,r3,r5
    bb4c:	20000726 	beq	r4,zero,bb6c <__muldf3+0x4dc>
    bb50:	4006d07a 	srli	r3,r8,1
    bb54:	880497fa 	slli	r2,r17,31
    bb58:	4200004c 	andi	r8,r8,1
    bb5c:	8822d07a 	srli	r17,r17,1
    bb60:	1a10b03a 	or	r8,r3,r8
    bb64:	1210b03a 	or	r8,r2,r8
    bb68:	5805883a 	mov	r2,r11
    bb6c:	1140ffc4 	addi	r5,r2,1023
    bb70:	0140440e 	bge	zero,r5,bc84 <__muldf3+0x5f4>
    bb74:	40c001cc 	andi	r3,r8,7
    bb78:	18000726 	beq	r3,zero,bb98 <__muldf3+0x508>
    bb7c:	40c003cc 	andi	r3,r8,15
    bb80:	01000104 	movi	r4,4
    bb84:	19000426 	beq	r3,r4,bb98 <__muldf3+0x508>
    bb88:	4107883a 	add	r3,r8,r4
    bb8c:	1a11803a 	cmpltu	r8,r3,r8
    bb90:	8a23883a 	add	r17,r17,r8
    bb94:	1811883a 	mov	r8,r3
    bb98:	88c0402c 	andhi	r3,r17,256
    bb9c:	18000426 	beq	r3,zero,bbb0 <__muldf3+0x520>
    bba0:	11410004 	addi	r5,r2,1024
    bba4:	00bfc034 	movhi	r2,65280
    bba8:	10bfffc4 	addi	r2,r2,-1
    bbac:	88a2703a 	and	r17,r17,r2
    bbb0:	0081ff84 	movi	r2,2046
    bbb4:	117f6416 	blt	r2,r5,b948 <__muldf3+0x2b8>
    bbb8:	8828977a 	slli	r20,r17,29
    bbbc:	4010d0fa 	srli	r8,r8,3
    bbc0:	8822927a 	slli	r17,r17,9
    bbc4:	2881ffcc 	andi	r2,r5,2047
    bbc8:	a228b03a 	or	r20,r20,r8
    bbcc:	880ad33a 	srli	r5,r17,12
    bbd0:	b02b883a 	mov	r21,r22
    bbd4:	003f0d06 	br	b80c <__muldf3+0x17c>
    bbd8:	8080022c 	andhi	r2,r16,8
    bbdc:	10000926 	beq	r2,zero,bc04 <__muldf3+0x574>
    bbe0:	8880022c 	andhi	r2,r17,8
    bbe4:	1000071e 	bne	r2,zero,bc04 <__muldf3+0x574>
    bbe8:	00800434 	movhi	r2,16
    bbec:	89400234 	orhi	r5,r17,8
    bbf0:	10bfffc4 	addi	r2,r2,-1
    bbf4:	b82b883a 	mov	r21,r23
    bbf8:	288a703a 	and	r5,r5,r2
    bbfc:	4029883a 	mov	r20,r8
    bc00:	003f6806 	br	b9a4 <__muldf3+0x314>
    bc04:	00800434 	movhi	r2,16
    bc08:	81400234 	orhi	r5,r16,8
    bc0c:	10bfffc4 	addi	r2,r2,-1
    bc10:	288a703a 	and	r5,r5,r2
    bc14:	003f6306 	br	b9a4 <__muldf3+0x314>
    bc18:	147ff604 	addi	r17,r2,-40
    bc1c:	3462983a 	sll	r17,r6,r17
    bc20:	0011883a 	mov	r8,zero
    bc24:	003f4406 	br	b938 <__muldf3+0x2a8>
    bc28:	3009883a 	mov	r4,r6
    bc2c:	d9800215 	stw	r6,8(sp)
    bc30:	da400115 	stw	r9,4(sp)
    bc34:	da800015 	stw	r10,0(sp)
    bc38:	000c8a80 	call	c8a8 <__clzsi2>
    bc3c:	10800804 	addi	r2,r2,32
    bc40:	da800017 	ldw	r10,0(sp)
    bc44:	da400117 	ldw	r9,4(sp)
    bc48:	d9800217 	ldw	r6,8(sp)
    bc4c:	003f3006 	br	b910 <__muldf3+0x280>
    bc50:	143ff604 	addi	r16,r2,-40
    bc54:	9c20983a 	sll	r16,r19,r16
    bc58:	0029883a 	mov	r20,zero
    bc5c:	003f1606 	br	b8b8 <__muldf3+0x228>
    bc60:	d9800215 	stw	r6,8(sp)
    bc64:	d9c00015 	stw	r7,0(sp)
    bc68:	da400115 	stw	r9,4(sp)
    bc6c:	000c8a80 	call	c8a8 <__clzsi2>
    bc70:	10800804 	addi	r2,r2,32
    bc74:	da400117 	ldw	r9,4(sp)
    bc78:	d9c00017 	ldw	r7,0(sp)
    bc7c:	d9800217 	ldw	r6,8(sp)
    bc80:	003f0306 	br	b890 <__muldf3+0x200>
    bc84:	00c00044 	movi	r3,1
    bc88:	1947c83a 	sub	r3,r3,r5
    bc8c:	00800e04 	movi	r2,56
    bc90:	10feda16 	blt	r2,r3,b7fc <__muldf3+0x16c>
    bc94:	008007c4 	movi	r2,31
    bc98:	10c01b16 	blt	r2,r3,bd08 <__muldf3+0x678>
    bc9c:	00800804 	movi	r2,32
    bca0:	10c5c83a 	sub	r2,r2,r3
    bca4:	888a983a 	sll	r5,r17,r2
    bca8:	40c8d83a 	srl	r4,r8,r3
    bcac:	4084983a 	sll	r2,r8,r2
    bcb0:	88e2d83a 	srl	r17,r17,r3
    bcb4:	2906b03a 	or	r3,r5,r4
    bcb8:	1004c03a 	cmpne	r2,r2,zero
    bcbc:	1886b03a 	or	r3,r3,r2
    bcc0:	188001cc 	andi	r2,r3,7
    bcc4:	10000726 	beq	r2,zero,bce4 <__muldf3+0x654>
    bcc8:	188003cc 	andi	r2,r3,15
    bccc:	01000104 	movi	r4,4
    bcd0:	11000426 	beq	r2,r4,bce4 <__muldf3+0x654>
    bcd4:	1805883a 	mov	r2,r3
    bcd8:	10c00104 	addi	r3,r2,4
    bcdc:	1885803a 	cmpltu	r2,r3,r2
    bce0:	88a3883a 	add	r17,r17,r2
    bce4:	8880202c 	andhi	r2,r17,128
    bce8:	10001c26 	beq	r2,zero,bd5c <__muldf3+0x6cc>
    bcec:	b02b883a 	mov	r21,r22
    bcf0:	00800044 	movi	r2,1
    bcf4:	000b883a 	mov	r5,zero
    bcf8:	0029883a 	mov	r20,zero
    bcfc:	003ec306 	br	b80c <__muldf3+0x17c>
    bd00:	5805883a 	mov	r2,r11
    bd04:	003f9906 	br	bb6c <__muldf3+0x4dc>
    bd08:	00bff844 	movi	r2,-31
    bd0c:	1145c83a 	sub	r2,r2,r5
    bd10:	8888d83a 	srl	r4,r17,r2
    bd14:	00800804 	movi	r2,32
    bd18:	18801a26 	beq	r3,r2,bd84 <__muldf3+0x6f4>
    bd1c:	00801004 	movi	r2,64
    bd20:	10c5c83a 	sub	r2,r2,r3
    bd24:	8884983a 	sll	r2,r17,r2
    bd28:	1204b03a 	or	r2,r2,r8
    bd2c:	1004c03a 	cmpne	r2,r2,zero
    bd30:	2084b03a 	or	r2,r4,r2
    bd34:	144001cc 	andi	r17,r2,7
    bd38:	88000d1e 	bne	r17,zero,bd70 <__muldf3+0x6e0>
    bd3c:	000b883a 	mov	r5,zero
    bd40:	1028d0fa 	srli	r20,r2,3
    bd44:	b02b883a 	mov	r21,r22
    bd48:	0005883a 	mov	r2,zero
    bd4c:	a468b03a 	or	r20,r20,r17
    bd50:	003eae06 	br	b80c <__muldf3+0x17c>
    bd54:	1007883a 	mov	r3,r2
    bd58:	0023883a 	mov	r17,zero
    bd5c:	880a927a 	slli	r5,r17,9
    bd60:	1805883a 	mov	r2,r3
    bd64:	8822977a 	slli	r17,r17,29
    bd68:	280ad33a 	srli	r5,r5,12
    bd6c:	003ff406 	br	bd40 <__muldf3+0x6b0>
    bd70:	10c003cc 	andi	r3,r2,15
    bd74:	01000104 	movi	r4,4
    bd78:	193ff626 	beq	r3,r4,bd54 <__muldf3+0x6c4>
    bd7c:	0023883a 	mov	r17,zero
    bd80:	003fd506 	br	bcd8 <__muldf3+0x648>
    bd84:	0005883a 	mov	r2,zero
    bd88:	003fe706 	br	bd28 <__muldf3+0x698>
    bd8c:	00800434 	movhi	r2,16
    bd90:	89400234 	orhi	r5,r17,8
    bd94:	10bfffc4 	addi	r2,r2,-1
    bd98:	b02b883a 	mov	r21,r22
    bd9c:	288a703a 	and	r5,r5,r2
    bda0:	4029883a 	mov	r20,r8
    bda4:	003eff06 	br	b9a4 <__muldf3+0x314>

0000bda8 <__subdf3>:
    bda8:	02000434 	movhi	r8,16
    bdac:	423fffc4 	addi	r8,r8,-1
    bdb0:	defffb04 	addi	sp,sp,-20
    bdb4:	2a14703a 	and	r10,r5,r8
    bdb8:	3812d53a 	srli	r9,r7,20
    bdbc:	3a10703a 	and	r8,r7,r8
    bdc0:	2006d77a 	srli	r3,r4,29
    bdc4:	3004d77a 	srli	r2,r6,29
    bdc8:	dc000015 	stw	r16,0(sp)
    bdcc:	501490fa 	slli	r10,r10,3
    bdd0:	2820d53a 	srli	r16,r5,20
    bdd4:	401090fa 	slli	r8,r8,3
    bdd8:	dc800215 	stw	r18,8(sp)
    bddc:	dc400115 	stw	r17,4(sp)
    bde0:	dfc00415 	stw	ra,16(sp)
    bde4:	202290fa 	slli	r17,r4,3
    bde8:	dcc00315 	stw	r19,12(sp)
    bdec:	4a41ffcc 	andi	r9,r9,2047
    bdf0:	0101ffc4 	movi	r4,2047
    bdf4:	2824d7fa 	srli	r18,r5,31
    bdf8:	8401ffcc 	andi	r16,r16,2047
    bdfc:	50c6b03a 	or	r3,r10,r3
    be00:	380ed7fa 	srli	r7,r7,31
    be04:	408ab03a 	or	r5,r8,r2
    be08:	300c90fa 	slli	r6,r6,3
    be0c:	49009626 	beq	r9,r4,c068 <__subdf3+0x2c0>
    be10:	39c0005c 	xori	r7,r7,1
    be14:	8245c83a 	sub	r2,r16,r9
    be18:	3c807426 	beq	r7,r18,bfec <__subdf3+0x244>
    be1c:	0080af0e 	bge	zero,r2,c0dc <__subdf3+0x334>
    be20:	48002a1e 	bne	r9,zero,becc <__subdf3+0x124>
    be24:	2988b03a 	or	r4,r5,r6
    be28:	20009a1e 	bne	r4,zero,c094 <__subdf3+0x2ec>
    be2c:	888001cc 	andi	r2,r17,7
    be30:	10000726 	beq	r2,zero,be50 <__subdf3+0xa8>
    be34:	888003cc 	andi	r2,r17,15
    be38:	01000104 	movi	r4,4
    be3c:	11000426 	beq	r2,r4,be50 <__subdf3+0xa8>
    be40:	890b883a 	add	r5,r17,r4
    be44:	2c63803a 	cmpltu	r17,r5,r17
    be48:	1c47883a 	add	r3,r3,r17
    be4c:	2823883a 	mov	r17,r5
    be50:	1880202c 	andhi	r2,r3,128
    be54:	10005926 	beq	r2,zero,bfbc <__subdf3+0x214>
    be58:	84000044 	addi	r16,r16,1
    be5c:	0081ffc4 	movi	r2,2047
    be60:	8080be26 	beq	r16,r2,c15c <__subdf3+0x3b4>
    be64:	017fe034 	movhi	r5,65408
    be68:	297fffc4 	addi	r5,r5,-1
    be6c:	1946703a 	and	r3,r3,r5
    be70:	1804977a 	slli	r2,r3,29
    be74:	1806927a 	slli	r3,r3,9
    be78:	8822d0fa 	srli	r17,r17,3
    be7c:	8401ffcc 	andi	r16,r16,2047
    be80:	180ad33a 	srli	r5,r3,12
    be84:	9100004c 	andi	r4,r18,1
    be88:	1444b03a 	or	r2,r2,r17
    be8c:	80c1ffcc 	andi	r3,r16,2047
    be90:	1820953a 	slli	r16,r3,20
    be94:	20c03fcc 	andi	r3,r4,255
    be98:	180897fa 	slli	r4,r3,31
    be9c:	00c00434 	movhi	r3,16
    bea0:	18ffffc4 	addi	r3,r3,-1
    bea4:	28c6703a 	and	r3,r5,r3
    bea8:	1c06b03a 	or	r3,r3,r16
    beac:	1906b03a 	or	r3,r3,r4
    beb0:	dfc00417 	ldw	ra,16(sp)
    beb4:	dcc00317 	ldw	r19,12(sp)
    beb8:	dc800217 	ldw	r18,8(sp)
    bebc:	dc400117 	ldw	r17,4(sp)
    bec0:	dc000017 	ldw	r16,0(sp)
    bec4:	dec00504 	addi	sp,sp,20
    bec8:	f800283a 	ret
    becc:	0101ffc4 	movi	r4,2047
    bed0:	813fd626 	beq	r16,r4,be2c <__subdf3+0x84>
    bed4:	29402034 	orhi	r5,r5,128
    bed8:	01000e04 	movi	r4,56
    bedc:	2080a316 	blt	r4,r2,c16c <__subdf3+0x3c4>
    bee0:	010007c4 	movi	r4,31
    bee4:	2080c616 	blt	r4,r2,c200 <__subdf3+0x458>
    bee8:	01000804 	movi	r4,32
    beec:	2089c83a 	sub	r4,r4,r2
    bef0:	2910983a 	sll	r8,r5,r4
    bef4:	308ed83a 	srl	r7,r6,r2
    bef8:	3108983a 	sll	r4,r6,r4
    befc:	2884d83a 	srl	r2,r5,r2
    bf00:	41ccb03a 	or	r6,r8,r7
    bf04:	2008c03a 	cmpne	r4,r4,zero
    bf08:	310cb03a 	or	r6,r6,r4
    bf0c:	898dc83a 	sub	r6,r17,r6
    bf10:	89a3803a 	cmpltu	r17,r17,r6
    bf14:	1887c83a 	sub	r3,r3,r2
    bf18:	1c47c83a 	sub	r3,r3,r17
    bf1c:	3023883a 	mov	r17,r6
    bf20:	1880202c 	andhi	r2,r3,128
    bf24:	10002326 	beq	r2,zero,bfb4 <__subdf3+0x20c>
    bf28:	04c02034 	movhi	r19,128
    bf2c:	9cffffc4 	addi	r19,r19,-1
    bf30:	1ce6703a 	and	r19,r3,r19
    bf34:	98007a26 	beq	r19,zero,c120 <__subdf3+0x378>
    bf38:	9809883a 	mov	r4,r19
    bf3c:	000c8a80 	call	c8a8 <__clzsi2>
    bf40:	113ffe04 	addi	r4,r2,-8
    bf44:	00c007c4 	movi	r3,31
    bf48:	19007b16 	blt	r3,r4,c138 <__subdf3+0x390>
    bf4c:	00800804 	movi	r2,32
    bf50:	1105c83a 	sub	r2,r2,r4
    bf54:	8884d83a 	srl	r2,r17,r2
    bf58:	9906983a 	sll	r3,r19,r4
    bf5c:	8922983a 	sll	r17,r17,r4
    bf60:	10c4b03a 	or	r2,r2,r3
    bf64:	24007816 	blt	r4,r16,c148 <__subdf3+0x3a0>
    bf68:	2421c83a 	sub	r16,r4,r16
    bf6c:	80c00044 	addi	r3,r16,1
    bf70:	010007c4 	movi	r4,31
    bf74:	20c09516 	blt	r4,r3,c1cc <__subdf3+0x424>
    bf78:	01400804 	movi	r5,32
    bf7c:	28cbc83a 	sub	r5,r5,r3
    bf80:	88c8d83a 	srl	r4,r17,r3
    bf84:	8962983a 	sll	r17,r17,r5
    bf88:	114a983a 	sll	r5,r2,r5
    bf8c:	10c6d83a 	srl	r3,r2,r3
    bf90:	8804c03a 	cmpne	r2,r17,zero
    bf94:	290ab03a 	or	r5,r5,r4
    bf98:	28a2b03a 	or	r17,r5,r2
    bf9c:	0021883a 	mov	r16,zero
    bfa0:	003fa206 	br	be2c <__subdf3+0x84>
    bfa4:	2090b03a 	or	r8,r4,r2
    bfa8:	40018e26 	beq	r8,zero,c5e4 <__subdf3+0x83c>
    bfac:	1007883a 	mov	r3,r2
    bfb0:	2023883a 	mov	r17,r4
    bfb4:	888001cc 	andi	r2,r17,7
    bfb8:	103f9e1e 	bne	r2,zero,be34 <__subdf3+0x8c>
    bfbc:	1804977a 	slli	r2,r3,29
    bfc0:	8822d0fa 	srli	r17,r17,3
    bfc4:	1810d0fa 	srli	r8,r3,3
    bfc8:	9100004c 	andi	r4,r18,1
    bfcc:	1444b03a 	or	r2,r2,r17
    bfd0:	00c1ffc4 	movi	r3,2047
    bfd4:	80c02826 	beq	r16,r3,c078 <__subdf3+0x2d0>
    bfd8:	01400434 	movhi	r5,16
    bfdc:	297fffc4 	addi	r5,r5,-1
    bfe0:	80e0703a 	and	r16,r16,r3
    bfe4:	414a703a 	and	r5,r8,r5
    bfe8:	003fa806 	br	be8c <__subdf3+0xe4>
    bfec:	0080630e 	bge	zero,r2,c17c <__subdf3+0x3d4>
    bff0:	48003026 	beq	r9,zero,c0b4 <__subdf3+0x30c>
    bff4:	0101ffc4 	movi	r4,2047
    bff8:	813f8c26 	beq	r16,r4,be2c <__subdf3+0x84>
    bffc:	29402034 	orhi	r5,r5,128
    c000:	01000e04 	movi	r4,56
    c004:	2080a90e 	bge	r4,r2,c2ac <__subdf3+0x504>
    c008:	298cb03a 	or	r6,r5,r6
    c00c:	3012c03a 	cmpne	r9,r6,zero
    c010:	0005883a 	mov	r2,zero
    c014:	4c53883a 	add	r9,r9,r17
    c018:	4c63803a 	cmpltu	r17,r9,r17
    c01c:	10c7883a 	add	r3,r2,r3
    c020:	88c7883a 	add	r3,r17,r3
    c024:	4823883a 	mov	r17,r9
    c028:	1880202c 	andhi	r2,r3,128
    c02c:	1000d026 	beq	r2,zero,c370 <__subdf3+0x5c8>
    c030:	84000044 	addi	r16,r16,1
    c034:	0081ffc4 	movi	r2,2047
    c038:	8080fe26 	beq	r16,r2,c434 <__subdf3+0x68c>
    c03c:	00bfe034 	movhi	r2,65408
    c040:	10bfffc4 	addi	r2,r2,-1
    c044:	1886703a 	and	r3,r3,r2
    c048:	880ad07a 	srli	r5,r17,1
    c04c:	180497fa 	slli	r2,r3,31
    c050:	8900004c 	andi	r4,r17,1
    c054:	2922b03a 	or	r17,r5,r4
    c058:	1806d07a 	srli	r3,r3,1
    c05c:	1462b03a 	or	r17,r2,r17
    c060:	3825883a 	mov	r18,r7
    c064:	003f7106 	br	be2c <__subdf3+0x84>
    c068:	2984b03a 	or	r2,r5,r6
    c06c:	103f6826 	beq	r2,zero,be10 <__subdf3+0x68>
    c070:	39c03fcc 	andi	r7,r7,255
    c074:	003f6706 	br	be14 <__subdf3+0x6c>
    c078:	4086b03a 	or	r3,r8,r2
    c07c:	18015226 	beq	r3,zero,c5c8 <__subdf3+0x820>
    c080:	00c00434 	movhi	r3,16
    c084:	41400234 	orhi	r5,r8,8
    c088:	18ffffc4 	addi	r3,r3,-1
    c08c:	28ca703a 	and	r5,r5,r3
    c090:	003f7e06 	br	be8c <__subdf3+0xe4>
    c094:	10bfffc4 	addi	r2,r2,-1
    c098:	1000491e 	bne	r2,zero,c1c0 <__subdf3+0x418>
    c09c:	898fc83a 	sub	r7,r17,r6
    c0a0:	89e3803a 	cmpltu	r17,r17,r7
    c0a4:	1947c83a 	sub	r3,r3,r5
    c0a8:	1c47c83a 	sub	r3,r3,r17
    c0ac:	3823883a 	mov	r17,r7
    c0b0:	003f9b06 	br	bf20 <__subdf3+0x178>
    c0b4:	2988b03a 	or	r4,r5,r6
    c0b8:	203f5c26 	beq	r4,zero,be2c <__subdf3+0x84>
    c0bc:	10bfffc4 	addi	r2,r2,-1
    c0c0:	1000931e 	bne	r2,zero,c310 <__subdf3+0x568>
    c0c4:	898d883a 	add	r6,r17,r6
    c0c8:	3463803a 	cmpltu	r17,r6,r17
    c0cc:	1947883a 	add	r3,r3,r5
    c0d0:	88c7883a 	add	r3,r17,r3
    c0d4:	3023883a 	mov	r17,r6
    c0d8:	003fd306 	br	c028 <__subdf3+0x280>
    c0dc:	1000541e 	bne	r2,zero,c230 <__subdf3+0x488>
    c0e0:	80800044 	addi	r2,r16,1
    c0e4:	1081ffcc 	andi	r2,r2,2047
    c0e8:	01000044 	movi	r4,1
    c0ec:	2080a20e 	bge	r4,r2,c378 <__subdf3+0x5d0>
    c0f0:	8989c83a 	sub	r4,r17,r6
    c0f4:	8905803a 	cmpltu	r2,r17,r4
    c0f8:	1967c83a 	sub	r19,r3,r5
    c0fc:	98a7c83a 	sub	r19,r19,r2
    c100:	9880202c 	andhi	r2,r19,128
    c104:	10006326 	beq	r2,zero,c294 <__subdf3+0x4ec>
    c108:	3463c83a 	sub	r17,r6,r17
    c10c:	28c7c83a 	sub	r3,r5,r3
    c110:	344d803a 	cmpltu	r6,r6,r17
    c114:	19a7c83a 	sub	r19,r3,r6
    c118:	3825883a 	mov	r18,r7
    c11c:	983f861e 	bne	r19,zero,bf38 <__subdf3+0x190>
    c120:	8809883a 	mov	r4,r17
    c124:	000c8a80 	call	c8a8 <__clzsi2>
    c128:	10800804 	addi	r2,r2,32
    c12c:	113ffe04 	addi	r4,r2,-8
    c130:	00c007c4 	movi	r3,31
    c134:	193f850e 	bge	r3,r4,bf4c <__subdf3+0x1a4>
    c138:	10bff604 	addi	r2,r2,-40
    c13c:	8884983a 	sll	r2,r17,r2
    c140:	0023883a 	mov	r17,zero
    c144:	243f880e 	bge	r4,r16,bf68 <__subdf3+0x1c0>
    c148:	00ffe034 	movhi	r3,65408
    c14c:	18ffffc4 	addi	r3,r3,-1
    c150:	8121c83a 	sub	r16,r16,r4
    c154:	10c6703a 	and	r3,r2,r3
    c158:	003f3406 	br	be2c <__subdf3+0x84>
    c15c:	9100004c 	andi	r4,r18,1
    c160:	000b883a 	mov	r5,zero
    c164:	0005883a 	mov	r2,zero
    c168:	003f4806 	br	be8c <__subdf3+0xe4>
    c16c:	298cb03a 	or	r6,r5,r6
    c170:	300cc03a 	cmpne	r6,r6,zero
    c174:	0005883a 	mov	r2,zero
    c178:	003f6406 	br	bf0c <__subdf3+0x164>
    c17c:	10009a1e 	bne	r2,zero,c3e8 <__subdf3+0x640>
    c180:	82400044 	addi	r9,r16,1
    c184:	4881ffcc 	andi	r2,r9,2047
    c188:	02800044 	movi	r10,1
    c18c:	5080670e 	bge	r10,r2,c32c <__subdf3+0x584>
    c190:	0081ffc4 	movi	r2,2047
    c194:	4880af26 	beq	r9,r2,c454 <__subdf3+0x6ac>
    c198:	898d883a 	add	r6,r17,r6
    c19c:	1945883a 	add	r2,r3,r5
    c1a0:	3447803a 	cmpltu	r3,r6,r17
    c1a4:	1887883a 	add	r3,r3,r2
    c1a8:	182297fa 	slli	r17,r3,31
    c1ac:	300cd07a 	srli	r6,r6,1
    c1b0:	1806d07a 	srli	r3,r3,1
    c1b4:	4821883a 	mov	r16,r9
    c1b8:	89a2b03a 	or	r17,r17,r6
    c1bc:	003f1b06 	br	be2c <__subdf3+0x84>
    c1c0:	0101ffc4 	movi	r4,2047
    c1c4:	813f441e 	bne	r16,r4,bed8 <__subdf3+0x130>
    c1c8:	003f1806 	br	be2c <__subdf3+0x84>
    c1cc:	843ff844 	addi	r16,r16,-31
    c1d0:	01400804 	movi	r5,32
    c1d4:	1408d83a 	srl	r4,r2,r16
    c1d8:	19405026 	beq	r3,r5,c31c <__subdf3+0x574>
    c1dc:	01401004 	movi	r5,64
    c1e0:	28c7c83a 	sub	r3,r5,r3
    c1e4:	10c4983a 	sll	r2,r2,r3
    c1e8:	88a2b03a 	or	r17,r17,r2
    c1ec:	8822c03a 	cmpne	r17,r17,zero
    c1f0:	2462b03a 	or	r17,r4,r17
    c1f4:	0007883a 	mov	r3,zero
    c1f8:	0021883a 	mov	r16,zero
    c1fc:	003f6d06 	br	bfb4 <__subdf3+0x20c>
    c200:	11fff804 	addi	r7,r2,-32
    c204:	01000804 	movi	r4,32
    c208:	29ced83a 	srl	r7,r5,r7
    c20c:	11004526 	beq	r2,r4,c324 <__subdf3+0x57c>
    c210:	01001004 	movi	r4,64
    c214:	2089c83a 	sub	r4,r4,r2
    c218:	2904983a 	sll	r2,r5,r4
    c21c:	118cb03a 	or	r6,r2,r6
    c220:	300cc03a 	cmpne	r6,r6,zero
    c224:	398cb03a 	or	r6,r7,r6
    c228:	0005883a 	mov	r2,zero
    c22c:	003f3706 	br	bf0c <__subdf3+0x164>
    c230:	80002a26 	beq	r16,zero,c2dc <__subdf3+0x534>
    c234:	0101ffc4 	movi	r4,2047
    c238:	49006626 	beq	r9,r4,c3d4 <__subdf3+0x62c>
    c23c:	0085c83a 	sub	r2,zero,r2
    c240:	18c02034 	orhi	r3,r3,128
    c244:	01000e04 	movi	r4,56
    c248:	20807e16 	blt	r4,r2,c444 <__subdf3+0x69c>
    c24c:	010007c4 	movi	r4,31
    c250:	2080e716 	blt	r4,r2,c5f0 <__subdf3+0x848>
    c254:	01000804 	movi	r4,32
    c258:	2089c83a 	sub	r4,r4,r2
    c25c:	1914983a 	sll	r10,r3,r4
    c260:	8890d83a 	srl	r8,r17,r2
    c264:	8908983a 	sll	r4,r17,r4
    c268:	1884d83a 	srl	r2,r3,r2
    c26c:	5222b03a 	or	r17,r10,r8
    c270:	2006c03a 	cmpne	r3,r4,zero
    c274:	88e2b03a 	or	r17,r17,r3
    c278:	3463c83a 	sub	r17,r6,r17
    c27c:	2885c83a 	sub	r2,r5,r2
    c280:	344d803a 	cmpltu	r6,r6,r17
    c284:	1187c83a 	sub	r3,r2,r6
    c288:	4821883a 	mov	r16,r9
    c28c:	3825883a 	mov	r18,r7
    c290:	003f2306 	br	bf20 <__subdf3+0x178>
    c294:	24d0b03a 	or	r8,r4,r19
    c298:	40001b1e 	bne	r8,zero,c308 <__subdf3+0x560>
    c29c:	0005883a 	mov	r2,zero
    c2a0:	0009883a 	mov	r4,zero
    c2a4:	0021883a 	mov	r16,zero
    c2a8:	003f4906 	br	bfd0 <__subdf3+0x228>
    c2ac:	010007c4 	movi	r4,31
    c2b0:	20803a16 	blt	r4,r2,c39c <__subdf3+0x5f4>
    c2b4:	01000804 	movi	r4,32
    c2b8:	2089c83a 	sub	r4,r4,r2
    c2bc:	2912983a 	sll	r9,r5,r4
    c2c0:	3090d83a 	srl	r8,r6,r2
    c2c4:	3108983a 	sll	r4,r6,r4
    c2c8:	2884d83a 	srl	r2,r5,r2
    c2cc:	4a12b03a 	or	r9,r9,r8
    c2d0:	2008c03a 	cmpne	r4,r4,zero
    c2d4:	4912b03a 	or	r9,r9,r4
    c2d8:	003f4e06 	br	c014 <__subdf3+0x26c>
    c2dc:	1c48b03a 	or	r4,r3,r17
    c2e0:	20003c26 	beq	r4,zero,c3d4 <__subdf3+0x62c>
    c2e4:	0084303a 	nor	r2,zero,r2
    c2e8:	1000381e 	bne	r2,zero,c3cc <__subdf3+0x624>
    c2ec:	3463c83a 	sub	r17,r6,r17
    c2f0:	28c5c83a 	sub	r2,r5,r3
    c2f4:	344d803a 	cmpltu	r6,r6,r17
    c2f8:	1187c83a 	sub	r3,r2,r6
    c2fc:	4821883a 	mov	r16,r9
    c300:	3825883a 	mov	r18,r7
    c304:	003f0606 	br	bf20 <__subdf3+0x178>
    c308:	2023883a 	mov	r17,r4
    c30c:	003f0906 	br	bf34 <__subdf3+0x18c>
    c310:	0101ffc4 	movi	r4,2047
    c314:	813f3a1e 	bne	r16,r4,c000 <__subdf3+0x258>
    c318:	003ec406 	br	be2c <__subdf3+0x84>
    c31c:	0005883a 	mov	r2,zero
    c320:	003fb106 	br	c1e8 <__subdf3+0x440>
    c324:	0005883a 	mov	r2,zero
    c328:	003fbc06 	br	c21c <__subdf3+0x474>
    c32c:	1c44b03a 	or	r2,r3,r17
    c330:	80008e1e 	bne	r16,zero,c56c <__subdf3+0x7c4>
    c334:	1000c826 	beq	r2,zero,c658 <__subdf3+0x8b0>
    c338:	2984b03a 	or	r2,r5,r6
    c33c:	103ebb26 	beq	r2,zero,be2c <__subdf3+0x84>
    c340:	8989883a 	add	r4,r17,r6
    c344:	1945883a 	add	r2,r3,r5
    c348:	2447803a 	cmpltu	r3,r4,r17
    c34c:	1887883a 	add	r3,r3,r2
    c350:	1880202c 	andhi	r2,r3,128
    c354:	2023883a 	mov	r17,r4
    c358:	103f1626 	beq	r2,zero,bfb4 <__subdf3+0x20c>
    c35c:	00bfe034 	movhi	r2,65408
    c360:	10bfffc4 	addi	r2,r2,-1
    c364:	5021883a 	mov	r16,r10
    c368:	1886703a 	and	r3,r3,r2
    c36c:	003eaf06 	br	be2c <__subdf3+0x84>
    c370:	3825883a 	mov	r18,r7
    c374:	003f0f06 	br	bfb4 <__subdf3+0x20c>
    c378:	1c44b03a 	or	r2,r3,r17
    c37c:	8000251e 	bne	r16,zero,c414 <__subdf3+0x66c>
    c380:	1000661e 	bne	r2,zero,c51c <__subdf3+0x774>
    c384:	2990b03a 	or	r8,r5,r6
    c388:	40009626 	beq	r8,zero,c5e4 <__subdf3+0x83c>
    c38c:	2807883a 	mov	r3,r5
    c390:	3023883a 	mov	r17,r6
    c394:	3825883a 	mov	r18,r7
    c398:	003ea406 	br	be2c <__subdf3+0x84>
    c39c:	127ff804 	addi	r9,r2,-32
    c3a0:	01000804 	movi	r4,32
    c3a4:	2a52d83a 	srl	r9,r5,r9
    c3a8:	11008c26 	beq	r2,r4,c5dc <__subdf3+0x834>
    c3ac:	01001004 	movi	r4,64
    c3b0:	2085c83a 	sub	r2,r4,r2
    c3b4:	2884983a 	sll	r2,r5,r2
    c3b8:	118cb03a 	or	r6,r2,r6
    c3bc:	300cc03a 	cmpne	r6,r6,zero
    c3c0:	4992b03a 	or	r9,r9,r6
    c3c4:	0005883a 	mov	r2,zero
    c3c8:	003f1206 	br	c014 <__subdf3+0x26c>
    c3cc:	0101ffc4 	movi	r4,2047
    c3d0:	493f9c1e 	bne	r9,r4,c244 <__subdf3+0x49c>
    c3d4:	2807883a 	mov	r3,r5
    c3d8:	3023883a 	mov	r17,r6
    c3dc:	4821883a 	mov	r16,r9
    c3e0:	3825883a 	mov	r18,r7
    c3e4:	003e9106 	br	be2c <__subdf3+0x84>
    c3e8:	80001f1e 	bne	r16,zero,c468 <__subdf3+0x6c0>
    c3ec:	1c48b03a 	or	r4,r3,r17
    c3f0:	20005a26 	beq	r4,zero,c55c <__subdf3+0x7b4>
    c3f4:	0084303a 	nor	r2,zero,r2
    c3f8:	1000561e 	bne	r2,zero,c554 <__subdf3+0x7ac>
    c3fc:	89a3883a 	add	r17,r17,r6
    c400:	1945883a 	add	r2,r3,r5
    c404:	898d803a 	cmpltu	r6,r17,r6
    c408:	3087883a 	add	r3,r6,r2
    c40c:	4821883a 	mov	r16,r9
    c410:	003f0506 	br	c028 <__subdf3+0x280>
    c414:	10002b1e 	bne	r2,zero,c4c4 <__subdf3+0x71c>
    c418:	2984b03a 	or	r2,r5,r6
    c41c:	10008026 	beq	r2,zero,c620 <__subdf3+0x878>
    c420:	2807883a 	mov	r3,r5
    c424:	3023883a 	mov	r17,r6
    c428:	3825883a 	mov	r18,r7
    c42c:	0401ffc4 	movi	r16,2047
    c430:	003e7e06 	br	be2c <__subdf3+0x84>
    c434:	3809883a 	mov	r4,r7
    c438:	0011883a 	mov	r8,zero
    c43c:	0005883a 	mov	r2,zero
    c440:	003ee306 	br	bfd0 <__subdf3+0x228>
    c444:	1c62b03a 	or	r17,r3,r17
    c448:	8822c03a 	cmpne	r17,r17,zero
    c44c:	0005883a 	mov	r2,zero
    c450:	003f8906 	br	c278 <__subdf3+0x4d0>
    c454:	3809883a 	mov	r4,r7
    c458:	4821883a 	mov	r16,r9
    c45c:	0011883a 	mov	r8,zero
    c460:	0005883a 	mov	r2,zero
    c464:	003eda06 	br	bfd0 <__subdf3+0x228>
    c468:	0101ffc4 	movi	r4,2047
    c46c:	49003b26 	beq	r9,r4,c55c <__subdf3+0x7b4>
    c470:	0085c83a 	sub	r2,zero,r2
    c474:	18c02034 	orhi	r3,r3,128
    c478:	01000e04 	movi	r4,56
    c47c:	20806e16 	blt	r4,r2,c638 <__subdf3+0x890>
    c480:	010007c4 	movi	r4,31
    c484:	20807716 	blt	r4,r2,c664 <__subdf3+0x8bc>
    c488:	01000804 	movi	r4,32
    c48c:	2089c83a 	sub	r4,r4,r2
    c490:	1914983a 	sll	r10,r3,r4
    c494:	8890d83a 	srl	r8,r17,r2
    c498:	8908983a 	sll	r4,r17,r4
    c49c:	1884d83a 	srl	r2,r3,r2
    c4a0:	5222b03a 	or	r17,r10,r8
    c4a4:	2006c03a 	cmpne	r3,r4,zero
    c4a8:	88e2b03a 	or	r17,r17,r3
    c4ac:	89a3883a 	add	r17,r17,r6
    c4b0:	1145883a 	add	r2,r2,r5
    c4b4:	898d803a 	cmpltu	r6,r17,r6
    c4b8:	3087883a 	add	r3,r6,r2
    c4bc:	4821883a 	mov	r16,r9
    c4c0:	003ed906 	br	c028 <__subdf3+0x280>
    c4c4:	2984b03a 	or	r2,r5,r6
    c4c8:	10004226 	beq	r2,zero,c5d4 <__subdf3+0x82c>
    c4cc:	1808d0fa 	srli	r4,r3,3
    c4d0:	8822d0fa 	srli	r17,r17,3
    c4d4:	1806977a 	slli	r3,r3,29
    c4d8:	2080022c 	andhi	r2,r4,8
    c4dc:	1c62b03a 	or	r17,r3,r17
    c4e0:	10000826 	beq	r2,zero,c504 <__subdf3+0x75c>
    c4e4:	2812d0fa 	srli	r9,r5,3
    c4e8:	4880022c 	andhi	r2,r9,8
    c4ec:	1000051e 	bne	r2,zero,c504 <__subdf3+0x75c>
    c4f0:	300cd0fa 	srli	r6,r6,3
    c4f4:	2804977a 	slli	r2,r5,29
    c4f8:	4809883a 	mov	r4,r9
    c4fc:	3825883a 	mov	r18,r7
    c500:	11a2b03a 	or	r17,r2,r6
    c504:	8806d77a 	srli	r3,r17,29
    c508:	200890fa 	slli	r4,r4,3
    c50c:	882290fa 	slli	r17,r17,3
    c510:	0401ffc4 	movi	r16,2047
    c514:	1906b03a 	or	r3,r3,r4
    c518:	003e4406 	br	be2c <__subdf3+0x84>
    c51c:	2984b03a 	or	r2,r5,r6
    c520:	103e4226 	beq	r2,zero,be2c <__subdf3+0x84>
    c524:	8989c83a 	sub	r4,r17,r6
    c528:	8911803a 	cmpltu	r8,r17,r4
    c52c:	1945c83a 	sub	r2,r3,r5
    c530:	1205c83a 	sub	r2,r2,r8
    c534:	1200202c 	andhi	r8,r2,128
    c538:	403e9a26 	beq	r8,zero,bfa4 <__subdf3+0x1fc>
    c53c:	3463c83a 	sub	r17,r6,r17
    c540:	28c5c83a 	sub	r2,r5,r3
    c544:	344d803a 	cmpltu	r6,r6,r17
    c548:	1187c83a 	sub	r3,r2,r6
    c54c:	3825883a 	mov	r18,r7
    c550:	003e3606 	br	be2c <__subdf3+0x84>
    c554:	0101ffc4 	movi	r4,2047
    c558:	493fc71e 	bne	r9,r4,c478 <__subdf3+0x6d0>
    c55c:	2807883a 	mov	r3,r5
    c560:	3023883a 	mov	r17,r6
    c564:	4821883a 	mov	r16,r9
    c568:	003e3006 	br	be2c <__subdf3+0x84>
    c56c:	10003626 	beq	r2,zero,c648 <__subdf3+0x8a0>
    c570:	2984b03a 	or	r2,r5,r6
    c574:	10001726 	beq	r2,zero,c5d4 <__subdf3+0x82c>
    c578:	1808d0fa 	srli	r4,r3,3
    c57c:	8822d0fa 	srli	r17,r17,3
    c580:	1806977a 	slli	r3,r3,29
    c584:	2080022c 	andhi	r2,r4,8
    c588:	1c62b03a 	or	r17,r3,r17
    c58c:	10000726 	beq	r2,zero,c5ac <__subdf3+0x804>
    c590:	2812d0fa 	srli	r9,r5,3
    c594:	4880022c 	andhi	r2,r9,8
    c598:	1000041e 	bne	r2,zero,c5ac <__subdf3+0x804>
    c59c:	300cd0fa 	srli	r6,r6,3
    c5a0:	2804977a 	slli	r2,r5,29
    c5a4:	4809883a 	mov	r4,r9
    c5a8:	11a2b03a 	or	r17,r2,r6
    c5ac:	8806d77a 	srli	r3,r17,29
    c5b0:	200890fa 	slli	r4,r4,3
    c5b4:	882290fa 	slli	r17,r17,3
    c5b8:	3825883a 	mov	r18,r7
    c5bc:	1906b03a 	or	r3,r3,r4
    c5c0:	0401ffc4 	movi	r16,2047
    c5c4:	003e1906 	br	be2c <__subdf3+0x84>
    c5c8:	000b883a 	mov	r5,zero
    c5cc:	0005883a 	mov	r2,zero
    c5d0:	003e2e06 	br	be8c <__subdf3+0xe4>
    c5d4:	0401ffc4 	movi	r16,2047
    c5d8:	003e1406 	br	be2c <__subdf3+0x84>
    c5dc:	0005883a 	mov	r2,zero
    c5e0:	003f7506 	br	c3b8 <__subdf3+0x610>
    c5e4:	0005883a 	mov	r2,zero
    c5e8:	0009883a 	mov	r4,zero
    c5ec:	003e7806 	br	bfd0 <__subdf3+0x228>
    c5f0:	123ff804 	addi	r8,r2,-32
    c5f4:	01000804 	movi	r4,32
    c5f8:	1a10d83a 	srl	r8,r3,r8
    c5fc:	11002526 	beq	r2,r4,c694 <__subdf3+0x8ec>
    c600:	01001004 	movi	r4,64
    c604:	2085c83a 	sub	r2,r4,r2
    c608:	1884983a 	sll	r2,r3,r2
    c60c:	1444b03a 	or	r2,r2,r17
    c610:	1004c03a 	cmpne	r2,r2,zero
    c614:	40a2b03a 	or	r17,r8,r2
    c618:	0005883a 	mov	r2,zero
    c61c:	003f1606 	br	c278 <__subdf3+0x4d0>
    c620:	02000434 	movhi	r8,16
    c624:	0009883a 	mov	r4,zero
    c628:	423fffc4 	addi	r8,r8,-1
    c62c:	00bfffc4 	movi	r2,-1
    c630:	0401ffc4 	movi	r16,2047
    c634:	003e6606 	br	bfd0 <__subdf3+0x228>
    c638:	1c62b03a 	or	r17,r3,r17
    c63c:	8822c03a 	cmpne	r17,r17,zero
    c640:	0005883a 	mov	r2,zero
    c644:	003f9906 	br	c4ac <__subdf3+0x704>
    c648:	2807883a 	mov	r3,r5
    c64c:	3023883a 	mov	r17,r6
    c650:	0401ffc4 	movi	r16,2047
    c654:	003df506 	br	be2c <__subdf3+0x84>
    c658:	2807883a 	mov	r3,r5
    c65c:	3023883a 	mov	r17,r6
    c660:	003df206 	br	be2c <__subdf3+0x84>
    c664:	123ff804 	addi	r8,r2,-32
    c668:	01000804 	movi	r4,32
    c66c:	1a10d83a 	srl	r8,r3,r8
    c670:	11000a26 	beq	r2,r4,c69c <__subdf3+0x8f4>
    c674:	01001004 	movi	r4,64
    c678:	2085c83a 	sub	r2,r4,r2
    c67c:	1884983a 	sll	r2,r3,r2
    c680:	1444b03a 	or	r2,r2,r17
    c684:	1004c03a 	cmpne	r2,r2,zero
    c688:	40a2b03a 	or	r17,r8,r2
    c68c:	0005883a 	mov	r2,zero
    c690:	003f8606 	br	c4ac <__subdf3+0x704>
    c694:	0005883a 	mov	r2,zero
    c698:	003fdc06 	br	c60c <__subdf3+0x864>
    c69c:	0005883a 	mov	r2,zero
    c6a0:	003ff706 	br	c680 <__subdf3+0x8d8>

0000c6a4 <__fixdfsi>:
    c6a4:	280cd53a 	srli	r6,r5,20
    c6a8:	00c00434 	movhi	r3,16
    c6ac:	18ffffc4 	addi	r3,r3,-1
    c6b0:	3181ffcc 	andi	r6,r6,2047
    c6b4:	01c0ff84 	movi	r7,1022
    c6b8:	28c6703a 	and	r3,r5,r3
    c6bc:	280ad7fa 	srli	r5,r5,31
    c6c0:	3980120e 	bge	r7,r6,c70c <__fixdfsi+0x68>
    c6c4:	00810744 	movi	r2,1053
    c6c8:	11800c16 	blt	r2,r6,c6fc <__fixdfsi+0x58>
    c6cc:	00810cc4 	movi	r2,1075
    c6d0:	1185c83a 	sub	r2,r2,r6
    c6d4:	01c007c4 	movi	r7,31
    c6d8:	18c00434 	orhi	r3,r3,16
    c6dc:	38800d16 	blt	r7,r2,c714 <__fixdfsi+0x70>
    c6e0:	31befb44 	addi	r6,r6,-1043
    c6e4:	2084d83a 	srl	r2,r4,r2
    c6e8:	1986983a 	sll	r3,r3,r6
    c6ec:	1884b03a 	or	r2,r3,r2
    c6f0:	28000726 	beq	r5,zero,c710 <__fixdfsi+0x6c>
    c6f4:	0085c83a 	sub	r2,zero,r2
    c6f8:	f800283a 	ret
    c6fc:	00a00034 	movhi	r2,32768
    c700:	10bfffc4 	addi	r2,r2,-1
    c704:	2885883a 	add	r2,r5,r2
    c708:	f800283a 	ret
    c70c:	0005883a 	mov	r2,zero
    c710:	f800283a 	ret
    c714:	008104c4 	movi	r2,1043
    c718:	1185c83a 	sub	r2,r2,r6
    c71c:	1884d83a 	srl	r2,r3,r2
    c720:	003ff306 	br	c6f0 <__fixdfsi+0x4c>

0000c724 <__floatsidf>:
    c724:	defffd04 	addi	sp,sp,-12
    c728:	dfc00215 	stw	ra,8(sp)
    c72c:	dc400115 	stw	r17,4(sp)
    c730:	dc000015 	stw	r16,0(sp)
    c734:	20002b26 	beq	r4,zero,c7e4 <__floatsidf+0xc0>
    c738:	2023883a 	mov	r17,r4
    c73c:	2020d7fa 	srli	r16,r4,31
    c740:	20002d16 	blt	r4,zero,c7f8 <__floatsidf+0xd4>
    c744:	8809883a 	mov	r4,r17
    c748:	000c8a80 	call	c8a8 <__clzsi2>
    c74c:	01410784 	movi	r5,1054
    c750:	288bc83a 	sub	r5,r5,r2
    c754:	01010cc4 	movi	r4,1075
    c758:	2149c83a 	sub	r4,r4,r5
    c75c:	00c007c4 	movi	r3,31
    c760:	1900160e 	bge	r3,r4,c7bc <__floatsidf+0x98>
    c764:	00c104c4 	movi	r3,1043
    c768:	1947c83a 	sub	r3,r3,r5
    c76c:	88c6983a 	sll	r3,r17,r3
    c770:	00800434 	movhi	r2,16
    c774:	10bfffc4 	addi	r2,r2,-1
    c778:	1886703a 	and	r3,r3,r2
    c77c:	2941ffcc 	andi	r5,r5,2047
    c780:	800d883a 	mov	r6,r16
    c784:	0005883a 	mov	r2,zero
    c788:	280a953a 	slli	r5,r5,20
    c78c:	31803fcc 	andi	r6,r6,255
    c790:	01000434 	movhi	r4,16
    c794:	300c97fa 	slli	r6,r6,31
    c798:	213fffc4 	addi	r4,r4,-1
    c79c:	1906703a 	and	r3,r3,r4
    c7a0:	1946b03a 	or	r3,r3,r5
    c7a4:	1986b03a 	or	r3,r3,r6
    c7a8:	dfc00217 	ldw	ra,8(sp)
    c7ac:	dc400117 	ldw	r17,4(sp)
    c7b0:	dc000017 	ldw	r16,0(sp)
    c7b4:	dec00304 	addi	sp,sp,12
    c7b8:	f800283a 	ret
    c7bc:	00c002c4 	movi	r3,11
    c7c0:	1887c83a 	sub	r3,r3,r2
    c7c4:	88c6d83a 	srl	r3,r17,r3
    c7c8:	8904983a 	sll	r2,r17,r4
    c7cc:	01000434 	movhi	r4,16
    c7d0:	213fffc4 	addi	r4,r4,-1
    c7d4:	2941ffcc 	andi	r5,r5,2047
    c7d8:	1906703a 	and	r3,r3,r4
    c7dc:	800d883a 	mov	r6,r16
    c7e0:	003fe906 	br	c788 <__floatsidf+0x64>
    c7e4:	000d883a 	mov	r6,zero
    c7e8:	000b883a 	mov	r5,zero
    c7ec:	0007883a 	mov	r3,zero
    c7f0:	0005883a 	mov	r2,zero
    c7f4:	003fe406 	br	c788 <__floatsidf+0x64>
    c7f8:	0123c83a 	sub	r17,zero,r4
    c7fc:	003fd106 	br	c744 <__floatsidf+0x20>

0000c800 <__floatunsidf>:
    c800:	defffe04 	addi	sp,sp,-8
    c804:	dc000015 	stw	r16,0(sp)
    c808:	dfc00115 	stw	ra,4(sp)
    c80c:	2021883a 	mov	r16,r4
    c810:	20002226 	beq	r4,zero,c89c <__floatunsidf+0x9c>
    c814:	000c8a80 	call	c8a8 <__clzsi2>
    c818:	01010784 	movi	r4,1054
    c81c:	2089c83a 	sub	r4,r4,r2
    c820:	01810cc4 	movi	r6,1075
    c824:	310dc83a 	sub	r6,r6,r4
    c828:	00c007c4 	movi	r3,31
    c82c:	1980120e 	bge	r3,r6,c878 <__floatunsidf+0x78>
    c830:	00c104c4 	movi	r3,1043
    c834:	1907c83a 	sub	r3,r3,r4
    c838:	80ca983a 	sll	r5,r16,r3
    c83c:	00800434 	movhi	r2,16
    c840:	10bfffc4 	addi	r2,r2,-1
    c844:	2101ffcc 	andi	r4,r4,2047
    c848:	0021883a 	mov	r16,zero
    c84c:	288a703a 	and	r5,r5,r2
    c850:	2008953a 	slli	r4,r4,20
    c854:	00c00434 	movhi	r3,16
    c858:	18ffffc4 	addi	r3,r3,-1
    c85c:	28c6703a 	and	r3,r5,r3
    c860:	8005883a 	mov	r2,r16
    c864:	1906b03a 	or	r3,r3,r4
    c868:	dfc00117 	ldw	ra,4(sp)
    c86c:	dc000017 	ldw	r16,0(sp)
    c870:	dec00204 	addi	sp,sp,8
    c874:	f800283a 	ret
    c878:	00c002c4 	movi	r3,11
    c87c:	188bc83a 	sub	r5,r3,r2
    c880:	814ad83a 	srl	r5,r16,r5
    c884:	00c00434 	movhi	r3,16
    c888:	18ffffc4 	addi	r3,r3,-1
    c88c:	81a0983a 	sll	r16,r16,r6
    c890:	2101ffcc 	andi	r4,r4,2047
    c894:	28ca703a 	and	r5,r5,r3
    c898:	003fed06 	br	c850 <__floatunsidf+0x50>
    c89c:	0009883a 	mov	r4,zero
    c8a0:	000b883a 	mov	r5,zero
    c8a4:	003fea06 	br	c850 <__floatunsidf+0x50>

0000c8a8 <__clzsi2>:
    c8a8:	00bfffd4 	movui	r2,65535
    c8ac:	11000536 	bltu	r2,r4,c8c4 <__clzsi2+0x1c>
    c8b0:	00803fc4 	movi	r2,255
    c8b4:	11000f36 	bltu	r2,r4,c8f4 <__clzsi2+0x4c>
    c8b8:	00800804 	movi	r2,32
    c8bc:	0007883a 	mov	r3,zero
    c8c0:	00000506 	br	c8d8 <__clzsi2+0x30>
    c8c4:	00804034 	movhi	r2,256
    c8c8:	10bfffc4 	addi	r2,r2,-1
    c8cc:	11000c2e 	bgeu	r2,r4,c900 <__clzsi2+0x58>
    c8d0:	00800204 	movi	r2,8
    c8d4:	00c00604 	movi	r3,24
    c8d8:	20c8d83a 	srl	r4,r4,r3
    c8dc:	00c000b4 	movhi	r3,2
    c8e0:	18ea3b04 	addi	r3,r3,-22292
    c8e4:	1909883a 	add	r4,r3,r4
    c8e8:	20c00003 	ldbu	r3,0(r4)
    c8ec:	10c5c83a 	sub	r2,r2,r3
    c8f0:	f800283a 	ret
    c8f4:	00800604 	movi	r2,24
    c8f8:	00c00204 	movi	r3,8
    c8fc:	003ff606 	br	c8d8 <__clzsi2+0x30>
    c900:	00800404 	movi	r2,16
    c904:	1007883a 	mov	r3,r2
    c908:	003ff306 	br	c8d8 <__clzsi2+0x30>

0000c90c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    c90c:	defffc04 	addi	sp,sp,-16
    c910:	df000315 	stw	fp,12(sp)
    c914:	df000304 	addi	fp,sp,12
    c918:	e13ffd15 	stw	r4,-12(fp)
    c91c:	e17ffe15 	stw	r5,-8(fp)
    c920:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    c924:	e0fffe17 	ldw	r3,-8(fp)
    c928:	e0bffd17 	ldw	r2,-12(fp)
    c92c:	18800c26 	beq	r3,r2,c960 <alt_load_section+0x54>
  {
    while( to != end )
    c930:	00000806 	br	c954 <alt_load_section+0x48>
    {
      *to++ = *from++;
    c934:	e0bffe17 	ldw	r2,-8(fp)
    c938:	10c00104 	addi	r3,r2,4
    c93c:	e0fffe15 	stw	r3,-8(fp)
    c940:	e0fffd17 	ldw	r3,-12(fp)
    c944:	19000104 	addi	r4,r3,4
    c948:	e13ffd15 	stw	r4,-12(fp)
    c94c:	18c00017 	ldw	r3,0(r3)
    c950:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    c954:	e0fffe17 	ldw	r3,-8(fp)
    c958:	e0bfff17 	ldw	r2,-4(fp)
    c95c:	18bff51e 	bne	r3,r2,c934 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    c960:	0001883a 	nop
    c964:	e037883a 	mov	sp,fp
    c968:	df000017 	ldw	fp,0(sp)
    c96c:	dec00104 	addi	sp,sp,4
    c970:	f800283a 	ret

0000c974 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    c974:	defffe04 	addi	sp,sp,-8
    c978:	dfc00115 	stw	ra,4(sp)
    c97c:	df000015 	stw	fp,0(sp)
    c980:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    c984:	018000b4 	movhi	r6,2
    c988:	31b2cf04 	addi	r6,r6,-13508
    c98c:	014000b4 	movhi	r5,2
    c990:	296b3004 	addi	r5,r5,-21312
    c994:	010000b4 	movhi	r4,2
    c998:	2132cf04 	addi	r4,r4,-13508
    c99c:	000c90c0 	call	c90c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    c9a0:	01800034 	movhi	r6,0
    c9a4:	31809204 	addi	r6,r6,584
    c9a8:	01400034 	movhi	r5,0
    c9ac:	29400804 	addi	r5,r5,32
    c9b0:	01000034 	movhi	r4,0
    c9b4:	21000804 	addi	r4,r4,32
    c9b8:	000c90c0 	call	c90c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    c9bc:	018000b4 	movhi	r6,2
    c9c0:	31ab3004 	addi	r6,r6,-21312
    c9c4:	014000b4 	movhi	r5,2
    c9c8:	2968d004 	addi	r5,r5,-23744
    c9cc:	010000b4 	movhi	r4,2
    c9d0:	2128d004 	addi	r4,r4,-23744
    c9d4:	000c90c0 	call	c90c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    c9d8:	0018f240 	call	18f24 <alt_dcache_flush_all>
  alt_icache_flush_all();
    c9dc:	00191a00 	call	191a0 <alt_icache_flush_all>
}
    c9e0:	0001883a 	nop
    c9e4:	e037883a 	mov	sp,fp
    c9e8:	dfc00117 	ldw	ra,4(sp)
    c9ec:	df000017 	ldw	fp,0(sp)
    c9f0:	dec00204 	addi	sp,sp,8
    c9f4:	f800283a 	ret

0000c9f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    c9f8:	defff904 	addi	sp,sp,-28
    c9fc:	dfc00615 	stw	ra,24(sp)
    ca00:	df000515 	stw	fp,20(sp)
    ca04:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ca08:	0009883a 	mov	r4,zero
    ca0c:	00162740 	call	16274 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ca10:	000d6e40 	call	d6e4 <OSInit>
    ca14:	01000044 	movi	r4,1
    ca18:	0012b700 	call	12b70 <OSSemCreate>
    ca1c:	d0a7e515 	stw	r2,-24684(gp)
    ca20:	01000044 	movi	r4,1
    ca24:	0012b700 	call	12b70 <OSSemCreate>
    ca28:	d0a7e715 	stw	r2,-24676(gp)
    ca2c:	d0a80304 	addi	r2,gp,-24564
    ca30:	e0bffc15 	stw	r2,-16(fp)
    ca34:	00800044 	movi	r2,1
    ca38:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    ca3c:	e0bffd0b 	ldhu	r2,-12(fp)
    ca40:	1009883a 	mov	r4,r2
    ca44:	0012b700 	call	12b70 <OSSemCreate>
    ca48:	1007883a 	mov	r3,r2
    ca4c:	e0bffc17 	ldw	r2,-16(fp)
    ca50:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ca54:	00162ac0 	call	162ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ca58:	018000b4 	movhi	r6,2
    ca5c:	31aa7b04 	addi	r6,r6,-22036
    ca60:	014000b4 	movhi	r5,2
    ca64:	296a7b04 	addi	r5,r5,-22036
    ca68:	010000b4 	movhi	r4,2
    ca6c:	212a7b04 	addi	r4,r4,-22036
    ca70:	00192980 	call	19298 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ca74:	00190500 	call	19050 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ca78:	010000b4 	movhi	r4,2
    ca7c:	21242c04 	addi	r4,r4,-28496
    ca80:	0019fac0 	call	19fac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ca84:	d0a7e117 	ldw	r2,-24700(gp)
    ca88:	d0e7e217 	ldw	r3,-24696(gp)
    ca8c:	d127e317 	ldw	r4,-24692(gp)
    ca90:	200d883a 	mov	r6,r4
    ca94:	180b883a 	mov	r5,r3
    ca98:	1009883a 	mov	r4,r2
    ca9c:	00002840 	call	284 <main>
    caa0:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    caa4:	01000044 	movi	r4,1
    caa8:	0018e540 	call	18e54 <close>
  exit (result);
    caac:	e13ffb17 	ldw	r4,-20(fp)
    cab0:	0019fc00 	call	19fc0 <exit>

0000cab4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    cab4:	defff904 	addi	sp,sp,-28
    cab8:	df000615 	stw	fp,24(sp)
    cabc:	df000604 	addi	fp,sp,24
    cac0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cac4:	0005303a 	rdctl	r2,status
    cac8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cacc:	e0fffe17 	ldw	r3,-8(fp)
    cad0:	00bfff84 	movi	r2,-2
    cad4:	1884703a 	and	r2,r3,r2
    cad8:	1001703a 	wrctl	status,r2
  
  return context;
    cadc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    cae0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    cae4:	d0a00517 	ldw	r2,-32748(gp)
    cae8:	10c000c4 	addi	r3,r2,3
    caec:	00bfff04 	movi	r2,-4
    caf0:	1884703a 	and	r2,r3,r2
    caf4:	d0a00515 	stw	r2,-32748(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    caf8:	d0e00517 	ldw	r3,-32748(gp)
    cafc:	e0bfff17 	ldw	r2,-4(fp)
    cb00:	1887883a 	add	r3,r3,r2
    cb04:	00810034 	movhi	r2,1024
    cb08:	10800004 	addi	r2,r2,0
    cb0c:	10c0062e 	bgeu	r2,r3,cb28 <sbrk+0x74>
    cb10:	e0bffb17 	ldw	r2,-20(fp)
    cb14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cb18:	e0bffa17 	ldw	r2,-24(fp)
    cb1c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    cb20:	00bfffc4 	movi	r2,-1
    cb24:	00000b06 	br	cb54 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    cb28:	d0a00517 	ldw	r2,-32748(gp)
    cb2c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    cb30:	d0e00517 	ldw	r3,-32748(gp)
    cb34:	e0bfff17 	ldw	r2,-4(fp)
    cb38:	1885883a 	add	r2,r3,r2
    cb3c:	d0a00515 	stw	r2,-32748(gp)
    cb40:	e0bffb17 	ldw	r2,-20(fp)
    cb44:	e0bffc15 	stw	r2,-16(fp)
    cb48:	e0bffc17 	ldw	r2,-16(fp)
    cb4c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    cb50:	e0bffd17 	ldw	r2,-12(fp)
} 
    cb54:	e037883a 	mov	sp,fp
    cb58:	df000017 	ldw	fp,0(sp)
    cb5c:	dec00104 	addi	sp,sp,4
    cb60:	f800283a 	ret

0000cb64 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    cb64:	deffde04 	addi	sp,sp,-136
    cb68:	dfc02115 	stw	ra,132(sp)
    cb6c:	df002015 	stw	fp,128(sp)
    cb70:	df002004 	addi	fp,sp,128
    cb74:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    cb78:	e0bfe104 	addi	r2,fp,-124
    cb7c:	100b883a 	mov	r5,r2
    cb80:	01003fc4 	movi	r4,255
    cb84:	0014af80 	call	14af8 <OSTaskQuery>
    cb88:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    cb8c:	e0bffe83 	ldbu	r2,-6(fp)
    cb90:	10803fcc 	andi	r2,r2,255
    cb94:	10001e1e 	bne	r2,zero,cc10 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    cb98:	e0bfed83 	ldbu	r2,-74(fp)
    cb9c:	10803fcc 	andi	r2,r2,255
    cba0:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    cba4:	d0a7e517 	ldw	r2,-24684(gp)
    cba8:	e0fffc04 	addi	r3,fp,-16
    cbac:	180b883a 	mov	r5,r3
    cbb0:	1009883a 	mov	r4,r2
    cbb4:	00133100 	call	13310 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    cbb8:	e0bffe03 	ldbu	r2,-8(fp)
    cbbc:	10803fcc 	andi	r2,r2,255
    cbc0:	10000726 	beq	r2,zero,cbe0 <__env_lock+0x7c>
    cbc4:	d0a00617 	ldw	r2,-32744(gp)
    cbc8:	e0ffe017 	ldw	r3,-128(fp)
    cbcc:	1880041e 	bne	r3,r2,cbe0 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    cbd0:	d0a7e417 	ldw	r2,-24688(gp)
    cbd4:	10800044 	addi	r2,r2,1
    cbd8:	d0a7e415 	stw	r2,-24688(gp)
    cbdc:	00000a06 	br	cc08 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    cbe0:	d0a7e517 	ldw	r2,-24684(gp)
    cbe4:	e0fffe84 	addi	r3,fp,-6
    cbe8:	180d883a 	mov	r6,r3
    cbec:	000b883a 	mov	r5,zero
    cbf0:	1009883a 	mov	r4,r2
    cbf4:	0012e880 	call	12e88 <OSSemPend>
    locks  = 1;
    cbf8:	00800044 	movi	r2,1
    cbfc:	d0a7e415 	stw	r2,-24688(gp)
    lockid = id;
    cc00:	e0bfe017 	ldw	r2,-128(fp)
    cc04:	d0a00615 	stw	r2,-32744(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    cc08:	0001883a 	nop
    cc0c:	00000106 	br	cc14 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    cc10:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    cc14:	e037883a 	mov	sp,fp
    cc18:	dfc00117 	ldw	ra,4(sp)
    cc1c:	df000017 	ldw	fp,0(sp)
    cc20:	dec00204 	addi	sp,sp,8
    cc24:	f800283a 	ret

0000cc28 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    cc28:	defffd04 	addi	sp,sp,-12
    cc2c:	dfc00215 	stw	ra,8(sp)
    cc30:	df000115 	stw	fp,4(sp)
    cc34:	df000104 	addi	fp,sp,4
    cc38:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    cc3c:	d0a7e417 	ldw	r2,-24688(gp)
    cc40:	10000b26 	beq	r2,zero,cc70 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    cc44:	d0a7e417 	ldw	r2,-24688(gp)
    cc48:	10bfffc4 	addi	r2,r2,-1
    cc4c:	d0a7e415 	stw	r2,-24688(gp)
    cc50:	d0a7e417 	ldw	r2,-24688(gp)
    cc54:	1000071e 	bne	r2,zero,cc74 <__env_unlock+0x4c>
  {
    lockid = -1;
    cc58:	00bfffc4 	movi	r2,-1
    cc5c:	d0a00615 	stw	r2,-32744(gp)
    OSSemPost( alt_envsem );
    cc60:	d0a7e517 	ldw	r2,-24684(gp)
    cc64:	1009883a 	mov	r4,r2
    cc68:	00132000 	call	13200 <OSSemPost>
    cc6c:	00000106 	br	cc74 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    cc70:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    cc74:	e037883a 	mov	sp,fp
    cc78:	dfc00117 	ldw	ra,4(sp)
    cc7c:	df000017 	ldw	fp,0(sp)
    cc80:	dec00204 	addi	sp,sp,8
    cc84:	f800283a 	ret

0000cc88 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    cc88:	deffda04 	addi	sp,sp,-152
    cc8c:	dfc02515 	stw	ra,148(sp)
    cc90:	df002415 	stw	fp,144(sp)
    cc94:	df002404 	addi	fp,sp,144
    cc98:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    cc9c:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    cca0:	d0a7eb03 	ldbu	r2,-24660(gp)
    cca4:	10803fcc 	andi	r2,r2,255
    cca8:	10800060 	cmpeqi	r2,r2,1
    ccac:	10003626 	beq	r2,zero,cd88 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    ccb0:	e0bfe104 	addi	r2,fp,-124
    ccb4:	100b883a 	mov	r5,r2
    ccb8:	01003fc4 	movi	r4,255
    ccbc:	0014af80 	call	14af8 <OSTaskQuery>
    ccc0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    ccc4:	e0bffe83 	ldbu	r2,-6(fp)
    ccc8:	10803fcc 	andi	r2,r2,255
    cccc:	1000301e 	bne	r2,zero,cd90 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    ccd0:	e0bfed83 	ldbu	r2,-74(fp)
    ccd4:	10803fcc 	andi	r2,r2,255
    ccd8:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    ccdc:	d0a7e717 	ldw	r2,-24676(gp)
    cce0:	e0fffc04 	addi	r3,fp,-16
    cce4:	180b883a 	mov	r5,r3
    cce8:	1009883a 	mov	r4,r2
    ccec:	00133100 	call	13310 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ccf0:	0005303a 	rdctl	r2,status
    ccf4:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ccf8:	e0ffe017 	ldw	r3,-128(fp)
    ccfc:	00bfff84 	movi	r2,-2
    cd00:	1884703a 	and	r2,r3,r2
    cd04:	1001703a 	wrctl	status,r2
  
  return context;
    cd08:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
    cd0c:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
    cd10:	e0bffc0b 	ldhu	r2,-16(fp)
    cd14:	10bfffcc 	andi	r2,r2,65535
    cd18:	10000b1e 	bne	r2,zero,cd48 <__malloc_lock+0xc0>
    cd1c:	d0a00717 	ldw	r2,-32740(gp)
    cd20:	e0ffdd17 	ldw	r3,-140(fp)
    cd24:	1880081e 	bne	r3,r2,cd48 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    cd28:	d0a7e617 	ldw	r2,-24680(gp)
    cd2c:	10800044 	addi	r2,r2,1
    cd30:	d0a7e615 	stw	r2,-24680(gp)
    cd34:	e0bfdc17 	ldw	r2,-144(fp)
    cd38:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cd3c:	e0bfde17 	ldw	r2,-136(fp)
    cd40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    cd44:	00000e06 	br	cd80 <__malloc_lock+0xf8>
    cd48:	e0bfdc17 	ldw	r2,-144(fp)
    cd4c:	e0bfdf15 	stw	r2,-132(fp)
    cd50:	e0bfdf17 	ldw	r2,-132(fp)
    cd54:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    cd58:	d0a7e717 	ldw	r2,-24676(gp)
    cd5c:	e0fffe84 	addi	r3,fp,-6
    cd60:	180d883a 	mov	r6,r3
    cd64:	000b883a 	mov	r5,zero
    cd68:	1009883a 	mov	r4,r2
    cd6c:	0012e880 	call	12e88 <OSSemPend>
    locks  = 1;
    cd70:	00800044 	movi	r2,1
    cd74:	d0a7e615 	stw	r2,-24680(gp)
    lockid = id;
    cd78:	e0bfdd17 	ldw	r2,-140(fp)
    cd7c:	d0a00715 	stw	r2,-32740(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    cd80:	0001883a 	nop
    cd84:	00000306 	br	cd94 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    cd88:	0001883a 	nop
    cd8c:	00000106 	br	cd94 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    cd90:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    cd94:	e037883a 	mov	sp,fp
    cd98:	dfc00117 	ldw	ra,4(sp)
    cd9c:	df000017 	ldw	fp,0(sp)
    cda0:	dec00204 	addi	sp,sp,8
    cda4:	f800283a 	ret

0000cda8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    cda8:	defff804 	addi	sp,sp,-32
    cdac:	dfc00715 	stw	ra,28(sp)
    cdb0:	df000615 	stw	fp,24(sp)
    cdb4:	df000604 	addi	fp,sp,24
    cdb8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    cdbc:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    cdc0:	d0a7eb03 	ldbu	r2,-24660(gp)
    cdc4:	10803fcc 	andi	r2,r2,255
    cdc8:	10800060 	cmpeqi	r2,r2,1
    cdcc:	10002326 	beq	r2,zero,ce5c <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cdd0:	0005303a 	rdctl	r2,status
    cdd4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cdd8:	e0fffe17 	ldw	r3,-8(fp)
    cddc:	00bfff84 	movi	r2,-2
    cde0:	1884703a 	and	r2,r3,r2
    cde4:	1001703a 	wrctl	status,r2
  
  return context;
    cde8:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    cdec:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    cdf0:	d0a7e617 	ldw	r2,-24680(gp)
    cdf4:	1000051e 	bne	r2,zero,ce0c <__malloc_unlock+0x64>
    cdf8:	e0bffa17 	ldw	r2,-24(fp)
    cdfc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ce00:	e0bffb17 	ldw	r2,-20(fp)
    ce04:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    ce08:	00001506 	br	ce60 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    ce0c:	d0a7e617 	ldw	r2,-24680(gp)
    ce10:	10bfffc4 	addi	r2,r2,-1
    ce14:	d0a7e615 	stw	r2,-24680(gp)
    ce18:	d0a7e617 	ldw	r2,-24680(gp)
    ce1c:	10000a1e 	bne	r2,zero,ce48 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    ce20:	00bfffc4 	movi	r2,-1
    ce24:	d0a00715 	stw	r2,-32740(gp)
    ce28:	e0bffa17 	ldw	r2,-24(fp)
    ce2c:	e0bffc15 	stw	r2,-16(fp)
    ce30:	e0bffc17 	ldw	r2,-16(fp)
    ce34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    ce38:	d0a7e717 	ldw	r2,-24676(gp)
    ce3c:	1009883a 	mov	r4,r2
    ce40:	00132000 	call	13200 <OSSemPost>
    ce44:	00000606 	br	ce60 <__malloc_unlock+0xb8>
    ce48:	e0bffa17 	ldw	r2,-24(fp)
    ce4c:	e0bffd15 	stw	r2,-12(fp)
    ce50:	e0bffd17 	ldw	r2,-12(fp)
    ce54:	1001703a 	wrctl	status,r2
    ce58:	00000106 	br	ce60 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    ce5c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    ce60:	e037883a 	mov	sp,fp
    ce64:	dfc00117 	ldw	ra,4(sp)
    ce68:	df000017 	ldw	fp,0(sp)
    ce6c:	dec00204 	addi	sp,sp,8
    ce70:	f800283a 	ret

0000ce74 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    ce74:	defff704 	addi	sp,sp,-36
    ce78:	dfc00815 	stw	ra,32(sp)
    ce7c:	df000715 	stw	fp,28(sp)
    ce80:	df000704 	addi	fp,sp,28
    ce84:	e13ffd15 	stw	r4,-12(fp)
    ce88:	e17ffe15 	stw	r5,-8(fp)
    ce8c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ce90:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    ce94:	e0bfff17 	ldw	r2,-4(fp)
    ce98:	1000021e 	bne	r2,zero,cea4 <OSEventNameGet+0x30>
        return (0);
    ce9c:	0005883a 	mov	r2,zero
    cea0:	00003706 	br	cf80 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    cea4:	e0bffd17 	ldw	r2,-12(fp)
    cea8:	1000051e 	bne	r2,zero,cec0 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    ceac:	e0bfff17 	ldw	r2,-4(fp)
    ceb0:	00c00104 	movi	r3,4
    ceb4:	10c00005 	stb	r3,0(r2)
        return (0);
    ceb8:	0005883a 	mov	r2,zero
    cebc:	00003006 	br	cf80 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    cec0:	e0bffe17 	ldw	r2,-8(fp)
    cec4:	1000051e 	bne	r2,zero,cedc <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    cec8:	e0bfff17 	ldw	r2,-4(fp)
    cecc:	00c00304 	movi	r3,12
    ced0:	10c00005 	stb	r3,0(r2)
        return (0);
    ced4:	0005883a 	mov	r2,zero
    ced8:	00002906 	br	cf80 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    cedc:	d0a7fb03 	ldbu	r2,-24596(gp)
    cee0:	10803fcc 	andi	r2,r2,255
    cee4:	10000526 	beq	r2,zero,cefc <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    cee8:	e0bfff17 	ldw	r2,-4(fp)
    ceec:	00c00444 	movi	r3,17
    cef0:	10c00005 	stb	r3,0(r2)
        return (0);
    cef4:	0005883a 	mov	r2,zero
    cef8:	00002106 	br	cf80 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    cefc:	e0bffd17 	ldw	r2,-12(fp)
    cf00:	10800003 	ldbu	r2,0(r2)
    cf04:	10803fcc 	andi	r2,r2,255
    cf08:	10bfffc4 	addi	r2,r2,-1
    cf0c:	10800128 	cmpgeui	r2,r2,4
    cf10:	10000526 	beq	r2,zero,cf28 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    cf14:	e0bfff17 	ldw	r2,-4(fp)
    cf18:	00c00044 	movi	r3,1
    cf1c:	10c00005 	stb	r3,0(r2)
             return (0);
    cf20:	0005883a 	mov	r2,zero
    cf24:	00001606 	br	cf80 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    cf28:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cf2c:	0005303a 	rdctl	r2,status
    cf30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cf34:	e0fffb17 	ldw	r3,-20(fp)
    cf38:	00bfff84 	movi	r2,-2
    cf3c:	1884703a 	and	r2,r3,r2
    cf40:	1001703a 	wrctl	status,r2
  
  return context;
    cf44:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    cf48:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    cf4c:	e0bffd17 	ldw	r2,-12(fp)
    cf50:	10800444 	addi	r2,r2,17
    cf54:	100b883a 	mov	r5,r2
    cf58:	e13ffe17 	ldw	r4,-8(fp)
    cf5c:	000e8fc0 	call	e8fc <OS_StrCopy>
    cf60:	e0bffa05 	stb	r2,-24(fp)
    cf64:	e0bff917 	ldw	r2,-28(fp)
    cf68:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cf6c:	e0bffc17 	ldw	r2,-16(fp)
    cf70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    cf74:	e0bfff17 	ldw	r2,-4(fp)
    cf78:	10000005 	stb	zero,0(r2)
    return (len);
    cf7c:	e0bffa03 	ldbu	r2,-24(fp)
}
    cf80:	e037883a 	mov	sp,fp
    cf84:	dfc00117 	ldw	ra,4(sp)
    cf88:	df000017 	ldw	fp,0(sp)
    cf8c:	dec00204 	addi	sp,sp,8
    cf90:	f800283a 	ret

0000cf94 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    cf94:	defff604 	addi	sp,sp,-40
    cf98:	dfc00915 	stw	ra,36(sp)
    cf9c:	df000815 	stw	fp,32(sp)
    cfa0:	df000804 	addi	fp,sp,32
    cfa4:	e13ffd15 	stw	r4,-12(fp)
    cfa8:	e17ffe15 	stw	r5,-8(fp)
    cfac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    cfb0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    cfb4:	e0bfff17 	ldw	r2,-4(fp)
    cfb8:	10004026 	beq	r2,zero,d0bc <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    cfbc:	e0bffd17 	ldw	r2,-12(fp)
    cfc0:	1000041e 	bne	r2,zero,cfd4 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    cfc4:	e0bfff17 	ldw	r2,-4(fp)
    cfc8:	00c00104 	movi	r3,4
    cfcc:	10c00005 	stb	r3,0(r2)
        return;
    cfd0:	00003b06 	br	d0c0 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    cfd4:	e0bffe17 	ldw	r2,-8(fp)
    cfd8:	1000041e 	bne	r2,zero,cfec <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    cfdc:	e0bfff17 	ldw	r2,-4(fp)
    cfe0:	00c00304 	movi	r3,12
    cfe4:	10c00005 	stb	r3,0(r2)
        return;
    cfe8:	00003506 	br	d0c0 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    cfec:	d0a7fb03 	ldbu	r2,-24596(gp)
    cff0:	10803fcc 	andi	r2,r2,255
    cff4:	10000426 	beq	r2,zero,d008 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    cff8:	e0bfff17 	ldw	r2,-4(fp)
    cffc:	00c00484 	movi	r3,18
    d000:	10c00005 	stb	r3,0(r2)
        return;
    d004:	00002e06 	br	d0c0 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    d008:	e0bffd17 	ldw	r2,-12(fp)
    d00c:	10800003 	ldbu	r2,0(r2)
    d010:	10803fcc 	andi	r2,r2,255
    d014:	10bfffc4 	addi	r2,r2,-1
    d018:	10800128 	cmpgeui	r2,r2,4
    d01c:	10000426 	beq	r2,zero,d030 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    d020:	e0bfff17 	ldw	r2,-4(fp)
    d024:	00c00044 	movi	r3,1
    d028:	10c00005 	stb	r3,0(r2)
             return;
    d02c:	00002406 	br	d0c0 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    d030:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d034:	0005303a 	rdctl	r2,status
    d038:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d03c:	e0fffc17 	ldw	r3,-16(fp)
    d040:	00bfff84 	movi	r2,-2
    d044:	1884703a 	and	r2,r3,r2
    d048:	1001703a 	wrctl	status,r2
  
  return context;
    d04c:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    d050:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    d054:	e13ffe17 	ldw	r4,-8(fp)
    d058:	000e9700 	call	e970 <OS_StrLen>
    d05c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    d060:	e0bffa03 	ldbu	r2,-24(fp)
    d064:	10800830 	cmpltui	r2,r2,32
    d068:	1000081e 	bne	r2,zero,d08c <OSEventNameSet+0xf8>
    d06c:	e0bff817 	ldw	r2,-32(fp)
    d070:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d074:	e0bff917 	ldw	r2,-28(fp)
    d078:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    d07c:	e0bfff17 	ldw	r2,-4(fp)
    d080:	00c002c4 	movi	r3,11
    d084:	10c00005 	stb	r3,0(r2)
        return;
    d088:	00000d06 	br	d0c0 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    d08c:	e0bffd17 	ldw	r2,-12(fp)
    d090:	10800444 	addi	r2,r2,17
    d094:	e17ffe17 	ldw	r5,-8(fp)
    d098:	1009883a 	mov	r4,r2
    d09c:	000e8fc0 	call	e8fc <OS_StrCopy>
    d0a0:	e0bff817 	ldw	r2,-32(fp)
    d0a4:	e0bffb15 	stw	r2,-20(fp)
    d0a8:	e0bffb17 	ldw	r2,-20(fp)
    d0ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    d0b0:	e0bfff17 	ldw	r2,-4(fp)
    d0b4:	10000005 	stb	zero,0(r2)
    d0b8:	00000106 	br	d0c0 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    d0bc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    d0c0:	e037883a 	mov	sp,fp
    d0c4:	dfc00117 	ldw	ra,4(sp)
    d0c8:	df000017 	ldw	fp,0(sp)
    d0cc:	dec00204 	addi	sp,sp,8
    d0d0:	f800283a 	ret

0000d0d4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    d0d4:	deffed04 	addi	sp,sp,-76
    d0d8:	dfc01215 	stw	ra,72(sp)
    d0dc:	df001115 	stw	fp,68(sp)
    d0e0:	df001104 	addi	fp,sp,68
    d0e4:	e13ffc15 	stw	r4,-16(fp)
    d0e8:	e17ffd15 	stw	r5,-12(fp)
    d0ec:	e1bffe15 	stw	r6,-8(fp)
    d0f0:	3805883a 	mov	r2,r7
    d0f4:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    d0f8:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    d0fc:	e0800217 	ldw	r2,8(fp)
    d100:	1000021e 	bne	r2,zero,d10c <OSEventPendMulti+0x38>
        return (0);
    d104:	0005883a 	mov	r2,zero
    d108:	00017106 	br	d6d0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    d10c:	e0bffc17 	ldw	r2,-16(fp)
    d110:	1000051e 	bne	r2,zero,d128 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    d114:	e0800217 	ldw	r2,8(fp)
    d118:	00c00104 	movi	r3,4
    d11c:	10c00005 	stb	r3,0(r2)
        return (0);
    d120:	0005883a 	mov	r2,zero
    d124:	00016a06 	br	d6d0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    d128:	e0bffd17 	ldw	r2,-12(fp)
    d12c:	1000051e 	bne	r2,zero,d144 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    d130:	e0800217 	ldw	r2,8(fp)
    d134:	00c00104 	movi	r3,4
    d138:	10c00005 	stb	r3,0(r2)
        return (0);
    d13c:	0005883a 	mov	r2,zero
    d140:	00016306 	br	d6d0 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    d144:	e0bffe17 	ldw	r2,-8(fp)
    d148:	1000051e 	bne	r2,zero,d160 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    d14c:	e0800217 	ldw	r2,8(fp)
    d150:	00c00104 	movi	r3,4
    d154:	10c00005 	stb	r3,0(r2)
        return (0);
    d158:	0005883a 	mov	r2,zero
    d15c:	00015c06 	br	d6d0 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    d160:	e0bffd17 	ldw	r2,-12(fp)
    d164:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    d168:	e0bffc17 	ldw	r2,-16(fp)
    d16c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    d170:	e0bfef17 	ldw	r2,-68(fp)
    d174:	10800017 	ldw	r2,0(r2)
    d178:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    d17c:	00001906 	br	d1e4 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    d180:	e0bff017 	ldw	r2,-64(fp)
    d184:	10800003 	ldbu	r2,0(r2)
    d188:	10803fcc 	andi	r2,r2,255
    d18c:	10c000a0 	cmpeqi	r3,r2,2
    d190:	1800091e 	bne	r3,zero,d1b8 <OSEventPendMulti+0xe4>
    d194:	10c000e0 	cmpeqi	r3,r2,3
    d198:	1800091e 	bne	r3,zero,d1c0 <OSEventPendMulti+0xec>
    d19c:	10800060 	cmpeqi	r2,r2,1
    d1a0:	1000091e 	bne	r2,zero,d1c8 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    d1a4:	e0800217 	ldw	r2,8(fp)
    d1a8:	00c00044 	movi	r3,1
    d1ac:	10c00005 	stb	r3,0(r2)
                 return (0);
    d1b0:	0005883a 	mov	r2,zero
    d1b4:	00014606 	br	d6d0 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    d1b8:	0001883a 	nop
    d1bc:	00000306 	br	d1cc <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    d1c0:	0001883a 	nop
    d1c4:	00000106 	br	d1cc <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    d1c8:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    d1cc:	e0bfef17 	ldw	r2,-68(fp)
    d1d0:	10800104 	addi	r2,r2,4
    d1d4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    d1d8:	e0bfef17 	ldw	r2,-68(fp)
    d1dc:	10800017 	ldw	r2,0(r2)
    d1e0:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    d1e4:	e0bff017 	ldw	r2,-64(fp)
    d1e8:	103fe51e 	bne	r2,zero,d180 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    d1ec:	d0a7fb03 	ldbu	r2,-24596(gp)
    d1f0:	10803fcc 	andi	r2,r2,255
    d1f4:	10000526 	beq	r2,zero,d20c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    d1f8:	e0800217 	ldw	r2,8(fp)
    d1fc:	00c00084 	movi	r3,2
    d200:	10c00005 	stb	r3,0(r2)
        return (0);
    d204:	0005883a 	mov	r2,zero
    d208:	00013106 	br	d6d0 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    d20c:	d0a7e903 	ldbu	r2,-24668(gp)
    d210:	10803fcc 	andi	r2,r2,255
    d214:	10000526 	beq	r2,zero,d22c <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    d218:	e0800217 	ldw	r2,8(fp)
    d21c:	00c00344 	movi	r3,13
    d220:	10c00005 	stb	r3,0(r2)
        return (0);
    d224:	0005883a 	mov	r2,zero
    d228:	00012906 	br	d6d0 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d22c:	0005303a 	rdctl	r2,status
    d230:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d234:	e0fffb17 	ldw	r3,-20(fp)
    d238:	00bfff84 	movi	r2,-2
    d23c:	1884703a 	and	r2,r3,r2
    d240:	1001703a 	wrctl	status,r2
  
  return context;
    d244:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    d248:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    d24c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    d250:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    d254:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    d258:	e0bffc17 	ldw	r2,-16(fp)
    d25c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    d260:	e0bfef17 	ldw	r2,-68(fp)
    d264:	10800017 	ldw	r2,0(r2)
    d268:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    d26c:	00008106 	br	d474 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    d270:	e0bff017 	ldw	r2,-64(fp)
    d274:	10800003 	ldbu	r2,0(r2)
    d278:	10803fcc 	andi	r2,r2,255
    d27c:	10c000a0 	cmpeqi	r3,r2,2
    d280:	18003c1e 	bne	r3,zero,d374 <OSEventPendMulti+0x2a0>
    d284:	10c000e0 	cmpeqi	r3,r2,3
    d288:	1800031e 	bne	r3,zero,d298 <OSEventPendMulti+0x1c4>
    d28c:	10800060 	cmpeqi	r2,r2,1
    d290:	10001e1e 	bne	r2,zero,d30c <OSEventPendMulti+0x238>
    d294:	00006606 	br	d430 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    d298:	e0bff017 	ldw	r2,-64(fp)
    d29c:	1080020b 	ldhu	r2,8(r2)
    d2a0:	10bfffcc 	andi	r2,r2,65535
    d2a4:	10001526 	beq	r2,zero,d2fc <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    d2a8:	e0bff017 	ldw	r2,-64(fp)
    d2ac:	1080020b 	ldhu	r2,8(r2)
    d2b0:	10bfffc4 	addi	r2,r2,-1
    d2b4:	1007883a 	mov	r3,r2
    d2b8:	e0bff017 	ldw	r2,-64(fp)
    d2bc:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    d2c0:	e0bffd17 	ldw	r2,-12(fp)
    d2c4:	10c00104 	addi	r3,r2,4
    d2c8:	e0fffd15 	stw	r3,-12(fp)
    d2cc:	e0fff017 	ldw	r3,-64(fp)
    d2d0:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    d2d4:	00800044 	movi	r2,1
    d2d8:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    d2dc:	e0bffe17 	ldw	r2,-8(fp)
    d2e0:	10c00104 	addi	r3,r2,4
    d2e4:	e0fffe15 	stw	r3,-8(fp)
    d2e8:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    d2ec:	e0bff18b 	ldhu	r2,-58(fp)
    d2f0:	10800044 	addi	r2,r2,1
    d2f4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    d2f8:	00005806 	br	d45c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    d2fc:	e0bff203 	ldbu	r2,-56(fp)
    d300:	10800054 	ori	r2,r2,1
    d304:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    d308:	00005406 	br	d45c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    d30c:	e0bff017 	ldw	r2,-64(fp)
    d310:	10800117 	ldw	r2,4(r2)
    d314:	10001326 	beq	r2,zero,d364 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    d318:	e0bffe17 	ldw	r2,-8(fp)
    d31c:	10c00104 	addi	r3,r2,4
    d320:	e0fffe15 	stw	r3,-8(fp)
    d324:	e0fff017 	ldw	r3,-64(fp)
    d328:	18c00117 	ldw	r3,4(r3)
    d32c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    d330:	e0bff017 	ldw	r2,-64(fp)
    d334:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    d338:	e0bffd17 	ldw	r2,-12(fp)
    d33c:	10c00104 	addi	r3,r2,4
    d340:	e0fffd15 	stw	r3,-12(fp)
    d344:	e0fff017 	ldw	r3,-64(fp)
    d348:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    d34c:	00800044 	movi	r2,1
    d350:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    d354:	e0bff18b 	ldhu	r2,-58(fp)
    d358:	10800044 	addi	r2,r2,1
    d35c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    d360:	00003e06 	br	d45c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    d364:	e0bff203 	ldbu	r2,-56(fp)
    d368:	10800094 	ori	r2,r2,2
    d36c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    d370:	00003a06 	br	d45c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    d374:	e0bff017 	ldw	r2,-64(fp)
    d378:	10800117 	ldw	r2,4(r2)
    d37c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    d380:	e0bff517 	ldw	r2,-44(fp)
    d384:	1080058b 	ldhu	r2,22(r2)
    d388:	10bfffcc 	andi	r2,r2,65535
    d38c:	10002426 	beq	r2,zero,d420 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    d390:	e0bffe17 	ldw	r2,-8(fp)
    d394:	10c00104 	addi	r3,r2,4
    d398:	e0fffe15 	stw	r3,-8(fp)
    d39c:	e0fff517 	ldw	r3,-44(fp)
    d3a0:	18c00417 	ldw	r3,16(r3)
    d3a4:	19400104 	addi	r5,r3,4
    d3a8:	e13ff517 	ldw	r4,-44(fp)
    d3ac:	21400415 	stw	r5,16(r4)
    d3b0:	18c00017 	ldw	r3,0(r3)
    d3b4:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    d3b8:	e0bff517 	ldw	r2,-44(fp)
    d3bc:	10c00417 	ldw	r3,16(r2)
    d3c0:	e0bff517 	ldw	r2,-44(fp)
    d3c4:	10800217 	ldw	r2,8(r2)
    d3c8:	1880041e 	bne	r3,r2,d3dc <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    d3cc:	e0bff517 	ldw	r2,-44(fp)
    d3d0:	10c00117 	ldw	r3,4(r2)
    d3d4:	e0bff517 	ldw	r2,-44(fp)
    d3d8:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    d3dc:	e0bff517 	ldw	r2,-44(fp)
    d3e0:	1080058b 	ldhu	r2,22(r2)
    d3e4:	10bfffc4 	addi	r2,r2,-1
    d3e8:	1007883a 	mov	r3,r2
    d3ec:	e0bff517 	ldw	r2,-44(fp)
    d3f0:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    d3f4:	e0bffd17 	ldw	r2,-12(fp)
    d3f8:	10c00104 	addi	r3,r2,4
    d3fc:	e0fffd15 	stw	r3,-12(fp)
    d400:	e0fff017 	ldw	r3,-64(fp)
    d404:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    d408:	00800044 	movi	r2,1
    d40c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    d410:	e0bff18b 	ldhu	r2,-58(fp)
    d414:	10800044 	addi	r2,r2,1
    d418:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    d41c:	00000f06 	br	d45c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    d420:	e0bff203 	ldbu	r2,-56(fp)
    d424:	10800114 	ori	r2,r2,4
    d428:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    d42c:	00000b06 	br	d45c <OSEventPendMulti+0x388>
    d430:	e0bff317 	ldw	r2,-52(fp)
    d434:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d438:	e0bff417 	ldw	r2,-48(fp)
    d43c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    d440:	e0bffd17 	ldw	r2,-12(fp)
    d444:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    d448:	e0800217 	ldw	r2,8(fp)
    d44c:	00c00044 	movi	r3,1
    d450:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    d454:	e0bff18b 	ldhu	r2,-58(fp)
    d458:	00009d06 	br	d6d0 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    d45c:	e0bfef17 	ldw	r2,-68(fp)
    d460:	10800104 	addi	r2,r2,4
    d464:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    d468:	e0bfef17 	ldw	r2,-68(fp)
    d46c:	10800017 	ldw	r2,0(r2)
    d470:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    d474:	e0bff017 	ldw	r2,-64(fp)
    d478:	103f7d1e 	bne	r2,zero,d270 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    d47c:	e0bff103 	ldbu	r2,-60(fp)
    d480:	10800058 	cmpnei	r2,r2,1
    d484:	10000a1e 	bne	r2,zero,d4b0 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    d488:	e0bffd17 	ldw	r2,-12(fp)
    d48c:	10000015 	stw	zero,0(r2)
    d490:	e0bff317 	ldw	r2,-52(fp)
    d494:	e0bff615 	stw	r2,-40(fp)
    d498:	e0bff617 	ldw	r2,-40(fp)
    d49c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    d4a0:	e0800217 	ldw	r2,8(fp)
    d4a4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    d4a8:	e0bff18b 	ldhu	r2,-58(fp)
    d4ac:	00008806 	br	d6d0 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    d4b0:	d0a7fc17 	ldw	r2,-24592(gp)
    d4b4:	d0e7fc17 	ldw	r3,-24592(gp)
    d4b8:	19000c03 	ldbu	r4,48(r3)
    d4bc:	e0fff203 	ldbu	r3,-56(fp)
    d4c0:	20c6b03a 	or	r3,r4,r3
    d4c4:	1809883a 	mov	r4,r3
    d4c8:	00ffe004 	movi	r3,-128
    d4cc:	20c6b03a 	or	r3,r4,r3
    d4d0:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    d4d4:	d0a7fc17 	ldw	r2,-24592(gp)
    d4d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    d4dc:	d0a7fc17 	ldw	r2,-24592(gp)
    d4e0:	e0ffff0b 	ldhu	r3,-4(fp)
    d4e4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    d4e8:	e13ffc17 	ldw	r4,-16(fp)
    d4ec:	000e0140 	call	e014 <OS_EventTaskWaitMulti>
    d4f0:	e0bff317 	ldw	r2,-52(fp)
    d4f4:	e0bff915 	stw	r2,-28(fp)
    d4f8:	e0bff917 	ldw	r2,-28(fp)
    d4fc:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    d500:	000e7b80 	call	e7b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d504:	0005303a 	rdctl	r2,status
    d508:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d50c:	e0fff717 	ldw	r3,-36(fp)
    d510:	00bfff84 	movi	r2,-2
    d514:	1884703a 	and	r2,r3,r2
    d518:	1001703a 	wrctl	status,r2
  
  return context;
    d51c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    d520:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    d524:	d0a7fc17 	ldw	r2,-24592(gp)
    d528:	10800c43 	ldbu	r2,49(r2)
    d52c:	10803fcc 	andi	r2,r2,255
    d530:	10000226 	beq	r2,zero,d53c <OSEventPendMulti+0x468>
    d534:	108000a0 	cmpeqi	r2,r2,2
    d538:	10001826 	beq	r2,zero,d59c <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    d53c:	d0a7fc17 	ldw	r2,-24592(gp)
    d540:	10800717 	ldw	r2,28(r2)
    d544:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    d548:	e0bff017 	ldw	r2,-64(fp)
    d54c:	10000b26 	beq	r2,zero,d57c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    d550:	e0bffd17 	ldw	r2,-12(fp)
    d554:	10c00104 	addi	r3,r2,4
    d558:	e0fffd15 	stw	r3,-12(fp)
    d55c:	e0fff017 	ldw	r3,-64(fp)
    d560:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    d564:	e0bffd17 	ldw	r2,-12(fp)
    d568:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    d56c:	e0bff18b 	ldhu	r2,-58(fp)
    d570:	10800044 	addi	r2,r2,1
    d574:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    d578:	00000d06 	br	d5b0 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    d57c:	d0a7fc17 	ldw	r2,-24592(gp)
    d580:	00c00044 	movi	r3,1
    d584:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    d588:	d0a7fc17 	ldw	r2,-24592(gp)
    d58c:	e17ffc17 	ldw	r5,-16(fp)
    d590:	1009883a 	mov	r4,r2
    d594:	000e21c0 	call	e21c <OS_EventTaskRemoveMulti>
             }
			 break;
    d598:	00000506 	br	d5b0 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    d59c:	d0a7fc17 	ldw	r2,-24592(gp)
    d5a0:	e17ffc17 	ldw	r5,-16(fp)
    d5a4:	1009883a 	mov	r4,r2
    d5a8:	000e21c0 	call	e21c <OS_EventTaskRemoveMulti>
             break;
    d5ac:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    d5b0:	d0a7fc17 	ldw	r2,-24592(gp)
    d5b4:	10800c43 	ldbu	r2,49(r2)
    d5b8:	10803fcc 	andi	r2,r2,255
    d5bc:	10000326 	beq	r2,zero,d5cc <OSEventPendMulti+0x4f8>
    d5c0:	108000a0 	cmpeqi	r2,r2,2
    d5c4:	1000231e 	bne	r2,zero,d654 <OSEventPendMulti+0x580>
    d5c8:	00002a06 	br	d674 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    d5cc:	e0bff017 	ldw	r2,-64(fp)
    d5d0:	10800003 	ldbu	r2,0(r2)
    d5d4:	10803fcc 	andi	r2,r2,255
    d5d8:	0080100e 	bge	zero,r2,d61c <OSEventPendMulti+0x548>
    d5dc:	10c000d0 	cmplti	r3,r2,3
    d5e0:	1800071e 	bne	r3,zero,d600 <OSEventPendMulti+0x52c>
    d5e4:	108000e0 	cmpeqi	r2,r2,3
    d5e8:	10000c26 	beq	r2,zero,d61c <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    d5ec:	e0bffe17 	ldw	r2,-8(fp)
    d5f0:	10c00104 	addi	r3,r2,4
    d5f4:	e0fffe15 	stw	r3,-8(fp)
    d5f8:	10000015 	stw	zero,0(r2)
                      break;
    d5fc:	00001206 	br	d648 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    d600:	e0bffe17 	ldw	r2,-8(fp)
    d604:	10c00104 	addi	r3,r2,4
    d608:	e0fffe15 	stw	r3,-8(fp)
    d60c:	d0e7fc17 	ldw	r3,-24592(gp)
    d610:	18c00917 	ldw	r3,36(r3)
    d614:	10c00015 	stw	r3,0(r2)
                      break;
    d618:	00000b06 	br	d648 <OSEventPendMulti+0x574>
    d61c:	e0bff317 	ldw	r2,-52(fp)
    d620:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d624:	e0bff817 	ldw	r2,-32(fp)
    d628:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    d62c:	e0bffd17 	ldw	r2,-12(fp)
    d630:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    d634:	e0800217 	ldw	r2,8(fp)
    d638:	00c00044 	movi	r3,1
    d63c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    d640:	e0bff18b 	ldhu	r2,-58(fp)
    d644:	00002206 	br	d6d0 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    d648:	e0800217 	ldw	r2,8(fp)
    d64c:	10000005 	stb	zero,0(r2)
             break;
    d650:	00001006 	br	d694 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    d654:	e0bffe17 	ldw	r2,-8(fp)
    d658:	10c00104 	addi	r3,r2,4
    d65c:	e0fffe15 	stw	r3,-8(fp)
    d660:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    d664:	e0800217 	ldw	r2,8(fp)
    d668:	00c00384 	movi	r3,14
    d66c:	10c00005 	stb	r3,0(r2)
             break;
    d670:	00000806 	br	d694 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    d674:	e0bffe17 	ldw	r2,-8(fp)
    d678:	10c00104 	addi	r3,r2,4
    d67c:	e0fffe15 	stw	r3,-8(fp)
    d680:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    d684:	e0800217 	ldw	r2,8(fp)
    d688:	00c00284 	movi	r3,10
    d68c:	10c00005 	stb	r3,0(r2)
             break;
    d690:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    d694:	d0a7fc17 	ldw	r2,-24592(gp)
    d698:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    d69c:	d0a7fc17 	ldw	r2,-24592(gp)
    d6a0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    d6a4:	d0a7fc17 	ldw	r2,-24592(gp)
    d6a8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    d6ac:	d0a7fc17 	ldw	r2,-24592(gp)
    d6b0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    d6b4:	d0a7fc17 	ldw	r2,-24592(gp)
    d6b8:	10000915 	stw	zero,36(r2)
    d6bc:	e0bff317 	ldw	r2,-52(fp)
    d6c0:	e0bffa15 	stw	r2,-24(fp)
    d6c4:	e0bffa17 	ldw	r2,-24(fp)
    d6c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    d6cc:	e0bff18b 	ldhu	r2,-58(fp)
}
    d6d0:	e037883a 	mov	sp,fp
    d6d4:	dfc00117 	ldw	ra,4(sp)
    d6d8:	df000017 	ldw	fp,0(sp)
    d6dc:	dec00204 	addi	sp,sp,8
    d6e0:	f800283a 	ret

0000d6e4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    d6e4:	defffe04 	addi	sp,sp,-8
    d6e8:	dfc00115 	stw	ra,4(sp)
    d6ec:	df000015 	stw	fp,0(sp)
    d6f0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    d6f4:	0019c140 	call	19c14 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    d6f8:	000e4640 	call	e464 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    d6fc:	000e4ac0 	call	e4ac <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    d700:	000e6180 	call	e618 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    d704:	000e3840 	call	e384 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    d708:	00105280 	call	10528 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    d70c:	00118f00 	call	118f0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    d710:	0012a180 	call	12a18 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    d714:	000e5180 	call	e518 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    d718:	000e5980 	call	e598 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
    d71c:	0015ca00 	call	15ca0 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    d720:	0019c380 	call	19c38 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    d724:	000ee9c0 	call	ee9c <OSDebugInit>
#endif
}
    d728:	0001883a 	nop
    d72c:	e037883a 	mov	sp,fp
    d730:	dfc00117 	ldw	ra,4(sp)
    d734:	df000017 	ldw	fp,0(sp)
    d738:	dec00204 	addi	sp,sp,8
    d73c:	f800283a 	ret

0000d740 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    d740:	deffff04 	addi	sp,sp,-4
    d744:	df000015 	stw	fp,0(sp)
    d748:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    d74c:	d0a7eb03 	ldbu	r2,-24660(gp)
    d750:	10803fcc 	andi	r2,r2,255
    d754:	10800058 	cmpnei	r2,r2,1
    d758:	1000071e 	bne	r2,zero,d778 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    d75c:	d0a7fb03 	ldbu	r2,-24596(gp)
    d760:	10803fcc 	andi	r2,r2,255
    d764:	10803fe0 	cmpeqi	r2,r2,255
    d768:	1000031e 	bne	r2,zero,d778 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    d76c:	d0a7fb03 	ldbu	r2,-24596(gp)
    d770:	10800044 	addi	r2,r2,1
    d774:	d0a7fb05 	stb	r2,-24596(gp)
        }
    }
}
    d778:	0001883a 	nop
    d77c:	e037883a 	mov	sp,fp
    d780:	df000017 	ldw	fp,0(sp)
    d784:	dec00104 	addi	sp,sp,4
    d788:	f800283a 	ret

0000d78c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    d78c:	defffb04 	addi	sp,sp,-20
    d790:	dfc00415 	stw	ra,16(sp)
    d794:	df000315 	stw	fp,12(sp)
    d798:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    d79c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    d7a0:	d0a7eb03 	ldbu	r2,-24660(gp)
    d7a4:	10803fcc 	andi	r2,r2,255
    d7a8:	10800058 	cmpnei	r2,r2,1
    d7ac:	10002f1e 	bne	r2,zero,d86c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d7b0:	0005303a 	rdctl	r2,status
    d7b4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d7b8:	e0ffff17 	ldw	r3,-4(fp)
    d7bc:	00bfff84 	movi	r2,-2
    d7c0:	1884703a 	and	r2,r3,r2
    d7c4:	1001703a 	wrctl	status,r2
  
  return context;
    d7c8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    d7cc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    d7d0:	d0a7fb03 	ldbu	r2,-24596(gp)
    d7d4:	10803fcc 	andi	r2,r2,255
    d7d8:	10000326 	beq	r2,zero,d7e8 <OSIntExit+0x5c>
            OSIntNesting--;
    d7dc:	d0a7fb03 	ldbu	r2,-24596(gp)
    d7e0:	10bfffc4 	addi	r2,r2,-1
    d7e4:	d0a7fb05 	stb	r2,-24596(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    d7e8:	d0a7fb03 	ldbu	r2,-24596(gp)
    d7ec:	10803fcc 	andi	r2,r2,255
    d7f0:	10001a1e 	bne	r2,zero,d85c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    d7f4:	d0a7e903 	ldbu	r2,-24668(gp)
    d7f8:	10803fcc 	andi	r2,r2,255
    d7fc:	1000171e 	bne	r2,zero,d85c <OSIntExit+0xd0>
                OS_SchedNew();
    d800:	000e8880 	call	e888 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    d804:	d0e7ed83 	ldbu	r3,-24650(gp)
    d808:	d0a7edc3 	ldbu	r2,-24649(gp)
    d80c:	18c03fcc 	andi	r3,r3,255
    d810:	10803fcc 	andi	r2,r2,255
    d814:	18801126 	beq	r3,r2,d85c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    d818:	d0a7ed83 	ldbu	r2,-24650(gp)
    d81c:	10c03fcc 	andi	r3,r2,255
    d820:	008000f4 	movhi	r2,3
    d824:	1096bb04 	addi	r2,r2,23276
    d828:	18c7883a 	add	r3,r3,r3
    d82c:	18c7883a 	add	r3,r3,r3
    d830:	10c5883a 	add	r2,r2,r3
    d834:	10800017 	ldw	r2,0(r2)
    d838:	d0a7f615 	stw	r2,-24616(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    d83c:	d0a7f617 	ldw	r2,-24616(gp)
    d840:	10c00e17 	ldw	r3,56(r2)
    d844:	18c00044 	addi	r3,r3,1
    d848:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    d84c:	d0a7f017 	ldw	r2,-24640(gp)
    d850:	10800044 	addi	r2,r2,1
    d854:	d0a7f015 	stw	r2,-24640(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    d858:	00199140 	call	19914 <OSCtxSw>
    d85c:	e0bffd17 	ldw	r2,-12(fp)
    d860:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d864:	e0bffe17 	ldw	r2,-8(fp)
    d868:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    d86c:	0001883a 	nop
    d870:	e037883a 	mov	sp,fp
    d874:	dfc00117 	ldw	ra,4(sp)
    d878:	df000017 	ldw	fp,0(sp)
    d87c:	dec00204 	addi	sp,sp,8
    d880:	f800283a 	ret

0000d884 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    d884:	defffc04 	addi	sp,sp,-16
    d888:	df000315 	stw	fp,12(sp)
    d88c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d890:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    d894:	d0a7eb03 	ldbu	r2,-24660(gp)
    d898:	10803fcc 	andi	r2,r2,255
    d89c:	10800058 	cmpnei	r2,r2,1
    d8a0:	1000161e 	bne	r2,zero,d8fc <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d8a4:	0005303a 	rdctl	r2,status
    d8a8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d8ac:	e0ffff17 	ldw	r3,-4(fp)
    d8b0:	00bfff84 	movi	r2,-2
    d8b4:	1884703a 	and	r2,r3,r2
    d8b8:	1001703a 	wrctl	status,r2
  
  return context;
    d8bc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    d8c0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    d8c4:	d0a7fb03 	ldbu	r2,-24596(gp)
    d8c8:	10803fcc 	andi	r2,r2,255
    d8cc:	1000071e 	bne	r2,zero,d8ec <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    d8d0:	d0a7e903 	ldbu	r2,-24668(gp)
    d8d4:	10803fcc 	andi	r2,r2,255
    d8d8:	10803fe0 	cmpeqi	r2,r2,255
    d8dc:	1000031e 	bne	r2,zero,d8ec <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    d8e0:	d0a7e903 	ldbu	r2,-24668(gp)
    d8e4:	10800044 	addi	r2,r2,1
    d8e8:	d0a7e905 	stb	r2,-24668(gp)
    d8ec:	e0bffd17 	ldw	r2,-12(fp)
    d8f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d8f4:	e0bffe17 	ldw	r2,-8(fp)
    d8f8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    d8fc:	0001883a 	nop
    d900:	e037883a 	mov	sp,fp
    d904:	df000017 	ldw	fp,0(sp)
    d908:	dec00104 	addi	sp,sp,4
    d90c:	f800283a 	ret

0000d910 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    d910:	defff804 	addi	sp,sp,-32
    d914:	dfc00715 	stw	ra,28(sp)
    d918:	df000615 	stw	fp,24(sp)
    d91c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    d920:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    d924:	d0a7eb03 	ldbu	r2,-24660(gp)
    d928:	10803fcc 	andi	r2,r2,255
    d92c:	10800058 	cmpnei	r2,r2,1
    d930:	1000281e 	bne	r2,zero,d9d4 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d934:	0005303a 	rdctl	r2,status
    d938:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d93c:	e0ffff17 	ldw	r3,-4(fp)
    d940:	00bfff84 	movi	r2,-2
    d944:	1884703a 	and	r2,r3,r2
    d948:	1001703a 	wrctl	status,r2
  
  return context;
    d94c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    d950:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    d954:	d0a7e903 	ldbu	r2,-24668(gp)
    d958:	10803fcc 	andi	r2,r2,255
    d95c:	10001926 	beq	r2,zero,d9c4 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    d960:	d0a7e903 	ldbu	r2,-24668(gp)
    d964:	10bfffc4 	addi	r2,r2,-1
    d968:	d0a7e905 	stb	r2,-24668(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    d96c:	d0a7e903 	ldbu	r2,-24668(gp)
    d970:	10803fcc 	andi	r2,r2,255
    d974:	10000e1e 	bne	r2,zero,d9b0 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    d978:	d0a7fb03 	ldbu	r2,-24596(gp)
    d97c:	10803fcc 	andi	r2,r2,255
    d980:	1000061e 	bne	r2,zero,d99c <OSSchedUnlock+0x8c>
    d984:	e0bffa17 	ldw	r2,-24(fp)
    d988:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d98c:	e0bffb17 	ldw	r2,-20(fp)
    d990:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    d994:	000e7b80 	call	e7b8 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    d998:	00000e06 	br	d9d4 <OSSchedUnlock+0xc4>
    d99c:	e0bffa17 	ldw	r2,-24(fp)
    d9a0:	e0bffc15 	stw	r2,-16(fp)
    d9a4:	e0bffc17 	ldw	r2,-16(fp)
    d9a8:	1001703a 	wrctl	status,r2
    d9ac:	00000906 	br	d9d4 <OSSchedUnlock+0xc4>
    d9b0:	e0bffa17 	ldw	r2,-24(fp)
    d9b4:	e0bffd15 	stw	r2,-12(fp)
    d9b8:	e0bffd17 	ldw	r2,-12(fp)
    d9bc:	1001703a 	wrctl	status,r2
    d9c0:	00000406 	br	d9d4 <OSSchedUnlock+0xc4>
    d9c4:	e0bffa17 	ldw	r2,-24(fp)
    d9c8:	e0bffe15 	stw	r2,-8(fp)
    d9cc:	e0bffe17 	ldw	r2,-8(fp)
    d9d0:	1001703a 	wrctl	status,r2
    d9d4:	0001883a 	nop
    d9d8:	e037883a 	mov	sp,fp
    d9dc:	dfc00117 	ldw	ra,4(sp)
    d9e0:	df000017 	ldw	fp,0(sp)
    d9e4:	dec00204 	addi	sp,sp,8
    d9e8:	f800283a 	ret

0000d9ec <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    d9ec:	defffe04 	addi	sp,sp,-8
    d9f0:	dfc00115 	stw	ra,4(sp)
    d9f4:	df000015 	stw	fp,0(sp)
    d9f8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    d9fc:	d0a7eb03 	ldbu	r2,-24660(gp)
    da00:	10803fcc 	andi	r2,r2,255
    da04:	10000f1e 	bne	r2,zero,da44 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    da08:	000e8880 	call	e888 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    da0c:	d0a7ed83 	ldbu	r2,-24650(gp)
    da10:	d0a7edc5 	stb	r2,-24649(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    da14:	d0a7ed83 	ldbu	r2,-24650(gp)
    da18:	10c03fcc 	andi	r3,r2,255
    da1c:	008000f4 	movhi	r2,3
    da20:	1096bb04 	addi	r2,r2,23276
    da24:	18c7883a 	add	r3,r3,r3
    da28:	18c7883a 	add	r3,r3,r3
    da2c:	10c5883a 	add	r2,r2,r3
    da30:	10800017 	ldw	r2,0(r2)
    da34:	d0a7f615 	stw	r2,-24616(gp)
        OSTCBCur      = OSTCBHighRdy;
    da38:	d0a7f617 	ldw	r2,-24616(gp)
    da3c:	d0a7fc15 	stw	r2,-24592(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    da40:	00199a00 	call	199a0 <OSStartHighRdy>
    }
}
    da44:	0001883a 	nop
    da48:	e037883a 	mov	sp,fp
    da4c:	dfc00117 	ldw	ra,4(sp)
    da50:	df000017 	ldw	fp,0(sp)
    da54:	dec00204 	addi	sp,sp,8
    da58:	f800283a 	ret

0000da5c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    da5c:	defff904 	addi	sp,sp,-28
    da60:	dfc00615 	stw	ra,24(sp)
    da64:	df000515 	stw	fp,20(sp)
    da68:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    da6c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    da70:	01000084 	movi	r4,2
    da74:	0014c8c0 	call	14c8c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    da78:	0005303a 	rdctl	r2,status
    da7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    da80:	e0fffc17 	ldw	r3,-16(fp)
    da84:	00bfff84 	movi	r2,-2
    da88:	1884703a 	and	r2,r3,r2
    da8c:	1001703a 	wrctl	status,r2
  
  return context;
    da90:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    da94:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    da98:	d027ec15 	stw	zero,-24656(gp)
    da9c:	e0bffb17 	ldw	r2,-20(fp)
    daa0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    daa4:	e0bffd17 	ldw	r2,-12(fp)
    daa8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    daac:	0009883a 	mov	r4,zero
    dab0:	0014c8c0 	call	14c8c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dab4:	0005303a 	rdctl	r2,status
    dab8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dabc:	e0fffe17 	ldw	r3,-8(fp)
    dac0:	00bfff84 	movi	r2,-2
    dac4:	1884703a 	and	r2,r3,r2
    dac8:	1001703a 	wrctl	status,r2
  
  return context;
    dacc:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    dad0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    dad4:	d0a7ec17 	ldw	r2,-24656(gp)
    dad8:	d0a7f215 	stw	r2,-24632(gp)
    OSStatRdy    = OS_TRUE;
    dadc:	00800044 	movi	r2,1
    dae0:	d0a80105 	stb	r2,-24572(gp)
    dae4:	e0bffb17 	ldw	r2,-20(fp)
    dae8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    daec:	e0bfff17 	ldw	r2,-4(fp)
    daf0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    daf4:	0001883a 	nop
    daf8:	e037883a 	mov	sp,fp
    dafc:	dfc00117 	ldw	ra,4(sp)
    db00:	df000017 	ldw	fp,0(sp)
    db04:	dec00204 	addi	sp,sp,8
    db08:	f800283a 	ret

0000db0c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    db0c:	defff704 	addi	sp,sp,-36
    db10:	dfc00815 	stw	ra,32(sp)
    db14:	df000715 	stw	fp,28(sp)
    db18:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    db1c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    db20:	0019bc80 	call	19bc8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db24:	0005303a 	rdctl	r2,status
    db28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    db2c:	e0fffd17 	ldw	r3,-12(fp)
    db30:	00bfff84 	movi	r2,-2
    db34:	1884703a 	and	r2,r3,r2
    db38:	1001703a 	wrctl	status,r2
  
  return context;
    db3c:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    db40:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    db44:	d0a7fe17 	ldw	r2,-24584(gp)
    db48:	10800044 	addi	r2,r2,1
    db4c:	d0a7fe15 	stw	r2,-24584(gp)
    db50:	e0bffb17 	ldw	r2,-20(fp)
    db54:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    db58:	e0bfff17 	ldw	r2,-4(fp)
    db5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    db60:	d0a7eb03 	ldbu	r2,-24660(gp)
    db64:	10803fcc 	andi	r2,r2,255
    db68:	10800058 	cmpnei	r2,r2,1
    db6c:	10006a1e 	bne	r2,zero,dd18 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    db70:	d0a7ef03 	ldbu	r2,-24644(gp)
    db74:	10803fcc 	andi	r2,r2,255
    db78:	10c00060 	cmpeqi	r3,r2,1
    db7c:	1800061e 	bne	r3,zero,db98 <OSTimeTick+0x8c>
    db80:	10c000a0 	cmpeqi	r3,r2,2
    db84:	1800061e 	bne	r3,zero,dba0 <OSTimeTick+0x94>
    db88:	10000a1e 	bne	r2,zero,dbb4 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    db8c:	00800044 	movi	r2,1
    db90:	e0bffa05 	stb	r2,-24(fp)
                 break;
    db94:	00000b06 	br	dbc4 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    db98:	e03ffa05 	stb	zero,-24(fp)
                 break;
    db9c:	00000906 	br	dbc4 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    dba0:	00800044 	movi	r2,1
    dba4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    dba8:	00800044 	movi	r2,1
    dbac:	d0a7ef05 	stb	r2,-24644(gp)
                 break;
    dbb0:	00000406 	br	dbc4 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    dbb4:	00800044 	movi	r2,1
    dbb8:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    dbbc:	d027ef05 	stb	zero,-24644(gp)
                 break;
    dbc0:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    dbc4:	e0bffa03 	ldbu	r2,-24(fp)
    dbc8:	10005226 	beq	r2,zero,dd14 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    dbcc:	d0a7ee17 	ldw	r2,-24648(gp)
    dbd0:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    dbd4:	00004906 	br	dcfc <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dbd8:	0005303a 	rdctl	r2,status
    dbdc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dbe0:	e0fffc17 	ldw	r3,-16(fp)
    dbe4:	00bfff84 	movi	r2,-2
    dbe8:	1884703a 	and	r2,r3,r2
    dbec:	1001703a 	wrctl	status,r2
  
  return context;
    dbf0:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    dbf4:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    dbf8:	e0bff917 	ldw	r2,-28(fp)
    dbfc:	10800b8b 	ldhu	r2,46(r2)
    dc00:	10bfffcc 	andi	r2,r2,65535
    dc04:	10003626 	beq	r2,zero,dce0 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    dc08:	e0bff917 	ldw	r2,-28(fp)
    dc0c:	10800b8b 	ldhu	r2,46(r2)
    dc10:	10bfffc4 	addi	r2,r2,-1
    dc14:	1007883a 	mov	r3,r2
    dc18:	e0bff917 	ldw	r2,-28(fp)
    dc1c:	10c00b8d 	sth	r3,46(r2)
    dc20:	e0bff917 	ldw	r2,-28(fp)
    dc24:	10800b8b 	ldhu	r2,46(r2)
    dc28:	10bfffcc 	andi	r2,r2,65535
    dc2c:	10002c1e 	bne	r2,zero,dce0 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    dc30:	e0bff917 	ldw	r2,-28(fp)
    dc34:	10800c03 	ldbu	r2,48(r2)
    dc38:	10803fcc 	andi	r2,r2,255
    dc3c:	10800dcc 	andi	r2,r2,55
    dc40:	10000b26 	beq	r2,zero,dc70 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    dc44:	e0bff917 	ldw	r2,-28(fp)
    dc48:	10c00c03 	ldbu	r3,48(r2)
    dc4c:	00bff204 	movi	r2,-56
    dc50:	1884703a 	and	r2,r3,r2
    dc54:	1007883a 	mov	r3,r2
    dc58:	e0bff917 	ldw	r2,-28(fp)
    dc5c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    dc60:	e0bff917 	ldw	r2,-28(fp)
    dc64:	00c00044 	movi	r3,1
    dc68:	10c00c45 	stb	r3,49(r2)
    dc6c:	00000206 	br	dc78 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    dc70:	e0bff917 	ldw	r2,-28(fp)
    dc74:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    dc78:	e0bff917 	ldw	r2,-28(fp)
    dc7c:	10800c03 	ldbu	r2,48(r2)
    dc80:	10803fcc 	andi	r2,r2,255
    dc84:	1080020c 	andi	r2,r2,8
    dc88:	1000151e 	bne	r2,zero,dce0 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    dc8c:	e0bff917 	ldw	r2,-28(fp)
    dc90:	10c00d83 	ldbu	r3,54(r2)
    dc94:	d0a7f803 	ldbu	r2,-24608(gp)
    dc98:	1884b03a 	or	r2,r3,r2
    dc9c:	d0a7f805 	stb	r2,-24608(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    dca0:	e0bff917 	ldw	r2,-28(fp)
    dca4:	10800d03 	ldbu	r2,52(r2)
    dca8:	10c03fcc 	andi	r3,r2,255
    dcac:	e0bff917 	ldw	r2,-28(fp)
    dcb0:	10800d03 	ldbu	r2,52(r2)
    dcb4:	11003fcc 	andi	r4,r2,255
    dcb8:	d0a7f844 	addi	r2,gp,-24607
    dcbc:	2085883a 	add	r2,r4,r2
    dcc0:	11000003 	ldbu	r4,0(r2)
    dcc4:	e0bff917 	ldw	r2,-28(fp)
    dcc8:	10800d43 	ldbu	r2,53(r2)
    dccc:	2084b03a 	or	r2,r4,r2
    dcd0:	1009883a 	mov	r4,r2
    dcd4:	d0a7f844 	addi	r2,gp,-24607
    dcd8:	1885883a 	add	r2,r3,r2
    dcdc:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    dce0:	e0bff917 	ldw	r2,-28(fp)
    dce4:	10800517 	ldw	r2,20(r2)
    dce8:	e0bff915 	stw	r2,-28(fp)
    dcec:	e0bffb17 	ldw	r2,-20(fp)
    dcf0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dcf4:	e0bffe17 	ldw	r2,-8(fp)
    dcf8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    dcfc:	e0bff917 	ldw	r2,-28(fp)
    dd00:	10800c83 	ldbu	r2,50(r2)
    dd04:	10803fcc 	andi	r2,r2,255
    dd08:	10800a18 	cmpnei	r2,r2,40
    dd0c:	103fb21e 	bne	r2,zero,dbd8 <OSTimeTick+0xcc>
    dd10:	00000106 	br	dd18 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    dd14:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    dd18:	e037883a 	mov	sp,fp
    dd1c:	dfc00117 	ldw	ra,4(sp)
    dd20:	df000017 	ldw	fp,0(sp)
    dd24:	dec00204 	addi	sp,sp,8
    dd28:	f800283a 	ret

0000dd2c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    dd2c:	deffff04 	addi	sp,sp,-4
    dd30:	df000015 	stw	fp,0(sp)
    dd34:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    dd38:	00804784 	movi	r2,286
}
    dd3c:	e037883a 	mov	sp,fp
    dd40:	df000017 	ldw	fp,0(sp)
    dd44:	dec00104 	addi	sp,sp,4
    dd48:	f800283a 	ret

0000dd4c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    dd4c:	deffff04 	addi	sp,sp,-4
    dd50:	df000015 	stw	fp,0(sp)
    dd54:	d839883a 	mov	fp,sp
}
    dd58:	0001883a 	nop
    dd5c:	e037883a 	mov	sp,fp
    dd60:	df000017 	ldw	fp,0(sp)
    dd64:	dec00104 	addi	sp,sp,4
    dd68:	f800283a 	ret

0000dd6c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    dd6c:	defff804 	addi	sp,sp,-32
    dd70:	dfc00715 	stw	ra,28(sp)
    dd74:	df000615 	stw	fp,24(sp)
    dd78:	df000604 	addi	fp,sp,24
    dd7c:	e13ffc15 	stw	r4,-16(fp)
    dd80:	e17ffd15 	stw	r5,-12(fp)
    dd84:	3007883a 	mov	r3,r6
    dd88:	3805883a 	mov	r2,r7
    dd8c:	e0fffe05 	stb	r3,-8(fp)
    dd90:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    dd94:	e0bffc17 	ldw	r2,-16(fp)
    dd98:	10800283 	ldbu	r2,10(r2)
    dd9c:	10c03fcc 	andi	r3,r2,255
    dda0:	008000b4 	movhi	r2,2
    dda4:	10aa7f04 	addi	r2,r2,-22020
    dda8:	10c5883a 	add	r2,r2,r3
    ddac:	10800003 	ldbu	r2,0(r2)
    ddb0:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    ddb4:	e0bffa03 	ldbu	r2,-24(fp)
    ddb8:	e0fffc17 	ldw	r3,-16(fp)
    ddbc:	1885883a 	add	r2,r3,r2
    ddc0:	108002c4 	addi	r2,r2,11
    ddc4:	10800003 	ldbu	r2,0(r2)
    ddc8:	10c03fcc 	andi	r3,r2,255
    ddcc:	008000b4 	movhi	r2,2
    ddd0:	10aa7f04 	addi	r2,r2,-22020
    ddd4:	10c5883a 	add	r2,r2,r3
    ddd8:	10800003 	ldbu	r2,0(r2)
    dddc:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    dde0:	e0bffa03 	ldbu	r2,-24(fp)
    dde4:	100490fa 	slli	r2,r2,3
    dde8:	1007883a 	mov	r3,r2
    ddec:	e0bffa43 	ldbu	r2,-23(fp)
    ddf0:	1885883a 	add	r2,r3,r2
    ddf4:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ddf8:	e0fffa83 	ldbu	r3,-22(fp)
    ddfc:	008000f4 	movhi	r2,3
    de00:	1096bb04 	addi	r2,r2,23276
    de04:	18c7883a 	add	r3,r3,r3
    de08:	18c7883a 	add	r3,r3,r3
    de0c:	10c5883a 	add	r2,r2,r3
    de10:	10800017 	ldw	r2,0(r2)
    de14:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    de18:	e0bffb17 	ldw	r2,-20(fp)
    de1c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    de20:	e0bffb17 	ldw	r2,-20(fp)
    de24:	e0fffd17 	ldw	r3,-12(fp)
    de28:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    de2c:	e0bffb17 	ldw	r2,-20(fp)
    de30:	10800c03 	ldbu	r2,48(r2)
    de34:	1007883a 	mov	r3,r2
    de38:	e0bffe03 	ldbu	r2,-8(fp)
    de3c:	0084303a 	nor	r2,zero,r2
    de40:	1884703a 	and	r2,r3,r2
    de44:	1007883a 	mov	r3,r2
    de48:	e0bffb17 	ldw	r2,-20(fp)
    de4c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    de50:	e0bffb17 	ldw	r2,-20(fp)
    de54:	e0ffff03 	ldbu	r3,-4(fp)
    de58:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    de5c:	e0bffb17 	ldw	r2,-20(fp)
    de60:	10800c03 	ldbu	r2,48(r2)
    de64:	10803fcc 	andi	r2,r2,255
    de68:	1080020c 	andi	r2,r2,8
    de6c:	1000111e 	bne	r2,zero,deb4 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    de70:	e0bffb17 	ldw	r2,-20(fp)
    de74:	10c00d83 	ldbu	r3,54(r2)
    de78:	d0a7f803 	ldbu	r2,-24608(gp)
    de7c:	1884b03a 	or	r2,r3,r2
    de80:	d0a7f805 	stb	r2,-24608(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    de84:	e0fffa03 	ldbu	r3,-24(fp)
    de88:	e13ffa03 	ldbu	r4,-24(fp)
    de8c:	d0a7f844 	addi	r2,gp,-24607
    de90:	2085883a 	add	r2,r4,r2
    de94:	11000003 	ldbu	r4,0(r2)
    de98:	e0bffb17 	ldw	r2,-20(fp)
    de9c:	10800d43 	ldbu	r2,53(r2)
    dea0:	2084b03a 	or	r2,r4,r2
    dea4:	1009883a 	mov	r4,r2
    dea8:	d0a7f844 	addi	r2,gp,-24607
    deac:	1885883a 	add	r2,r3,r2
    deb0:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    deb4:	e17ffc17 	ldw	r5,-16(fp)
    deb8:	e13ffb17 	ldw	r4,-20(fp)
    debc:	000e1640 	call	e164 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    dec0:	e0bffb17 	ldw	r2,-20(fp)
    dec4:	10800817 	ldw	r2,32(r2)
    dec8:	10000826 	beq	r2,zero,deec <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    decc:	e0bffb17 	ldw	r2,-20(fp)
    ded0:	10800817 	ldw	r2,32(r2)
    ded4:	100b883a 	mov	r5,r2
    ded8:	e13ffb17 	ldw	r4,-20(fp)
    dedc:	000e21c0 	call	e21c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    dee0:	e0bffb17 	ldw	r2,-20(fp)
    dee4:	e0fffc17 	ldw	r3,-16(fp)
    dee8:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    deec:	e0bffa83 	ldbu	r2,-22(fp)
}
    def0:	e037883a 	mov	sp,fp
    def4:	dfc00117 	ldw	ra,4(sp)
    def8:	df000017 	ldw	fp,0(sp)
    defc:	dec00204 	addi	sp,sp,8
    df00:	f800283a 	ret

0000df04 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    df04:	defffd04 	addi	sp,sp,-12
    df08:	df000215 	stw	fp,8(sp)
    df0c:	df000204 	addi	fp,sp,8
    df10:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    df14:	d0a7fc17 	ldw	r2,-24592(gp)
    df18:	e0ffff17 	ldw	r3,-4(fp)
    df1c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    df20:	d0a7fc17 	ldw	r2,-24592(gp)
    df24:	10800d03 	ldbu	r2,52(r2)
    df28:	10803fcc 	andi	r2,r2,255
    df2c:	d0e7fc17 	ldw	r3,-24592(gp)
    df30:	18c00d03 	ldbu	r3,52(r3)
    df34:	18c03fcc 	andi	r3,r3,255
    df38:	e13fff17 	ldw	r4,-4(fp)
    df3c:	20c7883a 	add	r3,r4,r3
    df40:	18c002c4 	addi	r3,r3,11
    df44:	19000003 	ldbu	r4,0(r3)
    df48:	d0e7fc17 	ldw	r3,-24592(gp)
    df4c:	18c00d43 	ldbu	r3,53(r3)
    df50:	20c6b03a 	or	r3,r4,r3
    df54:	1809883a 	mov	r4,r3
    df58:	e0ffff17 	ldw	r3,-4(fp)
    df5c:	1885883a 	add	r2,r3,r2
    df60:	108002c4 	addi	r2,r2,11
    df64:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    df68:	e0bfff17 	ldw	r2,-4(fp)
    df6c:	10c00283 	ldbu	r3,10(r2)
    df70:	d0a7fc17 	ldw	r2,-24592(gp)
    df74:	10800d83 	ldbu	r2,54(r2)
    df78:	1884b03a 	or	r2,r3,r2
    df7c:	1007883a 	mov	r3,r2
    df80:	e0bfff17 	ldw	r2,-4(fp)
    df84:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    df88:	d0a7fc17 	ldw	r2,-24592(gp)
    df8c:	10800d03 	ldbu	r2,52(r2)
    df90:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    df94:	e0fffe03 	ldbu	r3,-8(fp)
    df98:	e13ffe03 	ldbu	r4,-8(fp)
    df9c:	d0a7f844 	addi	r2,gp,-24607
    dfa0:	2085883a 	add	r2,r4,r2
    dfa4:	10800003 	ldbu	r2,0(r2)
    dfa8:	1009883a 	mov	r4,r2
    dfac:	d0a7fc17 	ldw	r2,-24592(gp)
    dfb0:	10800d43 	ldbu	r2,53(r2)
    dfb4:	0084303a 	nor	r2,zero,r2
    dfb8:	2084703a 	and	r2,r4,r2
    dfbc:	1009883a 	mov	r4,r2
    dfc0:	d0a7f844 	addi	r2,gp,-24607
    dfc4:	1885883a 	add	r2,r3,r2
    dfc8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    dfcc:	e0fffe03 	ldbu	r3,-8(fp)
    dfd0:	d0a7f844 	addi	r2,gp,-24607
    dfd4:	1885883a 	add	r2,r3,r2
    dfd8:	10800003 	ldbu	r2,0(r2)
    dfdc:	10803fcc 	andi	r2,r2,255
    dfe0:	1000071e 	bne	r2,zero,e000 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    dfe4:	d0a7fc17 	ldw	r2,-24592(gp)
    dfe8:	10800d83 	ldbu	r2,54(r2)
    dfec:	0084303a 	nor	r2,zero,r2
    dff0:	1007883a 	mov	r3,r2
    dff4:	d0a7f803 	ldbu	r2,-24608(gp)
    dff8:	1884703a 	and	r2,r3,r2
    dffc:	d0a7f805 	stb	r2,-24608(gp)
    }
}
    e000:	0001883a 	nop
    e004:	e037883a 	mov	sp,fp
    e008:	df000017 	ldw	fp,0(sp)
    e00c:	dec00104 	addi	sp,sp,4
    e010:	f800283a 	ret

0000e014 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    e014:	defffb04 	addi	sp,sp,-20
    e018:	df000415 	stw	fp,16(sp)
    e01c:	df000404 	addi	fp,sp,16
    e020:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    e024:	d0a7fc17 	ldw	r2,-24592(gp)
    e028:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    e02c:	d0a7fc17 	ldw	r2,-24592(gp)
    e030:	e0ffff17 	ldw	r3,-4(fp)
    e034:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    e038:	e0bfff17 	ldw	r2,-4(fp)
    e03c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    e040:	e0bffc17 	ldw	r2,-16(fp)
    e044:	10800017 	ldw	r2,0(r2)
    e048:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    e04c:	00002006 	br	e0d0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    e050:	d0a7fc17 	ldw	r2,-24592(gp)
    e054:	10800d03 	ldbu	r2,52(r2)
    e058:	10803fcc 	andi	r2,r2,255
    e05c:	d0e7fc17 	ldw	r3,-24592(gp)
    e060:	18c00d03 	ldbu	r3,52(r3)
    e064:	18c03fcc 	andi	r3,r3,255
    e068:	e13ffd17 	ldw	r4,-12(fp)
    e06c:	20c7883a 	add	r3,r4,r3
    e070:	18c002c4 	addi	r3,r3,11
    e074:	19000003 	ldbu	r4,0(r3)
    e078:	d0e7fc17 	ldw	r3,-24592(gp)
    e07c:	18c00d43 	ldbu	r3,53(r3)
    e080:	20c6b03a 	or	r3,r4,r3
    e084:	1809883a 	mov	r4,r3
    e088:	e0fffd17 	ldw	r3,-12(fp)
    e08c:	1885883a 	add	r2,r3,r2
    e090:	108002c4 	addi	r2,r2,11
    e094:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    e098:	e0bffd17 	ldw	r2,-12(fp)
    e09c:	10c00283 	ldbu	r3,10(r2)
    e0a0:	d0a7fc17 	ldw	r2,-24592(gp)
    e0a4:	10800d83 	ldbu	r2,54(r2)
    e0a8:	1884b03a 	or	r2,r3,r2
    e0ac:	1007883a 	mov	r3,r2
    e0b0:	e0bffd17 	ldw	r2,-12(fp)
    e0b4:	10c00285 	stb	r3,10(r2)
        pevents++;
    e0b8:	e0bffc17 	ldw	r2,-16(fp)
    e0bc:	10800104 	addi	r2,r2,4
    e0c0:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    e0c4:	e0bffc17 	ldw	r2,-16(fp)
    e0c8:	10800017 	ldw	r2,0(r2)
    e0cc:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    e0d0:	e0bffd17 	ldw	r2,-12(fp)
    e0d4:	103fde1e 	bne	r2,zero,e050 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    e0d8:	d0a7fc17 	ldw	r2,-24592(gp)
    e0dc:	10800d03 	ldbu	r2,52(r2)
    e0e0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    e0e4:	e0fffe03 	ldbu	r3,-8(fp)
    e0e8:	e13ffe03 	ldbu	r4,-8(fp)
    e0ec:	d0a7f844 	addi	r2,gp,-24607
    e0f0:	2085883a 	add	r2,r4,r2
    e0f4:	10800003 	ldbu	r2,0(r2)
    e0f8:	1009883a 	mov	r4,r2
    e0fc:	d0a7fc17 	ldw	r2,-24592(gp)
    e100:	10800d43 	ldbu	r2,53(r2)
    e104:	0084303a 	nor	r2,zero,r2
    e108:	2084703a 	and	r2,r4,r2
    e10c:	1009883a 	mov	r4,r2
    e110:	d0a7f844 	addi	r2,gp,-24607
    e114:	1885883a 	add	r2,r3,r2
    e118:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    e11c:	e0fffe03 	ldbu	r3,-8(fp)
    e120:	d0a7f844 	addi	r2,gp,-24607
    e124:	1885883a 	add	r2,r3,r2
    e128:	10800003 	ldbu	r2,0(r2)
    e12c:	10803fcc 	andi	r2,r2,255
    e130:	1000071e 	bne	r2,zero,e150 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    e134:	d0a7fc17 	ldw	r2,-24592(gp)
    e138:	10800d83 	ldbu	r2,54(r2)
    e13c:	0084303a 	nor	r2,zero,r2
    e140:	1007883a 	mov	r3,r2
    e144:	d0a7f803 	ldbu	r2,-24608(gp)
    e148:	1884703a 	and	r2,r3,r2
    e14c:	d0a7f805 	stb	r2,-24608(gp)
    }
}
    e150:	0001883a 	nop
    e154:	e037883a 	mov	sp,fp
    e158:	df000017 	ldw	fp,0(sp)
    e15c:	dec00104 	addi	sp,sp,4
    e160:	f800283a 	ret

0000e164 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    e164:	defffc04 	addi	sp,sp,-16
    e168:	df000315 	stw	fp,12(sp)
    e16c:	df000304 	addi	fp,sp,12
    e170:	e13ffe15 	stw	r4,-8(fp)
    e174:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    e178:	e0bffe17 	ldw	r2,-8(fp)
    e17c:	10800d03 	ldbu	r2,52(r2)
    e180:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    e184:	e0bffd03 	ldbu	r2,-12(fp)
    e188:	e0fffd03 	ldbu	r3,-12(fp)
    e18c:	e13fff17 	ldw	r4,-4(fp)
    e190:	20c7883a 	add	r3,r4,r3
    e194:	18c002c4 	addi	r3,r3,11
    e198:	18c00003 	ldbu	r3,0(r3)
    e19c:	1809883a 	mov	r4,r3
    e1a0:	e0fffe17 	ldw	r3,-8(fp)
    e1a4:	18c00d43 	ldbu	r3,53(r3)
    e1a8:	00c6303a 	nor	r3,zero,r3
    e1ac:	20c6703a 	and	r3,r4,r3
    e1b0:	1809883a 	mov	r4,r3
    e1b4:	e0ffff17 	ldw	r3,-4(fp)
    e1b8:	1885883a 	add	r2,r3,r2
    e1bc:	108002c4 	addi	r2,r2,11
    e1c0:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    e1c4:	e0bffd03 	ldbu	r2,-12(fp)
    e1c8:	e0ffff17 	ldw	r3,-4(fp)
    e1cc:	1885883a 	add	r2,r3,r2
    e1d0:	108002c4 	addi	r2,r2,11
    e1d4:	10800003 	ldbu	r2,0(r2)
    e1d8:	10803fcc 	andi	r2,r2,255
    e1dc:	10000a1e 	bne	r2,zero,e208 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    e1e0:	e0bfff17 	ldw	r2,-4(fp)
    e1e4:	10800283 	ldbu	r2,10(r2)
    e1e8:	1007883a 	mov	r3,r2
    e1ec:	e0bffe17 	ldw	r2,-8(fp)
    e1f0:	10800d83 	ldbu	r2,54(r2)
    e1f4:	0084303a 	nor	r2,zero,r2
    e1f8:	1884703a 	and	r2,r3,r2
    e1fc:	1007883a 	mov	r3,r2
    e200:	e0bfff17 	ldw	r2,-4(fp)
    e204:	10c00285 	stb	r3,10(r2)
    }
}
    e208:	0001883a 	nop
    e20c:	e037883a 	mov	sp,fp
    e210:	df000017 	ldw	fp,0(sp)
    e214:	dec00104 	addi	sp,sp,4
    e218:	f800283a 	ret

0000e21c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    e21c:	defffa04 	addi	sp,sp,-24
    e220:	df000515 	stw	fp,20(sp)
    e224:	df000504 	addi	fp,sp,20
    e228:	e13ffe15 	stw	r4,-8(fp)
    e22c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    e230:	e0bffe17 	ldw	r2,-8(fp)
    e234:	10800d03 	ldbu	r2,52(r2)
    e238:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    e23c:	e0bffe17 	ldw	r2,-8(fp)
    e240:	10800d83 	ldbu	r2,54(r2)
    e244:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    e248:	e0bffe17 	ldw	r2,-8(fp)
    e24c:	10800d43 	ldbu	r2,53(r2)
    e250:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    e254:	e0bfff17 	ldw	r2,-4(fp)
    e258:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    e25c:	e0bffb17 	ldw	r2,-20(fp)
    e260:	10800017 	ldw	r2,0(r2)
    e264:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    e268:	00002506 	br	e300 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    e26c:	e0bffd03 	ldbu	r2,-12(fp)
    e270:	e0fffd03 	ldbu	r3,-12(fp)
    e274:	e13ffc17 	ldw	r4,-16(fp)
    e278:	20c7883a 	add	r3,r4,r3
    e27c:	18c002c4 	addi	r3,r3,11
    e280:	18c00003 	ldbu	r3,0(r3)
    e284:	1809883a 	mov	r4,r3
    e288:	e0fffd83 	ldbu	r3,-10(fp)
    e28c:	00c6303a 	nor	r3,zero,r3
    e290:	20c6703a 	and	r3,r4,r3
    e294:	1809883a 	mov	r4,r3
    e298:	e0fffc17 	ldw	r3,-16(fp)
    e29c:	1885883a 	add	r2,r3,r2
    e2a0:	108002c4 	addi	r2,r2,11
    e2a4:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    e2a8:	e0bffd03 	ldbu	r2,-12(fp)
    e2ac:	e0fffc17 	ldw	r3,-16(fp)
    e2b0:	1885883a 	add	r2,r3,r2
    e2b4:	108002c4 	addi	r2,r2,11
    e2b8:	10800003 	ldbu	r2,0(r2)
    e2bc:	10803fcc 	andi	r2,r2,255
    e2c0:	1000091e 	bne	r2,zero,e2e8 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    e2c4:	e0bffc17 	ldw	r2,-16(fp)
    e2c8:	10800283 	ldbu	r2,10(r2)
    e2cc:	1007883a 	mov	r3,r2
    e2d0:	e0bffd43 	ldbu	r2,-11(fp)
    e2d4:	0084303a 	nor	r2,zero,r2
    e2d8:	1884703a 	and	r2,r3,r2
    e2dc:	1007883a 	mov	r3,r2
    e2e0:	e0bffc17 	ldw	r2,-16(fp)
    e2e4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    e2e8:	e0bffb17 	ldw	r2,-20(fp)
    e2ec:	10800104 	addi	r2,r2,4
    e2f0:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    e2f4:	e0bffb17 	ldw	r2,-20(fp)
    e2f8:	10800017 	ldw	r2,0(r2)
    e2fc:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    e300:	e0bffc17 	ldw	r2,-16(fp)
    e304:	103fd91e 	bne	r2,zero,e26c <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    e308:	0001883a 	nop
    e30c:	e037883a 	mov	sp,fp
    e310:	df000017 	ldw	fp,0(sp)
    e314:	dec00104 	addi	sp,sp,4
    e318:	f800283a 	ret

0000e31c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    e31c:	defffc04 	addi	sp,sp,-16
    e320:	df000315 	stw	fp,12(sp)
    e324:	df000304 	addi	fp,sp,12
    e328:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    e32c:	e0bfff17 	ldw	r2,-4(fp)
    e330:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    e334:	e0bfff17 	ldw	r2,-4(fp)
    e338:	108002c4 	addi	r2,r2,11
    e33c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    e340:	e03ffe05 	stb	zero,-8(fp)
    e344:	00000706 	br	e364 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    e348:	e0bffd17 	ldw	r2,-12(fp)
    e34c:	10c00044 	addi	r3,r2,1
    e350:	e0fffd15 	stw	r3,-12(fp)
    e354:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    e358:	e0bffe03 	ldbu	r2,-8(fp)
    e35c:	10800044 	addi	r2,r2,1
    e360:	e0bffe05 	stb	r2,-8(fp)
    e364:	e0bffe03 	ldbu	r2,-8(fp)
    e368:	108001b0 	cmpltui	r2,r2,6
    e36c:	103ff61e 	bne	r2,zero,e348 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
    e370:	0001883a 	nop
    e374:	e037883a 	mov	sp,fp
    e378:	df000017 	ldw	fp,0(sp)
    e37c:	dec00104 	addi	sp,sp,4
    e380:	f800283a 	ret

0000e384 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    e384:	defffb04 	addi	sp,sp,-20
    e388:	dfc00415 	stw	ra,16(sp)
    e38c:	df000315 	stw	fp,12(sp)
    e390:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    e394:	01430c04 	movi	r5,3120
    e398:	010000f4 	movhi	r4,3
    e39c:	210f5c04 	addi	r4,r4,15728
    e3a0:	000e6fc0 	call	e6fc <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    e3a4:	008000f4 	movhi	r2,3
    e3a8:	108f5c04 	addi	r2,r2,15728
    e3ac:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    e3b0:	008000f4 	movhi	r2,3
    e3b4:	108f6904 	addi	r2,r2,15780
    e3b8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    e3bc:	e03ffd0d 	sth	zero,-12(fp)
    e3c0:	00001306 	br	e410 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    e3c4:	e0bffe17 	ldw	r2,-8(fp)
    e3c8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    e3cc:	e0bffe17 	ldw	r2,-8(fp)
    e3d0:	e0ffff17 	ldw	r3,-4(fp)
    e3d4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    e3d8:	e0bffe17 	ldw	r2,-8(fp)
    e3dc:	00c00fc4 	movi	r3,63
    e3e0:	10c00445 	stb	r3,17(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    e3e4:	e0bffe17 	ldw	r2,-8(fp)
    e3e8:	10000485 	stb	zero,18(r2)
#endif
        pevent1++;
    e3ec:	e0bffe17 	ldw	r2,-8(fp)
    e3f0:	10800d04 	addi	r2,r2,52
    e3f4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    e3f8:	e0bfff17 	ldw	r2,-4(fp)
    e3fc:	10800d04 	addi	r2,r2,52
    e400:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    e404:	e0bffd0b 	ldhu	r2,-12(fp)
    e408:	10800044 	addi	r2,r2,1
    e40c:	e0bffd0d 	sth	r2,-12(fp)
    e410:	e0bffd0b 	ldhu	r2,-12(fp)
    e414:	10800ef0 	cmpltui	r2,r2,59
    e418:	103fea1e 	bne	r2,zero,e3c4 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    e41c:	e0bffe17 	ldw	r2,-8(fp)
    e420:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    e424:	e0bffe17 	ldw	r2,-8(fp)
    e428:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    e42c:	e0bffe17 	ldw	r2,-8(fp)
    e430:	00c00fc4 	movi	r3,63
    e434:	10c00445 	stb	r3,17(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    e438:	e0bffe17 	ldw	r2,-8(fp)
    e43c:	10000485 	stb	zero,18(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    e440:	008000f4 	movhi	r2,3
    e444:	108f5c04 	addi	r2,r2,15728
    e448:	d0a7fa15 	stw	r2,-24600(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    e44c:	0001883a 	nop
    e450:	e037883a 	mov	sp,fp
    e454:	dfc00117 	ldw	ra,4(sp)
    e458:	df000017 	ldw	fp,0(sp)
    e45c:	dec00204 	addi	sp,sp,8
    e460:	f800283a 	ret

0000e464 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    e464:	deffff04 	addi	sp,sp,-4
    e468:	df000015 	stw	fp,0(sp)
    e46c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    e470:	d027fe15 	stw	zero,-24584(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    e474:	d027fb05 	stb	zero,-24596(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    e478:	d027e905 	stb	zero,-24668(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    e47c:	d027f445 	stb	zero,-24623(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    e480:	d027eb05 	stb	zero,-24660(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    e484:	d027f015 	stw	zero,-24640(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    e488:	d027ec15 	stw	zero,-24656(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    e48c:	d0280215 	stw	zero,-24568(gp)
    OSIdleCtrMax  = 0L;
    e490:	d027f215 	stw	zero,-24632(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    e494:	d0280105 	stb	zero,-24572(gp)
#endif
}
    e498:	0001883a 	nop
    e49c:	e037883a 	mov	sp,fp
    e4a0:	df000017 	ldw	fp,0(sp)
    e4a4:	dec00104 	addi	sp,sp,4
    e4a8:	f800283a 	ret

0000e4ac <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    e4ac:	defffd04 	addi	sp,sp,-12
    e4b0:	df000215 	stw	fp,8(sp)
    e4b4:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    e4b8:	d027f805 	stb	zero,-24608(gp)
    prdytbl       = &OSRdyTbl[0];
    e4bc:	d0a7f844 	addi	r2,gp,-24607
    e4c0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    e4c4:	e03ffe05 	stb	zero,-8(fp)
    e4c8:	00000706 	br	e4e8 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    e4cc:	e0bfff17 	ldw	r2,-4(fp)
    e4d0:	10c00044 	addi	r3,r2,1
    e4d4:	e0ffff15 	stw	r3,-4(fp)
    e4d8:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    e4dc:	e0bffe03 	ldbu	r2,-8(fp)
    e4e0:	10800044 	addi	r2,r2,1
    e4e4:	e0bffe05 	stb	r2,-8(fp)
    e4e8:	e0bffe03 	ldbu	r2,-8(fp)
    e4ec:	108001b0 	cmpltui	r2,r2,6
    e4f0:	103ff61e 	bne	r2,zero,e4cc <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    e4f4:	d027edc5 	stb	zero,-24649(gp)
    OSPrioHighRdy = 0;
    e4f8:	d027ed85 	stb	zero,-24650(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    e4fc:	d027f615 	stw	zero,-24616(gp)
    OSTCBCur      = (OS_TCB *)0;
    e500:	d027fc15 	stw	zero,-24592(gp)
}
    e504:	0001883a 	nop
    e508:	e037883a 	mov	sp,fp
    e50c:	df000017 	ldw	fp,0(sp)
    e510:	dec00104 	addi	sp,sp,4
    e514:	f800283a 	ret

0000e518 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    e518:	defff804 	addi	sp,sp,-32
    e51c:	dfc00715 	stw	ra,28(sp)
    e520:	df000615 	stw	fp,24(sp)
    e524:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    e528:	008000c4 	movi	r2,3
    e52c:	d8800415 	stw	r2,16(sp)
    e530:	d8000315 	stw	zero,12(sp)
    e534:	00808004 	movi	r2,512
    e538:	d8800215 	stw	r2,8(sp)
    e53c:	008000f4 	movhi	r2,3
    e540:	108d5c04 	addi	r2,r2,13680
    e544:	d8800115 	stw	r2,4(sp)
    e548:	00bfffd4 	movui	r2,65535
    e54c:	d8800015 	stw	r2,0(sp)
    e550:	01c00a04 	movi	r7,40
    e554:	018000f4 	movhi	r6,3
    e558:	318f5b04 	addi	r6,r6,15724
    e55c:	000b883a 	mov	r5,zero
    e560:	01000074 	movhi	r4,1
    e564:	213a7104 	addi	r4,r4,-5692
    e568:	0013bbc0 	call	13bbc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    e56c:	e1bfff04 	addi	r6,fp,-4
    e570:	014000b4 	movhi	r5,2
    e574:	296abf04 	addi	r5,r5,-21764
    e578:	01000a04 	movi	r4,40
    e57c:	00143cc0 	call	143cc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    e580:	0001883a 	nop
    e584:	e037883a 	mov	sp,fp
    e588:	dfc00117 	ldw	ra,4(sp)
    e58c:	df000017 	ldw	fp,0(sp)
    e590:	dec00204 	addi	sp,sp,8
    e594:	f800283a 	ret

0000e598 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    e598:	defff804 	addi	sp,sp,-32
    e59c:	dfc00715 	stw	ra,28(sp)
    e5a0:	df000615 	stw	fp,24(sp)
    e5a4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    e5a8:	008000c4 	movi	r2,3
    e5ac:	d8800415 	stw	r2,16(sp)
    e5b0:	d8000315 	stw	zero,12(sp)
    e5b4:	00808004 	movi	r2,512
    e5b8:	d8800215 	stw	r2,8(sp)
    e5bc:	008000f4 	movhi	r2,3
    e5c0:	1088e404 	addi	r2,r2,9104
    e5c4:	d8800115 	stw	r2,4(sp)
    e5c8:	00bfff94 	movui	r2,65534
    e5cc:	d8800015 	stw	r2,0(sp)
    e5d0:	01c009c4 	movi	r7,39
    e5d4:	018000f4 	movhi	r6,3
    e5d8:	318ae304 	addi	r6,r6,11148
    e5dc:	000b883a 	mov	r5,zero
    e5e0:	01000074 	movhi	r4,1
    e5e4:	213a8804 	addi	r4,r4,-5600
    e5e8:	0013bbc0 	call	13bbc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    e5ec:	e1bfff04 	addi	r6,fp,-4
    e5f0:	014000b4 	movhi	r5,2
    e5f4:	296ac304 	addi	r5,r5,-21748
    e5f8:	010009c4 	movi	r4,39
    e5fc:	00143cc0 	call	143cc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    e600:	0001883a 	nop
    e604:	e037883a 	mov	sp,fp
    e608:	dfc00117 	ldw	ra,4(sp)
    e60c:	df000017 	ldw	fp,0(sp)
    e610:	dec00204 	addi	sp,sp,8
    e614:	f800283a 	ret

0000e618 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    e618:	defffb04 	addi	sp,sp,-20
    e61c:	dfc00415 	stw	ra,16(sp)
    e620:	df000315 	stw	fp,12(sp)
    e624:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    e628:	01445304 	movi	r5,4428
    e62c:	010000f4 	movhi	r4,3
    e630:	21126804 	addi	r4,r4,18848
    e634:	000e6fc0 	call	e6fc <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    e638:	01402904 	movi	r5,164
    e63c:	010000f4 	movhi	r4,3
    e640:	2116bb04 	addi	r4,r4,23276
    e644:	000e6fc0 	call	e6fc <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    e648:	008000f4 	movhi	r2,3
    e64c:	10926804 	addi	r2,r2,18848
    e650:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    e654:	008000f4 	movhi	r2,3
    e658:	10928304 	addi	r2,r2,18956
    e65c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    e660:	e03ffd05 	stb	zero,-12(fp)
    e664:	00001106 	br	e6ac <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    e668:	e0bffe17 	ldw	r2,-8(fp)
    e66c:	e0ffff17 	ldw	r3,-4(fp)
    e670:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    e674:	e0bffe17 	ldw	r2,-8(fp)
    e678:	00c00fc4 	movi	r3,63
    e67c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    e680:	e0bffe17 	ldw	r2,-8(fp)
    e684:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    e688:	e0bffe17 	ldw	r2,-8(fp)
    e68c:	10801b04 	addi	r2,r2,108
    e690:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    e694:	e0bfff17 	ldw	r2,-4(fp)
    e698:	10801b04 	addi	r2,r2,108
    e69c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    e6a0:	e0bffd03 	ldbu	r2,-12(fp)
    e6a4:	10800044 	addi	r2,r2,1
    e6a8:	e0bffd05 	stb	r2,-12(fp)
    e6ac:	e0bffd03 	ldbu	r2,-12(fp)
    e6b0:	10800a30 	cmpltui	r2,r2,40
    e6b4:	103fec1e 	bne	r2,zero,e668 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    e6b8:	e0bffe17 	ldw	r2,-8(fp)
    e6bc:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    e6c0:	e0bffe17 	ldw	r2,-8(fp)
    e6c4:	00c00fc4 	movi	r3,63
    e6c8:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    e6cc:	e0bffe17 	ldw	r2,-8(fp)
    e6d0:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    e6d4:	d027ee15 	stw	zero,-24648(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    e6d8:	008000f4 	movhi	r2,3
    e6dc:	10926804 	addi	r2,r2,18848
    e6e0:	d0a7f315 	stw	r2,-24628(gp)
}
    e6e4:	0001883a 	nop
    e6e8:	e037883a 	mov	sp,fp
    e6ec:	dfc00117 	ldw	ra,4(sp)
    e6f0:	df000017 	ldw	fp,0(sp)
    e6f4:	dec00204 	addi	sp,sp,8
    e6f8:	f800283a 	ret

0000e6fc <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    e6fc:	defffd04 	addi	sp,sp,-12
    e700:	df000215 	stw	fp,8(sp)
    e704:	df000204 	addi	fp,sp,8
    e708:	e13ffe15 	stw	r4,-8(fp)
    e70c:	2805883a 	mov	r2,r5
    e710:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    e714:	00000706 	br	e734 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    e718:	e0bffe17 	ldw	r2,-8(fp)
    e71c:	10c00044 	addi	r3,r2,1
    e720:	e0fffe15 	stw	r3,-8(fp)
    e724:	10000005 	stb	zero,0(r2)
        size--;
    e728:	e0bfff0b 	ldhu	r2,-4(fp)
    e72c:	10bfffc4 	addi	r2,r2,-1
    e730:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    e734:	e0bfff0b 	ldhu	r2,-4(fp)
    e738:	103ff71e 	bne	r2,zero,e718 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    e73c:	0001883a 	nop
    e740:	e037883a 	mov	sp,fp
    e744:	df000017 	ldw	fp,0(sp)
    e748:	dec00104 	addi	sp,sp,4
    e74c:	f800283a 	ret

0000e750 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    e750:	defffc04 	addi	sp,sp,-16
    e754:	df000315 	stw	fp,12(sp)
    e758:	df000304 	addi	fp,sp,12
    e75c:	e13ffd15 	stw	r4,-12(fp)
    e760:	e17ffe15 	stw	r5,-8(fp)
    e764:	3005883a 	mov	r2,r6
    e768:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    e76c:	00000b06 	br	e79c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    e770:	e0bffd17 	ldw	r2,-12(fp)
    e774:	10c00044 	addi	r3,r2,1
    e778:	e0fffd15 	stw	r3,-12(fp)
    e77c:	e0fffe17 	ldw	r3,-8(fp)
    e780:	19000044 	addi	r4,r3,1
    e784:	e13ffe15 	stw	r4,-8(fp)
    e788:	18c00003 	ldbu	r3,0(r3)
    e78c:	10c00005 	stb	r3,0(r2)
        size--;
    e790:	e0bfff0b 	ldhu	r2,-4(fp)
    e794:	10bfffc4 	addi	r2,r2,-1
    e798:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    e79c:	e0bfff0b 	ldhu	r2,-4(fp)
    e7a0:	103ff31e 	bne	r2,zero,e770 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
    e7a4:	0001883a 	nop
    e7a8:	e037883a 	mov	sp,fp
    e7ac:	df000017 	ldw	fp,0(sp)
    e7b0:	dec00104 	addi	sp,sp,4
    e7b4:	f800283a 	ret

0000e7b8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    e7b8:	defffb04 	addi	sp,sp,-20
    e7bc:	dfc00415 	stw	ra,16(sp)
    e7c0:	df000315 	stw	fp,12(sp)
    e7c4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    e7c8:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e7cc:	0005303a 	rdctl	r2,status
    e7d0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e7d4:	e0ffff17 	ldw	r3,-4(fp)
    e7d8:	00bfff84 	movi	r2,-2
    e7dc:	1884703a 	and	r2,r3,r2
    e7e0:	1001703a 	wrctl	status,r2
  
  return context;
    e7e4:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    e7e8:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    e7ec:	d0a7fb03 	ldbu	r2,-24596(gp)
    e7f0:	10803fcc 	andi	r2,r2,255
    e7f4:	10001a1e 	bne	r2,zero,e860 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    e7f8:	d0a7e903 	ldbu	r2,-24668(gp)
    e7fc:	10803fcc 	andi	r2,r2,255
    e800:	1000171e 	bne	r2,zero,e860 <OS_Sched+0xa8>
            OS_SchedNew();
    e804:	000e8880 	call	e888 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    e808:	d0e7ed83 	ldbu	r3,-24650(gp)
    e80c:	d0a7edc3 	ldbu	r2,-24649(gp)
    e810:	18c03fcc 	andi	r3,r3,255
    e814:	10803fcc 	andi	r2,r2,255
    e818:	18801126 	beq	r3,r2,e860 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    e81c:	d0a7ed83 	ldbu	r2,-24650(gp)
    e820:	10c03fcc 	andi	r3,r2,255
    e824:	008000f4 	movhi	r2,3
    e828:	1096bb04 	addi	r2,r2,23276
    e82c:	18c7883a 	add	r3,r3,r3
    e830:	18c7883a 	add	r3,r3,r3
    e834:	10c5883a 	add	r2,r2,r3
    e838:	10800017 	ldw	r2,0(r2)
    e83c:	d0a7f615 	stw	r2,-24616(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    e840:	d0a7f617 	ldw	r2,-24616(gp)
    e844:	10c00e17 	ldw	r3,56(r2)
    e848:	18c00044 	addi	r3,r3,1
    e84c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    e850:	d0a7f017 	ldw	r2,-24640(gp)
    e854:	10800044 	addi	r2,r2,1
    e858:	d0a7f015 	stw	r2,-24640(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    e85c:	00199140 	call	19914 <OSCtxSw>
    e860:	e0bffd17 	ldw	r2,-12(fp)
    e864:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e868:	e0bffe17 	ldw	r2,-8(fp)
    e86c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    e870:	0001883a 	nop
    e874:	e037883a 	mov	sp,fp
    e878:	dfc00117 	ldw	ra,4(sp)
    e87c:	df000017 	ldw	fp,0(sp)
    e880:	dec00204 	addi	sp,sp,8
    e884:	f800283a 	ret

0000e888 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    e888:	defffe04 	addi	sp,sp,-8
    e88c:	df000115 	stw	fp,4(sp)
    e890:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    e894:	d0a7f803 	ldbu	r2,-24608(gp)
    e898:	10c03fcc 	andi	r3,r2,255
    e89c:	008000b4 	movhi	r2,2
    e8a0:	10aa7f04 	addi	r2,r2,-22020
    e8a4:	10c5883a 	add	r2,r2,r3
    e8a8:	10800003 	ldbu	r2,0(r2)
    e8ac:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    e8b0:	e0bfff03 	ldbu	r2,-4(fp)
    e8b4:	100490fa 	slli	r2,r2,3
    e8b8:	1009883a 	mov	r4,r2
    e8bc:	e0ffff03 	ldbu	r3,-4(fp)
    e8c0:	d0a7f844 	addi	r2,gp,-24607
    e8c4:	1885883a 	add	r2,r3,r2
    e8c8:	10800003 	ldbu	r2,0(r2)
    e8cc:	10c03fcc 	andi	r3,r2,255
    e8d0:	008000b4 	movhi	r2,2
    e8d4:	10aa7f04 	addi	r2,r2,-22020
    e8d8:	10c5883a 	add	r2,r2,r3
    e8dc:	10800003 	ldbu	r2,0(r2)
    e8e0:	2085883a 	add	r2,r4,r2
    e8e4:	d0a7ed85 	stb	r2,-24650(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    e8e8:	0001883a 	nop
    e8ec:	e037883a 	mov	sp,fp
    e8f0:	df000017 	ldw	fp,0(sp)
    e8f4:	dec00104 	addi	sp,sp,4
    e8f8:	f800283a 	ret

0000e8fc <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    e8fc:	defffc04 	addi	sp,sp,-16
    e900:	df000315 	stw	fp,12(sp)
    e904:	df000304 	addi	fp,sp,12
    e908:	e13ffe15 	stw	r4,-8(fp)
    e90c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    e910:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    e914:	00000b06 	br	e944 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    e918:	e0bffe17 	ldw	r2,-8(fp)
    e91c:	10c00044 	addi	r3,r2,1
    e920:	e0fffe15 	stw	r3,-8(fp)
    e924:	e0ffff17 	ldw	r3,-4(fp)
    e928:	19000044 	addi	r4,r3,1
    e92c:	e13fff15 	stw	r4,-4(fp)
    e930:	18c00003 	ldbu	r3,0(r3)
    e934:	10c00005 	stb	r3,0(r2)
        len++;
    e938:	e0bffd03 	ldbu	r2,-12(fp)
    e93c:	10800044 	addi	r2,r2,1
    e940:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    e944:	e0bfff17 	ldw	r2,-4(fp)
    e948:	10800003 	ldbu	r2,0(r2)
    e94c:	10803fcc 	andi	r2,r2,255
    e950:	103ff11e 	bne	r2,zero,e918 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    e954:	e0bffe17 	ldw	r2,-8(fp)
    e958:	10000005 	stb	zero,0(r2)
    return (len);
    e95c:	e0bffd03 	ldbu	r2,-12(fp)
}
    e960:	e037883a 	mov	sp,fp
    e964:	df000017 	ldw	fp,0(sp)
    e968:	dec00104 	addi	sp,sp,4
    e96c:	f800283a 	ret

0000e970 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    e970:	defffd04 	addi	sp,sp,-12
    e974:	df000215 	stw	fp,8(sp)
    e978:	df000204 	addi	fp,sp,8
    e97c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    e980:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    e984:	00000606 	br	e9a0 <OS_StrLen+0x30>
        psrc++;
    e988:	e0bfff17 	ldw	r2,-4(fp)
    e98c:	10800044 	addi	r2,r2,1
    e990:	e0bfff15 	stw	r2,-4(fp)
        len++;
    e994:	e0bffe03 	ldbu	r2,-8(fp)
    e998:	10800044 	addi	r2,r2,1
    e99c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    e9a0:	e0bfff17 	ldw	r2,-4(fp)
    e9a4:	10800003 	ldbu	r2,0(r2)
    e9a8:	10803fcc 	andi	r2,r2,255
    e9ac:	103ff61e 	bne	r2,zero,e988 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
    e9b0:	e0bffe03 	ldbu	r2,-8(fp)
}
    e9b4:	e037883a 	mov	sp,fp
    e9b8:	df000017 	ldw	fp,0(sp)
    e9bc:	dec00104 	addi	sp,sp,4
    e9c0:	f800283a 	ret

0000e9c4 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    e9c4:	defffa04 	addi	sp,sp,-24
    e9c8:	dfc00515 	stw	ra,20(sp)
    e9cc:	df000415 	stw	fp,16(sp)
    e9d0:	df000404 	addi	fp,sp,16
    e9d4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e9d8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e9dc:	0005303a 	rdctl	r2,status
    e9e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e9e4:	e0fffd17 	ldw	r3,-12(fp)
    e9e8:	00bfff84 	movi	r2,-2
    e9ec:	1884703a 	and	r2,r3,r2
    e9f0:	1001703a 	wrctl	status,r2
  
  return context;
    e9f4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    e9f8:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    e9fc:	d0a7ec17 	ldw	r2,-24656(gp)
    ea00:	10800044 	addi	r2,r2,1
    ea04:	d0a7ec15 	stw	r2,-24656(gp)
    ea08:	e0bffc17 	ldw	r2,-16(fp)
    ea0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea10:	e0bffe17 	ldw	r2,-8(fp)
    ea14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    ea18:	0019c580 	call	19c58 <OSTaskIdleHook>
    }
    ea1c:	003fef06 	br	e9dc <OS_TaskIdle+0x18>

0000ea20 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    ea20:	defff804 	addi	sp,sp,-32
    ea24:	dfc00715 	stw	ra,28(sp)
    ea28:	df000615 	stw	fp,24(sp)
    ea2c:	dc400515 	stw	r17,20(sp)
    ea30:	dc000415 	stw	r16,16(sp)
    ea34:	df000604 	addi	fp,sp,24
    ea38:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ea3c:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    ea40:	00000206 	br	ea4c <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    ea44:	01000044 	movi	r4,1
    ea48:	0014c8c0 	call	14c8c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    ea4c:	d0a80103 	ldbu	r2,-24572(gp)
    ea50:	10803fcc 	andi	r2,r2,255
    ea54:	103ffb26 	beq	r2,zero,ea44 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    ea58:	d0e7f217 	ldw	r3,-24632(gp)
    ea5c:	00947b34 	movhi	r2,20972
    ea60:	10a147c4 	addi	r2,r2,-31457
    ea64:	1888383a 	mulxuu	r4,r3,r2
    ea68:	1885383a 	mul	r2,r3,r2
    ea6c:	1021883a 	mov	r16,r2
    ea70:	2023883a 	mov	r17,r4
    ea74:	8804d17a 	srli	r2,r17,5
    ea78:	d0a7f215 	stw	r2,-24632(gp)
    if (OSIdleCtrMax == 0L) {
    ea7c:	d0a7f217 	ldw	r2,-24632(gp)
    ea80:	1000031e 	bne	r2,zero,ea90 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    ea84:	d027f405 	stb	zero,-24624(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    ea88:	01003fc4 	movi	r4,255
    ea8c:	00149140 	call	14914 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ea90:	0005303a 	rdctl	r2,status
    ea94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea98:	e0fffb17 	ldw	r3,-20(fp)
    ea9c:	00bfff84 	movi	r2,-2
    eaa0:	1884703a 	and	r2,r3,r2
    eaa4:	1001703a 	wrctl	status,r2
  
  return context;
    eaa8:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    eaac:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    eab0:	d0a7ec17 	ldw	r2,-24656(gp)
    eab4:	d0a80215 	stw	r2,-24568(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    eab8:	d027ec15 	stw	zero,-24656(gp)
    eabc:	e0bffa17 	ldw	r2,-24(fp)
    eac0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eac4:	e0bffc17 	ldw	r2,-16(fp)
    eac8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    eacc:	d0e80217 	ldw	r3,-24568(gp)
    ead0:	d0a7f217 	ldw	r2,-24632(gp)
    ead4:	1885203a 	divu	r2,r3,r2
    ead8:	1007883a 	mov	r3,r2
    eadc:	00801904 	movi	r2,100
    eae0:	10c5c83a 	sub	r2,r2,r3
    eae4:	d0a7f405 	stb	r2,-24624(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    eae8:	0019ba80 	call	19ba8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    eaec:	000eafc0 	call	eafc <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    eaf0:	0009883a 	mov	r4,zero
    eaf4:	0014c8c0 	call	14c8c <OSTimeDly>
    }
    eaf8:	003fe506 	br	ea90 <OS_TaskStat+0x70>

0000eafc <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    eafc:	defffa04 	addi	sp,sp,-24
    eb00:	dfc00515 	stw	ra,20(sp)
    eb04:	df000415 	stw	fp,16(sp)
    eb08:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    eb0c:	e03ffc05 	stb	zero,-16(fp)
    eb10:	00002406 	br	eba4 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    eb14:	e0bffc03 	ldbu	r2,-16(fp)
    eb18:	e0fffe04 	addi	r3,fp,-8
    eb1c:	180b883a 	mov	r5,r3
    eb20:	1009883a 	mov	r4,r2
    eb24:	00147540 	call	14754 <OSTaskStkChk>
    eb28:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    eb2c:	e0bffc43 	ldbu	r2,-15(fp)
    eb30:	1000191e 	bne	r2,zero,eb98 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    eb34:	e0fffc03 	ldbu	r3,-16(fp)
    eb38:	008000f4 	movhi	r2,3
    eb3c:	1096bb04 	addi	r2,r2,23276
    eb40:	18c7883a 	add	r3,r3,r3
    eb44:	18c7883a 	add	r3,r3,r3
    eb48:	10c5883a 	add	r2,r2,r3
    eb4c:	10800017 	ldw	r2,0(r2)
    eb50:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    eb54:	e0bffd17 	ldw	r2,-12(fp)
    eb58:	10000f26 	beq	r2,zero,eb98 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    eb5c:	e0bffd17 	ldw	r2,-12(fp)
    eb60:	10800060 	cmpeqi	r2,r2,1
    eb64:	10000c1e 	bne	r2,zero,eb98 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    eb68:	e0bffd17 	ldw	r2,-12(fp)
    eb6c:	10c00217 	ldw	r3,8(r2)
    eb70:	e0bffd17 	ldw	r2,-12(fp)
    eb74:	10800317 	ldw	r2,12(r2)
    eb78:	1085883a 	add	r2,r2,r2
    eb7c:	1085883a 	add	r2,r2,r2
    eb80:	1887883a 	add	r3,r3,r2
    eb84:	e0bffd17 	ldw	r2,-12(fp)
    eb88:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    eb8c:	e0ffff17 	ldw	r3,-4(fp)
    eb90:	e0bffd17 	ldw	r2,-12(fp)
    eb94:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    eb98:	e0bffc03 	ldbu	r2,-16(fp)
    eb9c:	10800044 	addi	r2,r2,1
    eba0:	e0bffc05 	stb	r2,-16(fp)
    eba4:	e0bffc03 	ldbu	r2,-16(fp)
    eba8:	10800a70 	cmpltui	r2,r2,41
    ebac:	103fd91e 	bne	r2,zero,eb14 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    ebb0:	0001883a 	nop
    ebb4:	e037883a 	mov	sp,fp
    ebb8:	dfc00117 	ldw	ra,4(sp)
    ebbc:	df000017 	ldw	fp,0(sp)
    ebc0:	dec00204 	addi	sp,sp,8
    ebc4:	f800283a 	ret

0000ebc8 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    ebc8:	defff204 	addi	sp,sp,-56
    ebcc:	dfc00d15 	stw	ra,52(sp)
    ebd0:	df000c15 	stw	fp,48(sp)
    ebd4:	df000c04 	addi	fp,sp,48
    ebd8:	e17ffc15 	stw	r5,-16(fp)
    ebdc:	e1bffd15 	stw	r6,-12(fp)
    ebe0:	3807883a 	mov	r3,r7
    ebe4:	e0800417 	ldw	r2,16(fp)
    ebe8:	e13ffb05 	stb	r4,-20(fp)
    ebec:	e0fffe0d 	sth	r3,-8(fp)
    ebf0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    ebf4:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ebf8:	0005303a 	rdctl	r2,status
    ebfc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec00:	e0fffa17 	ldw	r3,-24(fp)
    ec04:	00bfff84 	movi	r2,-2
    ec08:	1884703a 	and	r2,r3,r2
    ec0c:	1001703a 	wrctl	status,r2
  
  return context;
    ec10:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    ec14:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    ec18:	d0a7f317 	ldw	r2,-24628(gp)
    ec1c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    ec20:	e0bff617 	ldw	r2,-40(fp)
    ec24:	10009326 	beq	r2,zero,ee74 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    ec28:	e0bff617 	ldw	r2,-40(fp)
    ec2c:	10800517 	ldw	r2,20(r2)
    ec30:	d0a7f315 	stw	r2,-24628(gp)
    ec34:	e0bff417 	ldw	r2,-48(fp)
    ec38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ec3c:	e0bff817 	ldw	r2,-32(fp)
    ec40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    ec44:	e0bff617 	ldw	r2,-40(fp)
    ec48:	e0fffc17 	ldw	r3,-16(fp)
    ec4c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    ec50:	e0bff617 	ldw	r2,-40(fp)
    ec54:	e0fffb03 	ldbu	r3,-20(fp)
    ec58:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    ec5c:	e0bff617 	ldw	r2,-40(fp)
    ec60:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    ec64:	e0bff617 	ldw	r2,-40(fp)
    ec68:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    ec6c:	e0bff617 	ldw	r2,-40(fp)
    ec70:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    ec74:	e0bff617 	ldw	r2,-40(fp)
    ec78:	e0c00317 	ldw	r3,12(fp)
    ec7c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    ec80:	e0bff617 	ldw	r2,-40(fp)
    ec84:	e0c00217 	ldw	r3,8(fp)
    ec88:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    ec8c:	e0bff617 	ldw	r2,-40(fp)
    ec90:	e0fffd17 	ldw	r3,-12(fp)
    ec94:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    ec98:	e0bff617 	ldw	r2,-40(fp)
    ec9c:	e0ffff0b 	ldhu	r3,-4(fp)
    eca0:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    eca4:	e0bff617 	ldw	r2,-40(fp)
    eca8:	e0fffe0b 	ldhu	r3,-8(fp)
    ecac:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    ecb0:	e0bff617 	ldw	r2,-40(fp)
    ecb4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    ecb8:	e0bffb03 	ldbu	r2,-20(fp)
    ecbc:	1004d0fa 	srli	r2,r2,3
    ecc0:	1007883a 	mov	r3,r2
    ecc4:	e0bff617 	ldw	r2,-40(fp)
    ecc8:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    eccc:	e0bffb03 	ldbu	r2,-20(fp)
    ecd0:	108001cc 	andi	r2,r2,7
    ecd4:	1007883a 	mov	r3,r2
    ecd8:	e0bff617 	ldw	r2,-40(fp)
    ecdc:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    ece0:	e0bff617 	ldw	r2,-40(fp)
    ece4:	10800d03 	ldbu	r2,52(r2)
    ece8:	10803fcc 	andi	r2,r2,255
    ecec:	00c00044 	movi	r3,1
    ecf0:	1884983a 	sll	r2,r3,r2
    ecf4:	1007883a 	mov	r3,r2
    ecf8:	e0bff617 	ldw	r2,-40(fp)
    ecfc:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    ed00:	e0bff617 	ldw	r2,-40(fp)
    ed04:	10800cc3 	ldbu	r2,51(r2)
    ed08:	10803fcc 	andi	r2,r2,255
    ed0c:	00c00044 	movi	r3,1
    ed10:	1884983a 	sll	r2,r3,r2
    ed14:	1007883a 	mov	r3,r2
    ed18:	e0bff617 	ldw	r2,-40(fp)
    ed1c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    ed20:	e0bff617 	ldw	r2,-40(fp)
    ed24:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    ed28:	e0bff617 	ldw	r2,-40(fp)
    ed2c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    ed30:	e0bff617 	ldw	r2,-40(fp)
    ed34:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    ed38:	e0bff617 	ldw	r2,-40(fp)
    ed3c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    ed40:	e0bff617 	ldw	r2,-40(fp)
    ed44:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    ed48:	e0bff617 	ldw	r2,-40(fp)
    ed4c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    ed50:	e0bff617 	ldw	r2,-40(fp)
    ed54:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    ed58:	e0bff617 	ldw	r2,-40(fp)
    ed5c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    ed60:	e0bff617 	ldw	r2,-40(fp)
    ed64:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    ed68:	e0bff617 	ldw	r2,-40(fp)
    ed6c:	00c00fc4 	movi	r3,63
    ed70:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    ed74:	e0bff617 	ldw	r2,-40(fp)
    ed78:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    ed7c:	e13ff617 	ldw	r4,-40(fp)
    ed80:	0019c780 	call	19c78 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    ed84:	e13ff617 	ldw	r4,-40(fp)
    ed88:	0019b400 	call	19b40 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed8c:	0005303a 	rdctl	r2,status
    ed90:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed94:	e0fff517 	ldw	r3,-44(fp)
    ed98:	00bfff84 	movi	r2,-2
    ed9c:	1884703a 	and	r2,r3,r2
    eda0:	1001703a 	wrctl	status,r2
  
  return context;
    eda4:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    eda8:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    edac:	e0fffb03 	ldbu	r3,-20(fp)
    edb0:	008000f4 	movhi	r2,3
    edb4:	1096bb04 	addi	r2,r2,23276
    edb8:	18c7883a 	add	r3,r3,r3
    edbc:	18c7883a 	add	r3,r3,r3
    edc0:	10c5883a 	add	r2,r2,r3
    edc4:	e0fff617 	ldw	r3,-40(fp)
    edc8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    edcc:	d0e7ee17 	ldw	r3,-24648(gp)
    edd0:	e0bff617 	ldw	r2,-40(fp)
    edd4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    edd8:	e0bff617 	ldw	r2,-40(fp)
    eddc:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    ede0:	d0a7ee17 	ldw	r2,-24648(gp)
    ede4:	10000326 	beq	r2,zero,edf4 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    ede8:	d0a7ee17 	ldw	r2,-24648(gp)
    edec:	e0fff617 	ldw	r3,-40(fp)
    edf0:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    edf4:	e0bff617 	ldw	r2,-40(fp)
    edf8:	d0a7ee15 	stw	r2,-24648(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    edfc:	e0bff617 	ldw	r2,-40(fp)
    ee00:	10c00d83 	ldbu	r3,54(r2)
    ee04:	d0a7f803 	ldbu	r2,-24608(gp)
    ee08:	1884b03a 	or	r2,r3,r2
    ee0c:	d0a7f805 	stb	r2,-24608(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    ee10:	e0bff617 	ldw	r2,-40(fp)
    ee14:	10800d03 	ldbu	r2,52(r2)
    ee18:	10c03fcc 	andi	r3,r2,255
    ee1c:	e0bff617 	ldw	r2,-40(fp)
    ee20:	10800d03 	ldbu	r2,52(r2)
    ee24:	11003fcc 	andi	r4,r2,255
    ee28:	d0a7f844 	addi	r2,gp,-24607
    ee2c:	2085883a 	add	r2,r4,r2
    ee30:	11000003 	ldbu	r4,0(r2)
    ee34:	e0bff617 	ldw	r2,-40(fp)
    ee38:	10800d43 	ldbu	r2,53(r2)
    ee3c:	2084b03a 	or	r2,r4,r2
    ee40:	1009883a 	mov	r4,r2
    ee44:	d0a7f844 	addi	r2,gp,-24607
    ee48:	1885883a 	add	r2,r3,r2
    ee4c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    ee50:	d0a7f443 	ldbu	r2,-24623(gp)
    ee54:	10800044 	addi	r2,r2,1
    ee58:	d0a7f445 	stb	r2,-24623(gp)
    ee5c:	e0bff417 	ldw	r2,-48(fp)
    ee60:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee64:	e0bff717 	ldw	r2,-36(fp)
    ee68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    ee6c:	0005883a 	mov	r2,zero
    ee70:	00000506 	br	ee88 <OS_TCBInit+0x2c0>
    ee74:	e0bff417 	ldw	r2,-48(fp)
    ee78:	e0bff915 	stw	r2,-28(fp)
    ee7c:	e0bff917 	ldw	r2,-28(fp)
    ee80:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    ee84:	00801084 	movi	r2,66
}
    ee88:	e037883a 	mov	sp,fp
    ee8c:	dfc00117 	ldw	ra,4(sp)
    ee90:	df000017 	ldw	fp,0(sp)
    ee94:	dec00204 	addi	sp,sp,8
    ee98:	f800283a 	ret

0000ee9c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    ee9c:	defffe04 	addi	sp,sp,-8
    eea0:	df000115 	stw	fp,4(sp)
    eea4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    eea8:	d0a00804 	addi	r2,gp,-32736
    eeac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    eeb0:	d0a00904 	addi	r2,gp,-32732
    eeb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    eeb8:	d0a00a84 	addi	r2,gp,-32726
    eebc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    eec0:	d0a00b04 	addi	r2,gp,-32724
    eec4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    eec8:	d0a00a04 	addi	r2,gp,-32728
    eecc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    eed0:	d0a00b84 	addi	r2,gp,-32722
    eed4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    eed8:	d0a00c04 	addi	r2,gp,-32720
    eedc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    eee0:	d0a00c84 	addi	r2,gp,-32718
    eee4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    eee8:	d0a00d04 	addi	r2,gp,-32716
    eeec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    eef0:	d0a00d84 	addi	r2,gp,-32714
    eef4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    eef8:	d0a00e04 	addi	r2,gp,-32712
    eefc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    ef00:	d0a00e84 	addi	r2,gp,-32710
    ef04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    ef08:	d0a00f04 	addi	r2,gp,-32708
    ef0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    ef10:	d0a00f84 	addi	r2,gp,-32706
    ef14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    ef18:	d0a01004 	addi	r2,gp,-32704
    ef1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    ef20:	d0a01084 	addi	r2,gp,-32702
    ef24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    ef28:	d0a01104 	addi	r2,gp,-32700
    ef2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    ef30:	d0a01184 	addi	r2,gp,-32698
    ef34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    ef38:	d0a01204 	addi	r2,gp,-32696
    ef3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    ef40:	d0a01284 	addi	r2,gp,-32694
    ef44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    ef48:	d0a01304 	addi	r2,gp,-32692
    ef4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    ef50:	d0a01384 	addi	r2,gp,-32690
    ef54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    ef58:	d0a01404 	addi	r2,gp,-32688
    ef5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    ef60:	d0a01484 	addi	r2,gp,-32686
    ef64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    ef68:	d0a01504 	addi	r2,gp,-32684
    ef6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    ef70:	d0a01584 	addi	r2,gp,-32682
    ef74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    ef78:	d0a01604 	addi	r2,gp,-32680
    ef7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    ef80:	d0a01684 	addi	r2,gp,-32678
    ef84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    ef88:	d0a01704 	addi	r2,gp,-32676
    ef8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    ef90:	d0a01784 	addi	r2,gp,-32674
    ef94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    ef98:	d0a01804 	addi	r2,gp,-32672
    ef9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    efa0:	d0a01884 	addi	r2,gp,-32670
    efa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    efa8:	d0a01904 	addi	r2,gp,-32668
    efac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    efb0:	d0a01984 	addi	r2,gp,-32666
    efb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    efb8:	d0a01a04 	addi	r2,gp,-32664
    efbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    efc0:	d0a01a84 	addi	r2,gp,-32662
    efc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    efc8:	d0a01b04 	addi	r2,gp,-32660
    efcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    efd0:	d0a01b84 	addi	r2,gp,-32658
    efd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    efd8:	d0a01c04 	addi	r2,gp,-32656
    efdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    efe0:	d0a01c84 	addi	r2,gp,-32654
    efe4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    efe8:	d0a01d04 	addi	r2,gp,-32652
    efec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    eff0:	d0a01d84 	addi	r2,gp,-32650
    eff4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    eff8:	d0a01e04 	addi	r2,gp,-32648
    effc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    f000:	d0a01e84 	addi	r2,gp,-32646
    f004:	e0bfff15 	stw	r2,-4(fp)

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
    f008:	008000f4 	movhi	r2,3
    f00c:	10840404 	addi	r2,r2,4112
    f010:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTbl[0];
    f014:	008000f4 	movhi	r2,3
    f018:	10827404 	addi	r2,r2,2512
    f01c:	e0bfff15 	stw	r2,-4(fp)
    
    ptemp = (void *)&OSTmrEn;
    f020:	d0a01f84 	addi	r2,gp,-32642
    f024:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgMax;
    f028:	d0a02004 	addi	r2,gp,-32640
    f02c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgNameSize;
    f030:	d0a02084 	addi	r2,gp,-32638
    f034:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgWheelSize;
    f038:	d0a02104 	addi	r2,gp,-32636
    f03c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgTicksPerSec;
    f040:	d0a02184 	addi	r2,gp,-32634
    f044:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrSize;
    f048:	d0a02204 	addi	r2,gp,-32632
    f04c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrTblSize;
    f050:	d0a02284 	addi	r2,gp,-32630
    f054:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    f058:	d0a02304 	addi	r2,gp,-32628
    f05c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTblSize;
    f060:	d0a02384 	addi	r2,gp,-32626
    f064:	e0bfff15 	stw	r2,-4(fp)
#endif

    ptemp = (void *)&OSVersionNbr;
    f068:	d0a01f04 	addi	r2,gp,-32644
    f06c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    f070:	d0a02404 	addi	r2,gp,-32624
    f074:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    f078:	0001883a 	nop
    f07c:	e037883a 	mov	sp,fp
    f080:	df000017 	ldw	fp,0(sp)
    f084:	dec00104 	addi	sp,sp,4
    f088:	f800283a 	ret

0000f08c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    f08c:	defff204 	addi	sp,sp,-56
    f090:	df000d15 	stw	fp,52(sp)
    f094:	df000d04 	addi	fp,sp,52
    f098:	e13ffc15 	stw	r4,-16(fp)
    f09c:	2807883a 	mov	r3,r5
    f0a0:	3005883a 	mov	r2,r6
    f0a4:	e1ffff15 	stw	r7,-4(fp)
    f0a8:	e0fffd0d 	sth	r3,-12(fp)
    f0ac:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    f0b0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    f0b4:	e0bfff17 	ldw	r2,-4(fp)
    f0b8:	1000021e 	bne	r2,zero,f0c4 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    f0bc:	0005883a 	mov	r2,zero
    f0c0:	0000b006 	br	f384 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    f0c4:	e0bffc17 	ldw	r2,-16(fp)
    f0c8:	1000051e 	bne	r2,zero,f0e0 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    f0cc:	e0bfff17 	ldw	r2,-4(fp)
    f0d0:	00c01b84 	movi	r3,110
    f0d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    f0d8:	0005883a 	mov	r2,zero
    f0dc:	0000a906 	br	f384 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    f0e0:	e0bffc17 	ldw	r2,-16(fp)
    f0e4:	10800003 	ldbu	r2,0(r2)
    f0e8:	10803fcc 	andi	r2,r2,255
    f0ec:	10800160 	cmpeqi	r2,r2,5
    f0f0:	1000051e 	bne	r2,zero,f108 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    f0f4:	e0bfff17 	ldw	r2,-4(fp)
    f0f8:	00c00044 	movi	r3,1
    f0fc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    f100:	0005883a 	mov	r2,zero
    f104:	00009f06 	br	f384 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    f108:	e0fffe03 	ldbu	r3,-8(fp)
    f10c:	00bfe004 	movi	r2,-128
    f110:	1884703a 	and	r2,r3,r2
    f114:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    f118:	e0bff503 	ldbu	r2,-44(fp)
    f11c:	10000626 	beq	r2,zero,f138 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    f120:	e0bffe03 	ldbu	r2,-8(fp)
    f124:	10801fcc 	andi	r2,r2,127
    f128:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    f12c:	00800044 	movi	r2,1
    f130:	e0bff385 	stb	r2,-50(fp)
    f134:	00000106 	br	f13c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    f138:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    f13c:	e0bfff17 	ldw	r2,-4(fp)
    f140:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f144:	0005303a 	rdctl	r2,status
    f148:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f14c:	e0fffb17 	ldw	r3,-20(fp)
    f150:	00bfff84 	movi	r2,-2
    f154:	1884703a 	and	r2,r3,r2
    f158:	1001703a 	wrctl	status,r2
  
  return context;
    f15c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    f160:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    f164:	e0bffe03 	ldbu	r2,-8(fp)
    f168:	10c00060 	cmpeqi	r3,r2,1
    f16c:	18005f1e 	bne	r3,zero,f2ec <OSFlagAccept+0x260>
    f170:	10c00088 	cmpgei	r3,r2,2
    f174:	1800021e 	bne	r3,zero,f180 <OSFlagAccept+0xf4>
    f178:	10003f26 	beq	r2,zero,f278 <OSFlagAccept+0x1ec>
    f17c:	00007706 	br	f35c <OSFlagAccept+0x2d0>
    f180:	10c000a0 	cmpeqi	r3,r2,2
    f184:	1800031e 	bne	r3,zero,f194 <OSFlagAccept+0x108>
    f188:	108000e0 	cmpeqi	r2,r2,3
    f18c:	10001e1e 	bne	r2,zero,f208 <OSFlagAccept+0x17c>
    f190:	00007206 	br	f35c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    f194:	e0bffc17 	ldw	r2,-16(fp)
    f198:	10c0020b 	ldhu	r3,8(r2)
    f19c:	e0bffd0b 	ldhu	r2,-12(fp)
    f1a0:	1884703a 	and	r2,r3,r2
    f1a4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    f1a8:	e0fff30b 	ldhu	r3,-52(fp)
    f1ac:	e0bffd0b 	ldhu	r2,-12(fp)
    f1b0:	18800d1e 	bne	r3,r2,f1e8 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    f1b4:	e0bff383 	ldbu	r2,-50(fp)
    f1b8:	10800058 	cmpnei	r2,r2,1
    f1bc:	10000d1e 	bne	r2,zero,f1f4 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    f1c0:	e0bffc17 	ldw	r2,-16(fp)
    f1c4:	1080020b 	ldhu	r2,8(r2)
    f1c8:	1007883a 	mov	r3,r2
    f1cc:	e0bff30b 	ldhu	r2,-52(fp)
    f1d0:	0084303a 	nor	r2,zero,r2
    f1d4:	1884703a 	and	r2,r3,r2
    f1d8:	1007883a 	mov	r3,r2
    f1dc:	e0bffc17 	ldw	r2,-16(fp)
    f1e0:	10c0020d 	sth	r3,8(r2)
    f1e4:	00000306 	br	f1f4 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    f1e8:	e0bfff17 	ldw	r2,-4(fp)
    f1ec:	00c01c04 	movi	r3,112
    f1f0:	10c00005 	stb	r3,0(r2)
    f1f4:	e0bff417 	ldw	r2,-48(fp)
    f1f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1fc:	e0bff617 	ldw	r2,-40(fp)
    f200:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    f204:	00005e06 	br	f380 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    f208:	e0bffc17 	ldw	r2,-16(fp)
    f20c:	10c0020b 	ldhu	r3,8(r2)
    f210:	e0bffd0b 	ldhu	r2,-12(fp)
    f214:	1884703a 	and	r2,r3,r2
    f218:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    f21c:	e0bff30b 	ldhu	r2,-52(fp)
    f220:	10000d26 	beq	r2,zero,f258 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    f224:	e0bff383 	ldbu	r2,-50(fp)
    f228:	10800058 	cmpnei	r2,r2,1
    f22c:	10000d1e 	bne	r2,zero,f264 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    f230:	e0bffc17 	ldw	r2,-16(fp)
    f234:	1080020b 	ldhu	r2,8(r2)
    f238:	1007883a 	mov	r3,r2
    f23c:	e0bff30b 	ldhu	r2,-52(fp)
    f240:	0084303a 	nor	r2,zero,r2
    f244:	1884703a 	and	r2,r3,r2
    f248:	1007883a 	mov	r3,r2
    f24c:	e0bffc17 	ldw	r2,-16(fp)
    f250:	10c0020d 	sth	r3,8(r2)
    f254:	00000306 	br	f264 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    f258:	e0bfff17 	ldw	r2,-4(fp)
    f25c:	00c01c04 	movi	r3,112
    f260:	10c00005 	stb	r3,0(r2)
    f264:	e0bff417 	ldw	r2,-48(fp)
    f268:	e0bff715 	stw	r2,-36(fp)
    f26c:	e0bff717 	ldw	r2,-36(fp)
    f270:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    f274:	00004206 	br	f380 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    f278:	e0bffc17 	ldw	r2,-16(fp)
    f27c:	1080020b 	ldhu	r2,8(r2)
    f280:	0084303a 	nor	r2,zero,r2
    f284:	1007883a 	mov	r3,r2
    f288:	e0bffd0b 	ldhu	r2,-12(fp)
    f28c:	1884703a 	and	r2,r3,r2
    f290:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    f294:	e0fff30b 	ldhu	r3,-52(fp)
    f298:	e0bffd0b 	ldhu	r2,-12(fp)
    f29c:	18800b1e 	bne	r3,r2,f2cc <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    f2a0:	e0bff383 	ldbu	r2,-50(fp)
    f2a4:	10800058 	cmpnei	r2,r2,1
    f2a8:	10000b1e 	bne	r2,zero,f2d8 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    f2ac:	e0bffc17 	ldw	r2,-16(fp)
    f2b0:	10c0020b 	ldhu	r3,8(r2)
    f2b4:	e0bff30b 	ldhu	r2,-52(fp)
    f2b8:	1884b03a 	or	r2,r3,r2
    f2bc:	1007883a 	mov	r3,r2
    f2c0:	e0bffc17 	ldw	r2,-16(fp)
    f2c4:	10c0020d 	sth	r3,8(r2)
    f2c8:	00000306 	br	f2d8 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    f2cc:	e0bfff17 	ldw	r2,-4(fp)
    f2d0:	00c01c04 	movi	r3,112
    f2d4:	10c00005 	stb	r3,0(r2)
    f2d8:	e0bff417 	ldw	r2,-48(fp)
    f2dc:	e0bff815 	stw	r2,-32(fp)
    f2e0:	e0bff817 	ldw	r2,-32(fp)
    f2e4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    f2e8:	00002506 	br	f380 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    f2ec:	e0bffc17 	ldw	r2,-16(fp)
    f2f0:	1080020b 	ldhu	r2,8(r2)
    f2f4:	0084303a 	nor	r2,zero,r2
    f2f8:	1007883a 	mov	r3,r2
    f2fc:	e0bffd0b 	ldhu	r2,-12(fp)
    f300:	1884703a 	and	r2,r3,r2
    f304:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    f308:	e0bff30b 	ldhu	r2,-52(fp)
    f30c:	10000b26 	beq	r2,zero,f33c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    f310:	e0bff383 	ldbu	r2,-50(fp)
    f314:	10800058 	cmpnei	r2,r2,1
    f318:	10000b1e 	bne	r2,zero,f348 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    f31c:	e0bffc17 	ldw	r2,-16(fp)
    f320:	10c0020b 	ldhu	r3,8(r2)
    f324:	e0bff30b 	ldhu	r2,-52(fp)
    f328:	1884b03a 	or	r2,r3,r2
    f32c:	1007883a 	mov	r3,r2
    f330:	e0bffc17 	ldw	r2,-16(fp)
    f334:	10c0020d 	sth	r3,8(r2)
    f338:	00000306 	br	f348 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    f33c:	e0bfff17 	ldw	r2,-4(fp)
    f340:	00c01c04 	movi	r3,112
    f344:	10c00005 	stb	r3,0(r2)
    f348:	e0bff417 	ldw	r2,-48(fp)
    f34c:	e0bff915 	stw	r2,-28(fp)
    f350:	e0bff917 	ldw	r2,-28(fp)
    f354:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    f358:	00000906 	br	f380 <OSFlagAccept+0x2f4>
    f35c:	e0bff417 	ldw	r2,-48(fp)
    f360:	e0bffa15 	stw	r2,-24(fp)
    f364:	e0bffa17 	ldw	r2,-24(fp)
    f368:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    f36c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    f370:	e0bfff17 	ldw	r2,-4(fp)
    f374:	00c01bc4 	movi	r3,111
    f378:	10c00005 	stb	r3,0(r2)
             break;
    f37c:	0001883a 	nop
    }
    return (flags_rdy);
    f380:	e0bff30b 	ldhu	r2,-52(fp)
}
    f384:	e037883a 	mov	sp,fp
    f388:	df000017 	ldw	fp,0(sp)
    f38c:	dec00104 	addi	sp,sp,4
    f390:	f800283a 	ret

0000f394 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    f394:	defff804 	addi	sp,sp,-32
    f398:	df000715 	stw	fp,28(sp)
    f39c:	df000704 	addi	fp,sp,28
    f3a0:	2005883a 	mov	r2,r4
    f3a4:	e17fff15 	stw	r5,-4(fp)
    f3a8:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    f3ac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    f3b0:	e0bfff17 	ldw	r2,-4(fp)
    f3b4:	1000021e 	bne	r2,zero,f3c0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    f3b8:	0005883a 	mov	r2,zero
    f3bc:	00003306 	br	f48c <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    f3c0:	d0a7fb03 	ldbu	r2,-24596(gp)
    f3c4:	10803fcc 	andi	r2,r2,255
    f3c8:	10000526 	beq	r2,zero,f3e0 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    f3cc:	e0bfff17 	ldw	r2,-4(fp)
    f3d0:	00c00404 	movi	r3,16
    f3d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    f3d8:	0005883a 	mov	r2,zero
    f3dc:	00002b06 	br	f48c <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f3e0:	0005303a 	rdctl	r2,status
    f3e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f3e8:	e0fffd17 	ldw	r3,-12(fp)
    f3ec:	00bfff84 	movi	r2,-2
    f3f0:	1884703a 	and	r2,r3,r2
    f3f4:	1001703a 	wrctl	status,r2
  
  return context;
    f3f8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    f3fc:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    f400:	d0a80017 	ldw	r2,-24576(gp)
    f404:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    f408:	e0bffb17 	ldw	r2,-20(fp)
    f40c:	10001726 	beq	r2,zero,f46c <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    f410:	d0a80017 	ldw	r2,-24576(gp)
    f414:	10800117 	ldw	r2,4(r2)
    f418:	d0a80015 	stw	r2,-24576(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    f41c:	e0bffb17 	ldw	r2,-20(fp)
    f420:	00c00144 	movi	r3,5
    f424:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    f428:	e0bffb17 	ldw	r2,-20(fp)
    f42c:	e0fffe0b 	ldhu	r3,-8(fp)
    f430:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    f434:	e0bffb17 	ldw	r2,-20(fp)
    f438:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    f43c:	e0bffb17 	ldw	r2,-20(fp)
    f440:	00c00fc4 	movi	r3,63
    f444:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    f448:	e0bffb17 	ldw	r2,-20(fp)
    f44c:	100002c5 	stb	zero,11(r2)
    f450:	e0bff917 	ldw	r2,-28(fp)
    f454:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f458:	e0bffa17 	ldw	r2,-24(fp)
    f45c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    f460:	e0bfff17 	ldw	r2,-4(fp)
    f464:	10000005 	stb	zero,0(r2)
    f468:	00000706 	br	f488 <OSFlagCreate+0xf4>
    f46c:	e0bff917 	ldw	r2,-28(fp)
    f470:	e0bffc15 	stw	r2,-16(fp)
    f474:	e0bffc17 	ldw	r2,-16(fp)
    f478:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    f47c:	e0bfff17 	ldw	r2,-4(fp)
    f480:	00c01c84 	movi	r3,114
    f484:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    f488:	e0bffb17 	ldw	r2,-20(fp)
}
    f48c:	e037883a 	mov	sp,fp
    f490:	df000017 	ldw	fp,0(sp)
    f494:	dec00104 	addi	sp,sp,4
    f498:	f800283a 	ret

0000f49c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    f49c:	defff204 	addi	sp,sp,-56
    f4a0:	dfc00d15 	stw	ra,52(sp)
    f4a4:	df000c15 	stw	fp,48(sp)
    f4a8:	df000c04 	addi	fp,sp,48
    f4ac:	e13ffd15 	stw	r4,-12(fp)
    f4b0:	2805883a 	mov	r2,r5
    f4b4:	e1bfff15 	stw	r6,-4(fp)
    f4b8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    f4bc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    f4c0:	e0bfff17 	ldw	r2,-4(fp)
    f4c4:	1000021e 	bne	r2,zero,f4d0 <OSFlagDel+0x34>
        return (pgrp);
    f4c8:	e0bffd17 	ldw	r2,-12(fp)
    f4cc:	00008006 	br	f6d0 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    f4d0:	e0bffd17 	ldw	r2,-12(fp)
    f4d4:	1000051e 	bne	r2,zero,f4ec <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    f4d8:	e0bfff17 	ldw	r2,-4(fp)
    f4dc:	00c01b84 	movi	r3,110
    f4e0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    f4e4:	e0bffd17 	ldw	r2,-12(fp)
    f4e8:	00007906 	br	f6d0 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    f4ec:	d0a7fb03 	ldbu	r2,-24596(gp)
    f4f0:	10803fcc 	andi	r2,r2,255
    f4f4:	10000526 	beq	r2,zero,f50c <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    f4f8:	e0bfff17 	ldw	r2,-4(fp)
    f4fc:	00c003c4 	movi	r3,15
    f500:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    f504:	e0bffd17 	ldw	r2,-12(fp)
    f508:	00007106 	br	f6d0 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    f50c:	e0bffd17 	ldw	r2,-12(fp)
    f510:	10800003 	ldbu	r2,0(r2)
    f514:	10803fcc 	andi	r2,r2,255
    f518:	10800160 	cmpeqi	r2,r2,5
    f51c:	1000051e 	bne	r2,zero,f534 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
    f520:	e0bfff17 	ldw	r2,-4(fp)
    f524:	00c00044 	movi	r3,1
    f528:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    f52c:	e0bffd17 	ldw	r2,-12(fp)
    f530:	00006706 	br	f6d0 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f534:	0005303a 	rdctl	r2,status
    f538:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f53c:	e0fffc17 	ldw	r3,-16(fp)
    f540:	00bfff84 	movi	r2,-2
    f544:	1884703a 	and	r2,r3,r2
    f548:	1001703a 	wrctl	status,r2
  
  return context;
    f54c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    f550:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    f554:	e0bffd17 	ldw	r2,-12(fp)
    f558:	10800117 	ldw	r2,4(r2)
    f55c:	10000326 	beq	r2,zero,f56c <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    f560:	00800044 	movi	r2,1
    f564:	e0bff405 	stb	r2,-48(fp)
    f568:	00000106 	br	f570 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    f56c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    f570:	e0bffe03 	ldbu	r2,-8(fp)
    f574:	10000326 	beq	r2,zero,f584 <OSFlagDel+0xe8>
    f578:	10800060 	cmpeqi	r2,r2,1
    f57c:	1000231e 	bne	r2,zero,f60c <OSFlagDel+0x170>
    f580:	00004806 	br	f6a4 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    f584:	e0bff403 	ldbu	r2,-48(fp)
    f588:	1000161e 	bne	r2,zero,f5e4 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    f58c:	e0bffd17 	ldw	r2,-12(fp)
    f590:	00c00fc4 	movi	r3,63
    f594:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    f598:	e0bffd17 	ldw	r2,-12(fp)
    f59c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    f5a0:	e0bffd17 	ldw	r2,-12(fp)
    f5a4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    f5a8:	d0e80017 	ldw	r3,-24576(gp)
    f5ac:	e0bffd17 	ldw	r2,-12(fp)
    f5b0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    f5b4:	e0bffd17 	ldw	r2,-12(fp)
    f5b8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    f5bc:	e0bffd17 	ldw	r2,-12(fp)
    f5c0:	d0a80015 	stw	r2,-24576(gp)
    f5c4:	e0bff717 	ldw	r2,-36(fp)
    f5c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5cc:	e0bff817 	ldw	r2,-32(fp)
    f5d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    f5d4:	e0bfff17 	ldw	r2,-4(fp)
    f5d8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    f5dc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    f5e0:	00003a06 	br	f6cc <OSFlagDel+0x230>
    f5e4:	e0bff717 	ldw	r2,-36(fp)
    f5e8:	e0bff915 	stw	r2,-28(fp)
    f5ec:	e0bff917 	ldw	r2,-28(fp)
    f5f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    f5f4:	e0bfff17 	ldw	r2,-4(fp)
    f5f8:	00c01244 	movi	r3,73
    f5fc:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    f600:	e0bffd17 	ldw	r2,-12(fp)
    f604:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    f608:	00003006 	br	f6cc <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    f60c:	e0bffd17 	ldw	r2,-12(fp)
    f610:	10800117 	ldw	r2,4(r2)
    f614:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    f618:	00000606 	br	f634 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    f61c:	000b883a 	mov	r5,zero
    f620:	e13ff517 	ldw	r4,-44(fp)
    f624:	00106080 	call	10608 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    f628:	e0bff517 	ldw	r2,-44(fp)
    f62c:	10800017 	ldw	r2,0(r2)
    f630:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    f634:	e0bff517 	ldw	r2,-44(fp)
    f638:	103ff81e 	bne	r2,zero,f61c <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    f63c:	e0bffd17 	ldw	r2,-12(fp)
    f640:	00c00fc4 	movi	r3,63
    f644:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    f648:	e0bffd17 	ldw	r2,-12(fp)
    f64c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    f650:	e0bffd17 	ldw	r2,-12(fp)
    f654:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    f658:	d0e80017 	ldw	r3,-24576(gp)
    f65c:	e0bffd17 	ldw	r2,-12(fp)
    f660:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    f664:	e0bffd17 	ldw	r2,-12(fp)
    f668:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    f66c:	e0bffd17 	ldw	r2,-12(fp)
    f670:	d0a80015 	stw	r2,-24576(gp)
    f674:	e0bff717 	ldw	r2,-36(fp)
    f678:	e0bffa15 	stw	r2,-24(fp)
    f67c:	e0bffa17 	ldw	r2,-24(fp)
    f680:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    f684:	e0bff403 	ldbu	r2,-48(fp)
    f688:	10800058 	cmpnei	r2,r2,1
    f68c:	1000011e 	bne	r2,zero,f694 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    f690:	000e7b80 	call	e7b8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    f694:	e0bfff17 	ldw	r2,-4(fp)
    f698:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    f69c:	e03ff615 	stw	zero,-40(fp)
             break;
    f6a0:	00000a06 	br	f6cc <OSFlagDel+0x230>
    f6a4:	e0bff717 	ldw	r2,-36(fp)
    f6a8:	e0bffb15 	stw	r2,-20(fp)
    f6ac:	e0bffb17 	ldw	r2,-20(fp)
    f6b0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    f6b4:	e0bfff17 	ldw	r2,-4(fp)
    f6b8:	00c001c4 	movi	r3,7
    f6bc:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    f6c0:	e0bffd17 	ldw	r2,-12(fp)
    f6c4:	e0bff615 	stw	r2,-40(fp)
             break;
    f6c8:	0001883a 	nop
    }
    return (pgrp_return);
    f6cc:	e0bff617 	ldw	r2,-40(fp)
}
    f6d0:	e037883a 	mov	sp,fp
    f6d4:	dfc00117 	ldw	ra,4(sp)
    f6d8:	df000017 	ldw	fp,0(sp)
    f6dc:	dec00204 	addi	sp,sp,8
    f6e0:	f800283a 	ret

0000f6e4 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    f6e4:	defff604 	addi	sp,sp,-40
    f6e8:	dfc00915 	stw	ra,36(sp)
    f6ec:	df000815 	stw	fp,32(sp)
    f6f0:	df000804 	addi	fp,sp,32
    f6f4:	e13ffd15 	stw	r4,-12(fp)
    f6f8:	e17ffe15 	stw	r5,-8(fp)
    f6fc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f700:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    f704:	e0bfff17 	ldw	r2,-4(fp)
    f708:	1000021e 	bne	r2,zero,f714 <OSFlagNameGet+0x30>
        return (0);
    f70c:	0005883a 	mov	r2,zero
    f710:	00003906 	br	f7f8 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    f714:	e0bffd17 	ldw	r2,-12(fp)
    f718:	1000051e 	bne	r2,zero,f730 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    f71c:	e0bfff17 	ldw	r2,-4(fp)
    f720:	00c01b84 	movi	r3,110
    f724:	10c00005 	stb	r3,0(r2)
        return (0);
    f728:	0005883a 	mov	r2,zero
    f72c:	00003206 	br	f7f8 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    f730:	e0bffe17 	ldw	r2,-8(fp)
    f734:	1000051e 	bne	r2,zero,f74c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    f738:	e0bfff17 	ldw	r2,-4(fp)
    f73c:	00c00304 	movi	r3,12
    f740:	10c00005 	stb	r3,0(r2)
        return (0);
    f744:	0005883a 	mov	r2,zero
    f748:	00002b06 	br	f7f8 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    f74c:	d0a7fb03 	ldbu	r2,-24596(gp)
    f750:	10803fcc 	andi	r2,r2,255
    f754:	10000526 	beq	r2,zero,f76c <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    f758:	e0bfff17 	ldw	r2,-4(fp)
    f75c:	00c00444 	movi	r3,17
    f760:	10c00005 	stb	r3,0(r2)
        return (0);
    f764:	0005883a 	mov	r2,zero
    f768:	00002306 	br	f7f8 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f76c:	0005303a 	rdctl	r2,status
    f770:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f774:	e0fffc17 	ldw	r3,-16(fp)
    f778:	00bfff84 	movi	r2,-2
    f77c:	1884703a 	and	r2,r3,r2
    f780:	1001703a 	wrctl	status,r2
  
  return context;
    f784:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    f788:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    f78c:	e0bffd17 	ldw	r2,-12(fp)
    f790:	10800003 	ldbu	r2,0(r2)
    f794:	10803fcc 	andi	r2,r2,255
    f798:	10800160 	cmpeqi	r2,r2,5
    f79c:	1000091e 	bne	r2,zero,f7c4 <OSFlagNameGet+0xe0>
    f7a0:	e0bff817 	ldw	r2,-32(fp)
    f7a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f7a8:	e0bff917 	ldw	r2,-28(fp)
    f7ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    f7b0:	e0bfff17 	ldw	r2,-4(fp)
    f7b4:	00c00044 	movi	r3,1
    f7b8:	10c00005 	stb	r3,0(r2)
        return (0);
    f7bc:	0005883a 	mov	r2,zero
    f7c0:	00000d06 	br	f7f8 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    f7c4:	e0bffd17 	ldw	r2,-12(fp)
    f7c8:	10800284 	addi	r2,r2,10
    f7cc:	100b883a 	mov	r5,r2
    f7d0:	e13ffe17 	ldw	r4,-8(fp)
    f7d4:	000e8fc0 	call	e8fc <OS_StrCopy>
    f7d8:	e0bffb05 	stb	r2,-20(fp)
    f7dc:	e0bff817 	ldw	r2,-32(fp)
    f7e0:	e0bffa15 	stw	r2,-24(fp)
    f7e4:	e0bffa17 	ldw	r2,-24(fp)
    f7e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    f7ec:	e0bfff17 	ldw	r2,-4(fp)
    f7f0:	10000005 	stb	zero,0(r2)
    return (len);
    f7f4:	e0bffb03 	ldbu	r2,-20(fp)
}
    f7f8:	e037883a 	mov	sp,fp
    f7fc:	dfc00117 	ldw	ra,4(sp)
    f800:	df000017 	ldw	fp,0(sp)
    f804:	dec00204 	addi	sp,sp,8
    f808:	f800283a 	ret

0000f80c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    f80c:	defff504 	addi	sp,sp,-44
    f810:	dfc00a15 	stw	ra,40(sp)
    f814:	df000915 	stw	fp,36(sp)
    f818:	df000904 	addi	fp,sp,36
    f81c:	e13ffd15 	stw	r4,-12(fp)
    f820:	e17ffe15 	stw	r5,-8(fp)
    f824:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f828:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    f82c:	e0bfff17 	ldw	r2,-4(fp)
    f830:	10004326 	beq	r2,zero,f940 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    f834:	e0bffd17 	ldw	r2,-12(fp)
    f838:	1000041e 	bne	r2,zero,f84c <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    f83c:	e0bfff17 	ldw	r2,-4(fp)
    f840:	00c01b84 	movi	r3,110
    f844:	10c00005 	stb	r3,0(r2)
        return;
    f848:	00003e06 	br	f944 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    f84c:	e0bffe17 	ldw	r2,-8(fp)
    f850:	1000041e 	bne	r2,zero,f864 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    f854:	e0bfff17 	ldw	r2,-4(fp)
    f858:	00c00304 	movi	r3,12
    f85c:	10c00005 	stb	r3,0(r2)
        return;
    f860:	00003806 	br	f944 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    f864:	d0a7fb03 	ldbu	r2,-24596(gp)
    f868:	10803fcc 	andi	r2,r2,255
    f86c:	10000426 	beq	r2,zero,f880 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    f870:	e0bfff17 	ldw	r2,-4(fp)
    f874:	00c00484 	movi	r3,18
    f878:	10c00005 	stb	r3,0(r2)
        return;
    f87c:	00003106 	br	f944 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f880:	0005303a 	rdctl	r2,status
    f884:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f888:	e0fffc17 	ldw	r3,-16(fp)
    f88c:	00bfff84 	movi	r2,-2
    f890:	1884703a 	and	r2,r3,r2
    f894:	1001703a 	wrctl	status,r2
  
  return context;
    f898:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    f89c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    f8a0:	e0bffd17 	ldw	r2,-12(fp)
    f8a4:	10800003 	ldbu	r2,0(r2)
    f8a8:	10803fcc 	andi	r2,r2,255
    f8ac:	10800160 	cmpeqi	r2,r2,5
    f8b0:	1000081e 	bne	r2,zero,f8d4 <OSFlagNameSet+0xc8>
    f8b4:	e0bff717 	ldw	r2,-36(fp)
    f8b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f8bc:	e0bff817 	ldw	r2,-32(fp)
    f8c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    f8c4:	e0bfff17 	ldw	r2,-4(fp)
    f8c8:	00c00044 	movi	r3,1
    f8cc:	10c00005 	stb	r3,0(r2)
        return;
    f8d0:	00001c06 	br	f944 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    f8d4:	e13ffe17 	ldw	r4,-8(fp)
    f8d8:	000e9700 	call	e970 <OS_StrLen>
    f8dc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    f8e0:	e0bffa03 	ldbu	r2,-24(fp)
    f8e4:	10800830 	cmpltui	r2,r2,32
    f8e8:	1000081e 	bne	r2,zero,f90c <OSFlagNameSet+0x100>
    f8ec:	e0bff717 	ldw	r2,-36(fp)
    f8f0:	e0bff915 	stw	r2,-28(fp)
    f8f4:	e0bff917 	ldw	r2,-28(fp)
    f8f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    f8fc:	e0bfff17 	ldw	r2,-4(fp)
    f900:	00c01cc4 	movi	r3,115
    f904:	10c00005 	stb	r3,0(r2)
        return;
    f908:	00000e06 	br	f944 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    f90c:	e0bffd17 	ldw	r2,-12(fp)
    f910:	10800284 	addi	r2,r2,10
    f914:	e17ffe17 	ldw	r5,-8(fp)
    f918:	1009883a 	mov	r4,r2
    f91c:	000e8fc0 	call	e8fc <OS_StrCopy>
    f920:	e0bff717 	ldw	r2,-36(fp)
    f924:	e0bffb15 	stw	r2,-20(fp)
    f928:	e0bffb17 	ldw	r2,-20(fp)
    f92c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    f930:	e0bfff17 	ldw	r2,-4(fp)
    f934:	10000005 	stb	zero,0(r2)
    return;
    f938:	0001883a 	nop
    f93c:	00000106 	br	f944 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    f940:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
    f944:	e037883a 	mov	sp,fp
    f948:	dfc00117 	ldw	ra,4(sp)
    f94c:	df000017 	ldw	fp,0(sp)
    f950:	dec00204 	addi	sp,sp,8
    f954:	f800283a 	ret

0000f958 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    f958:	deffe104 	addi	sp,sp,-124
    f95c:	dfc01e15 	stw	ra,120(sp)
    f960:	df001d15 	stw	fp,116(sp)
    f964:	df001d04 	addi	fp,sp,116
    f968:	e13ffc15 	stw	r4,-16(fp)
    f96c:	2809883a 	mov	r4,r5
    f970:	3007883a 	mov	r3,r6
    f974:	3805883a 	mov	r2,r7
    f978:	e13ffd0d 	sth	r4,-12(fp)
    f97c:	e0fffe05 	stb	r3,-8(fp)
    f980:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    f984:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    f988:	e0800217 	ldw	r2,8(fp)
    f98c:	1000021e 	bne	r2,zero,f998 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    f990:	0005883a 	mov	r2,zero
    f994:	00015906 	br	fefc <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    f998:	e0bffc17 	ldw	r2,-16(fp)
    f99c:	1000051e 	bne	r2,zero,f9b4 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    f9a0:	e0800217 	ldw	r2,8(fp)
    f9a4:	00c01b84 	movi	r3,110
    f9a8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    f9ac:	0005883a 	mov	r2,zero
    f9b0:	00015206 	br	fefc <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    f9b4:	d0a7fb03 	ldbu	r2,-24596(gp)
    f9b8:	10803fcc 	andi	r2,r2,255
    f9bc:	10000526 	beq	r2,zero,f9d4 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    f9c0:	e0800217 	ldw	r2,8(fp)
    f9c4:	00c00084 	movi	r3,2
    f9c8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    f9cc:	0005883a 	mov	r2,zero
    f9d0:	00014a06 	br	fefc <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    f9d4:	d0a7e903 	ldbu	r2,-24668(gp)
    f9d8:	10803fcc 	andi	r2,r2,255
    f9dc:	10000526 	beq	r2,zero,f9f4 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    f9e0:	e0800217 	ldw	r2,8(fp)
    f9e4:	00c00344 	movi	r3,13
    f9e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    f9ec:	0005883a 	mov	r2,zero
    f9f0:	00014206 	br	fefc <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    f9f4:	e0bffc17 	ldw	r2,-16(fp)
    f9f8:	10800003 	ldbu	r2,0(r2)
    f9fc:	10803fcc 	andi	r2,r2,255
    fa00:	10800160 	cmpeqi	r2,r2,5
    fa04:	1000051e 	bne	r2,zero,fa1c <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
    fa08:	e0800217 	ldw	r2,8(fp)
    fa0c:	00c00044 	movi	r3,1
    fa10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fa14:	0005883a 	mov	r2,zero
    fa18:	00013806 	br	fefc <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    fa1c:	e0fffe03 	ldbu	r3,-8(fp)
    fa20:	00bfe004 	movi	r2,-128
    fa24:	1884703a 	and	r2,r3,r2
    fa28:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    fa2c:	e0bfe603 	ldbu	r2,-104(fp)
    fa30:	10000626 	beq	r2,zero,fa4c <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    fa34:	e0bffe03 	ldbu	r2,-8(fp)
    fa38:	10801fcc 	andi	r2,r2,127
    fa3c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    fa40:	00800044 	movi	r2,1
    fa44:	e0bfe405 	stb	r2,-112(fp)
    fa48:	00000106 	br	fa50 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
    fa4c:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa50:	0005303a 	rdctl	r2,status
    fa54:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa58:	e0fff617 	ldw	r3,-40(fp)
    fa5c:	00bfff84 	movi	r2,-2
    fa60:	1884703a 	and	r2,r3,r2
    fa64:	1001703a 	wrctl	status,r2
  
  return context;
    fa68:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    fa6c:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
    fa70:	e0bffe03 	ldbu	r2,-8(fp)
    fa74:	10c00060 	cmpeqi	r3,r2,1
    fa78:	1800921e 	bne	r3,zero,fcc4 <OSFlagPend+0x36c>
    fa7c:	10c00088 	cmpgei	r3,r2,2
    fa80:	1800021e 	bne	r3,zero,fa8c <OSFlagPend+0x134>
    fa84:	10006126 	beq	r2,zero,fc0c <OSFlagPend+0x2b4>
    fa88:	0000bb06 	br	fd78 <OSFlagPend+0x420>
    fa8c:	10c000a0 	cmpeqi	r3,r2,2
    fa90:	1800031e 	bne	r3,zero,faa0 <OSFlagPend+0x148>
    fa94:	108000e0 	cmpeqi	r2,r2,3
    fa98:	10002f1e 	bne	r2,zero,fb58 <OSFlagPend+0x200>
    fa9c:	0000b606 	br	fd78 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    faa0:	e0bffc17 	ldw	r2,-16(fp)
    faa4:	10c0020b 	ldhu	r3,8(r2)
    faa8:	e0bffd0b 	ldhu	r2,-12(fp)
    faac:	1884703a 	and	r2,r3,r2
    fab0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    fab4:	e0ffe80b 	ldhu	r3,-96(fp)
    fab8:	e0bffd0b 	ldhu	r2,-12(fp)
    fabc:	1880171e 	bne	r3,r2,fb1c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    fac0:	e0bfe403 	ldbu	r2,-112(fp)
    fac4:	10800058 	cmpnei	r2,r2,1
    fac8:	1000091e 	bne	r2,zero,faf0 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    facc:	e0bffc17 	ldw	r2,-16(fp)
    fad0:	1080020b 	ldhu	r2,8(r2)
    fad4:	1007883a 	mov	r3,r2
    fad8:	e0bfe80b 	ldhu	r2,-96(fp)
    fadc:	0084303a 	nor	r2,zero,r2
    fae0:	1884703a 	and	r2,r3,r2
    fae4:	1007883a 	mov	r3,r2
    fae8:	e0bffc17 	ldw	r2,-16(fp)
    faec:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    faf0:	d0a7fc17 	ldw	r2,-24592(gp)
    faf4:	e0ffe80b 	ldhu	r3,-96(fp)
    faf8:	10c00b0d 	sth	r3,44(r2)
    fafc:	e0bfe517 	ldw	r2,-108(fp)
    fb00:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb04:	e0bfe717 	ldw	r2,-100(fp)
    fb08:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    fb0c:	e0800217 	ldw	r2,8(fp)
    fb10:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    fb14:	e0bfe80b 	ldhu	r2,-96(fp)
    fb18:	0000f806 	br	fefc <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    fb1c:	e13ffd0b 	ldhu	r4,-12(fp)
    fb20:	e17ffe03 	ldbu	r5,-8(fp)
    fb24:	e0bfff0b 	ldhu	r2,-4(fp)
    fb28:	e0fff704 	addi	r3,fp,-36
    fb2c:	d8800015 	stw	r2,0(sp)
    fb30:	280f883a 	mov	r7,r5
    fb34:	200d883a 	mov	r6,r4
    fb38:	180b883a 	mov	r5,r3
    fb3c:	e13ffc17 	ldw	r4,-16(fp)
    fb40:	00103c80 	call	103c8 <OS_FlagBlock>
    fb44:	e0bfe517 	ldw	r2,-108(fp)
    fb48:	e0bfe915 	stw	r2,-92(fp)
    fb4c:	e0bfe917 	ldw	r2,-92(fp)
    fb50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    fb54:	00009206 	br	fda0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    fb58:	e0bffc17 	ldw	r2,-16(fp)
    fb5c:	10c0020b 	ldhu	r3,8(r2)
    fb60:	e0bffd0b 	ldhu	r2,-12(fp)
    fb64:	1884703a 	and	r2,r3,r2
    fb68:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    fb6c:	e0bfe80b 	ldhu	r2,-96(fp)
    fb70:	10001726 	beq	r2,zero,fbd0 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    fb74:	e0bfe403 	ldbu	r2,-112(fp)
    fb78:	10800058 	cmpnei	r2,r2,1
    fb7c:	1000091e 	bne	r2,zero,fba4 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    fb80:	e0bffc17 	ldw	r2,-16(fp)
    fb84:	1080020b 	ldhu	r2,8(r2)
    fb88:	1007883a 	mov	r3,r2
    fb8c:	e0bfe80b 	ldhu	r2,-96(fp)
    fb90:	0084303a 	nor	r2,zero,r2
    fb94:	1884703a 	and	r2,r3,r2
    fb98:	1007883a 	mov	r3,r2
    fb9c:	e0bffc17 	ldw	r2,-16(fp)
    fba0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    fba4:	d0a7fc17 	ldw	r2,-24592(gp)
    fba8:	e0ffe80b 	ldhu	r3,-96(fp)
    fbac:	10c00b0d 	sth	r3,44(r2)
    fbb0:	e0bfe517 	ldw	r2,-108(fp)
    fbb4:	e0bfea15 	stw	r2,-88(fp)
    fbb8:	e0bfea17 	ldw	r2,-88(fp)
    fbbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    fbc0:	e0800217 	ldw	r2,8(fp)
    fbc4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    fbc8:	e0bfe80b 	ldhu	r2,-96(fp)
    fbcc:	0000cb06 	br	fefc <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    fbd0:	e13ffd0b 	ldhu	r4,-12(fp)
    fbd4:	e17ffe03 	ldbu	r5,-8(fp)
    fbd8:	e0bfff0b 	ldhu	r2,-4(fp)
    fbdc:	e0fff704 	addi	r3,fp,-36
    fbe0:	d8800015 	stw	r2,0(sp)
    fbe4:	280f883a 	mov	r7,r5
    fbe8:	200d883a 	mov	r6,r4
    fbec:	180b883a 	mov	r5,r3
    fbf0:	e13ffc17 	ldw	r4,-16(fp)
    fbf4:	00103c80 	call	103c8 <OS_FlagBlock>
    fbf8:	e0bfe517 	ldw	r2,-108(fp)
    fbfc:	e0bfeb15 	stw	r2,-84(fp)
    fc00:	e0bfeb17 	ldw	r2,-84(fp)
    fc04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    fc08:	00006506 	br	fda0 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    fc0c:	e0bffc17 	ldw	r2,-16(fp)
    fc10:	1080020b 	ldhu	r2,8(r2)
    fc14:	0084303a 	nor	r2,zero,r2
    fc18:	1007883a 	mov	r3,r2
    fc1c:	e0bffd0b 	ldhu	r2,-12(fp)
    fc20:	1884703a 	and	r2,r3,r2
    fc24:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    fc28:	e0ffe80b 	ldhu	r3,-96(fp)
    fc2c:	e0bffd0b 	ldhu	r2,-12(fp)
    fc30:	1880151e 	bne	r3,r2,fc88 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    fc34:	e0bfe403 	ldbu	r2,-112(fp)
    fc38:	10800058 	cmpnei	r2,r2,1
    fc3c:	1000071e 	bne	r2,zero,fc5c <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    fc40:	e0bffc17 	ldw	r2,-16(fp)
    fc44:	10c0020b 	ldhu	r3,8(r2)
    fc48:	e0bfe80b 	ldhu	r2,-96(fp)
    fc4c:	1884b03a 	or	r2,r3,r2
    fc50:	1007883a 	mov	r3,r2
    fc54:	e0bffc17 	ldw	r2,-16(fp)
    fc58:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    fc5c:	d0a7fc17 	ldw	r2,-24592(gp)
    fc60:	e0ffe80b 	ldhu	r3,-96(fp)
    fc64:	10c00b0d 	sth	r3,44(r2)
    fc68:	e0bfe517 	ldw	r2,-108(fp)
    fc6c:	e0bfec15 	stw	r2,-80(fp)
    fc70:	e0bfec17 	ldw	r2,-80(fp)
    fc74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    fc78:	e0800217 	ldw	r2,8(fp)
    fc7c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    fc80:	e0bfe80b 	ldhu	r2,-96(fp)
    fc84:	00009d06 	br	fefc <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    fc88:	e13ffd0b 	ldhu	r4,-12(fp)
    fc8c:	e17ffe03 	ldbu	r5,-8(fp)
    fc90:	e0bfff0b 	ldhu	r2,-4(fp)
    fc94:	e0fff704 	addi	r3,fp,-36
    fc98:	d8800015 	stw	r2,0(sp)
    fc9c:	280f883a 	mov	r7,r5
    fca0:	200d883a 	mov	r6,r4
    fca4:	180b883a 	mov	r5,r3
    fca8:	e13ffc17 	ldw	r4,-16(fp)
    fcac:	00103c80 	call	103c8 <OS_FlagBlock>
    fcb0:	e0bfe517 	ldw	r2,-108(fp)
    fcb4:	e0bfed15 	stw	r2,-76(fp)
    fcb8:	e0bfed17 	ldw	r2,-76(fp)
    fcbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    fcc0:	00003706 	br	fda0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    fcc4:	e0bffc17 	ldw	r2,-16(fp)
    fcc8:	1080020b 	ldhu	r2,8(r2)
    fccc:	0084303a 	nor	r2,zero,r2
    fcd0:	1007883a 	mov	r3,r2
    fcd4:	e0bffd0b 	ldhu	r2,-12(fp)
    fcd8:	1884703a 	and	r2,r3,r2
    fcdc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    fce0:	e0bfe80b 	ldhu	r2,-96(fp)
    fce4:	10001526 	beq	r2,zero,fd3c <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    fce8:	e0bfe403 	ldbu	r2,-112(fp)
    fcec:	10800058 	cmpnei	r2,r2,1
    fcf0:	1000071e 	bne	r2,zero,fd10 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    fcf4:	e0bffc17 	ldw	r2,-16(fp)
    fcf8:	10c0020b 	ldhu	r3,8(r2)
    fcfc:	e0bfe80b 	ldhu	r2,-96(fp)
    fd00:	1884b03a 	or	r2,r3,r2
    fd04:	1007883a 	mov	r3,r2
    fd08:	e0bffc17 	ldw	r2,-16(fp)
    fd0c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    fd10:	d0a7fc17 	ldw	r2,-24592(gp)
    fd14:	e0ffe80b 	ldhu	r3,-96(fp)
    fd18:	10c00b0d 	sth	r3,44(r2)
    fd1c:	e0bfe517 	ldw	r2,-108(fp)
    fd20:	e0bfee15 	stw	r2,-72(fp)
    fd24:	e0bfee17 	ldw	r2,-72(fp)
    fd28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    fd2c:	e0800217 	ldw	r2,8(fp)
    fd30:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    fd34:	e0bfe80b 	ldhu	r2,-96(fp)
    fd38:	00007006 	br	fefc <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    fd3c:	e13ffd0b 	ldhu	r4,-12(fp)
    fd40:	e17ffe03 	ldbu	r5,-8(fp)
    fd44:	e0bfff0b 	ldhu	r2,-4(fp)
    fd48:	e0fff704 	addi	r3,fp,-36
    fd4c:	d8800015 	stw	r2,0(sp)
    fd50:	280f883a 	mov	r7,r5
    fd54:	200d883a 	mov	r6,r4
    fd58:	180b883a 	mov	r5,r3
    fd5c:	e13ffc17 	ldw	r4,-16(fp)
    fd60:	00103c80 	call	103c8 <OS_FlagBlock>
    fd64:	e0bfe517 	ldw	r2,-108(fp)
    fd68:	e0bfef15 	stw	r2,-68(fp)
    fd6c:	e0bfef17 	ldw	r2,-68(fp)
    fd70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    fd74:	00000a06 	br	fda0 <OSFlagPend+0x448>
    fd78:	e0bfe517 	ldw	r2,-108(fp)
    fd7c:	e0bff015 	stw	r2,-64(fp)
    fd80:	e0bff017 	ldw	r2,-64(fp)
    fd84:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    fd88:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    fd8c:	e0800217 	ldw	r2,8(fp)
    fd90:	00c01bc4 	movi	r3,111
    fd94:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    fd98:	e0bfe80b 	ldhu	r2,-96(fp)
    fd9c:	00005706 	br	fefc <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    fda0:	000e7b80 	call	e7b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fda4:	0005303a 	rdctl	r2,status
    fda8:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fdac:	e0fff117 	ldw	r3,-60(fp)
    fdb0:	00bfff84 	movi	r2,-2
    fdb4:	1884703a 	and	r2,r3,r2
    fdb8:	1001703a 	wrctl	status,r2
  
  return context;
    fdbc:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
    fdc0:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    fdc4:	d0a7fc17 	ldw	r2,-24592(gp)
    fdc8:	10800c43 	ldbu	r2,49(r2)
    fdcc:	10803fcc 	andi	r2,r2,255
    fdd0:	10001c26 	beq	r2,zero,fe44 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    fdd4:	d0a7fc17 	ldw	r2,-24592(gp)
    fdd8:	10800c43 	ldbu	r2,49(r2)
    fddc:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    fde0:	d0a7fc17 	ldw	r2,-24592(gp)
    fde4:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    fde8:	e0bff704 	addi	r2,fp,-36
    fdec:	1009883a 	mov	r4,r2
    fdf0:	00106fc0 	call	106fc <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    fdf4:	d0a7fc17 	ldw	r2,-24592(gp)
    fdf8:	10000c05 	stb	zero,48(r2)
    fdfc:	e0bfe517 	ldw	r2,-108(fp)
    fe00:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fe04:	e0bff217 	ldw	r2,-56(fp)
    fe08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    fe0c:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
    fe10:	e0bff303 	ldbu	r2,-52(fp)
    fe14:	108000a0 	cmpeqi	r2,r2,2
    fe18:	10000426 	beq	r2,zero,fe2c <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    fe1c:	e0800217 	ldw	r2,8(fp)
    fe20:	00c00384 	movi	r3,14
    fe24:	10c00005 	stb	r3,0(r2)
                 break;
    fe28:	00000406 	br	fe3c <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    fe2c:	e0800217 	ldw	r2,8(fp)
    fe30:	00c00284 	movi	r3,10
    fe34:	10c00005 	stb	r3,0(r2)
                 break;
    fe38:	0001883a 	nop
        }
        return (flags_rdy);
    fe3c:	e0bfe80b 	ldhu	r2,-96(fp)
    fe40:	00002e06 	br	fefc <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    fe44:	d0a7fc17 	ldw	r2,-24592(gp)
    fe48:	10800b0b 	ldhu	r2,44(r2)
    fe4c:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    fe50:	e0bfe403 	ldbu	r2,-112(fp)
    fe54:	10800058 	cmpnei	r2,r2,1
    fe58:	1000211e 	bne	r2,zero,fee0 <OSFlagPend+0x588>
        switch (wait_type) {
    fe5c:	e0bffe03 	ldbu	r2,-8(fp)
    fe60:	10001616 	blt	r2,zero,febc <OSFlagPend+0x564>
    fe64:	10c00090 	cmplti	r3,r2,2
    fe68:	18000c1e 	bne	r3,zero,fe9c <OSFlagPend+0x544>
    fe6c:	10800108 	cmpgei	r2,r2,4
    fe70:	1000121e 	bne	r2,zero,febc <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    fe74:	e0bffc17 	ldw	r2,-16(fp)
    fe78:	1080020b 	ldhu	r2,8(r2)
    fe7c:	1007883a 	mov	r3,r2
    fe80:	e0bfe80b 	ldhu	r2,-96(fp)
    fe84:	0084303a 	nor	r2,zero,r2
    fe88:	1884703a 	and	r2,r3,r2
    fe8c:	1007883a 	mov	r3,r2
    fe90:	e0bffc17 	ldw	r2,-16(fp)
    fe94:	10c0020d 	sth	r3,8(r2)
                 break;
    fe98:	00001106 	br	fee0 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    fe9c:	e0bffc17 	ldw	r2,-16(fp)
    fea0:	10c0020b 	ldhu	r3,8(r2)
    fea4:	e0bfe80b 	ldhu	r2,-96(fp)
    fea8:	1884b03a 	or	r2,r3,r2
    feac:	1007883a 	mov	r3,r2
    feb0:	e0bffc17 	ldw	r2,-16(fp)
    feb4:	10c0020d 	sth	r3,8(r2)
                 break;
    feb8:	00000906 	br	fee0 <OSFlagPend+0x588>
    febc:	e0bfe517 	ldw	r2,-108(fp)
    fec0:	e0bff415 	stw	r2,-48(fp)
    fec4:	e0bff417 	ldw	r2,-48(fp)
    fec8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    fecc:	e0800217 	ldw	r2,8(fp)
    fed0:	00c01bc4 	movi	r3,111
    fed4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    fed8:	0005883a 	mov	r2,zero
    fedc:	00000706 	br	fefc <OSFlagPend+0x5a4>
    fee0:	e0bfe517 	ldw	r2,-108(fp)
    fee4:	e0bff515 	stw	r2,-44(fp)
    fee8:	e0bff517 	ldw	r2,-44(fp)
    feec:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    fef0:	e0800217 	ldw	r2,8(fp)
    fef4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    fef8:	e0bfe80b 	ldhu	r2,-96(fp)
}
    fefc:	e037883a 	mov	sp,fp
    ff00:	dfc00117 	ldw	ra,4(sp)
    ff04:	df000017 	ldw	fp,0(sp)
    ff08:	dec00204 	addi	sp,sp,8
    ff0c:	f800283a 	ret

0000ff10 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    ff10:	defffb04 	addi	sp,sp,-20
    ff14:	df000415 	stw	fp,16(sp)
    ff18:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    ff1c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff20:	0005303a 	rdctl	r2,status
    ff24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff28:	e0fffe17 	ldw	r3,-8(fp)
    ff2c:	00bfff84 	movi	r2,-2
    ff30:	1884703a 	and	r2,r3,r2
    ff34:	1001703a 	wrctl	status,r2
  
  return context;
    ff38:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    ff3c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    ff40:	d0a7fc17 	ldw	r2,-24592(gp)
    ff44:	10800b0b 	ldhu	r2,44(r2)
    ff48:	e0bffd0d 	sth	r2,-12(fp)
    ff4c:	e0bffc17 	ldw	r2,-16(fp)
    ff50:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff54:	e0bfff17 	ldw	r2,-4(fp)
    ff58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    ff5c:	e0bffd0b 	ldhu	r2,-12(fp)
}
    ff60:	e037883a 	mov	sp,fp
    ff64:	df000017 	ldw	fp,0(sp)
    ff68:	dec00104 	addi	sp,sp,4
    ff6c:	f800283a 	ret

0000ff70 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    ff70:	deffef04 	addi	sp,sp,-68
    ff74:	dfc01015 	stw	ra,64(sp)
    ff78:	df000f15 	stw	fp,60(sp)
    ff7c:	df000f04 	addi	fp,sp,60
    ff80:	e13ffc15 	stw	r4,-16(fp)
    ff84:	2807883a 	mov	r3,r5
    ff88:	3005883a 	mov	r2,r6
    ff8c:	e1ffff15 	stw	r7,-4(fp)
    ff90:	e0fffd0d 	sth	r3,-12(fp)
    ff94:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    ff98:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    ff9c:	e0bfff17 	ldw	r2,-4(fp)
    ffa0:	1000021e 	bne	r2,zero,ffac <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    ffa4:	0005883a 	mov	r2,zero
    ffa8:	0000d106 	br	102f0 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    ffac:	e0bffc17 	ldw	r2,-16(fp)
    ffb0:	1000051e 	bne	r2,zero,ffc8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    ffb4:	e0bfff17 	ldw	r2,-4(fp)
    ffb8:	00c01b84 	movi	r3,110
    ffbc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    ffc0:	0005883a 	mov	r2,zero
    ffc4:	0000ca06 	br	102f0 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    ffc8:	e0bffc17 	ldw	r2,-16(fp)
    ffcc:	10800003 	ldbu	r2,0(r2)
    ffd0:	10803fcc 	andi	r2,r2,255
    ffd4:	10800160 	cmpeqi	r2,r2,5
    ffd8:	1000051e 	bne	r2,zero,fff0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    ffdc:	e0bfff17 	ldw	r2,-4(fp)
    ffe0:	00c00044 	movi	r3,1
    ffe4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    ffe8:	0005883a 	mov	r2,zero
    ffec:	0000c006 	br	102f0 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fff0:	0005303a 	rdctl	r2,status
    fff4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fff8:	e0fffb17 	ldw	r3,-20(fp)
    fffc:	00bfff84 	movi	r2,-2
   10000:	1884703a 	and	r2,r3,r2
   10004:	1001703a 	wrctl	status,r2
  
  return context;
   10008:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1000c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   10010:	e0bffe03 	ldbu	r2,-8(fp)
   10014:	10000326 	beq	r2,zero,10024 <OSFlagPost+0xb4>
   10018:	10800060 	cmpeqi	r2,r2,1
   1001c:	10000b1e 	bne	r2,zero,1004c <OSFlagPost+0xdc>
   10020:	00001206 	br	1006c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   10024:	e0bffc17 	ldw	r2,-16(fp)
   10028:	1080020b 	ldhu	r2,8(r2)
   1002c:	1007883a 	mov	r3,r2
   10030:	e0bffd0b 	ldhu	r2,-12(fp)
   10034:	0084303a 	nor	r2,zero,r2
   10038:	1884703a 	and	r2,r3,r2
   1003c:	1007883a 	mov	r3,r2
   10040:	e0bffc17 	ldw	r2,-16(fp)
   10044:	10c0020d 	sth	r3,8(r2)
             break;
   10048:	00001106 	br	10090 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   1004c:	e0bffc17 	ldw	r2,-16(fp)
   10050:	10c0020b 	ldhu	r3,8(r2)
   10054:	e0bffd0b 	ldhu	r2,-12(fp)
   10058:	1884b03a 	or	r2,r3,r2
   1005c:	1007883a 	mov	r3,r2
   10060:	e0bffc17 	ldw	r2,-16(fp)
   10064:	10c0020d 	sth	r3,8(r2)
             break;
   10068:	00000906 	br	10090 <OSFlagPost+0x120>
   1006c:	e0bff317 	ldw	r2,-52(fp)
   10070:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10074:	e0bff417 	ldw	r2,-48(fp)
   10078:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   1007c:	e0bfff17 	ldw	r2,-4(fp)
   10080:	00c01c44 	movi	r3,113
   10084:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   10088:	0005883a 	mov	r2,zero
   1008c:	00009806 	br	102f0 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   10090:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10094:	e0bffc17 	ldw	r2,-16(fp)
   10098:	10800117 	ldw	r2,4(r2)
   1009c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   100a0:	00007706 	br	10280 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   100a4:	e0bff117 	ldw	r2,-60(fp)
   100a8:	10800483 	ldbu	r2,18(r2)
   100ac:	10803fcc 	andi	r2,r2,255
   100b0:	10c00060 	cmpeqi	r3,r2,1
   100b4:	18004a1e 	bne	r3,zero,101e0 <OSFlagPost+0x270>
   100b8:	10c00088 	cmpgei	r3,r2,2
   100bc:	1800021e 	bne	r3,zero,100c8 <OSFlagPost+0x158>
   100c0:	10002f26 	beq	r2,zero,10180 <OSFlagPost+0x210>
   100c4:	00005b06 	br	10234 <OSFlagPost+0x2c4>
   100c8:	10c000a0 	cmpeqi	r3,r2,2
   100cc:	1800031e 	bne	r3,zero,100dc <OSFlagPost+0x16c>
   100d0:	108000e0 	cmpeqi	r2,r2,3
   100d4:	1000171e 	bne	r2,zero,10134 <OSFlagPost+0x1c4>
   100d8:	00005606 	br	10234 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   100dc:	e0bffc17 	ldw	r2,-16(fp)
   100e0:	10c0020b 	ldhu	r3,8(r2)
   100e4:	e0bff117 	ldw	r2,-60(fp)
   100e8:	1080040b 	ldhu	r2,16(r2)
   100ec:	1884703a 	and	r2,r3,r2
   100f0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   100f4:	e0bff117 	ldw	r2,-60(fp)
   100f8:	1080040b 	ldhu	r2,16(r2)
   100fc:	10ffffcc 	andi	r3,r2,65535
   10100:	e0bff60b 	ldhu	r2,-40(fp)
   10104:	1880541e 	bne	r3,r2,10258 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10108:	e0bff60b 	ldhu	r2,-40(fp)
   1010c:	100b883a 	mov	r5,r2
   10110:	e13ff117 	ldw	r4,-60(fp)
   10114:	00106080 	call	10608 <OS_FlagTaskRdy>
   10118:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1011c:	e0bff683 	ldbu	r2,-38(fp)
   10120:	10800058 	cmpnei	r2,r2,1
   10124:	10004c1e 	bne	r2,zero,10258 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10128:	00800044 	movi	r2,1
   1012c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10130:	00004906 	br	10258 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10134:	e0bffc17 	ldw	r2,-16(fp)
   10138:	10c0020b 	ldhu	r3,8(r2)
   1013c:	e0bff117 	ldw	r2,-60(fp)
   10140:	1080040b 	ldhu	r2,16(r2)
   10144:	1884703a 	and	r2,r3,r2
   10148:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1014c:	e0bff60b 	ldhu	r2,-40(fp)
   10150:	10004326 	beq	r2,zero,10260 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10154:	e0bff60b 	ldhu	r2,-40(fp)
   10158:	100b883a 	mov	r5,r2
   1015c:	e13ff117 	ldw	r4,-60(fp)
   10160:	00106080 	call	10608 <OS_FlagTaskRdy>
   10164:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   10168:	e0bff683 	ldbu	r2,-38(fp)
   1016c:	10800058 	cmpnei	r2,r2,1
   10170:	10003b1e 	bne	r2,zero,10260 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10174:	00800044 	movi	r2,1
   10178:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1017c:	00003806 	br	10260 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10180:	e0bffc17 	ldw	r2,-16(fp)
   10184:	1080020b 	ldhu	r2,8(r2)
   10188:	0084303a 	nor	r2,zero,r2
   1018c:	1007883a 	mov	r3,r2
   10190:	e0bff117 	ldw	r2,-60(fp)
   10194:	1080040b 	ldhu	r2,16(r2)
   10198:	1884703a 	and	r2,r3,r2
   1019c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   101a0:	e0bff117 	ldw	r2,-60(fp)
   101a4:	1080040b 	ldhu	r2,16(r2)
   101a8:	10ffffcc 	andi	r3,r2,65535
   101ac:	e0bff60b 	ldhu	r2,-40(fp)
   101b0:	18802d1e 	bne	r3,r2,10268 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   101b4:	e0bff60b 	ldhu	r2,-40(fp)
   101b8:	100b883a 	mov	r5,r2
   101bc:	e13ff117 	ldw	r4,-60(fp)
   101c0:	00106080 	call	10608 <OS_FlagTaskRdy>
   101c4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   101c8:	e0bff683 	ldbu	r2,-38(fp)
   101cc:	10800058 	cmpnei	r2,r2,1
   101d0:	1000251e 	bne	r2,zero,10268 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   101d4:	00800044 	movi	r2,1
   101d8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   101dc:	00002206 	br	10268 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   101e0:	e0bffc17 	ldw	r2,-16(fp)
   101e4:	1080020b 	ldhu	r2,8(r2)
   101e8:	0084303a 	nor	r2,zero,r2
   101ec:	1007883a 	mov	r3,r2
   101f0:	e0bff117 	ldw	r2,-60(fp)
   101f4:	1080040b 	ldhu	r2,16(r2)
   101f8:	1884703a 	and	r2,r3,r2
   101fc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   10200:	e0bff60b 	ldhu	r2,-40(fp)
   10204:	10001a26 	beq	r2,zero,10270 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10208:	e0bff60b 	ldhu	r2,-40(fp)
   1020c:	100b883a 	mov	r5,r2
   10210:	e13ff117 	ldw	r4,-60(fp)
   10214:	00106080 	call	10608 <OS_FlagTaskRdy>
   10218:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1021c:	e0bff683 	ldbu	r2,-38(fp)
   10220:	10800058 	cmpnei	r2,r2,1
   10224:	1000121e 	bne	r2,zero,10270 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10228:	00800044 	movi	r2,1
   1022c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10230:	00000f06 	br	10270 <OSFlagPost+0x300>
   10234:	e0bff317 	ldw	r2,-52(fp)
   10238:	e0bff515 	stw	r2,-44(fp)
   1023c:	e0bff517 	ldw	r2,-44(fp)
   10240:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   10244:	e0bfff17 	ldw	r2,-4(fp)
   10248:	00c01bc4 	movi	r3,111
   1024c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10250:	0005883a 	mov	r2,zero
   10254:	00002606 	br	102f0 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   10258:	0001883a 	nop
   1025c:	00000506 	br	10274 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   10260:	0001883a 	nop
   10264:	00000306 	br	10274 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   10268:	0001883a 	nop
   1026c:	00000106 	br	10274 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   10270:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   10274:	e0bff117 	ldw	r2,-60(fp)
   10278:	10800017 	ldw	r2,0(r2)
   1027c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   10280:	e0bff117 	ldw	r2,-60(fp)
   10284:	103f871e 	bne	r2,zero,100a4 <OSFlagPost+0x134>
   10288:	e0bff317 	ldw	r2,-52(fp)
   1028c:	e0bff715 	stw	r2,-36(fp)
   10290:	e0bff717 	ldw	r2,-36(fp)
   10294:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   10298:	e0bff203 	ldbu	r2,-56(fp)
   1029c:	10800058 	cmpnei	r2,r2,1
   102a0:	1000011e 	bne	r2,zero,102a8 <OSFlagPost+0x338>
        OS_Sched();
   102a4:	000e7b80 	call	e7b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102a8:	0005303a 	rdctl	r2,status
   102ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102b0:	e0fffa17 	ldw	r3,-24(fp)
   102b4:	00bfff84 	movi	r2,-2
   102b8:	1884703a 	and	r2,r3,r2
   102bc:	1001703a 	wrctl	status,r2
  
  return context;
   102c0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   102c4:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   102c8:	e0bffc17 	ldw	r2,-16(fp)
   102cc:	1080020b 	ldhu	r2,8(r2)
   102d0:	e0bff90d 	sth	r2,-28(fp)
   102d4:	e0bff317 	ldw	r2,-52(fp)
   102d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   102dc:	e0bff817 	ldw	r2,-32(fp)
   102e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   102e4:	e0bfff17 	ldw	r2,-4(fp)
   102e8:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   102ec:	e0bff90b 	ldhu	r2,-28(fp)
}
   102f0:	e037883a 	mov	sp,fp
   102f4:	dfc00117 	ldw	ra,4(sp)
   102f8:	df000017 	ldw	fp,0(sp)
   102fc:	dec00204 	addi	sp,sp,8
   10300:	f800283a 	ret

00010304 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   10304:	defff904 	addi	sp,sp,-28
   10308:	df000615 	stw	fp,24(sp)
   1030c:	df000604 	addi	fp,sp,24
   10310:	e13ffe15 	stw	r4,-8(fp)
   10314:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   10318:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   1031c:	e0bfff17 	ldw	r2,-4(fp)
   10320:	1000021e 	bne	r2,zero,1032c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   10324:	0005883a 	mov	r2,zero
   10328:	00002306 	br	103b8 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   1032c:	e0bffe17 	ldw	r2,-8(fp)
   10330:	1000051e 	bne	r2,zero,10348 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10334:	e0bfff17 	ldw	r2,-4(fp)
   10338:	00c01b84 	movi	r3,110
   1033c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10340:	0005883a 	mov	r2,zero
   10344:	00001c06 	br	103b8 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   10348:	e0bffe17 	ldw	r2,-8(fp)
   1034c:	10800003 	ldbu	r2,0(r2)
   10350:	10803fcc 	andi	r2,r2,255
   10354:	10800160 	cmpeqi	r2,r2,5
   10358:	1000051e 	bne	r2,zero,10370 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1035c:	e0bfff17 	ldw	r2,-4(fp)
   10360:	00c00044 	movi	r3,1
   10364:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10368:	0005883a 	mov	r2,zero
   1036c:	00001206 	br	103b8 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10370:	0005303a 	rdctl	r2,status
   10374:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10378:	e0fffc17 	ldw	r3,-16(fp)
   1037c:	00bfff84 	movi	r2,-2
   10380:	1884703a 	and	r2,r3,r2
   10384:	1001703a 	wrctl	status,r2
  
  return context;
   10388:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1038c:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   10390:	e0bffe17 	ldw	r2,-8(fp)
   10394:	1080020b 	ldhu	r2,8(r2)
   10398:	e0bffb0d 	sth	r2,-20(fp)
   1039c:	e0bffa17 	ldw	r2,-24(fp)
   103a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103a4:	e0bffd17 	ldw	r2,-12(fp)
   103a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   103ac:	e0bfff17 	ldw	r2,-4(fp)
   103b0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   103b4:	e0bffb0b 	ldhu	r2,-20(fp)
}
   103b8:	e037883a 	mov	sp,fp
   103bc:	df000017 	ldw	fp,0(sp)
   103c0:	dec00104 	addi	sp,sp,4
   103c4:	f800283a 	ret

000103c8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   103c8:	defff804 	addi	sp,sp,-32
   103cc:	df000715 	stw	fp,28(sp)
   103d0:	df000704 	addi	fp,sp,28
   103d4:	e13ffb15 	stw	r4,-20(fp)
   103d8:	e17ffc15 	stw	r5,-16(fp)
   103dc:	3009883a 	mov	r4,r6
   103e0:	3807883a 	mov	r3,r7
   103e4:	e0800117 	ldw	r2,4(fp)
   103e8:	e13ffd0d 	sth	r4,-12(fp)
   103ec:	e0fffe05 	stb	r3,-8(fp)
   103f0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   103f4:	d0a7fc17 	ldw	r2,-24592(gp)
   103f8:	d0e7fc17 	ldw	r3,-24592(gp)
   103fc:	18c00c03 	ldbu	r3,48(r3)
   10400:	18c00814 	ori	r3,r3,32
   10404:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   10408:	d0a7fc17 	ldw	r2,-24592(gp)
   1040c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   10410:	d0a7fc17 	ldw	r2,-24592(gp)
   10414:	e0ffff0b 	ldhu	r3,-4(fp)
   10418:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   1041c:	d0a7fc17 	ldw	r2,-24592(gp)
   10420:	e0fffc17 	ldw	r3,-16(fp)
   10424:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   10428:	e0bffc17 	ldw	r2,-16(fp)
   1042c:	e0fffd0b 	ldhu	r3,-12(fp)
   10430:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   10434:	e0bffc17 	ldw	r2,-16(fp)
   10438:	e0fffe03 	ldbu	r3,-8(fp)
   1043c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   10440:	d0e7fc17 	ldw	r3,-24592(gp)
   10444:	e0bffc17 	ldw	r2,-16(fp)
   10448:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   1044c:	e0bffb17 	ldw	r2,-20(fp)
   10450:	10c00117 	ldw	r3,4(r2)
   10454:	e0bffc17 	ldw	r2,-16(fp)
   10458:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   1045c:	e0bffc17 	ldw	r2,-16(fp)
   10460:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   10464:	e0bffc17 	ldw	r2,-16(fp)
   10468:	e0fffb17 	ldw	r3,-20(fp)
   1046c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10470:	e0bffb17 	ldw	r2,-20(fp)
   10474:	10800117 	ldw	r2,4(r2)
   10478:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   1047c:	e0bff917 	ldw	r2,-28(fp)
   10480:	10000326 	beq	r2,zero,10490 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   10484:	e0bff917 	ldw	r2,-28(fp)
   10488:	e0fffc17 	ldw	r3,-16(fp)
   1048c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   10490:	e0bffb17 	ldw	r2,-20(fp)
   10494:	e0fffc17 	ldw	r3,-16(fp)
   10498:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   1049c:	d0a7fc17 	ldw	r2,-24592(gp)
   104a0:	10800d03 	ldbu	r2,52(r2)
   104a4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   104a8:	e0fffa03 	ldbu	r3,-24(fp)
   104ac:	e13ffa03 	ldbu	r4,-24(fp)
   104b0:	d0a7f844 	addi	r2,gp,-24607
   104b4:	2085883a 	add	r2,r4,r2
   104b8:	10800003 	ldbu	r2,0(r2)
   104bc:	1009883a 	mov	r4,r2
   104c0:	d0a7fc17 	ldw	r2,-24592(gp)
   104c4:	10800d43 	ldbu	r2,53(r2)
   104c8:	0084303a 	nor	r2,zero,r2
   104cc:	2084703a 	and	r2,r4,r2
   104d0:	1009883a 	mov	r4,r2
   104d4:	d0a7f844 	addi	r2,gp,-24607
   104d8:	1885883a 	add	r2,r3,r2
   104dc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   104e0:	e0fffa03 	ldbu	r3,-24(fp)
   104e4:	d0a7f844 	addi	r2,gp,-24607
   104e8:	1885883a 	add	r2,r3,r2
   104ec:	10800003 	ldbu	r2,0(r2)
   104f0:	10803fcc 	andi	r2,r2,255
   104f4:	1000071e 	bne	r2,zero,10514 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   104f8:	d0a7fc17 	ldw	r2,-24592(gp)
   104fc:	10800d83 	ldbu	r2,54(r2)
   10500:	0084303a 	nor	r2,zero,r2
   10504:	1007883a 	mov	r3,r2
   10508:	d0a7f803 	ldbu	r2,-24608(gp)
   1050c:	1884703a 	and	r2,r3,r2
   10510:	d0a7f805 	stb	r2,-24608(gp)
    }
}
   10514:	0001883a 	nop
   10518:	e037883a 	mov	sp,fp
   1051c:	df000017 	ldw	fp,0(sp)
   10520:	dec00104 	addi	sp,sp,4
   10524:	f800283a 	ret

00010528 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   10528:	defffb04 	addi	sp,sp,-20
   1052c:	dfc00415 	stw	ra,16(sp)
   10530:	df000315 	stw	fp,12(sp)
   10534:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   10538:	01418c04 	movi	r5,1584
   1053c:	010000f4 	movhi	r4,3
   10540:	21027804 	addi	r4,r4,2528
   10544:	000e6fc0 	call	e6fc <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   10548:	008000f4 	movhi	r2,3
   1054c:	10827804 	addi	r2,r2,2528
   10550:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   10554:	008000f4 	movhi	r2,3
   10558:	10828304 	addi	r2,r2,2572
   1055c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   10560:	e03ffd0d 	sth	zero,-12(fp)
   10564:	00001306 	br	105b4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10568:	e0bffe17 	ldw	r2,-8(fp)
   1056c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   10570:	e0bffe17 	ldw	r2,-8(fp)
   10574:	e0ffff17 	ldw	r3,-4(fp)
   10578:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   1057c:	e0bffe17 	ldw	r2,-8(fp)
   10580:	00c00fc4 	movi	r3,63
   10584:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   10588:	e0bffe17 	ldw	r2,-8(fp)
   1058c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   10590:	e0bffe17 	ldw	r2,-8(fp)
   10594:	10800b04 	addi	r2,r2,44
   10598:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   1059c:	e0bfff17 	ldw	r2,-4(fp)
   105a0:	10800b04 	addi	r2,r2,44
   105a4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   105a8:	e0bffd0b 	ldhu	r2,-12(fp)
   105ac:	10800044 	addi	r2,r2,1
   105b0:	e0bffd0d 	sth	r2,-12(fp)
   105b4:	e0bffd0b 	ldhu	r2,-12(fp)
   105b8:	108008f0 	cmpltui	r2,r2,35
   105bc:	103fea1e 	bne	r2,zero,10568 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   105c0:	e0bffe17 	ldw	r2,-8(fp)
   105c4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   105c8:	e0bffe17 	ldw	r2,-8(fp)
   105cc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   105d0:	e0bffe17 	ldw	r2,-8(fp)
   105d4:	00c00fc4 	movi	r3,63
   105d8:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   105dc:	e0bffe17 	ldw	r2,-8(fp)
   105e0:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   105e4:	008000f4 	movhi	r2,3
   105e8:	10827804 	addi	r2,r2,2528
   105ec:	d0a80015 	stw	r2,-24576(gp)
#endif
}
   105f0:	0001883a 	nop
   105f4:	e037883a 	mov	sp,fp
   105f8:	dfc00117 	ldw	ra,4(sp)
   105fc:	df000017 	ldw	fp,0(sp)
   10600:	dec00204 	addi	sp,sp,8
   10604:	f800283a 	ret

00010608 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   10608:	defffa04 	addi	sp,sp,-24
   1060c:	dfc00515 	stw	ra,20(sp)
   10610:	df000415 	stw	fp,16(sp)
   10614:	df000404 	addi	fp,sp,16
   10618:	e13ffe15 	stw	r4,-8(fp)
   1061c:	2805883a 	mov	r2,r5
   10620:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   10624:	e0bffe17 	ldw	r2,-8(fp)
   10628:	10800217 	ldw	r2,8(r2)
   1062c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   10630:	e0bffd17 	ldw	r2,-12(fp)
   10634:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   10638:	e0bffd17 	ldw	r2,-12(fp)
   1063c:	e0ffff0b 	ldhu	r3,-4(fp)
   10640:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   10644:	e0bffd17 	ldw	r2,-12(fp)
   10648:	10c00c03 	ldbu	r3,48(r2)
   1064c:	00bff7c4 	movi	r2,-33
   10650:	1884703a 	and	r2,r3,r2
   10654:	1007883a 	mov	r3,r2
   10658:	e0bffd17 	ldw	r2,-12(fp)
   1065c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   10660:	e0bffd17 	ldw	r2,-12(fp)
   10664:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   10668:	e0bffd17 	ldw	r2,-12(fp)
   1066c:	10800c03 	ldbu	r2,48(r2)
   10670:	10803fcc 	andi	r2,r2,255
   10674:	1000181e 	bne	r2,zero,106d8 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   10678:	e0bffd17 	ldw	r2,-12(fp)
   1067c:	10c00d83 	ldbu	r3,54(r2)
   10680:	d0a7f803 	ldbu	r2,-24608(gp)
   10684:	1884b03a 	or	r2,r3,r2
   10688:	d0a7f805 	stb	r2,-24608(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1068c:	e0bffd17 	ldw	r2,-12(fp)
   10690:	10800d03 	ldbu	r2,52(r2)
   10694:	10c03fcc 	andi	r3,r2,255
   10698:	e0bffd17 	ldw	r2,-12(fp)
   1069c:	10800d03 	ldbu	r2,52(r2)
   106a0:	11003fcc 	andi	r4,r2,255
   106a4:	d0a7f844 	addi	r2,gp,-24607
   106a8:	2085883a 	add	r2,r4,r2
   106ac:	11000003 	ldbu	r4,0(r2)
   106b0:	e0bffd17 	ldw	r2,-12(fp)
   106b4:	10800d43 	ldbu	r2,53(r2)
   106b8:	2084b03a 	or	r2,r4,r2
   106bc:	1009883a 	mov	r4,r2
   106c0:	d0a7f844 	addi	r2,gp,-24607
   106c4:	1885883a 	add	r2,r3,r2
   106c8:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   106cc:	00800044 	movi	r2,1
   106d0:	e0bffc05 	stb	r2,-16(fp)
   106d4:	00000106 	br	106dc <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   106d8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   106dc:	e13ffe17 	ldw	r4,-8(fp)
   106e0:	00106fc0 	call	106fc <OS_FlagUnlink>
    return (sched);
   106e4:	e0bffc03 	ldbu	r2,-16(fp)
}
   106e8:	e037883a 	mov	sp,fp
   106ec:	dfc00117 	ldw	ra,4(sp)
   106f0:	df000017 	ldw	fp,0(sp)
   106f4:	dec00204 	addi	sp,sp,8
   106f8:	f800283a 	ret

000106fc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   106fc:	defffa04 	addi	sp,sp,-24
   10700:	df000515 	stw	fp,20(sp)
   10704:	df000504 	addi	fp,sp,20
   10708:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   1070c:	e0bfff17 	ldw	r2,-4(fp)
   10710:	10800117 	ldw	r2,4(r2)
   10714:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   10718:	e0bfff17 	ldw	r2,-4(fp)
   1071c:	10800017 	ldw	r2,0(r2)
   10720:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   10724:	e0bffb17 	ldw	r2,-20(fp)
   10728:	10000b1e 	bne	r2,zero,10758 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   1072c:	e0bfff17 	ldw	r2,-4(fp)
   10730:	10800317 	ldw	r2,12(r2)
   10734:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   10738:	e0bffd17 	ldw	r2,-12(fp)
   1073c:	e0fffc17 	ldw	r3,-16(fp)
   10740:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   10744:	e0bffc17 	ldw	r2,-16(fp)
   10748:	10000b26 	beq	r2,zero,10778 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   1074c:	e0bffc17 	ldw	r2,-16(fp)
   10750:	10000115 	stw	zero,4(r2)
   10754:	00000806 	br	10778 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   10758:	e0bffb17 	ldw	r2,-20(fp)
   1075c:	e0fffc17 	ldw	r3,-16(fp)
   10760:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   10764:	e0bffc17 	ldw	r2,-16(fp)
   10768:	10000326 	beq	r2,zero,10778 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   1076c:	e0bffc17 	ldw	r2,-16(fp)
   10770:	e0fffb17 	ldw	r3,-20(fp)
   10774:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   10778:	e0bfff17 	ldw	r2,-4(fp)
   1077c:	10800217 	ldw	r2,8(r2)
   10780:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   10784:	e0bffe17 	ldw	r2,-8(fp)
   10788:	10000a15 	stw	zero,40(r2)
#endif
}
   1078c:	0001883a 	nop
   10790:	e037883a 	mov	sp,fp
   10794:	df000017 	ldw	fp,0(sp)
   10798:	dec00104 	addi	sp,sp,4
   1079c:	f800283a 	ret

000107a0 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   107a0:	defffa04 	addi	sp,sp,-24
   107a4:	df000515 	stw	fp,20(sp)
   107a8:	df000504 	addi	fp,sp,20
   107ac:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   107b0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   107b4:	e0bfff17 	ldw	r2,-4(fp)
   107b8:	1000021e 	bne	r2,zero,107c4 <OSMboxAccept+0x24>
        return ((void *)0);
   107bc:	0005883a 	mov	r2,zero
   107c0:	00001906 	br	10828 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   107c4:	e0bfff17 	ldw	r2,-4(fp)
   107c8:	10800003 	ldbu	r2,0(r2)
   107cc:	10803fcc 	andi	r2,r2,255
   107d0:	10800060 	cmpeqi	r2,r2,1
   107d4:	1000021e 	bne	r2,zero,107e0 <OSMboxAccept+0x40>
        return ((void *)0);
   107d8:	0005883a 	mov	r2,zero
   107dc:	00001206 	br	10828 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107e0:	0005303a 	rdctl	r2,status
   107e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107e8:	e0fffd17 	ldw	r3,-12(fp)
   107ec:	00bfff84 	movi	r2,-2
   107f0:	1884703a 	and	r2,r3,r2
   107f4:	1001703a 	wrctl	status,r2
  
  return context;
   107f8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   107fc:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   10800:	e0bfff17 	ldw	r2,-4(fp)
   10804:	10800117 	ldw	r2,4(r2)
   10808:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   1080c:	e0bfff17 	ldw	r2,-4(fp)
   10810:	10000115 	stw	zero,4(r2)
   10814:	e0bffb17 	ldw	r2,-20(fp)
   10818:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1081c:	e0bffe17 	ldw	r2,-8(fp)
   10820:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   10824:	e0bffc17 	ldw	r2,-16(fp)
}
   10828:	e037883a 	mov	sp,fp
   1082c:	df000017 	ldw	fp,0(sp)
   10830:	dec00104 	addi	sp,sp,4
   10834:	f800283a 	ret

00010838 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   10838:	defff904 	addi	sp,sp,-28
   1083c:	dfc00615 	stw	ra,24(sp)
   10840:	df000515 	stw	fp,20(sp)
   10844:	df000504 	addi	fp,sp,20
   10848:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1084c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   10850:	d0a7fb03 	ldbu	r2,-24596(gp)
   10854:	10803fcc 	andi	r2,r2,255
   10858:	10000226 	beq	r2,zero,10864 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   1085c:	0005883a 	mov	r2,zero
   10860:	00002506 	br	108f8 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10864:	0005303a 	rdctl	r2,status
   10868:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1086c:	e0fffe17 	ldw	r3,-8(fp)
   10870:	00bfff84 	movi	r2,-2
   10874:	1884703a 	and	r2,r3,r2
   10878:	1001703a 	wrctl	status,r2
  
  return context;
   1087c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   10880:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   10884:	d0a7fa17 	ldw	r2,-24600(gp)
   10888:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   1088c:	d0a7fa17 	ldw	r2,-24600(gp)
   10890:	10000326 	beq	r2,zero,108a0 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   10894:	d0a7fa17 	ldw	r2,-24600(gp)
   10898:	10800117 	ldw	r2,4(r2)
   1089c:	d0a7fa15 	stw	r2,-24600(gp)
   108a0:	e0bffb17 	ldw	r2,-20(fp)
   108a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108a8:	e0bffc17 	ldw	r2,-16(fp)
   108ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   108b0:	e0bffd17 	ldw	r2,-12(fp)
   108b4:	10000f26 	beq	r2,zero,108f4 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   108b8:	e0bffd17 	ldw	r2,-12(fp)
   108bc:	00c00044 	movi	r3,1
   108c0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   108c4:	e0bffd17 	ldw	r2,-12(fp)
   108c8:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   108cc:	e0bffd17 	ldw	r2,-12(fp)
   108d0:	e0ffff17 	ldw	r3,-4(fp)
   108d4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   108d8:	e0bffd17 	ldw	r2,-12(fp)
   108dc:	00c00fc4 	movi	r3,63
   108e0:	10c00445 	stb	r3,17(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   108e4:	e0bffd17 	ldw	r2,-12(fp)
   108e8:	10000485 	stb	zero,18(r2)
#endif
        OS_EventWaitListInit(pevent);
   108ec:	e13ffd17 	ldw	r4,-12(fp)
   108f0:	000e31c0 	call	e31c <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   108f4:	e0bffd17 	ldw	r2,-12(fp)
}
   108f8:	e037883a 	mov	sp,fp
   108fc:	dfc00117 	ldw	ra,4(sp)
   10900:	df000017 	ldw	fp,0(sp)
   10904:	dec00204 	addi	sp,sp,8
   10908:	f800283a 	ret

0001090c <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1090c:	defff304 	addi	sp,sp,-52
   10910:	dfc00c15 	stw	ra,48(sp)
   10914:	df000b15 	stw	fp,44(sp)
   10918:	df000b04 	addi	fp,sp,44
   1091c:	e13ffd15 	stw	r4,-12(fp)
   10920:	2805883a 	mov	r2,r5
   10924:	e1bfff15 	stw	r6,-4(fp)
   10928:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1092c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10930:	e0bfff17 	ldw	r2,-4(fp)
   10934:	1000021e 	bne	r2,zero,10940 <OSMboxDel+0x34>
        return (pevent);
   10938:	e0bffd17 	ldw	r2,-12(fp)
   1093c:	00007e06 	br	10b38 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   10940:	e0bffd17 	ldw	r2,-12(fp)
   10944:	1000051e 	bne	r2,zero,1095c <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   10948:	e0bfff17 	ldw	r2,-4(fp)
   1094c:	00c00104 	movi	r3,4
   10950:	10c00005 	stb	r3,0(r2)
        return (pevent);
   10954:	e0bffd17 	ldw	r2,-12(fp)
   10958:	00007706 	br	10b38 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   1095c:	e0bffd17 	ldw	r2,-12(fp)
   10960:	10800003 	ldbu	r2,0(r2)
   10964:	10803fcc 	andi	r2,r2,255
   10968:	10800060 	cmpeqi	r2,r2,1
   1096c:	1000051e 	bne	r2,zero,10984 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   10970:	e0bfff17 	ldw	r2,-4(fp)
   10974:	00c00044 	movi	r3,1
   10978:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1097c:	e0bffd17 	ldw	r2,-12(fp)
   10980:	00006d06 	br	10b38 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10984:	d0a7fb03 	ldbu	r2,-24596(gp)
   10988:	10803fcc 	andi	r2,r2,255
   1098c:	10000526 	beq	r2,zero,109a4 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   10990:	e0bfff17 	ldw	r2,-4(fp)
   10994:	00c003c4 	movi	r3,15
   10998:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1099c:	e0bffd17 	ldw	r2,-12(fp)
   109a0:	00006506 	br	10b38 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   109a4:	0005303a 	rdctl	r2,status
   109a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   109ac:	e0fffc17 	ldw	r3,-16(fp)
   109b0:	00bfff84 	movi	r2,-2
   109b4:	1884703a 	and	r2,r3,r2
   109b8:	1001703a 	wrctl	status,r2
  
  return context;
   109bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   109c0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   109c4:	e0bffd17 	ldw	r2,-12(fp)
   109c8:	10800283 	ldbu	r2,10(r2)
   109cc:	10803fcc 	andi	r2,r2,255
   109d0:	10000326 	beq	r2,zero,109e0 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   109d4:	00800044 	movi	r2,1
   109d8:	e0bff505 	stb	r2,-44(fp)
   109dc:	00000106 	br	109e4 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   109e0:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   109e4:	e0bffe03 	ldbu	r2,-8(fp)
   109e8:	10000326 	beq	r2,zero,109f8 <OSMboxDel+0xec>
   109ec:	10800060 	cmpeqi	r2,r2,1
   109f0:	1000281e 	bne	r2,zero,10a94 <OSMboxDel+0x188>
   109f4:	00004506 	br	10b0c <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   109f8:	e0bff503 	ldbu	r2,-44(fp)
   109fc:	1000161e 	bne	r2,zero,10a58 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   10a00:	e0bffd17 	ldw	r2,-12(fp)
   10a04:	00c00fc4 	movi	r3,63
   10a08:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   10a0c:	e0bffd17 	ldw	r2,-12(fp)
   10a10:	10000485 	stb	zero,18(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   10a14:	e0bffd17 	ldw	r2,-12(fp)
   10a18:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   10a1c:	d0e7fa17 	ldw	r3,-24600(gp)
   10a20:	e0bffd17 	ldw	r2,-12(fp)
   10a24:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   10a28:	e0bffd17 	ldw	r2,-12(fp)
   10a2c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   10a30:	e0bffd17 	ldw	r2,-12(fp)
   10a34:	d0a7fa15 	stw	r2,-24600(gp)
   10a38:	e0bff717 	ldw	r2,-36(fp)
   10a3c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a40:	e0bff817 	ldw	r2,-32(fp)
   10a44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   10a48:	e0bfff17 	ldw	r2,-4(fp)
   10a4c:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   10a50:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   10a54:	00003706 	br	10b34 <OSMboxDel+0x228>
   10a58:	e0bff717 	ldw	r2,-36(fp)
   10a5c:	e0bff915 	stw	r2,-28(fp)
   10a60:	e0bff917 	ldw	r2,-28(fp)
   10a64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   10a68:	e0bfff17 	ldw	r2,-4(fp)
   10a6c:	00c01244 	movi	r3,73
   10a70:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   10a74:	e0bffd17 	ldw	r2,-12(fp)
   10a78:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   10a7c:	00002d06 	br	10b34 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   10a80:	000f883a 	mov	r7,zero
   10a84:	01800084 	movi	r6,2
   10a88:	000b883a 	mov	r5,zero
   10a8c:	e13ffd17 	ldw	r4,-12(fp)
   10a90:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   10a94:	e0bffd17 	ldw	r2,-12(fp)
   10a98:	10800283 	ldbu	r2,10(r2)
   10a9c:	10803fcc 	andi	r2,r2,255
   10aa0:	103ff71e 	bne	r2,zero,10a80 <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   10aa4:	e0bffd17 	ldw	r2,-12(fp)
   10aa8:	00c00fc4 	movi	r3,63
   10aac:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   10ab0:	e0bffd17 	ldw	r2,-12(fp)
   10ab4:	10000485 	stb	zero,18(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   10ab8:	e0bffd17 	ldw	r2,-12(fp)
   10abc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   10ac0:	d0e7fa17 	ldw	r3,-24600(gp)
   10ac4:	e0bffd17 	ldw	r2,-12(fp)
   10ac8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   10acc:	e0bffd17 	ldw	r2,-12(fp)
   10ad0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   10ad4:	e0bffd17 	ldw	r2,-12(fp)
   10ad8:	d0a7fa15 	stw	r2,-24600(gp)
   10adc:	e0bff717 	ldw	r2,-36(fp)
   10ae0:	e0bffa15 	stw	r2,-24(fp)
   10ae4:	e0bffa17 	ldw	r2,-24(fp)
   10ae8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   10aec:	e0bff503 	ldbu	r2,-44(fp)
   10af0:	10800058 	cmpnei	r2,r2,1
   10af4:	1000011e 	bne	r2,zero,10afc <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   10af8:	000e7b80 	call	e7b8 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   10afc:	e0bfff17 	ldw	r2,-4(fp)
   10b00:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   10b04:	e03ff615 	stw	zero,-40(fp)
             break;
   10b08:	00000a06 	br	10b34 <OSMboxDel+0x228>
   10b0c:	e0bff717 	ldw	r2,-36(fp)
   10b10:	e0bffb15 	stw	r2,-20(fp)
   10b14:	e0bffb17 	ldw	r2,-20(fp)
   10b18:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   10b1c:	e0bfff17 	ldw	r2,-4(fp)
   10b20:	00c001c4 	movi	r3,7
   10b24:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   10b28:	e0bffd17 	ldw	r2,-12(fp)
   10b2c:	e0bff615 	stw	r2,-40(fp)
             break;
   10b30:	0001883a 	nop
    }
    return (pevent_return);
   10b34:	e0bff617 	ldw	r2,-40(fp)
}
   10b38:	e037883a 	mov	sp,fp
   10b3c:	dfc00117 	ldw	ra,4(sp)
   10b40:	df000017 	ldw	fp,0(sp)
   10b44:	dec00204 	addi	sp,sp,8
   10b48:	f800283a 	ret

00010b4c <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   10b4c:	defff404 	addi	sp,sp,-48
   10b50:	dfc00b15 	stw	ra,44(sp)
   10b54:	df000a15 	stw	fp,40(sp)
   10b58:	df000a04 	addi	fp,sp,40
   10b5c:	e13ffd15 	stw	r4,-12(fp)
   10b60:	2805883a 	mov	r2,r5
   10b64:	e1bfff15 	stw	r6,-4(fp)
   10b68:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   10b6c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   10b70:	e0bfff17 	ldw	r2,-4(fp)
   10b74:	1000021e 	bne	r2,zero,10b80 <OSMboxPend+0x34>
        return ((void *)0);
   10b78:	0005883a 	mov	r2,zero
   10b7c:	00007b06 	br	10d6c <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   10b80:	e0bffd17 	ldw	r2,-12(fp)
   10b84:	1000051e 	bne	r2,zero,10b9c <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   10b88:	e0bfff17 	ldw	r2,-4(fp)
   10b8c:	00c00104 	movi	r3,4
   10b90:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   10b94:	0005883a 	mov	r2,zero
   10b98:	00007406 	br	10d6c <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   10b9c:	e0bffd17 	ldw	r2,-12(fp)
   10ba0:	10800003 	ldbu	r2,0(r2)
   10ba4:	10803fcc 	andi	r2,r2,255
   10ba8:	10800060 	cmpeqi	r2,r2,1
   10bac:	1000051e 	bne	r2,zero,10bc4 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   10bb0:	e0bfff17 	ldw	r2,-4(fp)
   10bb4:	00c00044 	movi	r3,1
   10bb8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   10bbc:	0005883a 	mov	r2,zero
   10bc0:	00006a06 	br	10d6c <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   10bc4:	d0a7fb03 	ldbu	r2,-24596(gp)
   10bc8:	10803fcc 	andi	r2,r2,255
   10bcc:	10000526 	beq	r2,zero,10be4 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   10bd0:	e0bfff17 	ldw	r2,-4(fp)
   10bd4:	00c00084 	movi	r3,2
   10bd8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   10bdc:	0005883a 	mov	r2,zero
   10be0:	00006206 	br	10d6c <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   10be4:	d0a7e903 	ldbu	r2,-24668(gp)
   10be8:	10803fcc 	andi	r2,r2,255
   10bec:	10000526 	beq	r2,zero,10c04 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   10bf0:	e0bfff17 	ldw	r2,-4(fp)
   10bf4:	00c00344 	movi	r3,13
   10bf8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   10bfc:	0005883a 	mov	r2,zero
   10c00:	00005a06 	br	10d6c <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c04:	0005303a 	rdctl	r2,status
   10c08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c0c:	e0fffc17 	ldw	r3,-16(fp)
   10c10:	00bfff84 	movi	r2,-2
   10c14:	1884703a 	and	r2,r3,r2
   10c18:	1001703a 	wrctl	status,r2
  
  return context;
   10c1c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10c20:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   10c24:	e0bffd17 	ldw	r2,-12(fp)
   10c28:	10800117 	ldw	r2,4(r2)
   10c2c:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   10c30:	e0bff617 	ldw	r2,-40(fp)
   10c34:	10000a26 	beq	r2,zero,10c60 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   10c38:	e0bffd17 	ldw	r2,-12(fp)
   10c3c:	10000115 	stw	zero,4(r2)
   10c40:	e0bff717 	ldw	r2,-36(fp)
   10c44:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c48:	e0bff817 	ldw	r2,-32(fp)
   10c4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   10c50:	e0bfff17 	ldw	r2,-4(fp)
   10c54:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   10c58:	e0bff617 	ldw	r2,-40(fp)
   10c5c:	00004306 	br	10d6c <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   10c60:	d0a7fc17 	ldw	r2,-24592(gp)
   10c64:	d0e7fc17 	ldw	r3,-24592(gp)
   10c68:	18c00c03 	ldbu	r3,48(r3)
   10c6c:	18c00094 	ori	r3,r3,2
   10c70:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   10c74:	d0a7fc17 	ldw	r2,-24592(gp)
   10c78:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   10c7c:	d0a7fc17 	ldw	r2,-24592(gp)
   10c80:	e0fffe0b 	ldhu	r3,-8(fp)
   10c84:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   10c88:	e13ffd17 	ldw	r4,-12(fp)
   10c8c:	000df040 	call	df04 <OS_EventTaskWait>
   10c90:	e0bff717 	ldw	r2,-36(fp)
   10c94:	e0bffb15 	stw	r2,-20(fp)
   10c98:	e0bffb17 	ldw	r2,-20(fp)
   10c9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   10ca0:	000e7b80 	call	e7b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ca4:	0005303a 	rdctl	r2,status
   10ca8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10cac:	e0fff917 	ldw	r3,-28(fp)
   10cb0:	00bfff84 	movi	r2,-2
   10cb4:	1884703a 	and	r2,r3,r2
   10cb8:	1001703a 	wrctl	status,r2
  
  return context;
   10cbc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   10cc0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   10cc4:	d0a7fc17 	ldw	r2,-24592(gp)
   10cc8:	10800c43 	ldbu	r2,49(r2)
   10ccc:	10803fcc 	andi	r2,r2,255
   10cd0:	10000326 	beq	r2,zero,10ce0 <OSMboxPend+0x194>
   10cd4:	108000a0 	cmpeqi	r2,r2,2
   10cd8:	1000071e 	bne	r2,zero,10cf8 <OSMboxPend+0x1ac>
   10cdc:	00000b06 	br	10d0c <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   10ce0:	d0a7fc17 	ldw	r2,-24592(gp)
   10ce4:	10800917 	ldw	r2,36(r2)
   10ce8:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   10cec:	e0bfff17 	ldw	r2,-4(fp)
   10cf0:	10000005 	stb	zero,0(r2)
             break;
   10cf4:	00000e06 	br	10d30 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   10cf8:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   10cfc:	e0bfff17 	ldw	r2,-4(fp)
   10d00:	00c00384 	movi	r3,14
   10d04:	10c00005 	stb	r3,0(r2)
             break;
   10d08:	00000906 	br	10d30 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   10d0c:	d0a7fc17 	ldw	r2,-24592(gp)
   10d10:	e17ffd17 	ldw	r5,-12(fp)
   10d14:	1009883a 	mov	r4,r2
   10d18:	000e1640 	call	e164 <OS_EventTaskRemove>
             pmsg = (void *)0;
   10d1c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   10d20:	e0bfff17 	ldw	r2,-4(fp)
   10d24:	00c00284 	movi	r3,10
   10d28:	10c00005 	stb	r3,0(r2)
             break;
   10d2c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   10d30:	d0a7fc17 	ldw	r2,-24592(gp)
   10d34:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   10d38:	d0a7fc17 	ldw	r2,-24592(gp)
   10d3c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   10d40:	d0a7fc17 	ldw	r2,-24592(gp)
   10d44:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   10d48:	d0a7fc17 	ldw	r2,-24592(gp)
   10d4c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   10d50:	d0a7fc17 	ldw	r2,-24592(gp)
   10d54:	10000915 	stw	zero,36(r2)
   10d58:	e0bff717 	ldw	r2,-36(fp)
   10d5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d60:	e0bffa17 	ldw	r2,-24(fp)
   10d64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   10d68:	e0bff617 	ldw	r2,-40(fp)
}
   10d6c:	e037883a 	mov	sp,fp
   10d70:	dfc00117 	ldw	ra,4(sp)
   10d74:	df000017 	ldw	fp,0(sp)
   10d78:	dec00204 	addi	sp,sp,8
   10d7c:	f800283a 	ret

00010d80 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   10d80:	defff604 	addi	sp,sp,-40
   10d84:	dfc00915 	stw	ra,36(sp)
   10d88:	df000815 	stw	fp,32(sp)
   10d8c:	df000804 	addi	fp,sp,32
   10d90:	e13ffd15 	stw	r4,-12(fp)
   10d94:	2805883a 	mov	r2,r5
   10d98:	e1bfff15 	stw	r6,-4(fp)
   10d9c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10da0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10da4:	e0bfff17 	ldw	r2,-4(fp)
   10da8:	1000021e 	bne	r2,zero,10db4 <OSMboxPendAbort+0x34>
        return (0);
   10dac:	0005883a 	mov	r2,zero
   10db0:	00004906 	br	10ed8 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   10db4:	e0bffd17 	ldw	r2,-12(fp)
   10db8:	1000051e 	bne	r2,zero,10dd0 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   10dbc:	e0bfff17 	ldw	r2,-4(fp)
   10dc0:	00c00104 	movi	r3,4
   10dc4:	10c00005 	stb	r3,0(r2)
        return (0);
   10dc8:	0005883a 	mov	r2,zero
   10dcc:	00004206 	br	10ed8 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   10dd0:	e0bffd17 	ldw	r2,-12(fp)
   10dd4:	10800003 	ldbu	r2,0(r2)
   10dd8:	10803fcc 	andi	r2,r2,255
   10ddc:	10800060 	cmpeqi	r2,r2,1
   10de0:	1000051e 	bne	r2,zero,10df8 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   10de4:	e0bfff17 	ldw	r2,-4(fp)
   10de8:	00c00044 	movi	r3,1
   10dec:	10c00005 	stb	r3,0(r2)
        return (0);
   10df0:	0005883a 	mov	r2,zero
   10df4:	00003806 	br	10ed8 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10df8:	0005303a 	rdctl	r2,status
   10dfc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e00:	e0fffc17 	ldw	r3,-16(fp)
   10e04:	00bfff84 	movi	r2,-2
   10e08:	1884703a 	and	r2,r3,r2
   10e0c:	1001703a 	wrctl	status,r2
  
  return context;
   10e10:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10e14:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   10e18:	e0bffd17 	ldw	r2,-12(fp)
   10e1c:	10800283 	ldbu	r2,10(r2)
   10e20:	10803fcc 	andi	r2,r2,255
   10e24:	10002526 	beq	r2,zero,10ebc <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   10e28:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   10e2c:	e0bffe03 	ldbu	r2,-8(fp)
   10e30:	10800060 	cmpeqi	r2,r2,1
   10e34:	10000e26 	beq	r2,zero,10e70 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   10e38:	00000806 	br	10e5c <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   10e3c:	01c00084 	movi	r7,2
   10e40:	01800084 	movi	r6,2
   10e44:	000b883a 	mov	r5,zero
   10e48:	e13ffd17 	ldw	r4,-12(fp)
   10e4c:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
                     nbr_tasks++;
   10e50:	e0bff803 	ldbu	r2,-32(fp)
   10e54:	10800044 	addi	r2,r2,1
   10e58:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   10e5c:	e0bffd17 	ldw	r2,-12(fp)
   10e60:	10800283 	ldbu	r2,10(r2)
   10e64:	10803fcc 	andi	r2,r2,255
   10e68:	103ff41e 	bne	r2,zero,10e3c <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   10e6c:	00000906 	br	10e94 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   10e70:	01c00084 	movi	r7,2
   10e74:	01800084 	movi	r6,2
   10e78:	000b883a 	mov	r5,zero
   10e7c:	e13ffd17 	ldw	r4,-12(fp)
   10e80:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
                 nbr_tasks++;
   10e84:	e0bff803 	ldbu	r2,-32(fp)
   10e88:	10800044 	addi	r2,r2,1
   10e8c:	e0bff805 	stb	r2,-32(fp)
                 break;
   10e90:	0001883a 	nop
   10e94:	e0bff917 	ldw	r2,-28(fp)
   10e98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e9c:	e0bffa17 	ldw	r2,-24(fp)
   10ea0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   10ea4:	000e7b80 	call	e7b8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   10ea8:	e0bfff17 	ldw	r2,-4(fp)
   10eac:	00c00384 	movi	r3,14
   10eb0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   10eb4:	e0bff803 	ldbu	r2,-32(fp)
   10eb8:	00000706 	br	10ed8 <OSMboxPendAbort+0x158>
   10ebc:	e0bff917 	ldw	r2,-28(fp)
   10ec0:	e0bffb15 	stw	r2,-20(fp)
   10ec4:	e0bffb17 	ldw	r2,-20(fp)
   10ec8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10ecc:	e0bfff17 	ldw	r2,-4(fp)
   10ed0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   10ed4:	0005883a 	mov	r2,zero
}
   10ed8:	e037883a 	mov	sp,fp
   10edc:	dfc00117 	ldw	ra,4(sp)
   10ee0:	df000017 	ldw	fp,0(sp)
   10ee4:	dec00204 	addi	sp,sp,8
   10ee8:	f800283a 	ret

00010eec <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   10eec:	defff704 	addi	sp,sp,-36
   10ef0:	dfc00815 	stw	ra,32(sp)
   10ef4:	df000715 	stw	fp,28(sp)
   10ef8:	df000704 	addi	fp,sp,28
   10efc:	e13ffe15 	stw	r4,-8(fp)
   10f00:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   10f04:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   10f08:	e0bffe17 	ldw	r2,-8(fp)
   10f0c:	1000021e 	bne	r2,zero,10f18 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   10f10:	00800104 	movi	r2,4
   10f14:	00003406 	br	10fe8 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   10f18:	e0bfff17 	ldw	r2,-4(fp)
   10f1c:	1000021e 	bne	r2,zero,10f28 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   10f20:	008000c4 	movi	r2,3
   10f24:	00003006 	br	10fe8 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   10f28:	e0bffe17 	ldw	r2,-8(fp)
   10f2c:	10800003 	ldbu	r2,0(r2)
   10f30:	10803fcc 	andi	r2,r2,255
   10f34:	10800060 	cmpeqi	r2,r2,1
   10f38:	1000021e 	bne	r2,zero,10f44 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   10f3c:	00800044 	movi	r2,1
   10f40:	00002906 	br	10fe8 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f44:	0005303a 	rdctl	r2,status
   10f48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f4c:	e0fffd17 	ldw	r3,-12(fp)
   10f50:	00bfff84 	movi	r2,-2
   10f54:	1884703a 	and	r2,r3,r2
   10f58:	1001703a 	wrctl	status,r2
  
  return context;
   10f5c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   10f60:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   10f64:	e0bffe17 	ldw	r2,-8(fp)
   10f68:	10800283 	ldbu	r2,10(r2)
   10f6c:	10803fcc 	andi	r2,r2,255
   10f70:	10000c26 	beq	r2,zero,10fa4 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   10f74:	000f883a 	mov	r7,zero
   10f78:	01800084 	movi	r6,2
   10f7c:	e17fff17 	ldw	r5,-4(fp)
   10f80:	e13ffe17 	ldw	r4,-8(fp)
   10f84:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
   10f88:	e0bff917 	ldw	r2,-28(fp)
   10f8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f90:	e0bffa17 	ldw	r2,-24(fp)
   10f94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   10f98:	000e7b80 	call	e7b8 <OS_Sched>
        return (OS_ERR_NONE);
   10f9c:	0005883a 	mov	r2,zero
   10fa0:	00001106 	br	10fe8 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   10fa4:	e0bffe17 	ldw	r2,-8(fp)
   10fa8:	10800117 	ldw	r2,4(r2)
   10fac:	10000626 	beq	r2,zero,10fc8 <OSMboxPost+0xdc>
   10fb0:	e0bff917 	ldw	r2,-28(fp)
   10fb4:	e0bffb15 	stw	r2,-20(fp)
   10fb8:	e0bffb17 	ldw	r2,-20(fp)
   10fbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   10fc0:	00800504 	movi	r2,20
   10fc4:	00000806 	br	10fe8 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   10fc8:	e0bffe17 	ldw	r2,-8(fp)
   10fcc:	e0ffff17 	ldw	r3,-4(fp)
   10fd0:	10c00115 	stw	r3,4(r2)
   10fd4:	e0bff917 	ldw	r2,-28(fp)
   10fd8:	e0bffc15 	stw	r2,-16(fp)
   10fdc:	e0bffc17 	ldw	r2,-16(fp)
   10fe0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   10fe4:	0005883a 	mov	r2,zero
}
   10fe8:	e037883a 	mov	sp,fp
   10fec:	dfc00117 	ldw	ra,4(sp)
   10ff0:	df000017 	ldw	fp,0(sp)
   10ff4:	dec00204 	addi	sp,sp,8
   10ff8:	f800283a 	ret

00010ffc <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   10ffc:	defff604 	addi	sp,sp,-40
   11000:	dfc00915 	stw	ra,36(sp)
   11004:	df000815 	stw	fp,32(sp)
   11008:	df000804 	addi	fp,sp,32
   1100c:	e13ffd15 	stw	r4,-12(fp)
   11010:	e17ffe15 	stw	r5,-8(fp)
   11014:	3005883a 	mov	r2,r6
   11018:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1101c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   11020:	e0bffd17 	ldw	r2,-12(fp)
   11024:	1000021e 	bne	r2,zero,11030 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   11028:	00800104 	movi	r2,4
   1102c:	00004506 	br	11144 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   11030:	e0bffe17 	ldw	r2,-8(fp)
   11034:	1000021e 	bne	r2,zero,11040 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   11038:	008000c4 	movi	r2,3
   1103c:	00004106 	br	11144 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   11040:	e0bffd17 	ldw	r2,-12(fp)
   11044:	10800003 	ldbu	r2,0(r2)
   11048:	10803fcc 	andi	r2,r2,255
   1104c:	10800060 	cmpeqi	r2,r2,1
   11050:	1000021e 	bne	r2,zero,1105c <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   11054:	00800044 	movi	r2,1
   11058:	00003a06 	br	11144 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1105c:	0005303a 	rdctl	r2,status
   11060:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11064:	e0fffc17 	ldw	r3,-16(fp)
   11068:	00bfff84 	movi	r2,-2
   1106c:	1884703a 	and	r2,r3,r2
   11070:	1001703a 	wrctl	status,r2
  
  return context;
   11074:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11078:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   1107c:	e0bffd17 	ldw	r2,-12(fp)
   11080:	10800283 	ldbu	r2,10(r2)
   11084:	10803fcc 	andi	r2,r2,255
   11088:	10001d26 	beq	r2,zero,11100 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   1108c:	e0bfff03 	ldbu	r2,-4(fp)
   11090:	1080004c 	andi	r2,r2,1
   11094:	10000b26 	beq	r2,zero,110c4 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   11098:	00000506 	br	110b0 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   1109c:	000f883a 	mov	r7,zero
   110a0:	01800084 	movi	r6,2
   110a4:	e17ffe17 	ldw	r5,-8(fp)
   110a8:	e13ffd17 	ldw	r4,-12(fp)
   110ac:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   110b0:	e0bffd17 	ldw	r2,-12(fp)
   110b4:	10800283 	ldbu	r2,10(r2)
   110b8:	10803fcc 	andi	r2,r2,255
   110bc:	103ff71e 	bne	r2,zero,1109c <OSMboxPostOpt+0xa0>
   110c0:	00000506 	br	110d8 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   110c4:	000f883a 	mov	r7,zero
   110c8:	01800084 	movi	r6,2
   110cc:	e17ffe17 	ldw	r5,-8(fp)
   110d0:	e13ffd17 	ldw	r4,-12(fp)
   110d4:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
   110d8:	e0bff817 	ldw	r2,-32(fp)
   110dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   110e0:	e0bff917 	ldw	r2,-28(fp)
   110e4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   110e8:	e0bfff03 	ldbu	r2,-4(fp)
   110ec:	1080010c 	andi	r2,r2,4
   110f0:	1000011e 	bne	r2,zero,110f8 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   110f4:	000e7b80 	call	e7b8 <OS_Sched>
        }
        return (OS_ERR_NONE);
   110f8:	0005883a 	mov	r2,zero
   110fc:	00001106 	br	11144 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   11100:	e0bffd17 	ldw	r2,-12(fp)
   11104:	10800117 	ldw	r2,4(r2)
   11108:	10000626 	beq	r2,zero,11124 <OSMboxPostOpt+0x128>
   1110c:	e0bff817 	ldw	r2,-32(fp)
   11110:	e0bffa15 	stw	r2,-24(fp)
   11114:	e0bffa17 	ldw	r2,-24(fp)
   11118:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   1111c:	00800504 	movi	r2,20
   11120:	00000806 	br	11144 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   11124:	e0bffd17 	ldw	r2,-12(fp)
   11128:	e0fffe17 	ldw	r3,-8(fp)
   1112c:	10c00115 	stw	r3,4(r2)
   11130:	e0bff817 	ldw	r2,-32(fp)
   11134:	e0bffb15 	stw	r2,-20(fp)
   11138:	e0bffb17 	ldw	r2,-20(fp)
   1113c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   11140:	0005883a 	mov	r2,zero
}
   11144:	e037883a 	mov	sp,fp
   11148:	dfc00117 	ldw	ra,4(sp)
   1114c:	df000017 	ldw	fp,0(sp)
   11150:	dec00204 	addi	sp,sp,8
   11154:	f800283a 	ret

00011158 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   11158:	defff704 	addi	sp,sp,-36
   1115c:	df000815 	stw	fp,32(sp)
   11160:	df000804 	addi	fp,sp,32
   11164:	e13ffe15 	stw	r4,-8(fp)
   11168:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1116c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   11170:	e0bffe17 	ldw	r2,-8(fp)
   11174:	1000021e 	bne	r2,zero,11180 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   11178:	00800104 	movi	r2,4
   1117c:	00003606 	br	11258 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   11180:	e0bfff17 	ldw	r2,-4(fp)
   11184:	1000021e 	bne	r2,zero,11190 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   11188:	00800244 	movi	r2,9
   1118c:	00003206 	br	11258 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   11190:	e0bffe17 	ldw	r2,-8(fp)
   11194:	10800003 	ldbu	r2,0(r2)
   11198:	10803fcc 	andi	r2,r2,255
   1119c:	10800060 	cmpeqi	r2,r2,1
   111a0:	1000021e 	bne	r2,zero,111ac <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   111a4:	00800044 	movi	r2,1
   111a8:	00002b06 	br	11258 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111ac:	0005303a 	rdctl	r2,status
   111b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111b4:	e0fffd17 	ldw	r3,-12(fp)
   111b8:	00bfff84 	movi	r2,-2
   111bc:	1884703a 	and	r2,r3,r2
   111c0:	1001703a 	wrctl	status,r2
  
  return context;
   111c4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   111c8:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   111cc:	e0bffe17 	ldw	r2,-8(fp)
   111d0:	10c00283 	ldbu	r3,10(r2)
   111d4:	e0bfff17 	ldw	r2,-4(fp)
   111d8:	10c00285 	stb	r3,10(r2)
    psrc                    = &pevent->OSEventTbl[0];
   111dc:	e0bffe17 	ldw	r2,-8(fp)
   111e0:	108002c4 	addi	r2,r2,11
   111e4:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   111e8:	e0bfff17 	ldw	r2,-4(fp)
   111ec:	10800104 	addi	r2,r2,4
   111f0:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   111f4:	e03ff805 	stb	zero,-32(fp)
   111f8:	00000b06 	br	11228 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   111fc:	e0bffa17 	ldw	r2,-24(fp)
   11200:	10c00044 	addi	r3,r2,1
   11204:	e0fffa15 	stw	r3,-24(fp)
   11208:	e0fff917 	ldw	r3,-28(fp)
   1120c:	19000044 	addi	r4,r3,1
   11210:	e13ff915 	stw	r4,-28(fp)
   11214:	18c00003 	ldbu	r3,0(r3)
   11218:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1121c:	e0bff803 	ldbu	r2,-32(fp)
   11220:	10800044 	addi	r2,r2,1
   11224:	e0bff805 	stb	r2,-32(fp)
   11228:	e0bff803 	ldbu	r2,-32(fp)
   1122c:	108001b0 	cmpltui	r2,r2,6
   11230:	103ff21e 	bne	r2,zero,111fc <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   11234:	e0bffe17 	ldw	r2,-8(fp)
   11238:	10c00117 	ldw	r3,4(r2)
   1123c:	e0bfff17 	ldw	r2,-4(fp)
   11240:	10c00015 	stw	r3,0(r2)
   11244:	e0bffb17 	ldw	r2,-20(fp)
   11248:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1124c:	e0bffc17 	ldw	r2,-16(fp)
   11250:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   11254:	0005883a 	mov	r2,zero
}
   11258:	e037883a 	mov	sp,fp
   1125c:	df000017 	ldw	fp,0(sp)
   11260:	dec00104 	addi	sp,sp,4
   11264:	f800283a 	ret

00011268 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   11268:	defff404 	addi	sp,sp,-48
   1126c:	df000b15 	stw	fp,44(sp)
   11270:	df000b04 	addi	fp,sp,44
   11274:	e13ffc15 	stw	r4,-16(fp)
   11278:	e17ffd15 	stw	r5,-12(fp)
   1127c:	e1bffe15 	stw	r6,-8(fp)
   11280:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11284:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11288:	e0bfff17 	ldw	r2,-4(fp)
   1128c:	1000021e 	bne	r2,zero,11298 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   11290:	0005883a 	mov	r2,zero
   11294:	00006506 	br	1142c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   11298:	e0bffc17 	ldw	r2,-16(fp)
   1129c:	1000051e 	bne	r2,zero,112b4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   112a0:	e0bfff17 	ldw	r2,-4(fp)
   112a4:	00c01884 	movi	r3,98
   112a8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   112ac:	0005883a 	mov	r2,zero
   112b0:	00005e06 	br	1142c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   112b4:	e0bffc17 	ldw	r2,-16(fp)
   112b8:	108000cc 	andi	r2,r2,3
   112bc:	10000526 	beq	r2,zero,112d4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   112c0:	e0bfff17 	ldw	r2,-4(fp)
   112c4:	00c01884 	movi	r3,98
   112c8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   112cc:	0005883a 	mov	r2,zero
   112d0:	00005606 	br	1142c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   112d4:	e0bffd17 	ldw	r2,-12(fp)
   112d8:	108000a8 	cmpgeui	r2,r2,2
   112dc:	1000051e 	bne	r2,zero,112f4 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   112e0:	e0bfff17 	ldw	r2,-4(fp)
   112e4:	00c016c4 	movi	r3,91
   112e8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   112ec:	0005883a 	mov	r2,zero
   112f0:	00004e06 	br	1142c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   112f4:	e0bffe17 	ldw	r2,-8(fp)
   112f8:	10800128 	cmpgeui	r2,r2,4
   112fc:	1000051e 	bne	r2,zero,11314 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   11300:	e0bfff17 	ldw	r2,-4(fp)
   11304:	00c01704 	movi	r3,92
   11308:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1130c:	0005883a 	mov	r2,zero
   11310:	00004606 	br	1142c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11314:	0005303a 	rdctl	r2,status
   11318:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1131c:	e0fffb17 	ldw	r3,-20(fp)
   11320:	00bfff84 	movi	r2,-2
   11324:	1884703a 	and	r2,r3,r2
   11328:	1001703a 	wrctl	status,r2
  
  return context;
   1132c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11330:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   11334:	d0a7f517 	ldw	r2,-24620(gp)
   11338:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   1133c:	d0a7f517 	ldw	r2,-24620(gp)
   11340:	10000326 	beq	r2,zero,11350 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   11344:	d0a7f517 	ldw	r2,-24620(gp)
   11348:	10800117 	ldw	r2,4(r2)
   1134c:	d0a7f515 	stw	r2,-24620(gp)
   11350:	e0bff817 	ldw	r2,-32(fp)
   11354:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11358:	e0bff917 	ldw	r2,-28(fp)
   1135c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   11360:	e0bffa17 	ldw	r2,-24(fp)
   11364:	1000051e 	bne	r2,zero,1137c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   11368:	e0bfff17 	ldw	r2,-4(fp)
   1136c:	00c01684 	movi	r3,90
   11370:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11374:	0005883a 	mov	r2,zero
   11378:	00002c06 	br	1142c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1137c:	e0bffc17 	ldw	r2,-16(fp)
   11380:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   11384:	e0fffc17 	ldw	r3,-16(fp)
   11388:	e0bffe17 	ldw	r2,-8(fp)
   1138c:	1885883a 	add	r2,r3,r2
   11390:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   11394:	e03ff715 	stw	zero,-36(fp)
   11398:	00000c06 	br	113cc <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   1139c:	e0bff617 	ldw	r2,-40(fp)
   113a0:	e0fff517 	ldw	r3,-44(fp)
   113a4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   113a8:	e0bff517 	ldw	r2,-44(fp)
   113ac:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   113b0:	e0fff517 	ldw	r3,-44(fp)
   113b4:	e0bffe17 	ldw	r2,-8(fp)
   113b8:	1885883a 	add	r2,r3,r2
   113bc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   113c0:	e0bff717 	ldw	r2,-36(fp)
   113c4:	10800044 	addi	r2,r2,1
   113c8:	e0bff715 	stw	r2,-36(fp)
   113cc:	e0bffd17 	ldw	r2,-12(fp)
   113d0:	10bfffc4 	addi	r2,r2,-1
   113d4:	e0fff717 	ldw	r3,-36(fp)
   113d8:	18bff036 	bltu	r3,r2,1139c <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   113dc:	e0bff617 	ldw	r2,-40(fp)
   113e0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   113e4:	e0bffa17 	ldw	r2,-24(fp)
   113e8:	e0fffc17 	ldw	r3,-16(fp)
   113ec:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   113f0:	e0bffa17 	ldw	r2,-24(fp)
   113f4:	e0fffc17 	ldw	r3,-16(fp)
   113f8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   113fc:	e0bffa17 	ldw	r2,-24(fp)
   11400:	e0fffd17 	ldw	r3,-12(fp)
   11404:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   11408:	e0bffa17 	ldw	r2,-24(fp)
   1140c:	e0fffd17 	ldw	r3,-12(fp)
   11410:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   11414:	e0bffa17 	ldw	r2,-24(fp)
   11418:	e0fffe17 	ldw	r3,-8(fp)
   1141c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   11420:	e0bfff17 	ldw	r2,-4(fp)
   11424:	10000005 	stb	zero,0(r2)
    return (pmem);
   11428:	e0bffa17 	ldw	r2,-24(fp)
}
   1142c:	e037883a 	mov	sp,fp
   11430:	df000017 	ldw	fp,0(sp)
   11434:	dec00104 	addi	sp,sp,4
   11438:	f800283a 	ret

0001143c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   1143c:	defff804 	addi	sp,sp,-32
   11440:	df000715 	stw	fp,28(sp)
   11444:	df000704 	addi	fp,sp,28
   11448:	e13ffe15 	stw	r4,-8(fp)
   1144c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11450:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11454:	e0bfff17 	ldw	r2,-4(fp)
   11458:	1000021e 	bne	r2,zero,11464 <OSMemGet+0x28>
        return ((void *)0);
   1145c:	0005883a 	mov	r2,zero
   11460:	00002e06 	br	1151c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   11464:	e0bffe17 	ldw	r2,-8(fp)
   11468:	1000051e 	bne	r2,zero,11480 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1146c:	e0bfff17 	ldw	r2,-4(fp)
   11470:	00c01804 	movi	r3,96
   11474:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11478:	0005883a 	mov	r2,zero
   1147c:	00002706 	br	1151c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11480:	0005303a 	rdctl	r2,status
   11484:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11488:	e0fffd17 	ldw	r3,-12(fp)
   1148c:	00bfff84 	movi	r2,-2
   11490:	1884703a 	and	r2,r3,r2
   11494:	1001703a 	wrctl	status,r2
  
  return context;
   11498:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1149c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   114a0:	e0bffe17 	ldw	r2,-8(fp)
   114a4:	10800417 	ldw	r2,16(r2)
   114a8:	10001426 	beq	r2,zero,114fc <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   114ac:	e0bffe17 	ldw	r2,-8(fp)
   114b0:	10800117 	ldw	r2,4(r2)
   114b4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   114b8:	e0bffb17 	ldw	r2,-20(fp)
   114bc:	10c00017 	ldw	r3,0(r2)
   114c0:	e0bffe17 	ldw	r2,-8(fp)
   114c4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   114c8:	e0bffe17 	ldw	r2,-8(fp)
   114cc:	10800417 	ldw	r2,16(r2)
   114d0:	10ffffc4 	addi	r3,r2,-1
   114d4:	e0bffe17 	ldw	r2,-8(fp)
   114d8:	10c00415 	stw	r3,16(r2)
   114dc:	e0bff917 	ldw	r2,-28(fp)
   114e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114e4:	e0bffa17 	ldw	r2,-24(fp)
   114e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   114ec:	e0bfff17 	ldw	r2,-4(fp)
   114f0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   114f4:	e0bffb17 	ldw	r2,-20(fp)
   114f8:	00000806 	br	1151c <OSMemGet+0xe0>
   114fc:	e0bff917 	ldw	r2,-28(fp)
   11500:	e0bffc15 	stw	r2,-16(fp)
   11504:	e0bffc17 	ldw	r2,-16(fp)
   11508:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   1150c:	e0bfff17 	ldw	r2,-4(fp)
   11510:	00c01744 	movi	r3,93
   11514:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   11518:	0005883a 	mov	r2,zero
}
   1151c:	e037883a 	mov	sp,fp
   11520:	df000017 	ldw	fp,0(sp)
   11524:	dec00104 	addi	sp,sp,4
   11528:	f800283a 	ret

0001152c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1152c:	defff704 	addi	sp,sp,-36
   11530:	dfc00815 	stw	ra,32(sp)
   11534:	df000715 	stw	fp,28(sp)
   11538:	df000704 	addi	fp,sp,28
   1153c:	e13ffd15 	stw	r4,-12(fp)
   11540:	e17ffe15 	stw	r5,-8(fp)
   11544:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11548:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1154c:	e0bfff17 	ldw	r2,-4(fp)
   11550:	1000021e 	bne	r2,zero,1155c <OSMemNameGet+0x30>
        return (0);
   11554:	0005883a 	mov	r2,zero
   11558:	00002b06 	br	11608 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1155c:	e0bffd17 	ldw	r2,-12(fp)
   11560:	1000051e 	bne	r2,zero,11578 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11564:	e0bfff17 	ldw	r2,-4(fp)
   11568:	00c01804 	movi	r3,96
   1156c:	10c00005 	stb	r3,0(r2)
        return (0);
   11570:	0005883a 	mov	r2,zero
   11574:	00002406 	br	11608 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11578:	e0bffe17 	ldw	r2,-8(fp)
   1157c:	1000051e 	bne	r2,zero,11594 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11580:	e0bfff17 	ldw	r2,-4(fp)
   11584:	00c00304 	movi	r3,12
   11588:	10c00005 	stb	r3,0(r2)
        return (0);
   1158c:	0005883a 	mov	r2,zero
   11590:	00001d06 	br	11608 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11594:	d0a7fb03 	ldbu	r2,-24596(gp)
   11598:	10803fcc 	andi	r2,r2,255
   1159c:	10000526 	beq	r2,zero,115b4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   115a0:	e0bfff17 	ldw	r2,-4(fp)
   115a4:	00c00444 	movi	r3,17
   115a8:	10c00005 	stb	r3,0(r2)
        return (0);
   115ac:	0005883a 	mov	r2,zero
   115b0:	00001506 	br	11608 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115b4:	0005303a 	rdctl	r2,status
   115b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115bc:	e0fffb17 	ldw	r3,-20(fp)
   115c0:	00bfff84 	movi	r2,-2
   115c4:	1884703a 	and	r2,r3,r2
   115c8:	1001703a 	wrctl	status,r2
  
  return context;
   115cc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   115d0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   115d4:	e0bffd17 	ldw	r2,-12(fp)
   115d8:	10800504 	addi	r2,r2,20
   115dc:	100b883a 	mov	r5,r2
   115e0:	e13ffe17 	ldw	r4,-8(fp)
   115e4:	000e8fc0 	call	e8fc <OS_StrCopy>
   115e8:	e0bffa05 	stb	r2,-24(fp)
   115ec:	e0bff917 	ldw	r2,-28(fp)
   115f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115f4:	e0bffc17 	ldw	r2,-16(fp)
   115f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   115fc:	e0bfff17 	ldw	r2,-4(fp)
   11600:	10000005 	stb	zero,0(r2)
    return (len);
   11604:	e0bffa03 	ldbu	r2,-24(fp)
}
   11608:	e037883a 	mov	sp,fp
   1160c:	dfc00117 	ldw	ra,4(sp)
   11610:	df000017 	ldw	fp,0(sp)
   11614:	dec00204 	addi	sp,sp,8
   11618:	f800283a 	ret

0001161c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1161c:	defff604 	addi	sp,sp,-40
   11620:	dfc00915 	stw	ra,36(sp)
   11624:	df000815 	stw	fp,32(sp)
   11628:	df000804 	addi	fp,sp,32
   1162c:	e13ffd15 	stw	r4,-12(fp)
   11630:	e17ffe15 	stw	r5,-8(fp)
   11634:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11638:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1163c:	e0bfff17 	ldw	r2,-4(fp)
   11640:	10003526 	beq	r2,zero,11718 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11644:	e0bffd17 	ldw	r2,-12(fp)
   11648:	1000041e 	bne	r2,zero,1165c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1164c:	e0bfff17 	ldw	r2,-4(fp)
   11650:	00c01804 	movi	r3,96
   11654:	10c00005 	stb	r3,0(r2)
        return;
   11658:	00003006 	br	1171c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1165c:	e0bffe17 	ldw	r2,-8(fp)
   11660:	1000041e 	bne	r2,zero,11674 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   11664:	e0bfff17 	ldw	r2,-4(fp)
   11668:	00c00304 	movi	r3,12
   1166c:	10c00005 	stb	r3,0(r2)
        return;
   11670:	00002a06 	br	1171c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11674:	d0a7fb03 	ldbu	r2,-24596(gp)
   11678:	10803fcc 	andi	r2,r2,255
   1167c:	10000426 	beq	r2,zero,11690 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   11680:	e0bfff17 	ldw	r2,-4(fp)
   11684:	00c00484 	movi	r3,18
   11688:	10c00005 	stb	r3,0(r2)
        return;
   1168c:	00002306 	br	1171c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11690:	0005303a 	rdctl	r2,status
   11694:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11698:	e0fffc17 	ldw	r3,-16(fp)
   1169c:	00bfff84 	movi	r2,-2
   116a0:	1884703a 	and	r2,r3,r2
   116a4:	1001703a 	wrctl	status,r2
  
  return context;
   116a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   116ac:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   116b0:	e13ffe17 	ldw	r4,-8(fp)
   116b4:	000e9700 	call	e970 <OS_StrLen>
   116b8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   116bc:	e0bffa03 	ldbu	r2,-24(fp)
   116c0:	10800830 	cmpltui	r2,r2,32
   116c4:	1000081e 	bne	r2,zero,116e8 <OSMemNameSet+0xcc>
   116c8:	e0bff817 	ldw	r2,-32(fp)
   116cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   116d0:	e0bff917 	ldw	r2,-28(fp)
   116d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   116d8:	e0bfff17 	ldw	r2,-4(fp)
   116dc:	00c018c4 	movi	r3,99
   116e0:	10c00005 	stb	r3,0(r2)
        return;
   116e4:	00000d06 	br	1171c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   116e8:	e0bffd17 	ldw	r2,-12(fp)
   116ec:	10800504 	addi	r2,r2,20
   116f0:	e17ffe17 	ldw	r5,-8(fp)
   116f4:	1009883a 	mov	r4,r2
   116f8:	000e8fc0 	call	e8fc <OS_StrCopy>
   116fc:	e0bff817 	ldw	r2,-32(fp)
   11700:	e0bffb15 	stw	r2,-20(fp)
   11704:	e0bffb17 	ldw	r2,-20(fp)
   11708:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1170c:	e0bfff17 	ldw	r2,-4(fp)
   11710:	10000005 	stb	zero,0(r2)
   11714:	00000106 	br	1171c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   11718:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1171c:	e037883a 	mov	sp,fp
   11720:	dfc00117 	ldw	ra,4(sp)
   11724:	df000017 	ldw	fp,0(sp)
   11728:	dec00204 	addi	sp,sp,8
   1172c:	f800283a 	ret

00011730 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   11730:	defff904 	addi	sp,sp,-28
   11734:	df000615 	stw	fp,24(sp)
   11738:	df000604 	addi	fp,sp,24
   1173c:	e13ffe15 	stw	r4,-8(fp)
   11740:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11744:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11748:	e0bffe17 	ldw	r2,-8(fp)
   1174c:	1000021e 	bne	r2,zero,11758 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11750:	00801804 	movi	r2,96
   11754:	00002806 	br	117f8 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   11758:	e0bfff17 	ldw	r2,-4(fp)
   1175c:	1000021e 	bne	r2,zero,11768 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   11760:	008017c4 	movi	r2,95
   11764:	00002406 	br	117f8 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11768:	0005303a 	rdctl	r2,status
   1176c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11770:	e0fffd17 	ldw	r3,-12(fp)
   11774:	00bfff84 	movi	r2,-2
   11778:	1884703a 	and	r2,r3,r2
   1177c:	1001703a 	wrctl	status,r2
  
  return context;
   11780:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11784:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   11788:	e0bffe17 	ldw	r2,-8(fp)
   1178c:	10c00417 	ldw	r3,16(r2)
   11790:	e0bffe17 	ldw	r2,-8(fp)
   11794:	10800317 	ldw	r2,12(r2)
   11798:	18800636 	bltu	r3,r2,117b4 <OSMemPut+0x84>
   1179c:	e0bffa17 	ldw	r2,-24(fp)
   117a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   117a4:	e0bffb17 	ldw	r2,-20(fp)
   117a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   117ac:	00801784 	movi	r2,94
   117b0:	00001106 	br	117f8 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   117b4:	e0bffe17 	ldw	r2,-8(fp)
   117b8:	10c00117 	ldw	r3,4(r2)
   117bc:	e0bfff17 	ldw	r2,-4(fp)
   117c0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   117c4:	e0bffe17 	ldw	r2,-8(fp)
   117c8:	e0ffff17 	ldw	r3,-4(fp)
   117cc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   117d0:	e0bffe17 	ldw	r2,-8(fp)
   117d4:	10800417 	ldw	r2,16(r2)
   117d8:	10c00044 	addi	r3,r2,1
   117dc:	e0bffe17 	ldw	r2,-8(fp)
   117e0:	10c00415 	stw	r3,16(r2)
   117e4:	e0bffa17 	ldw	r2,-24(fp)
   117e8:	e0bffc15 	stw	r2,-16(fp)
   117ec:	e0bffc17 	ldw	r2,-16(fp)
   117f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   117f4:	0005883a 	mov	r2,zero
}
   117f8:	e037883a 	mov	sp,fp
   117fc:	df000017 	ldw	fp,0(sp)
   11800:	dec00104 	addi	sp,sp,4
   11804:	f800283a 	ret

00011808 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   11808:	defffa04 	addi	sp,sp,-24
   1180c:	df000515 	stw	fp,20(sp)
   11810:	df000504 	addi	fp,sp,20
   11814:	e13ffe15 	stw	r4,-8(fp)
   11818:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1181c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11820:	e0bffe17 	ldw	r2,-8(fp)
   11824:	1000021e 	bne	r2,zero,11830 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11828:	00801804 	movi	r2,96
   1182c:	00002c06 	br	118e0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   11830:	e0bfff17 	ldw	r2,-4(fp)
   11834:	1000021e 	bne	r2,zero,11840 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   11838:	00801844 	movi	r2,97
   1183c:	00002806 	br	118e0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11840:	0005303a 	rdctl	r2,status
   11844:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11848:	e0fffc17 	ldw	r3,-16(fp)
   1184c:	00bfff84 	movi	r2,-2
   11850:	1884703a 	and	r2,r3,r2
   11854:	1001703a 	wrctl	status,r2
  
  return context;
   11858:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1185c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   11860:	e0bffe17 	ldw	r2,-8(fp)
   11864:	10c00017 	ldw	r3,0(r2)
   11868:	e0bfff17 	ldw	r2,-4(fp)
   1186c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   11870:	e0bffe17 	ldw	r2,-8(fp)
   11874:	10c00117 	ldw	r3,4(r2)
   11878:	e0bfff17 	ldw	r2,-4(fp)
   1187c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   11880:	e0bffe17 	ldw	r2,-8(fp)
   11884:	10c00217 	ldw	r3,8(r2)
   11888:	e0bfff17 	ldw	r2,-4(fp)
   1188c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   11890:	e0bffe17 	ldw	r2,-8(fp)
   11894:	10c00317 	ldw	r3,12(r2)
   11898:	e0bfff17 	ldw	r2,-4(fp)
   1189c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   118a0:	e0bffe17 	ldw	r2,-8(fp)
   118a4:	10c00417 	ldw	r3,16(r2)
   118a8:	e0bfff17 	ldw	r2,-4(fp)
   118ac:	10c00415 	stw	r3,16(r2)
   118b0:	e0bffb17 	ldw	r2,-20(fp)
   118b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   118b8:	e0bffd17 	ldw	r2,-12(fp)
   118bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   118c0:	e0bfff17 	ldw	r2,-4(fp)
   118c4:	10c00317 	ldw	r3,12(r2)
   118c8:	e0bfff17 	ldw	r2,-4(fp)
   118cc:	10800417 	ldw	r2,16(r2)
   118d0:	1887c83a 	sub	r3,r3,r2
   118d4:	e0bfff17 	ldw	r2,-4(fp)
   118d8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   118dc:	0005883a 	mov	r2,zero
}
   118e0:	e037883a 	mov	sp,fp
   118e4:	df000017 	ldw	fp,0(sp)
   118e8:	dec00104 	addi	sp,sp,4
   118ec:	f800283a 	ret

000118f0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   118f0:	defffc04 	addi	sp,sp,-16
   118f4:	dfc00315 	stw	ra,12(sp)
   118f8:	df000215 	stw	fp,8(sp)
   118fc:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   11900:	01430c04 	movi	r5,3120
   11904:	010000f4 	movhi	r4,3
   11908:	2105d804 	addi	r4,r4,5984
   1190c:	000e6fc0 	call	e6fc <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   11910:	008000f4 	movhi	r2,3
   11914:	1085d804 	addi	r2,r2,5984
   11918:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1191c:	e03fff0d 	sth	zero,-4(fp)
   11920:	00001306 	br	11970 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   11924:	e0bfff0b 	ldhu	r2,-4(fp)
   11928:	10800044 	addi	r2,r2,1
   1192c:	10c00d24 	muli	r3,r2,52
   11930:	008000f4 	movhi	r2,3
   11934:	1085d804 	addi	r2,r2,5984
   11938:	1887883a 	add	r3,r3,r2
   1193c:	e0bffe17 	ldw	r2,-8(fp)
   11940:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   11944:	e0bffe17 	ldw	r2,-8(fp)
   11948:	00c00fc4 	movi	r3,63
   1194c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   11950:	e0bffe17 	ldw	r2,-8(fp)
   11954:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   11958:	e0bffe17 	ldw	r2,-8(fp)
   1195c:	10800d04 	addi	r2,r2,52
   11960:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11964:	e0bfff0b 	ldhu	r2,-4(fp)
   11968:	10800044 	addi	r2,r2,1
   1196c:	e0bfff0d 	sth	r2,-4(fp)
   11970:	e0bfff0b 	ldhu	r2,-4(fp)
   11974:	10800ef0 	cmpltui	r2,r2,59
   11978:	103fea1e 	bne	r2,zero,11924 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   1197c:	e0bffe17 	ldw	r2,-8(fp)
   11980:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   11984:	e0bffe17 	ldw	r2,-8(fp)
   11988:	00c00fc4 	movi	r3,63
   1198c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   11990:	e0bffe17 	ldw	r2,-8(fp)
   11994:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   11998:	008000f4 	movhi	r2,3
   1199c:	1085d804 	addi	r2,r2,5984
   119a0:	d0a7f515 	stw	r2,-24620(gp)
#endif
}
   119a4:	0001883a 	nop
   119a8:	e037883a 	mov	sp,fp
   119ac:	dfc00117 	ldw	ra,4(sp)
   119b0:	df000017 	ldw	fp,0(sp)
   119b4:	dec00204 	addi	sp,sp,8
   119b8:	f800283a 	ret

000119bc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   119bc:	defff804 	addi	sp,sp,-32
   119c0:	df000715 	stw	fp,28(sp)
   119c4:	df000704 	addi	fp,sp,28
   119c8:	e13ffe15 	stw	r4,-8(fp)
   119cc:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   119d0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   119d4:	e0bfff17 	ldw	r2,-4(fp)
   119d8:	1000021e 	bne	r2,zero,119e4 <OSQAccept+0x28>
        return ((void *)0);
   119dc:	0005883a 	mov	r2,zero
   119e0:	00004206 	br	11aec <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   119e4:	e0bffe17 	ldw	r2,-8(fp)
   119e8:	1000051e 	bne	r2,zero,11a00 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   119ec:	e0bfff17 	ldw	r2,-4(fp)
   119f0:	00c00104 	movi	r3,4
   119f4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   119f8:	0005883a 	mov	r2,zero
   119fc:	00003b06 	br	11aec <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   11a00:	e0bffe17 	ldw	r2,-8(fp)
   11a04:	10800003 	ldbu	r2,0(r2)
   11a08:	10803fcc 	andi	r2,r2,255
   11a0c:	108000a0 	cmpeqi	r2,r2,2
   11a10:	1000051e 	bne	r2,zero,11a28 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   11a14:	e0bfff17 	ldw	r2,-4(fp)
   11a18:	00c00044 	movi	r3,1
   11a1c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11a20:	0005883a 	mov	r2,zero
   11a24:	00003106 	br	11aec <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a28:	0005303a 	rdctl	r2,status
   11a2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a30:	e0fffd17 	ldw	r3,-12(fp)
   11a34:	00bfff84 	movi	r2,-2
   11a38:	1884703a 	and	r2,r3,r2
   11a3c:	1001703a 	wrctl	status,r2
  
  return context;
   11a40:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   11a44:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   11a48:	e0bffe17 	ldw	r2,-8(fp)
   11a4c:	10800117 	ldw	r2,4(r2)
   11a50:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   11a54:	e0bffc17 	ldw	r2,-16(fp)
   11a58:	1080058b 	ldhu	r2,22(r2)
   11a5c:	10bfffcc 	andi	r2,r2,65535
   11a60:	10001926 	beq	r2,zero,11ac8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   11a64:	e0bffc17 	ldw	r2,-16(fp)
   11a68:	10800417 	ldw	r2,16(r2)
   11a6c:	11000104 	addi	r4,r2,4
   11a70:	e0fffc17 	ldw	r3,-16(fp)
   11a74:	19000415 	stw	r4,16(r3)
   11a78:	10800017 	ldw	r2,0(r2)
   11a7c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   11a80:	e0bffc17 	ldw	r2,-16(fp)
   11a84:	1080058b 	ldhu	r2,22(r2)
   11a88:	10bfffc4 	addi	r2,r2,-1
   11a8c:	1007883a 	mov	r3,r2
   11a90:	e0bffc17 	ldw	r2,-16(fp)
   11a94:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   11a98:	e0bffc17 	ldw	r2,-16(fp)
   11a9c:	10c00417 	ldw	r3,16(r2)
   11aa0:	e0bffc17 	ldw	r2,-16(fp)
   11aa4:	10800217 	ldw	r2,8(r2)
   11aa8:	1880041e 	bne	r3,r2,11abc <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   11aac:	e0bffc17 	ldw	r2,-16(fp)
   11ab0:	10c00117 	ldw	r3,4(r2)
   11ab4:	e0bffc17 	ldw	r2,-16(fp)
   11ab8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   11abc:	e0bfff17 	ldw	r2,-4(fp)
   11ac0:	10000005 	stb	zero,0(r2)
   11ac4:	00000406 	br	11ad8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   11ac8:	e0bfff17 	ldw	r2,-4(fp)
   11acc:	00c007c4 	movi	r3,31
   11ad0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   11ad4:	e03ff915 	stw	zero,-28(fp)
   11ad8:	e0bffa17 	ldw	r2,-24(fp)
   11adc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ae0:	e0bffb17 	ldw	r2,-20(fp)
   11ae4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   11ae8:	e0bff917 	ldw	r2,-28(fp)
}
   11aec:	e037883a 	mov	sp,fp
   11af0:	df000017 	ldw	fp,0(sp)
   11af4:	dec00104 	addi	sp,sp,4
   11af8:	f800283a 	ret

00011afc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   11afc:	defff404 	addi	sp,sp,-48
   11b00:	dfc00b15 	stw	ra,44(sp)
   11b04:	df000a15 	stw	fp,40(sp)
   11b08:	df000a04 	addi	fp,sp,40
   11b0c:	e13ffe15 	stw	r4,-8(fp)
   11b10:	2805883a 	mov	r2,r5
   11b14:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11b18:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   11b1c:	d0a7fb03 	ldbu	r2,-24596(gp)
   11b20:	10803fcc 	andi	r2,r2,255
   11b24:	10000226 	beq	r2,zero,11b30 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   11b28:	0005883a 	mov	r2,zero
   11b2c:	00005906 	br	11c94 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b30:	0005303a 	rdctl	r2,status
   11b34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b38:	e0fffd17 	ldw	r3,-12(fp)
   11b3c:	00bfff84 	movi	r2,-2
   11b40:	1884703a 	and	r2,r3,r2
   11b44:	1001703a 	wrctl	status,r2
  
  return context;
   11b48:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   11b4c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   11b50:	d0a7fa17 	ldw	r2,-24600(gp)
   11b54:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   11b58:	d0a7fa17 	ldw	r2,-24600(gp)
   11b5c:	10000326 	beq	r2,zero,11b6c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   11b60:	d0a7fa17 	ldw	r2,-24600(gp)
   11b64:	10800117 	ldw	r2,4(r2)
   11b68:	d0a7fa15 	stw	r2,-24600(gp)
   11b6c:	e0bff717 	ldw	r2,-36(fp)
   11b70:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b74:	e0bff817 	ldw	r2,-32(fp)
   11b78:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   11b7c:	e0bff617 	ldw	r2,-40(fp)
   11b80:	10004326 	beq	r2,zero,11c90 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b84:	0005303a 	rdctl	r2,status
   11b88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b8c:	e0fff917 	ldw	r3,-28(fp)
   11b90:	00bfff84 	movi	r2,-2
   11b94:	1884703a 	and	r2,r3,r2
   11b98:	1001703a 	wrctl	status,r2
  
  return context;
   11b9c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   11ba0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   11ba4:	d0a7f717 	ldw	r2,-24612(gp)
   11ba8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   11bac:	e0bffb17 	ldw	r2,-20(fp)
   11bb0:	10002d26 	beq	r2,zero,11c68 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   11bb4:	d0a7f717 	ldw	r2,-24612(gp)
   11bb8:	10800017 	ldw	r2,0(r2)
   11bbc:	d0a7f715 	stw	r2,-24612(gp)
   11bc0:	e0bff717 	ldw	r2,-36(fp)
   11bc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11bc8:	e0bffa17 	ldw	r2,-24(fp)
   11bcc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   11bd0:	e0bffb17 	ldw	r2,-20(fp)
   11bd4:	e0fffe17 	ldw	r3,-8(fp)
   11bd8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   11bdc:	e0bfff0b 	ldhu	r2,-4(fp)
   11be0:	1085883a 	add	r2,r2,r2
   11be4:	1085883a 	add	r2,r2,r2
   11be8:	1007883a 	mov	r3,r2
   11bec:	e0bffe17 	ldw	r2,-8(fp)
   11bf0:	10c7883a 	add	r3,r2,r3
   11bf4:	e0bffb17 	ldw	r2,-20(fp)
   11bf8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   11bfc:	e0bffb17 	ldw	r2,-20(fp)
   11c00:	e0fffe17 	ldw	r3,-8(fp)
   11c04:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   11c08:	e0bffb17 	ldw	r2,-20(fp)
   11c0c:	e0fffe17 	ldw	r3,-8(fp)
   11c10:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   11c14:	e0bffb17 	ldw	r2,-20(fp)
   11c18:	e0ffff0b 	ldhu	r3,-4(fp)
   11c1c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   11c20:	e0bffb17 	ldw	r2,-20(fp)
   11c24:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   11c28:	e0bff617 	ldw	r2,-40(fp)
   11c2c:	00c00084 	movi	r3,2
   11c30:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   11c34:	e0bff617 	ldw	r2,-40(fp)
   11c38:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   11c3c:	e0bff617 	ldw	r2,-40(fp)
   11c40:	e0fffb17 	ldw	r3,-20(fp)
   11c44:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   11c48:	e0bff617 	ldw	r2,-40(fp)
   11c4c:	00c00fc4 	movi	r3,63
   11c50:	10c00445 	stb	r3,17(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   11c54:	e0bff617 	ldw	r2,-40(fp)
   11c58:	10000485 	stb	zero,18(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   11c5c:	e13ff617 	ldw	r4,-40(fp)
   11c60:	000e31c0 	call	e31c <OS_EventWaitListInit>
   11c64:	00000a06 	br	11c90 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   11c68:	d0e7fa17 	ldw	r3,-24600(gp)
   11c6c:	e0bff617 	ldw	r2,-40(fp)
   11c70:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   11c74:	e0bff617 	ldw	r2,-40(fp)
   11c78:	d0a7fa15 	stw	r2,-24600(gp)
   11c7c:	e0bff717 	ldw	r2,-36(fp)
   11c80:	e0bffc15 	stw	r2,-16(fp)
   11c84:	e0bffc17 	ldw	r2,-16(fp)
   11c88:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   11c8c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   11c90:	e0bff617 	ldw	r2,-40(fp)
}
   11c94:	e037883a 	mov	sp,fp
   11c98:	dfc00117 	ldw	ra,4(sp)
   11c9c:	df000017 	ldw	fp,0(sp)
   11ca0:	dec00204 	addi	sp,sp,8
   11ca4:	f800283a 	ret

00011ca8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   11ca8:	defff204 	addi	sp,sp,-56
   11cac:	dfc00d15 	stw	ra,52(sp)
   11cb0:	df000c15 	stw	fp,48(sp)
   11cb4:	df000c04 	addi	fp,sp,48
   11cb8:	e13ffd15 	stw	r4,-12(fp)
   11cbc:	2805883a 	mov	r2,r5
   11cc0:	e1bfff15 	stw	r6,-4(fp)
   11cc4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11cc8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11ccc:	e0bfff17 	ldw	r2,-4(fp)
   11cd0:	1000021e 	bne	r2,zero,11cdc <OSQDel+0x34>
        return (pevent);
   11cd4:	e0bffd17 	ldw	r2,-12(fp)
   11cd8:	00008e06 	br	11f14 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   11cdc:	e0bffd17 	ldw	r2,-12(fp)
   11ce0:	1000051e 	bne	r2,zero,11cf8 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   11ce4:	e0bfff17 	ldw	r2,-4(fp)
   11ce8:	00c00104 	movi	r3,4
   11cec:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11cf0:	e0bffd17 	ldw	r2,-12(fp)
   11cf4:	00008706 	br	11f14 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   11cf8:	e0bffd17 	ldw	r2,-12(fp)
   11cfc:	10800003 	ldbu	r2,0(r2)
   11d00:	10803fcc 	andi	r2,r2,255
   11d04:	108000a0 	cmpeqi	r2,r2,2
   11d08:	1000051e 	bne	r2,zero,11d20 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   11d0c:	e0bfff17 	ldw	r2,-4(fp)
   11d10:	00c00044 	movi	r3,1
   11d14:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11d18:	e0bffd17 	ldw	r2,-12(fp)
   11d1c:	00007d06 	br	11f14 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   11d20:	d0a7fb03 	ldbu	r2,-24596(gp)
   11d24:	10803fcc 	andi	r2,r2,255
   11d28:	10000526 	beq	r2,zero,11d40 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   11d2c:	e0bfff17 	ldw	r2,-4(fp)
   11d30:	00c003c4 	movi	r3,15
   11d34:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11d38:	e0bffd17 	ldw	r2,-12(fp)
   11d3c:	00007506 	br	11f14 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d40:	0005303a 	rdctl	r2,status
   11d44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d48:	e0fffc17 	ldw	r3,-16(fp)
   11d4c:	00bfff84 	movi	r2,-2
   11d50:	1884703a 	and	r2,r3,r2
   11d54:	1001703a 	wrctl	status,r2
  
  return context;
   11d58:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11d5c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   11d60:	e0bffd17 	ldw	r2,-12(fp)
   11d64:	10800283 	ldbu	r2,10(r2)
   11d68:	10803fcc 	andi	r2,r2,255
   11d6c:	10000326 	beq	r2,zero,11d7c <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   11d70:	00800044 	movi	r2,1
   11d74:	e0bff405 	stb	r2,-48(fp)
   11d78:	00000106 	br	11d80 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   11d7c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   11d80:	e0bffe03 	ldbu	r2,-8(fp)
   11d84:	10000326 	beq	r2,zero,11d94 <OSQDel+0xec>
   11d88:	10800060 	cmpeqi	r2,r2,1
   11d8c:	1000301e 	bne	r2,zero,11e50 <OSQDel+0x1a8>
   11d90:	00005506 	br	11ee8 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   11d94:	e0bff403 	ldbu	r2,-48(fp)
   11d98:	10001e1e 	bne	r2,zero,11e14 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   11d9c:	e0bffd17 	ldw	r2,-12(fp)
   11da0:	00c00fc4 	movi	r3,63
   11da4:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   11da8:	e0bffd17 	ldw	r2,-12(fp)
   11dac:	10000485 	stb	zero,18(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   11db0:	e0bffd17 	ldw	r2,-12(fp)
   11db4:	10800117 	ldw	r2,4(r2)
   11db8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   11dbc:	d0e7f717 	ldw	r3,-24612(gp)
   11dc0:	e0bff817 	ldw	r2,-32(fp)
   11dc4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   11dc8:	e0bff817 	ldw	r2,-32(fp)
   11dcc:	d0a7f715 	stw	r2,-24612(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   11dd0:	e0bffd17 	ldw	r2,-12(fp)
   11dd4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   11dd8:	d0e7fa17 	ldw	r3,-24600(gp)
   11ddc:	e0bffd17 	ldw	r2,-12(fp)
   11de0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   11de4:	e0bffd17 	ldw	r2,-12(fp)
   11de8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   11dec:	e0bffd17 	ldw	r2,-12(fp)
   11df0:	d0a7fa15 	stw	r2,-24600(gp)
   11df4:	e0bff617 	ldw	r2,-40(fp)
   11df8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11dfc:	e0bff717 	ldw	r2,-36(fp)
   11e00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   11e04:	e0bfff17 	ldw	r2,-4(fp)
   11e08:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   11e0c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   11e10:	00003f06 	br	11f10 <OSQDel+0x268>
   11e14:	e0bff617 	ldw	r2,-40(fp)
   11e18:	e0bff915 	stw	r2,-28(fp)
   11e1c:	e0bff917 	ldw	r2,-28(fp)
   11e20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   11e24:	e0bfff17 	ldw	r2,-4(fp)
   11e28:	00c01244 	movi	r3,73
   11e2c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   11e30:	e0bffd17 	ldw	r2,-12(fp)
   11e34:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   11e38:	00003506 	br	11f10 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   11e3c:	000f883a 	mov	r7,zero
   11e40:	01800104 	movi	r6,4
   11e44:	000b883a 	mov	r5,zero
   11e48:	e13ffd17 	ldw	r4,-12(fp)
   11e4c:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   11e50:	e0bffd17 	ldw	r2,-12(fp)
   11e54:	10800283 	ldbu	r2,10(r2)
   11e58:	10803fcc 	andi	r2,r2,255
   11e5c:	103ff71e 	bne	r2,zero,11e3c <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   11e60:	e0bffd17 	ldw	r2,-12(fp)
   11e64:	00c00fc4 	movi	r3,63
   11e68:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   11e6c:	e0bffd17 	ldw	r2,-12(fp)
   11e70:	10000485 	stb	zero,18(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   11e74:	e0bffd17 	ldw	r2,-12(fp)
   11e78:	10800117 	ldw	r2,4(r2)
   11e7c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   11e80:	d0e7f717 	ldw	r3,-24612(gp)
   11e84:	e0bff817 	ldw	r2,-32(fp)
   11e88:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   11e8c:	e0bff817 	ldw	r2,-32(fp)
   11e90:	d0a7f715 	stw	r2,-24612(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   11e94:	e0bffd17 	ldw	r2,-12(fp)
   11e98:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   11e9c:	d0e7fa17 	ldw	r3,-24600(gp)
   11ea0:	e0bffd17 	ldw	r2,-12(fp)
   11ea4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   11ea8:	e0bffd17 	ldw	r2,-12(fp)
   11eac:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   11eb0:	e0bffd17 	ldw	r2,-12(fp)
   11eb4:	d0a7fa15 	stw	r2,-24600(gp)
   11eb8:	e0bff617 	ldw	r2,-40(fp)
   11ebc:	e0bffa15 	stw	r2,-24(fp)
   11ec0:	e0bffa17 	ldw	r2,-24(fp)
   11ec4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   11ec8:	e0bff403 	ldbu	r2,-48(fp)
   11ecc:	10800058 	cmpnei	r2,r2,1
   11ed0:	1000011e 	bne	r2,zero,11ed8 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   11ed4:	000e7b80 	call	e7b8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   11ed8:	e0bfff17 	ldw	r2,-4(fp)
   11edc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   11ee0:	e03ff515 	stw	zero,-44(fp)
             break;
   11ee4:	00000a06 	br	11f10 <OSQDel+0x268>
   11ee8:	e0bff617 	ldw	r2,-40(fp)
   11eec:	e0bffb15 	stw	r2,-20(fp)
   11ef0:	e0bffb17 	ldw	r2,-20(fp)
   11ef4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   11ef8:	e0bfff17 	ldw	r2,-4(fp)
   11efc:	00c001c4 	movi	r3,7
   11f00:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   11f04:	e0bffd17 	ldw	r2,-12(fp)
   11f08:	e0bff515 	stw	r2,-44(fp)
             break;
   11f0c:	0001883a 	nop
    }
    return (pevent_return);
   11f10:	e0bff517 	ldw	r2,-44(fp)
}
   11f14:	e037883a 	mov	sp,fp
   11f18:	dfc00117 	ldw	ra,4(sp)
   11f1c:	df000017 	ldw	fp,0(sp)
   11f20:	dec00204 	addi	sp,sp,8
   11f24:	f800283a 	ret

00011f28 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   11f28:	defffa04 	addi	sp,sp,-24
   11f2c:	df000515 	stw	fp,20(sp)
   11f30:	df000504 	addi	fp,sp,20
   11f34:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11f38:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   11f3c:	e0bfff17 	ldw	r2,-4(fp)
   11f40:	1000021e 	bne	r2,zero,11f4c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   11f44:	00800104 	movi	r2,4
   11f48:	00002106 	br	11fd0 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   11f4c:	e0bfff17 	ldw	r2,-4(fp)
   11f50:	10800003 	ldbu	r2,0(r2)
   11f54:	10803fcc 	andi	r2,r2,255
   11f58:	108000a0 	cmpeqi	r2,r2,2
   11f5c:	1000021e 	bne	r2,zero,11f68 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   11f60:	00800044 	movi	r2,1
   11f64:	00001a06 	br	11fd0 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f68:	0005303a 	rdctl	r2,status
   11f6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f70:	e0fffd17 	ldw	r3,-12(fp)
   11f74:	00bfff84 	movi	r2,-2
   11f78:	1884703a 	and	r2,r3,r2
   11f7c:	1001703a 	wrctl	status,r2
  
  return context;
   11f80:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11f84:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   11f88:	e0bfff17 	ldw	r2,-4(fp)
   11f8c:	10800117 	ldw	r2,4(r2)
   11f90:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   11f94:	e0bffc17 	ldw	r2,-16(fp)
   11f98:	10c00117 	ldw	r3,4(r2)
   11f9c:	e0bffc17 	ldw	r2,-16(fp)
   11fa0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   11fa4:	e0bffc17 	ldw	r2,-16(fp)
   11fa8:	10c00117 	ldw	r3,4(r2)
   11fac:	e0bffc17 	ldw	r2,-16(fp)
   11fb0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   11fb4:	e0bffc17 	ldw	r2,-16(fp)
   11fb8:	1000058d 	sth	zero,22(r2)
   11fbc:	e0bffb17 	ldw	r2,-20(fp)
   11fc0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11fc4:	e0bffe17 	ldw	r2,-8(fp)
   11fc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   11fcc:	0005883a 	mov	r2,zero
}
   11fd0:	e037883a 	mov	sp,fp
   11fd4:	df000017 	ldw	fp,0(sp)
   11fd8:	dec00104 	addi	sp,sp,4
   11fdc:	f800283a 	ret

00011fe0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   11fe0:	defff304 	addi	sp,sp,-52
   11fe4:	dfc00c15 	stw	ra,48(sp)
   11fe8:	df000b15 	stw	fp,44(sp)
   11fec:	df000b04 	addi	fp,sp,44
   11ff0:	e13ffd15 	stw	r4,-12(fp)
   11ff4:	2805883a 	mov	r2,r5
   11ff8:	e1bfff15 	stw	r6,-4(fp)
   11ffc:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12000:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12004:	e0bfff17 	ldw	r2,-4(fp)
   12008:	1000021e 	bne	r2,zero,12014 <OSQPend+0x34>
        return ((void *)0);
   1200c:	0005883a 	mov	r2,zero
   12010:	00009106 	br	12258 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   12014:	e0bffd17 	ldw	r2,-12(fp)
   12018:	1000051e 	bne	r2,zero,12030 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1201c:	e0bfff17 	ldw	r2,-4(fp)
   12020:	00c00104 	movi	r3,4
   12024:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12028:	0005883a 	mov	r2,zero
   1202c:	00008a06 	br	12258 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   12030:	e0bffd17 	ldw	r2,-12(fp)
   12034:	10800003 	ldbu	r2,0(r2)
   12038:	10803fcc 	andi	r2,r2,255
   1203c:	108000a0 	cmpeqi	r2,r2,2
   12040:	1000051e 	bne	r2,zero,12058 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12044:	e0bfff17 	ldw	r2,-4(fp)
   12048:	00c00044 	movi	r3,1
   1204c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12050:	0005883a 	mov	r2,zero
   12054:	00008006 	br	12258 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   12058:	d0a7fb03 	ldbu	r2,-24596(gp)
   1205c:	10803fcc 	andi	r2,r2,255
   12060:	10000526 	beq	r2,zero,12078 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   12064:	e0bfff17 	ldw	r2,-4(fp)
   12068:	00c00084 	movi	r3,2
   1206c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12070:	0005883a 	mov	r2,zero
   12074:	00007806 	br	12258 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   12078:	d0a7e903 	ldbu	r2,-24668(gp)
   1207c:	10803fcc 	andi	r2,r2,255
   12080:	10000526 	beq	r2,zero,12098 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   12084:	e0bfff17 	ldw	r2,-4(fp)
   12088:	00c00344 	movi	r3,13
   1208c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12090:	0005883a 	mov	r2,zero
   12094:	00007006 	br	12258 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12098:	0005303a 	rdctl	r2,status
   1209c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   120a0:	e0fffc17 	ldw	r3,-16(fp)
   120a4:	00bfff84 	movi	r2,-2
   120a8:	1884703a 	and	r2,r3,r2
   120ac:	1001703a 	wrctl	status,r2
  
  return context;
   120b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   120b4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   120b8:	e0bffd17 	ldw	r2,-12(fp)
   120bc:	10800117 	ldw	r2,4(r2)
   120c0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   120c4:	e0bff817 	ldw	r2,-32(fp)
   120c8:	1080058b 	ldhu	r2,22(r2)
   120cc:	10bfffcc 	andi	r2,r2,65535
   120d0:	10001e26 	beq	r2,zero,1214c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   120d4:	e0bff817 	ldw	r2,-32(fp)
   120d8:	10800417 	ldw	r2,16(r2)
   120dc:	11000104 	addi	r4,r2,4
   120e0:	e0fff817 	ldw	r3,-32(fp)
   120e4:	19000415 	stw	r4,16(r3)
   120e8:	10800017 	ldw	r2,0(r2)
   120ec:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   120f0:	e0bff817 	ldw	r2,-32(fp)
   120f4:	1080058b 	ldhu	r2,22(r2)
   120f8:	10bfffc4 	addi	r2,r2,-1
   120fc:	1007883a 	mov	r3,r2
   12100:	e0bff817 	ldw	r2,-32(fp)
   12104:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   12108:	e0bff817 	ldw	r2,-32(fp)
   1210c:	10c00417 	ldw	r3,16(r2)
   12110:	e0bff817 	ldw	r2,-32(fp)
   12114:	10800217 	ldw	r2,8(r2)
   12118:	1880041e 	bne	r3,r2,1212c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   1211c:	e0bff817 	ldw	r2,-32(fp)
   12120:	10c00117 	ldw	r3,4(r2)
   12124:	e0bff817 	ldw	r2,-32(fp)
   12128:	10c00415 	stw	r3,16(r2)
   1212c:	e0bff617 	ldw	r2,-40(fp)
   12130:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12134:	e0bff717 	ldw	r2,-36(fp)
   12138:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1213c:	e0bfff17 	ldw	r2,-4(fp)
   12140:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   12144:	e0bff517 	ldw	r2,-44(fp)
   12148:	00004306 	br	12258 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   1214c:	d0a7fc17 	ldw	r2,-24592(gp)
   12150:	d0e7fc17 	ldw	r3,-24592(gp)
   12154:	18c00c03 	ldbu	r3,48(r3)
   12158:	18c00114 	ori	r3,r3,4
   1215c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12160:	d0a7fc17 	ldw	r2,-24592(gp)
   12164:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   12168:	d0a7fc17 	ldw	r2,-24592(gp)
   1216c:	e0fffe0b 	ldhu	r3,-8(fp)
   12170:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   12174:	e13ffd17 	ldw	r4,-12(fp)
   12178:	000df040 	call	df04 <OS_EventTaskWait>
   1217c:	e0bff617 	ldw	r2,-40(fp)
   12180:	e0bffb15 	stw	r2,-20(fp)
   12184:	e0bffb17 	ldw	r2,-20(fp)
   12188:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   1218c:	000e7b80 	call	e7b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12190:	0005303a 	rdctl	r2,status
   12194:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12198:	e0fff917 	ldw	r3,-28(fp)
   1219c:	00bfff84 	movi	r2,-2
   121a0:	1884703a 	and	r2,r3,r2
   121a4:	1001703a 	wrctl	status,r2
  
  return context;
   121a8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   121ac:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   121b0:	d0a7fc17 	ldw	r2,-24592(gp)
   121b4:	10800c43 	ldbu	r2,49(r2)
   121b8:	10803fcc 	andi	r2,r2,255
   121bc:	10000326 	beq	r2,zero,121cc <OSQPend+0x1ec>
   121c0:	108000a0 	cmpeqi	r2,r2,2
   121c4:	1000071e 	bne	r2,zero,121e4 <OSQPend+0x204>
   121c8:	00000b06 	br	121f8 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   121cc:	d0a7fc17 	ldw	r2,-24592(gp)
   121d0:	10800917 	ldw	r2,36(r2)
   121d4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   121d8:	e0bfff17 	ldw	r2,-4(fp)
   121dc:	10000005 	stb	zero,0(r2)
             break;
   121e0:	00000e06 	br	1221c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   121e4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   121e8:	e0bfff17 	ldw	r2,-4(fp)
   121ec:	00c00384 	movi	r3,14
   121f0:	10c00005 	stb	r3,0(r2)
             break;
   121f4:	00000906 	br	1221c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   121f8:	d0a7fc17 	ldw	r2,-24592(gp)
   121fc:	e17ffd17 	ldw	r5,-12(fp)
   12200:	1009883a 	mov	r4,r2
   12204:	000e1640 	call	e164 <OS_EventTaskRemove>
             pmsg = (void *)0;
   12208:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1220c:	e0bfff17 	ldw	r2,-4(fp)
   12210:	00c00284 	movi	r3,10
   12214:	10c00005 	stb	r3,0(r2)
             break;
   12218:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1221c:	d0a7fc17 	ldw	r2,-24592(gp)
   12220:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   12224:	d0a7fc17 	ldw	r2,-24592(gp)
   12228:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1222c:	d0a7fc17 	ldw	r2,-24592(gp)
   12230:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   12234:	d0a7fc17 	ldw	r2,-24592(gp)
   12238:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1223c:	d0a7fc17 	ldw	r2,-24592(gp)
   12240:	10000915 	stw	zero,36(r2)
   12244:	e0bff617 	ldw	r2,-40(fp)
   12248:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1224c:	e0bffa17 	ldw	r2,-24(fp)
   12250:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   12254:	e0bff517 	ldw	r2,-44(fp)
}
   12258:	e037883a 	mov	sp,fp
   1225c:	dfc00117 	ldw	ra,4(sp)
   12260:	df000017 	ldw	fp,0(sp)
   12264:	dec00204 	addi	sp,sp,8
   12268:	f800283a 	ret

0001226c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1226c:	defff604 	addi	sp,sp,-40
   12270:	dfc00915 	stw	ra,36(sp)
   12274:	df000815 	stw	fp,32(sp)
   12278:	df000804 	addi	fp,sp,32
   1227c:	e13ffd15 	stw	r4,-12(fp)
   12280:	2805883a 	mov	r2,r5
   12284:	e1bfff15 	stw	r6,-4(fp)
   12288:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1228c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12290:	e0bfff17 	ldw	r2,-4(fp)
   12294:	1000021e 	bne	r2,zero,122a0 <OSQPendAbort+0x34>
        return (0);
   12298:	0005883a 	mov	r2,zero
   1229c:	00004906 	br	123c4 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   122a0:	e0bffd17 	ldw	r2,-12(fp)
   122a4:	1000051e 	bne	r2,zero,122bc <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   122a8:	e0bfff17 	ldw	r2,-4(fp)
   122ac:	00c00104 	movi	r3,4
   122b0:	10c00005 	stb	r3,0(r2)
        return (0);
   122b4:	0005883a 	mov	r2,zero
   122b8:	00004206 	br	123c4 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   122bc:	e0bffd17 	ldw	r2,-12(fp)
   122c0:	10800003 	ldbu	r2,0(r2)
   122c4:	10803fcc 	andi	r2,r2,255
   122c8:	108000a0 	cmpeqi	r2,r2,2
   122cc:	1000051e 	bne	r2,zero,122e4 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   122d0:	e0bfff17 	ldw	r2,-4(fp)
   122d4:	00c00044 	movi	r3,1
   122d8:	10c00005 	stb	r3,0(r2)
        return (0);
   122dc:	0005883a 	mov	r2,zero
   122e0:	00003806 	br	123c4 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   122e4:	0005303a 	rdctl	r2,status
   122e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   122ec:	e0fffc17 	ldw	r3,-16(fp)
   122f0:	00bfff84 	movi	r2,-2
   122f4:	1884703a 	and	r2,r3,r2
   122f8:	1001703a 	wrctl	status,r2
  
  return context;
   122fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12300:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   12304:	e0bffd17 	ldw	r2,-12(fp)
   12308:	10800283 	ldbu	r2,10(r2)
   1230c:	10803fcc 	andi	r2,r2,255
   12310:	10002526 	beq	r2,zero,123a8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   12314:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   12318:	e0bffe03 	ldbu	r2,-8(fp)
   1231c:	10800060 	cmpeqi	r2,r2,1
   12320:	10000e26 	beq	r2,zero,1235c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12324:	00000806 	br	12348 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12328:	01c00084 	movi	r7,2
   1232c:	01800104 	movi	r6,4
   12330:	000b883a 	mov	r5,zero
   12334:	e13ffd17 	ldw	r4,-12(fp)
   12338:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
                     nbr_tasks++;
   1233c:	e0bff803 	ldbu	r2,-32(fp)
   12340:	10800044 	addi	r2,r2,1
   12344:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12348:	e0bffd17 	ldw	r2,-12(fp)
   1234c:	10800283 	ldbu	r2,10(r2)
   12350:	10803fcc 	andi	r2,r2,255
   12354:	103ff41e 	bne	r2,zero,12328 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   12358:	00000906 	br	12380 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1235c:	01c00084 	movi	r7,2
   12360:	01800104 	movi	r6,4
   12364:	000b883a 	mov	r5,zero
   12368:	e13ffd17 	ldw	r4,-12(fp)
   1236c:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
                 nbr_tasks++;
   12370:	e0bff803 	ldbu	r2,-32(fp)
   12374:	10800044 	addi	r2,r2,1
   12378:	e0bff805 	stb	r2,-32(fp)
                 break;
   1237c:	0001883a 	nop
   12380:	e0bff917 	ldw	r2,-28(fp)
   12384:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12388:	e0bffa17 	ldw	r2,-24(fp)
   1238c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   12390:	000e7b80 	call	e7b8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   12394:	e0bfff17 	ldw	r2,-4(fp)
   12398:	00c00384 	movi	r3,14
   1239c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   123a0:	e0bff803 	ldbu	r2,-32(fp)
   123a4:	00000706 	br	123c4 <OSQPendAbort+0x158>
   123a8:	e0bff917 	ldw	r2,-28(fp)
   123ac:	e0bffb15 	stw	r2,-20(fp)
   123b0:	e0bffb17 	ldw	r2,-20(fp)
   123b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   123b8:	e0bfff17 	ldw	r2,-4(fp)
   123bc:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   123c0:	0005883a 	mov	r2,zero
}
   123c4:	e037883a 	mov	sp,fp
   123c8:	dfc00117 	ldw	ra,4(sp)
   123cc:	df000017 	ldw	fp,0(sp)
   123d0:	dec00204 	addi	sp,sp,8
   123d4:	f800283a 	ret

000123d8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   123d8:	defff604 	addi	sp,sp,-40
   123dc:	dfc00915 	stw	ra,36(sp)
   123e0:	df000815 	stw	fp,32(sp)
   123e4:	df000804 	addi	fp,sp,32
   123e8:	e13ffe15 	stw	r4,-8(fp)
   123ec:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   123f0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   123f4:	e0bffe17 	ldw	r2,-8(fp)
   123f8:	1000021e 	bne	r2,zero,12404 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   123fc:	00800104 	movi	r2,4
   12400:	00004a06 	br	1252c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12404:	e0bffe17 	ldw	r2,-8(fp)
   12408:	10800003 	ldbu	r2,0(r2)
   1240c:	10803fcc 	andi	r2,r2,255
   12410:	108000a0 	cmpeqi	r2,r2,2
   12414:	1000021e 	bne	r2,zero,12420 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   12418:	00800044 	movi	r2,1
   1241c:	00004306 	br	1252c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12420:	0005303a 	rdctl	r2,status
   12424:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12428:	e0fffd17 	ldw	r3,-12(fp)
   1242c:	00bfff84 	movi	r2,-2
   12430:	1884703a 	and	r2,r3,r2
   12434:	1001703a 	wrctl	status,r2
  
  return context;
   12438:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1243c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   12440:	e0bffe17 	ldw	r2,-8(fp)
   12444:	10800283 	ldbu	r2,10(r2)
   12448:	10803fcc 	andi	r2,r2,255
   1244c:	10000c26 	beq	r2,zero,12480 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12450:	000f883a 	mov	r7,zero
   12454:	01800104 	movi	r6,4
   12458:	e17fff17 	ldw	r5,-4(fp)
   1245c:	e13ffe17 	ldw	r4,-8(fp)
   12460:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
   12464:	e0bff817 	ldw	r2,-32(fp)
   12468:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1246c:	e0bff917 	ldw	r2,-28(fp)
   12470:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   12474:	000e7b80 	call	e7b8 <OS_Sched>
        return (OS_ERR_NONE);
   12478:	0005883a 	mov	r2,zero
   1247c:	00002b06 	br	1252c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   12480:	e0bffe17 	ldw	r2,-8(fp)
   12484:	10800117 	ldw	r2,4(r2)
   12488:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   1248c:	e0bffb17 	ldw	r2,-20(fp)
   12490:	10c0058b 	ldhu	r3,22(r2)
   12494:	e0bffb17 	ldw	r2,-20(fp)
   12498:	1080050b 	ldhu	r2,20(r2)
   1249c:	18ffffcc 	andi	r3,r3,65535
   124a0:	10bfffcc 	andi	r2,r2,65535
   124a4:	18800636 	bltu	r3,r2,124c0 <OSQPost+0xe8>
   124a8:	e0bff817 	ldw	r2,-32(fp)
   124ac:	e0bffa15 	stw	r2,-24(fp)
   124b0:	e0bffa17 	ldw	r2,-24(fp)
   124b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   124b8:	00800784 	movi	r2,30
   124bc:	00001b06 	br	1252c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   124c0:	e0bffb17 	ldw	r2,-20(fp)
   124c4:	10800317 	ldw	r2,12(r2)
   124c8:	11000104 	addi	r4,r2,4
   124cc:	e0fffb17 	ldw	r3,-20(fp)
   124d0:	19000315 	stw	r4,12(r3)
   124d4:	e0ffff17 	ldw	r3,-4(fp)
   124d8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   124dc:	e0bffb17 	ldw	r2,-20(fp)
   124e0:	1080058b 	ldhu	r2,22(r2)
   124e4:	10800044 	addi	r2,r2,1
   124e8:	1007883a 	mov	r3,r2
   124ec:	e0bffb17 	ldw	r2,-20(fp)
   124f0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   124f4:	e0bffb17 	ldw	r2,-20(fp)
   124f8:	10c00317 	ldw	r3,12(r2)
   124fc:	e0bffb17 	ldw	r2,-20(fp)
   12500:	10800217 	ldw	r2,8(r2)
   12504:	1880041e 	bne	r3,r2,12518 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   12508:	e0bffb17 	ldw	r2,-20(fp)
   1250c:	10c00117 	ldw	r3,4(r2)
   12510:	e0bffb17 	ldw	r2,-20(fp)
   12514:	10c00315 	stw	r3,12(r2)
   12518:	e0bff817 	ldw	r2,-32(fp)
   1251c:	e0bffc15 	stw	r2,-16(fp)
   12520:	e0bffc17 	ldw	r2,-16(fp)
   12524:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12528:	0005883a 	mov	r2,zero
}
   1252c:	e037883a 	mov	sp,fp
   12530:	dfc00117 	ldw	ra,4(sp)
   12534:	df000017 	ldw	fp,0(sp)
   12538:	dec00204 	addi	sp,sp,8
   1253c:	f800283a 	ret

00012540 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   12540:	defff604 	addi	sp,sp,-40
   12544:	dfc00915 	stw	ra,36(sp)
   12548:	df000815 	stw	fp,32(sp)
   1254c:	df000804 	addi	fp,sp,32
   12550:	e13ffe15 	stw	r4,-8(fp)
   12554:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12558:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1255c:	e0bffe17 	ldw	r2,-8(fp)
   12560:	1000021e 	bne	r2,zero,1256c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12564:	00800104 	movi	r2,4
   12568:	00004c06 	br	1269c <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1256c:	e0bffe17 	ldw	r2,-8(fp)
   12570:	10800003 	ldbu	r2,0(r2)
   12574:	10803fcc 	andi	r2,r2,255
   12578:	108000a0 	cmpeqi	r2,r2,2
   1257c:	1000021e 	bne	r2,zero,12588 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   12580:	00800044 	movi	r2,1
   12584:	00004506 	br	1269c <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12588:	0005303a 	rdctl	r2,status
   1258c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12590:	e0fffd17 	ldw	r3,-12(fp)
   12594:	00bfff84 	movi	r2,-2
   12598:	1884703a 	and	r2,r3,r2
   1259c:	1001703a 	wrctl	status,r2
  
  return context;
   125a0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   125a4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   125a8:	e0bffe17 	ldw	r2,-8(fp)
   125ac:	10800283 	ldbu	r2,10(r2)
   125b0:	10803fcc 	andi	r2,r2,255
   125b4:	10000c26 	beq	r2,zero,125e8 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   125b8:	000f883a 	mov	r7,zero
   125bc:	01800104 	movi	r6,4
   125c0:	e17fff17 	ldw	r5,-4(fp)
   125c4:	e13ffe17 	ldw	r4,-8(fp)
   125c8:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
   125cc:	e0bff817 	ldw	r2,-32(fp)
   125d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   125d4:	e0bff917 	ldw	r2,-28(fp)
   125d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   125dc:	000e7b80 	call	e7b8 <OS_Sched>
        return (OS_ERR_NONE);
   125e0:	0005883a 	mov	r2,zero
   125e4:	00002d06 	br	1269c <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   125e8:	e0bffe17 	ldw	r2,-8(fp)
   125ec:	10800117 	ldw	r2,4(r2)
   125f0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   125f4:	e0bffb17 	ldw	r2,-20(fp)
   125f8:	10c0058b 	ldhu	r3,22(r2)
   125fc:	e0bffb17 	ldw	r2,-20(fp)
   12600:	1080050b 	ldhu	r2,20(r2)
   12604:	18ffffcc 	andi	r3,r3,65535
   12608:	10bfffcc 	andi	r2,r2,65535
   1260c:	18800636 	bltu	r3,r2,12628 <OSQPostFront+0xe8>
   12610:	e0bff817 	ldw	r2,-32(fp)
   12614:	e0bffa15 	stw	r2,-24(fp)
   12618:	e0bffa17 	ldw	r2,-24(fp)
   1261c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12620:	00800784 	movi	r2,30
   12624:	00001d06 	br	1269c <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   12628:	e0bffb17 	ldw	r2,-20(fp)
   1262c:	10c00417 	ldw	r3,16(r2)
   12630:	e0bffb17 	ldw	r2,-20(fp)
   12634:	10800117 	ldw	r2,4(r2)
   12638:	1880041e 	bne	r3,r2,1264c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   1263c:	e0bffb17 	ldw	r2,-20(fp)
   12640:	10c00217 	ldw	r3,8(r2)
   12644:	e0bffb17 	ldw	r2,-20(fp)
   12648:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   1264c:	e0bffb17 	ldw	r2,-20(fp)
   12650:	10800417 	ldw	r2,16(r2)
   12654:	10ffff04 	addi	r3,r2,-4
   12658:	e0bffb17 	ldw	r2,-20(fp)
   1265c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   12660:	e0bffb17 	ldw	r2,-20(fp)
   12664:	10800417 	ldw	r2,16(r2)
   12668:	e0ffff17 	ldw	r3,-4(fp)
   1266c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12670:	e0bffb17 	ldw	r2,-20(fp)
   12674:	1080058b 	ldhu	r2,22(r2)
   12678:	10800044 	addi	r2,r2,1
   1267c:	1007883a 	mov	r3,r2
   12680:	e0bffb17 	ldw	r2,-20(fp)
   12684:	10c0058d 	sth	r3,22(r2)
   12688:	e0bff817 	ldw	r2,-32(fp)
   1268c:	e0bffc15 	stw	r2,-16(fp)
   12690:	e0bffc17 	ldw	r2,-16(fp)
   12694:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12698:	0005883a 	mov	r2,zero
}
   1269c:	e037883a 	mov	sp,fp
   126a0:	dfc00117 	ldw	ra,4(sp)
   126a4:	df000017 	ldw	fp,0(sp)
   126a8:	dec00204 	addi	sp,sp,8
   126ac:	f800283a 	ret

000126b0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   126b0:	defff504 	addi	sp,sp,-44
   126b4:	dfc00a15 	stw	ra,40(sp)
   126b8:	df000915 	stw	fp,36(sp)
   126bc:	df000904 	addi	fp,sp,36
   126c0:	e13ffd15 	stw	r4,-12(fp)
   126c4:	e17ffe15 	stw	r5,-8(fp)
   126c8:	3005883a 	mov	r2,r6
   126cc:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   126d0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   126d4:	e0bffd17 	ldw	r2,-12(fp)
   126d8:	1000021e 	bne	r2,zero,126e4 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   126dc:	00800104 	movi	r2,4
   126e0:	00007106 	br	128a8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   126e4:	e0bffd17 	ldw	r2,-12(fp)
   126e8:	10800003 	ldbu	r2,0(r2)
   126ec:	10803fcc 	andi	r2,r2,255
   126f0:	108000a0 	cmpeqi	r2,r2,2
   126f4:	1000021e 	bne	r2,zero,12700 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   126f8:	00800044 	movi	r2,1
   126fc:	00006a06 	br	128a8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12700:	0005303a 	rdctl	r2,status
   12704:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12708:	e0fffc17 	ldw	r3,-16(fp)
   1270c:	00bfff84 	movi	r2,-2
   12710:	1884703a 	and	r2,r3,r2
   12714:	1001703a 	wrctl	status,r2
  
  return context;
   12718:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1271c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   12720:	e0bffd17 	ldw	r2,-12(fp)
   12724:	10800283 	ldbu	r2,10(r2)
   12728:	10803fcc 	andi	r2,r2,255
   1272c:	10001d26 	beq	r2,zero,127a4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   12730:	e0bfff03 	ldbu	r2,-4(fp)
   12734:	1080004c 	andi	r2,r2,1
   12738:	10000b26 	beq	r2,zero,12768 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1273c:	00000506 	br	12754 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12740:	000f883a 	mov	r7,zero
   12744:	01800104 	movi	r6,4
   12748:	e17ffe17 	ldw	r5,-8(fp)
   1274c:	e13ffd17 	ldw	r4,-12(fp)
   12750:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12754:	e0bffd17 	ldw	r2,-12(fp)
   12758:	10800283 	ldbu	r2,10(r2)
   1275c:	10803fcc 	andi	r2,r2,255
   12760:	103ff71e 	bne	r2,zero,12740 <OSQPostOpt+0x90>
   12764:	00000506 	br	1277c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12768:	000f883a 	mov	r7,zero
   1276c:	01800104 	movi	r6,4
   12770:	e17ffe17 	ldw	r5,-8(fp)
   12774:	e13ffd17 	ldw	r4,-12(fp)
   12778:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
   1277c:	e0bff717 	ldw	r2,-36(fp)
   12780:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12784:	e0bff817 	ldw	r2,-32(fp)
   12788:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   1278c:	e0bfff03 	ldbu	r2,-4(fp)
   12790:	1080010c 	andi	r2,r2,4
   12794:	1000011e 	bne	r2,zero,1279c <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   12798:	000e7b80 	call	e7b8 <OS_Sched>
        }
        return (OS_ERR_NONE);
   1279c:	0005883a 	mov	r2,zero
   127a0:	00004106 	br	128a8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   127a4:	e0bffd17 	ldw	r2,-12(fp)
   127a8:	10800117 	ldw	r2,4(r2)
   127ac:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   127b0:	e0bffa17 	ldw	r2,-24(fp)
   127b4:	10c0058b 	ldhu	r3,22(r2)
   127b8:	e0bffa17 	ldw	r2,-24(fp)
   127bc:	1080050b 	ldhu	r2,20(r2)
   127c0:	18ffffcc 	andi	r3,r3,65535
   127c4:	10bfffcc 	andi	r2,r2,65535
   127c8:	18800636 	bltu	r3,r2,127e4 <OSQPostOpt+0x134>
   127cc:	e0bff717 	ldw	r2,-36(fp)
   127d0:	e0bff915 	stw	r2,-28(fp)
   127d4:	e0bff917 	ldw	r2,-28(fp)
   127d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   127dc:	00800784 	movi	r2,30
   127e0:	00003106 	br	128a8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   127e4:	e0bfff03 	ldbu	r2,-4(fp)
   127e8:	1080008c 	andi	r2,r2,2
   127ec:	10001326 	beq	r2,zero,1283c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   127f0:	e0bffa17 	ldw	r2,-24(fp)
   127f4:	10c00417 	ldw	r3,16(r2)
   127f8:	e0bffa17 	ldw	r2,-24(fp)
   127fc:	10800117 	ldw	r2,4(r2)
   12800:	1880041e 	bne	r3,r2,12814 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   12804:	e0bffa17 	ldw	r2,-24(fp)
   12808:	10c00217 	ldw	r3,8(r2)
   1280c:	e0bffa17 	ldw	r2,-24(fp)
   12810:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   12814:	e0bffa17 	ldw	r2,-24(fp)
   12818:	10800417 	ldw	r2,16(r2)
   1281c:	10ffff04 	addi	r3,r2,-4
   12820:	e0bffa17 	ldw	r2,-24(fp)
   12824:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   12828:	e0bffa17 	ldw	r2,-24(fp)
   1282c:	10800417 	ldw	r2,16(r2)
   12830:	e0fffe17 	ldw	r3,-8(fp)
   12834:	10c00015 	stw	r3,0(r2)
   12838:	00001006 	br	1287c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   1283c:	e0bffa17 	ldw	r2,-24(fp)
   12840:	10800317 	ldw	r2,12(r2)
   12844:	11000104 	addi	r4,r2,4
   12848:	e0fffa17 	ldw	r3,-24(fp)
   1284c:	19000315 	stw	r4,12(r3)
   12850:	e0fffe17 	ldw	r3,-8(fp)
   12854:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   12858:	e0bffa17 	ldw	r2,-24(fp)
   1285c:	10c00317 	ldw	r3,12(r2)
   12860:	e0bffa17 	ldw	r2,-24(fp)
   12864:	10800217 	ldw	r2,8(r2)
   12868:	1880041e 	bne	r3,r2,1287c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   1286c:	e0bffa17 	ldw	r2,-24(fp)
   12870:	10c00117 	ldw	r3,4(r2)
   12874:	e0bffa17 	ldw	r2,-24(fp)
   12878:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1287c:	e0bffa17 	ldw	r2,-24(fp)
   12880:	1080058b 	ldhu	r2,22(r2)
   12884:	10800044 	addi	r2,r2,1
   12888:	1007883a 	mov	r3,r2
   1288c:	e0bffa17 	ldw	r2,-24(fp)
   12890:	10c0058d 	sth	r3,22(r2)
   12894:	e0bff717 	ldw	r2,-36(fp)
   12898:	e0bffb15 	stw	r2,-20(fp)
   1289c:	e0bffb17 	ldw	r2,-20(fp)
   128a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   128a4:	0005883a 	mov	r2,zero
}
   128a8:	e037883a 	mov	sp,fp
   128ac:	dfc00117 	ldw	ra,4(sp)
   128b0:	df000017 	ldw	fp,0(sp)
   128b4:	dec00204 	addi	sp,sp,8
   128b8:	f800283a 	ret

000128bc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   128bc:	defff604 	addi	sp,sp,-40
   128c0:	df000915 	stw	fp,36(sp)
   128c4:	df000904 	addi	fp,sp,36
   128c8:	e13ffe15 	stw	r4,-8(fp)
   128cc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   128d0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   128d4:	e0bffe17 	ldw	r2,-8(fp)
   128d8:	1000021e 	bne	r2,zero,128e4 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   128dc:	00800104 	movi	r2,4
   128e0:	00004906 	br	12a08 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   128e4:	e0bfff17 	ldw	r2,-4(fp)
   128e8:	1000021e 	bne	r2,zero,128f4 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   128ec:	00800244 	movi	r2,9
   128f0:	00004506 	br	12a08 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   128f4:	e0bffe17 	ldw	r2,-8(fp)
   128f8:	10800003 	ldbu	r2,0(r2)
   128fc:	10803fcc 	andi	r2,r2,255
   12900:	108000a0 	cmpeqi	r2,r2,2
   12904:	1000021e 	bne	r2,zero,12910 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   12908:	00800044 	movi	r2,1
   1290c:	00003e06 	br	12a08 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12910:	0005303a 	rdctl	r2,status
   12914:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12918:	e0fffd17 	ldw	r3,-12(fp)
   1291c:	00bfff84 	movi	r2,-2
   12920:	1884703a 	and	r2,r3,r2
   12924:	1001703a 	wrctl	status,r2
  
  return context;
   12928:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1292c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   12930:	e0bffe17 	ldw	r2,-8(fp)
   12934:	10c00283 	ldbu	r3,10(r2)
   12938:	e0bfff17 	ldw	r2,-4(fp)
   1293c:	10c00385 	stb	r3,14(r2)
    psrc                 = &pevent->OSEventTbl[0];
   12940:	e0bffe17 	ldw	r2,-8(fp)
   12944:	108002c4 	addi	r2,r2,11
   12948:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   1294c:	e0bfff17 	ldw	r2,-4(fp)
   12950:	10800204 	addi	r2,r2,8
   12954:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12958:	e03ff705 	stb	zero,-36(fp)
   1295c:	00000b06 	br	1298c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   12960:	e0bff917 	ldw	r2,-28(fp)
   12964:	10c00044 	addi	r3,r2,1
   12968:	e0fff915 	stw	r3,-28(fp)
   1296c:	e0fff817 	ldw	r3,-32(fp)
   12970:	19000044 	addi	r4,r3,1
   12974:	e13ff815 	stw	r4,-32(fp)
   12978:	18c00003 	ldbu	r3,0(r3)
   1297c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12980:	e0bff703 	ldbu	r2,-36(fp)
   12984:	10800044 	addi	r2,r2,1
   12988:	e0bff705 	stb	r2,-36(fp)
   1298c:	e0bff703 	ldbu	r2,-36(fp)
   12990:	108001b0 	cmpltui	r2,r2,6
   12994:	103ff21e 	bne	r2,zero,12960 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   12998:	e0bffe17 	ldw	r2,-8(fp)
   1299c:	10800117 	ldw	r2,4(r2)
   129a0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   129a4:	e0bffc17 	ldw	r2,-16(fp)
   129a8:	1080058b 	ldhu	r2,22(r2)
   129ac:	10bfffcc 	andi	r2,r2,65535
   129b0:	10000626 	beq	r2,zero,129cc <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   129b4:	e0bffc17 	ldw	r2,-16(fp)
   129b8:	10800417 	ldw	r2,16(r2)
   129bc:	10c00017 	ldw	r3,0(r2)
   129c0:	e0bfff17 	ldw	r2,-4(fp)
   129c4:	10c00015 	stw	r3,0(r2)
   129c8:	00000206 	br	129d4 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   129cc:	e0bfff17 	ldw	r2,-4(fp)
   129d0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   129d4:	e0bffc17 	ldw	r2,-16(fp)
   129d8:	10c0058b 	ldhu	r3,22(r2)
   129dc:	e0bfff17 	ldw	r2,-4(fp)
   129e0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   129e4:	e0bffc17 	ldw	r2,-16(fp)
   129e8:	10c0050b 	ldhu	r3,20(r2)
   129ec:	e0bfff17 	ldw	r2,-4(fp)
   129f0:	10c0018d 	sth	r3,6(r2)
   129f4:	e0bffa17 	ldw	r2,-24(fp)
   129f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   129fc:	e0bffb17 	ldw	r2,-20(fp)
   12a00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12a04:	0005883a 	mov	r2,zero
}
   12a08:	e037883a 	mov	sp,fp
   12a0c:	df000017 	ldw	fp,0(sp)
   12a10:	dec00104 	addi	sp,sp,4
   12a14:	f800283a 	ret

00012a18 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   12a18:	defffb04 	addi	sp,sp,-20
   12a1c:	dfc00415 	stw	ra,16(sp)
   12a20:	df000315 	stw	fp,12(sp)
   12a24:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   12a28:	01407804 	movi	r5,480
   12a2c:	010000f4 	movhi	r4,3
   12a30:	210ae404 	addi	r4,r4,11152
   12a34:	000e6fc0 	call	e6fc <OS_MemClr>
    pq1 = &OSQTbl[0];
   12a38:	008000f4 	movhi	r2,3
   12a3c:	108ae404 	addi	r2,r2,11152
   12a40:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   12a44:	008000f4 	movhi	r2,3
   12a48:	108aea04 	addi	r2,r2,11176
   12a4c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   12a50:	e03ffd0d 	sth	zero,-12(fp)
   12a54:	00000c06 	br	12a88 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   12a58:	e0bffe17 	ldw	r2,-8(fp)
   12a5c:	e0ffff17 	ldw	r3,-4(fp)
   12a60:	10c00015 	stw	r3,0(r2)
        pq1++;
   12a64:	e0bffe17 	ldw	r2,-8(fp)
   12a68:	10800604 	addi	r2,r2,24
   12a6c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   12a70:	e0bfff17 	ldw	r2,-4(fp)
   12a74:	10800604 	addi	r2,r2,24
   12a78:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   12a7c:	e0bffd0b 	ldhu	r2,-12(fp)
   12a80:	10800044 	addi	r2,r2,1
   12a84:	e0bffd0d 	sth	r2,-12(fp)
   12a88:	e0bffd0b 	ldhu	r2,-12(fp)
   12a8c:	108004f0 	cmpltui	r2,r2,19
   12a90:	103ff11e 	bne	r2,zero,12a58 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   12a94:	e0bffe17 	ldw	r2,-8(fp)
   12a98:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   12a9c:	008000f4 	movhi	r2,3
   12aa0:	108ae404 	addi	r2,r2,11152
   12aa4:	d0a7f715 	stw	r2,-24612(gp)
#endif
}
   12aa8:	0001883a 	nop
   12aac:	e037883a 	mov	sp,fp
   12ab0:	dfc00117 	ldw	ra,4(sp)
   12ab4:	df000017 	ldw	fp,0(sp)
   12ab8:	dec00204 	addi	sp,sp,8
   12abc:	f800283a 	ret

00012ac0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   12ac0:	defffa04 	addi	sp,sp,-24
   12ac4:	df000515 	stw	fp,20(sp)
   12ac8:	df000504 	addi	fp,sp,20
   12acc:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12ad0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12ad4:	e0bfff17 	ldw	r2,-4(fp)
   12ad8:	1000021e 	bne	r2,zero,12ae4 <OSSemAccept+0x24>
        return (0);
   12adc:	0005883a 	mov	r2,zero
   12ae0:	00001f06 	br	12b60 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   12ae4:	e0bfff17 	ldw	r2,-4(fp)
   12ae8:	10800003 	ldbu	r2,0(r2)
   12aec:	10803fcc 	andi	r2,r2,255
   12af0:	108000e0 	cmpeqi	r2,r2,3
   12af4:	1000021e 	bne	r2,zero,12b00 <OSSemAccept+0x40>
        return (0);
   12af8:	0005883a 	mov	r2,zero
   12afc:	00001806 	br	12b60 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12b00:	0005303a 	rdctl	r2,status
   12b04:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b08:	e0fffe17 	ldw	r3,-8(fp)
   12b0c:	00bfff84 	movi	r2,-2
   12b10:	1884703a 	and	r2,r3,r2
   12b14:	1001703a 	wrctl	status,r2
  
  return context;
   12b18:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   12b1c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   12b20:	e0bfff17 	ldw	r2,-4(fp)
   12b24:	1080020b 	ldhu	r2,8(r2)
   12b28:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   12b2c:	e0bffd0b 	ldhu	r2,-12(fp)
   12b30:	10000626 	beq	r2,zero,12b4c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   12b34:	e0bfff17 	ldw	r2,-4(fp)
   12b38:	1080020b 	ldhu	r2,8(r2)
   12b3c:	10bfffc4 	addi	r2,r2,-1
   12b40:	1007883a 	mov	r3,r2
   12b44:	e0bfff17 	ldw	r2,-4(fp)
   12b48:	10c0020d 	sth	r3,8(r2)
   12b4c:	e0bffb17 	ldw	r2,-20(fp)
   12b50:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b54:	e0bffc17 	ldw	r2,-16(fp)
   12b58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   12b5c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   12b60:	e037883a 	mov	sp,fp
   12b64:	df000017 	ldw	fp,0(sp)
   12b68:	dec00104 	addi	sp,sp,4
   12b6c:	f800283a 	ret

00012b70 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   12b70:	defff904 	addi	sp,sp,-28
   12b74:	dfc00615 	stw	ra,24(sp)
   12b78:	df000515 	stw	fp,20(sp)
   12b7c:	df000504 	addi	fp,sp,20
   12b80:	2005883a 	mov	r2,r4
   12b84:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12b88:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12b8c:	d0a7fb03 	ldbu	r2,-24596(gp)
   12b90:	10803fcc 	andi	r2,r2,255
   12b94:	10000226 	beq	r2,zero,12ba0 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   12b98:	0005883a 	mov	r2,zero
   12b9c:	00002506 	br	12c34 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ba0:	0005303a 	rdctl	r2,status
   12ba4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ba8:	e0fffe17 	ldw	r3,-8(fp)
   12bac:	00bfff84 	movi	r2,-2
   12bb0:	1884703a 	and	r2,r3,r2
   12bb4:	1001703a 	wrctl	status,r2
  
  return context;
   12bb8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   12bbc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   12bc0:	d0a7fa17 	ldw	r2,-24600(gp)
   12bc4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   12bc8:	d0a7fa17 	ldw	r2,-24600(gp)
   12bcc:	10000326 	beq	r2,zero,12bdc <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   12bd0:	d0a7fa17 	ldw	r2,-24600(gp)
   12bd4:	10800117 	ldw	r2,4(r2)
   12bd8:	d0a7fa15 	stw	r2,-24600(gp)
   12bdc:	e0bffb17 	ldw	r2,-20(fp)
   12be0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12be4:	e0bffc17 	ldw	r2,-16(fp)
   12be8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   12bec:	e0bffd17 	ldw	r2,-12(fp)
   12bf0:	10000f26 	beq	r2,zero,12c30 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   12bf4:	e0bffd17 	ldw	r2,-12(fp)
   12bf8:	00c000c4 	movi	r3,3
   12bfc:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   12c00:	e0bffd17 	ldw	r2,-12(fp)
   12c04:	e0ffff0b 	ldhu	r3,-4(fp)
   12c08:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   12c0c:	e0bffd17 	ldw	r2,-12(fp)
   12c10:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   12c14:	e0bffd17 	ldw	r2,-12(fp)
   12c18:	00c00fc4 	movi	r3,63
   12c1c:	10c00445 	stb	r3,17(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   12c20:	e0bffd17 	ldw	r2,-12(fp)
   12c24:	10000485 	stb	zero,18(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   12c28:	e13ffd17 	ldw	r4,-12(fp)
   12c2c:	000e31c0 	call	e31c <OS_EventWaitListInit>
    }
    return (pevent);
   12c30:	e0bffd17 	ldw	r2,-12(fp)
}
   12c34:	e037883a 	mov	sp,fp
   12c38:	dfc00117 	ldw	ra,4(sp)
   12c3c:	df000017 	ldw	fp,0(sp)
   12c40:	dec00204 	addi	sp,sp,8
   12c44:	f800283a 	ret

00012c48 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12c48:	defff304 	addi	sp,sp,-52
   12c4c:	dfc00c15 	stw	ra,48(sp)
   12c50:	df000b15 	stw	fp,44(sp)
   12c54:	df000b04 	addi	fp,sp,44
   12c58:	e13ffd15 	stw	r4,-12(fp)
   12c5c:	2805883a 	mov	r2,r5
   12c60:	e1bfff15 	stw	r6,-4(fp)
   12c64:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12c68:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12c6c:	e0bfff17 	ldw	r2,-4(fp)
   12c70:	1000021e 	bne	r2,zero,12c7c <OSSemDel+0x34>
        return (pevent);
   12c74:	e0bffd17 	ldw	r2,-12(fp)
   12c78:	00007e06 	br	12e74 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12c7c:	e0bffd17 	ldw	r2,-12(fp)
   12c80:	1000051e 	bne	r2,zero,12c98 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12c84:	e0bfff17 	ldw	r2,-4(fp)
   12c88:	00c00104 	movi	r3,4
   12c8c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12c90:	e0bffd17 	ldw	r2,-12(fp)
   12c94:	00007706 	br	12e74 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   12c98:	e0bffd17 	ldw	r2,-12(fp)
   12c9c:	10800003 	ldbu	r2,0(r2)
   12ca0:	10803fcc 	andi	r2,r2,255
   12ca4:	108000e0 	cmpeqi	r2,r2,3
   12ca8:	1000051e 	bne	r2,zero,12cc0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12cac:	e0bfff17 	ldw	r2,-4(fp)
   12cb0:	00c00044 	movi	r3,1
   12cb4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12cb8:	e0bffd17 	ldw	r2,-12(fp)
   12cbc:	00006d06 	br	12e74 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12cc0:	d0a7fb03 	ldbu	r2,-24596(gp)
   12cc4:	10803fcc 	andi	r2,r2,255
   12cc8:	10000526 	beq	r2,zero,12ce0 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   12ccc:	e0bfff17 	ldw	r2,-4(fp)
   12cd0:	00c003c4 	movi	r3,15
   12cd4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12cd8:	e0bffd17 	ldw	r2,-12(fp)
   12cdc:	00006506 	br	12e74 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ce0:	0005303a 	rdctl	r2,status
   12ce4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ce8:	e0fffc17 	ldw	r3,-16(fp)
   12cec:	00bfff84 	movi	r2,-2
   12cf0:	1884703a 	and	r2,r3,r2
   12cf4:	1001703a 	wrctl	status,r2
  
  return context;
   12cf8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12cfc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   12d00:	e0bffd17 	ldw	r2,-12(fp)
   12d04:	10800283 	ldbu	r2,10(r2)
   12d08:	10803fcc 	andi	r2,r2,255
   12d0c:	10000326 	beq	r2,zero,12d1c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12d10:	00800044 	movi	r2,1
   12d14:	e0bff505 	stb	r2,-44(fp)
   12d18:	00000106 	br	12d20 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12d1c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   12d20:	e0bffe03 	ldbu	r2,-8(fp)
   12d24:	10000326 	beq	r2,zero,12d34 <OSSemDel+0xec>
   12d28:	10800060 	cmpeqi	r2,r2,1
   12d2c:	1000281e 	bne	r2,zero,12dd0 <OSSemDel+0x188>
   12d30:	00004506 	br	12e48 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   12d34:	e0bff503 	ldbu	r2,-44(fp)
   12d38:	1000161e 	bne	r2,zero,12d94 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   12d3c:	e0bffd17 	ldw	r2,-12(fp)
   12d40:	00c00fc4 	movi	r3,63
   12d44:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   12d48:	e0bffd17 	ldw	r2,-12(fp)
   12d4c:	10000485 	stb	zero,18(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12d50:	e0bffd17 	ldw	r2,-12(fp)
   12d54:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   12d58:	d0e7fa17 	ldw	r3,-24600(gp)
   12d5c:	e0bffd17 	ldw	r2,-12(fp)
   12d60:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   12d64:	e0bffd17 	ldw	r2,-12(fp)
   12d68:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   12d6c:	e0bffd17 	ldw	r2,-12(fp)
   12d70:	d0a7fa15 	stw	r2,-24600(gp)
   12d74:	e0bff717 	ldw	r2,-36(fp)
   12d78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d7c:	e0bff817 	ldw	r2,-32(fp)
   12d80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   12d84:	e0bfff17 	ldw	r2,-4(fp)
   12d88:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   12d8c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   12d90:	00003706 	br	12e70 <OSSemDel+0x228>
   12d94:	e0bff717 	ldw	r2,-36(fp)
   12d98:	e0bff915 	stw	r2,-28(fp)
   12d9c:	e0bff917 	ldw	r2,-28(fp)
   12da0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   12da4:	e0bfff17 	ldw	r2,-4(fp)
   12da8:	00c01244 	movi	r3,73
   12dac:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   12db0:	e0bffd17 	ldw	r2,-12(fp)
   12db4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   12db8:	00002d06 	br	12e70 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   12dbc:	000f883a 	mov	r7,zero
   12dc0:	01800044 	movi	r6,1
   12dc4:	000b883a 	mov	r5,zero
   12dc8:	e13ffd17 	ldw	r4,-12(fp)
   12dcc:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   12dd0:	e0bffd17 	ldw	r2,-12(fp)
   12dd4:	10800283 	ldbu	r2,10(r2)
   12dd8:	10803fcc 	andi	r2,r2,255
   12ddc:	103ff71e 	bne	r2,zero,12dbc <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   12de0:	e0bffd17 	ldw	r2,-12(fp)
   12de4:	00c00fc4 	movi	r3,63
   12de8:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   12dec:	e0bffd17 	ldw	r2,-12(fp)
   12df0:	10000485 	stb	zero,18(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12df4:	e0bffd17 	ldw	r2,-12(fp)
   12df8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   12dfc:	d0e7fa17 	ldw	r3,-24600(gp)
   12e00:	e0bffd17 	ldw	r2,-12(fp)
   12e04:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   12e08:	e0bffd17 	ldw	r2,-12(fp)
   12e0c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   12e10:	e0bffd17 	ldw	r2,-12(fp)
   12e14:	d0a7fa15 	stw	r2,-24600(gp)
   12e18:	e0bff717 	ldw	r2,-36(fp)
   12e1c:	e0bffa15 	stw	r2,-24(fp)
   12e20:	e0bffa17 	ldw	r2,-24(fp)
   12e24:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12e28:	e0bff503 	ldbu	r2,-44(fp)
   12e2c:	10800058 	cmpnei	r2,r2,1
   12e30:	1000011e 	bne	r2,zero,12e38 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12e34:	000e7b80 	call	e7b8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   12e38:	e0bfff17 	ldw	r2,-4(fp)
   12e3c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   12e40:	e03ff615 	stw	zero,-40(fp)
             break;
   12e44:	00000a06 	br	12e70 <OSSemDel+0x228>
   12e48:	e0bff717 	ldw	r2,-36(fp)
   12e4c:	e0bffb15 	stw	r2,-20(fp)
   12e50:	e0bffb17 	ldw	r2,-20(fp)
   12e54:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   12e58:	e0bfff17 	ldw	r2,-4(fp)
   12e5c:	00c001c4 	movi	r3,7
   12e60:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   12e64:	e0bffd17 	ldw	r2,-12(fp)
   12e68:	e0bff615 	stw	r2,-40(fp)
             break;
   12e6c:	0001883a 	nop
    }
    return (pevent_return);
   12e70:	e0bff617 	ldw	r2,-40(fp)
}
   12e74:	e037883a 	mov	sp,fp
   12e78:	dfc00117 	ldw	ra,4(sp)
   12e7c:	df000017 	ldw	fp,0(sp)
   12e80:	dec00204 	addi	sp,sp,8
   12e84:	f800283a 	ret

00012e88 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   12e88:	defff504 	addi	sp,sp,-44
   12e8c:	dfc00a15 	stw	ra,40(sp)
   12e90:	df000915 	stw	fp,36(sp)
   12e94:	df000904 	addi	fp,sp,36
   12e98:	e13ffd15 	stw	r4,-12(fp)
   12e9c:	2805883a 	mov	r2,r5
   12ea0:	e1bfff15 	stw	r6,-4(fp)
   12ea4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12ea8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12eac:	e0bfff17 	ldw	r2,-4(fp)
   12eb0:	10007226 	beq	r2,zero,1307c <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12eb4:	e0bffd17 	ldw	r2,-12(fp)
   12eb8:	1000041e 	bne	r2,zero,12ecc <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   12ebc:	e0bfff17 	ldw	r2,-4(fp)
   12ec0:	00c00104 	movi	r3,4
   12ec4:	10c00005 	stb	r3,0(r2)
        return;
   12ec8:	00006d06 	br	13080 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   12ecc:	e0bffd17 	ldw	r2,-12(fp)
   12ed0:	10800003 	ldbu	r2,0(r2)
   12ed4:	10803fcc 	andi	r2,r2,255
   12ed8:	108000e0 	cmpeqi	r2,r2,3
   12edc:	1000041e 	bne	r2,zero,12ef0 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   12ee0:	e0bfff17 	ldw	r2,-4(fp)
   12ee4:	00c00044 	movi	r3,1
   12ee8:	10c00005 	stb	r3,0(r2)
        return;
   12eec:	00006406 	br	13080 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   12ef0:	d0a7fb03 	ldbu	r2,-24596(gp)
   12ef4:	10803fcc 	andi	r2,r2,255
   12ef8:	10000426 	beq	r2,zero,12f0c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   12efc:	e0bfff17 	ldw	r2,-4(fp)
   12f00:	00c00084 	movi	r3,2
   12f04:	10c00005 	stb	r3,0(r2)
        return;
   12f08:	00005d06 	br	13080 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   12f0c:	d0a7e903 	ldbu	r2,-24668(gp)
   12f10:	10803fcc 	andi	r2,r2,255
   12f14:	10000426 	beq	r2,zero,12f28 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   12f18:	e0bfff17 	ldw	r2,-4(fp)
   12f1c:	00c00344 	movi	r3,13
   12f20:	10c00005 	stb	r3,0(r2)
        return;
   12f24:	00005606 	br	13080 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f28:	0005303a 	rdctl	r2,status
   12f2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f30:	e0fffc17 	ldw	r3,-16(fp)
   12f34:	00bfff84 	movi	r2,-2
   12f38:	1884703a 	and	r2,r3,r2
   12f3c:	1001703a 	wrctl	status,r2
  
  return context;
   12f40:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12f44:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   12f48:	e0bffd17 	ldw	r2,-12(fp)
   12f4c:	1080020b 	ldhu	r2,8(r2)
   12f50:	10bfffcc 	andi	r2,r2,65535
   12f54:	10000d26 	beq	r2,zero,12f8c <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   12f58:	e0bffd17 	ldw	r2,-12(fp)
   12f5c:	1080020b 	ldhu	r2,8(r2)
   12f60:	10bfffc4 	addi	r2,r2,-1
   12f64:	1007883a 	mov	r3,r2
   12f68:	e0bffd17 	ldw	r2,-12(fp)
   12f6c:	10c0020d 	sth	r3,8(r2)
   12f70:	e0bff717 	ldw	r2,-36(fp)
   12f74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f78:	e0bff817 	ldw	r2,-32(fp)
   12f7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   12f80:	e0bfff17 	ldw	r2,-4(fp)
   12f84:	10000005 	stb	zero,0(r2)
        return;
   12f88:	00003d06 	br	13080 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   12f8c:	d0a7fc17 	ldw	r2,-24592(gp)
   12f90:	d0e7fc17 	ldw	r3,-24592(gp)
   12f94:	18c00c03 	ldbu	r3,48(r3)
   12f98:	18c00054 	ori	r3,r3,1
   12f9c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12fa0:	d0a7fc17 	ldw	r2,-24592(gp)
   12fa4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   12fa8:	d0a7fc17 	ldw	r2,-24592(gp)
   12fac:	e0fffe0b 	ldhu	r3,-8(fp)
   12fb0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   12fb4:	e13ffd17 	ldw	r4,-12(fp)
   12fb8:	000df040 	call	df04 <OS_EventTaskWait>
   12fbc:	e0bff717 	ldw	r2,-36(fp)
   12fc0:	e0bffb15 	stw	r2,-20(fp)
   12fc4:	e0bffb17 	ldw	r2,-20(fp)
   12fc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   12fcc:	000e7b80 	call	e7b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fd0:	0005303a 	rdctl	r2,status
   12fd4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fd8:	e0fff917 	ldw	r3,-28(fp)
   12fdc:	00bfff84 	movi	r2,-2
   12fe0:	1884703a 	and	r2,r3,r2
   12fe4:	1001703a 	wrctl	status,r2
  
  return context;
   12fe8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   12fec:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   12ff0:	d0a7fc17 	ldw	r2,-24592(gp)
   12ff4:	10800c43 	ldbu	r2,49(r2)
   12ff8:	10803fcc 	andi	r2,r2,255
   12ffc:	10000326 	beq	r2,zero,1300c <OSSemPend+0x184>
   13000:	108000a0 	cmpeqi	r2,r2,2
   13004:	1000041e 	bne	r2,zero,13018 <OSSemPend+0x190>
   13008:	00000706 	br	13028 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   1300c:	e0bfff17 	ldw	r2,-4(fp)
   13010:	10000005 	stb	zero,0(r2)
             break;
   13014:	00000c06 	br	13048 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   13018:	e0bfff17 	ldw	r2,-4(fp)
   1301c:	00c00384 	movi	r3,14
   13020:	10c00005 	stb	r3,0(r2)
             break;
   13024:	00000806 	br	13048 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   13028:	d0a7fc17 	ldw	r2,-24592(gp)
   1302c:	e17ffd17 	ldw	r5,-12(fp)
   13030:	1009883a 	mov	r4,r2
   13034:	000e1640 	call	e164 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   13038:	e0bfff17 	ldw	r2,-4(fp)
   1303c:	00c00284 	movi	r3,10
   13040:	10c00005 	stb	r3,0(r2)
             break;
   13044:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   13048:	d0a7fc17 	ldw	r2,-24592(gp)
   1304c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   13050:	d0a7fc17 	ldw	r2,-24592(gp)
   13054:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   13058:	d0a7fc17 	ldw	r2,-24592(gp)
   1305c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13060:	d0a7fc17 	ldw	r2,-24592(gp)
   13064:	10000815 	stw	zero,32(r2)
   13068:	e0bff717 	ldw	r2,-36(fp)
   1306c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13070:	e0bffa17 	ldw	r2,-24(fp)
   13074:	1001703a 	wrctl	status,r2
   13078:	00000106 	br	13080 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   1307c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   13080:	e037883a 	mov	sp,fp
   13084:	dfc00117 	ldw	ra,4(sp)
   13088:	df000017 	ldw	fp,0(sp)
   1308c:	dec00204 	addi	sp,sp,8
   13090:	f800283a 	ret

00013094 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13094:	defff604 	addi	sp,sp,-40
   13098:	dfc00915 	stw	ra,36(sp)
   1309c:	df000815 	stw	fp,32(sp)
   130a0:	df000804 	addi	fp,sp,32
   130a4:	e13ffd15 	stw	r4,-12(fp)
   130a8:	2805883a 	mov	r2,r5
   130ac:	e1bfff15 	stw	r6,-4(fp)
   130b0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   130b4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   130b8:	e0bfff17 	ldw	r2,-4(fp)
   130bc:	1000021e 	bne	r2,zero,130c8 <OSSemPendAbort+0x34>
        return (0);
   130c0:	0005883a 	mov	r2,zero
   130c4:	00004906 	br	131ec <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   130c8:	e0bffd17 	ldw	r2,-12(fp)
   130cc:	1000051e 	bne	r2,zero,130e4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   130d0:	e0bfff17 	ldw	r2,-4(fp)
   130d4:	00c00104 	movi	r3,4
   130d8:	10c00005 	stb	r3,0(r2)
        return (0);
   130dc:	0005883a 	mov	r2,zero
   130e0:	00004206 	br	131ec <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   130e4:	e0bffd17 	ldw	r2,-12(fp)
   130e8:	10800003 	ldbu	r2,0(r2)
   130ec:	10803fcc 	andi	r2,r2,255
   130f0:	108000e0 	cmpeqi	r2,r2,3
   130f4:	1000051e 	bne	r2,zero,1310c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   130f8:	e0bfff17 	ldw	r2,-4(fp)
   130fc:	00c00044 	movi	r3,1
   13100:	10c00005 	stb	r3,0(r2)
        return (0);
   13104:	0005883a 	mov	r2,zero
   13108:	00003806 	br	131ec <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1310c:	0005303a 	rdctl	r2,status
   13110:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13114:	e0fffc17 	ldw	r3,-16(fp)
   13118:	00bfff84 	movi	r2,-2
   1311c:	1884703a 	and	r2,r3,r2
   13120:	1001703a 	wrctl	status,r2
  
  return context;
   13124:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13128:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   1312c:	e0bffd17 	ldw	r2,-12(fp)
   13130:	10800283 	ldbu	r2,10(r2)
   13134:	10803fcc 	andi	r2,r2,255
   13138:	10002526 	beq	r2,zero,131d0 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   1313c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   13140:	e0bffe03 	ldbu	r2,-8(fp)
   13144:	10800060 	cmpeqi	r2,r2,1
   13148:	10000e26 	beq	r2,zero,13184 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1314c:	00000806 	br	13170 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13150:	01c00084 	movi	r7,2
   13154:	01800044 	movi	r6,1
   13158:	000b883a 	mov	r5,zero
   1315c:	e13ffd17 	ldw	r4,-12(fp)
   13160:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
                     nbr_tasks++;
   13164:	e0bff803 	ldbu	r2,-32(fp)
   13168:	10800044 	addi	r2,r2,1
   1316c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13170:	e0bffd17 	ldw	r2,-12(fp)
   13174:	10800283 	ldbu	r2,10(r2)
   13178:	10803fcc 	andi	r2,r2,255
   1317c:	103ff41e 	bne	r2,zero,13150 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   13180:	00000906 	br	131a8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13184:	01c00084 	movi	r7,2
   13188:	01800044 	movi	r6,1
   1318c:	000b883a 	mov	r5,zero
   13190:	e13ffd17 	ldw	r4,-12(fp)
   13194:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
                 nbr_tasks++;
   13198:	e0bff803 	ldbu	r2,-32(fp)
   1319c:	10800044 	addi	r2,r2,1
   131a0:	e0bff805 	stb	r2,-32(fp)
                 break;
   131a4:	0001883a 	nop
   131a8:	e0bff917 	ldw	r2,-28(fp)
   131ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131b0:	e0bffa17 	ldw	r2,-24(fp)
   131b4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   131b8:	000e7b80 	call	e7b8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   131bc:	e0bfff17 	ldw	r2,-4(fp)
   131c0:	00c00384 	movi	r3,14
   131c4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   131c8:	e0bff803 	ldbu	r2,-32(fp)
   131cc:	00000706 	br	131ec <OSSemPendAbort+0x158>
   131d0:	e0bff917 	ldw	r2,-28(fp)
   131d4:	e0bffb15 	stw	r2,-20(fp)
   131d8:	e0bffb17 	ldw	r2,-20(fp)
   131dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   131e0:	e0bfff17 	ldw	r2,-4(fp)
   131e4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   131e8:	0005883a 	mov	r2,zero
}
   131ec:	e037883a 	mov	sp,fp
   131f0:	dfc00117 	ldw	ra,4(sp)
   131f4:	df000017 	ldw	fp,0(sp)
   131f8:	dec00204 	addi	sp,sp,8
   131fc:	f800283a 	ret

00013200 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   13200:	defff804 	addi	sp,sp,-32
   13204:	dfc00715 	stw	ra,28(sp)
   13208:	df000615 	stw	fp,24(sp)
   1320c:	df000604 	addi	fp,sp,24
   13210:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13214:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13218:	e0bfff17 	ldw	r2,-4(fp)
   1321c:	1000021e 	bne	r2,zero,13228 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   13220:	00800104 	movi	r2,4
   13224:	00003506 	br	132fc <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13228:	e0bfff17 	ldw	r2,-4(fp)
   1322c:	10800003 	ldbu	r2,0(r2)
   13230:	10803fcc 	andi	r2,r2,255
   13234:	108000e0 	cmpeqi	r2,r2,3
   13238:	1000021e 	bne	r2,zero,13244 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   1323c:	00800044 	movi	r2,1
   13240:	00002e06 	br	132fc <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13244:	0005303a 	rdctl	r2,status
   13248:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1324c:	e0fffe17 	ldw	r3,-8(fp)
   13250:	00bfff84 	movi	r2,-2
   13254:	1884703a 	and	r2,r3,r2
   13258:	1001703a 	wrctl	status,r2
  
  return context;
   1325c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13260:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   13264:	e0bfff17 	ldw	r2,-4(fp)
   13268:	10800283 	ldbu	r2,10(r2)
   1326c:	10803fcc 	andi	r2,r2,255
   13270:	10000c26 	beq	r2,zero,132a4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13274:	000f883a 	mov	r7,zero
   13278:	01800044 	movi	r6,1
   1327c:	000b883a 	mov	r5,zero
   13280:	e13fff17 	ldw	r4,-4(fp)
   13284:	000dd6c0 	call	dd6c <OS_EventTaskRdy>
   13288:	e0bffa17 	ldw	r2,-24(fp)
   1328c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13290:	e0bffb17 	ldw	r2,-20(fp)
   13294:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13298:	000e7b80 	call	e7b8 <OS_Sched>
        return (OS_ERR_NONE);
   1329c:	0005883a 	mov	r2,zero
   132a0:	00001606 	br	132fc <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   132a4:	e0bfff17 	ldw	r2,-4(fp)
   132a8:	1080020b 	ldhu	r2,8(r2)
   132ac:	10ffffcc 	andi	r3,r2,65535
   132b0:	00bfffd4 	movui	r2,65535
   132b4:	18800c26 	beq	r3,r2,132e8 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   132b8:	e0bfff17 	ldw	r2,-4(fp)
   132bc:	1080020b 	ldhu	r2,8(r2)
   132c0:	10800044 	addi	r2,r2,1
   132c4:	1007883a 	mov	r3,r2
   132c8:	e0bfff17 	ldw	r2,-4(fp)
   132cc:	10c0020d 	sth	r3,8(r2)
   132d0:	e0bffa17 	ldw	r2,-24(fp)
   132d4:	e0bffc15 	stw	r2,-16(fp)
   132d8:	e0bffc17 	ldw	r2,-16(fp)
   132dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   132e0:	0005883a 	mov	r2,zero
   132e4:	00000506 	br	132fc <OSSemPost+0xfc>
   132e8:	e0bffa17 	ldw	r2,-24(fp)
   132ec:	e0bffd15 	stw	r2,-12(fp)
   132f0:	e0bffd17 	ldw	r2,-12(fp)
   132f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   132f8:	00800c84 	movi	r2,50
}
   132fc:	e037883a 	mov	sp,fp
   13300:	dfc00117 	ldw	ra,4(sp)
   13304:	df000017 	ldw	fp,0(sp)
   13308:	dec00204 	addi	sp,sp,8
   1330c:	f800283a 	ret

00013310 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   13310:	defff704 	addi	sp,sp,-36
   13314:	df000815 	stw	fp,32(sp)
   13318:	df000804 	addi	fp,sp,32
   1331c:	e13ffe15 	stw	r4,-8(fp)
   13320:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13324:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13328:	e0bffe17 	ldw	r2,-8(fp)
   1332c:	1000021e 	bne	r2,zero,13338 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   13330:	00800104 	movi	r2,4
   13334:	00003606 	br	13410 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   13338:	e0bfff17 	ldw	r2,-4(fp)
   1333c:	1000021e 	bne	r2,zero,13348 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13340:	00800244 	movi	r2,9
   13344:	00003206 	br	13410 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13348:	e0bffe17 	ldw	r2,-8(fp)
   1334c:	10800003 	ldbu	r2,0(r2)
   13350:	10803fcc 	andi	r2,r2,255
   13354:	108000e0 	cmpeqi	r2,r2,3
   13358:	1000021e 	bne	r2,zero,13364 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1335c:	00800044 	movi	r2,1
   13360:	00002b06 	br	13410 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13364:	0005303a 	rdctl	r2,status
   13368:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1336c:	e0fffd17 	ldw	r3,-12(fp)
   13370:	00bfff84 	movi	r2,-2
   13374:	1884703a 	and	r2,r3,r2
   13378:	1001703a 	wrctl	status,r2
  
  return context;
   1337c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13380:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   13384:	e0bffe17 	ldw	r2,-8(fp)
   13388:	10c00283 	ldbu	r3,10(r2)
   1338c:	e0bfff17 	ldw	r2,-4(fp)
   13390:	10c00205 	stb	r3,8(r2)
    psrc                   = &pevent->OSEventTbl[0];
   13394:	e0bffe17 	ldw	r2,-8(fp)
   13398:	108002c4 	addi	r2,r2,11
   1339c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   133a0:	e0bfff17 	ldw	r2,-4(fp)
   133a4:	10800084 	addi	r2,r2,2
   133a8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   133ac:	e03ffa05 	stb	zero,-24(fp)
   133b0:	00000b06 	br	133e0 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   133b4:	e0bff917 	ldw	r2,-28(fp)
   133b8:	10c00044 	addi	r3,r2,1
   133bc:	e0fff915 	stw	r3,-28(fp)
   133c0:	e0fff817 	ldw	r3,-32(fp)
   133c4:	19000044 	addi	r4,r3,1
   133c8:	e13ff815 	stw	r4,-32(fp)
   133cc:	18c00003 	ldbu	r3,0(r3)
   133d0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   133d4:	e0bffa03 	ldbu	r2,-24(fp)
   133d8:	10800044 	addi	r2,r2,1
   133dc:	e0bffa05 	stb	r2,-24(fp)
   133e0:	e0bffa03 	ldbu	r2,-24(fp)
   133e4:	108001b0 	cmpltui	r2,r2,6
   133e8:	103ff21e 	bne	r2,zero,133b4 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   133ec:	e0bffe17 	ldw	r2,-8(fp)
   133f0:	10c0020b 	ldhu	r3,8(r2)
   133f4:	e0bfff17 	ldw	r2,-4(fp)
   133f8:	10c0000d 	sth	r3,0(r2)
   133fc:	e0bffb17 	ldw	r2,-20(fp)
   13400:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13404:	e0bffc17 	ldw	r2,-16(fp)
   13408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1340c:	0005883a 	mov	r2,zero
}
   13410:	e037883a 	mov	sp,fp
   13414:	df000017 	ldw	fp,0(sp)
   13418:	dec00104 	addi	sp,sp,4
   1341c:	f800283a 	ret

00013420 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   13420:	defff904 	addi	sp,sp,-28
   13424:	df000615 	stw	fp,24(sp)
   13428:	df000604 	addi	fp,sp,24
   1342c:	e13ffd15 	stw	r4,-12(fp)
   13430:	2805883a 	mov	r2,r5
   13434:	e1bfff15 	stw	r6,-4(fp)
   13438:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1343c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13440:	e0bfff17 	ldw	r2,-4(fp)
   13444:	10003126 	beq	r2,zero,1350c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13448:	e0bffd17 	ldw	r2,-12(fp)
   1344c:	1000041e 	bne	r2,zero,13460 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   13450:	e0bfff17 	ldw	r2,-4(fp)
   13454:	00c00104 	movi	r3,4
   13458:	10c00005 	stb	r3,0(r2)
        return;
   1345c:	00002c06 	br	13510 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13460:	e0bffd17 	ldw	r2,-12(fp)
   13464:	10800003 	ldbu	r2,0(r2)
   13468:	10803fcc 	andi	r2,r2,255
   1346c:	108000e0 	cmpeqi	r2,r2,3
   13470:	1000041e 	bne	r2,zero,13484 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   13474:	e0bfff17 	ldw	r2,-4(fp)
   13478:	00c00044 	movi	r3,1
   1347c:	10c00005 	stb	r3,0(r2)
        return;
   13480:	00002306 	br	13510 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13484:	0005303a 	rdctl	r2,status
   13488:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1348c:	e0fffc17 	ldw	r3,-16(fp)
   13490:	00bfff84 	movi	r2,-2
   13494:	1884703a 	and	r2,r3,r2
   13498:	1001703a 	wrctl	status,r2
  
  return context;
   1349c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   134a0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   134a4:	e0bfff17 	ldw	r2,-4(fp)
   134a8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   134ac:	e0bffd17 	ldw	r2,-12(fp)
   134b0:	1080020b 	ldhu	r2,8(r2)
   134b4:	10bfffcc 	andi	r2,r2,65535
   134b8:	10000426 	beq	r2,zero,134cc <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   134bc:	e0bffd17 	ldw	r2,-12(fp)
   134c0:	e0fffe0b 	ldhu	r3,-8(fp)
   134c4:	10c0020d 	sth	r3,8(r2)
   134c8:	00000b06 	br	134f8 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   134cc:	e0bffd17 	ldw	r2,-12(fp)
   134d0:	10800283 	ldbu	r2,10(r2)
   134d4:	10803fcc 	andi	r2,r2,255
   134d8:	1000041e 	bne	r2,zero,134ec <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   134dc:	e0bffd17 	ldw	r2,-12(fp)
   134e0:	e0fffe0b 	ldhu	r3,-8(fp)
   134e4:	10c0020d 	sth	r3,8(r2)
   134e8:	00000306 	br	134f8 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   134ec:	e0bfff17 	ldw	r2,-4(fp)
   134f0:	00c01244 	movi	r3,73
   134f4:	10c00005 	stb	r3,0(r2)
   134f8:	e0bffa17 	ldw	r2,-24(fp)
   134fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13500:	e0bffb17 	ldw	r2,-20(fp)
   13504:	1001703a 	wrctl	status,r2
   13508:	00000106 	br	13510 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   1350c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   13510:	e037883a 	mov	sp,fp
   13514:	df000017 	ldw	fp,0(sp)
   13518:	dec00104 	addi	sp,sp,4
   1351c:	f800283a 	ret

00013520 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   13520:	defff104 	addi	sp,sp,-60
   13524:	dfc00e15 	stw	ra,56(sp)
   13528:	df000d15 	stw	fp,52(sp)
   1352c:	df000d04 	addi	fp,sp,52
   13530:	2007883a 	mov	r3,r4
   13534:	2805883a 	mov	r2,r5
   13538:	e0fffe05 	stb	r3,-8(fp)
   1353c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   13540:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   13544:	e0bffe03 	ldbu	r2,-8(fp)
   13548:	10800a30 	cmpltui	r2,r2,40
   1354c:	1000051e 	bne	r2,zero,13564 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   13550:	e0bffe03 	ldbu	r2,-8(fp)
   13554:	10803fe0 	cmpeqi	r2,r2,255
   13558:	1000021e 	bne	r2,zero,13564 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   1355c:	00800a84 	movi	r2,42
   13560:	00012606 	br	139fc <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   13564:	e0bfff03 	ldbu	r2,-4(fp)
   13568:	10800a30 	cmpltui	r2,r2,40
   1356c:	1000021e 	bne	r2,zero,13578 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   13570:	00800a84 	movi	r2,42
   13574:	00012106 	br	139fc <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13578:	0005303a 	rdctl	r2,status
   1357c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13580:	e0fffd17 	ldw	r3,-12(fp)
   13584:	00bfff84 	movi	r2,-2
   13588:	1884703a 	and	r2,r3,r2
   1358c:	1001703a 	wrctl	status,r2
  
  return context;
   13590:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13594:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   13598:	e0ffff03 	ldbu	r3,-4(fp)
   1359c:	008000f4 	movhi	r2,3
   135a0:	1096bb04 	addi	r2,r2,23276
   135a4:	18c7883a 	add	r3,r3,r3
   135a8:	18c7883a 	add	r3,r3,r3
   135ac:	10c5883a 	add	r2,r2,r3
   135b0:	10800017 	ldw	r2,0(r2)
   135b4:	10000626 	beq	r2,zero,135d0 <OSTaskChangePrio+0xb0>
   135b8:	e0bff517 	ldw	r2,-44(fp)
   135bc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135c0:	e0bff617 	ldw	r2,-40(fp)
   135c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   135c8:	00800a04 	movi	r2,40
   135cc:	00010b06 	br	139fc <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   135d0:	e0bffe03 	ldbu	r2,-8(fp)
   135d4:	10803fd8 	cmpnei	r2,r2,255
   135d8:	1000031e 	bne	r2,zero,135e8 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   135dc:	d0a7fc17 	ldw	r2,-24592(gp)
   135e0:	10800c83 	ldbu	r2,50(r2)
   135e4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   135e8:	e0fffe03 	ldbu	r3,-8(fp)
   135ec:	008000f4 	movhi	r2,3
   135f0:	1096bb04 	addi	r2,r2,23276
   135f4:	18c7883a 	add	r3,r3,r3
   135f8:	18c7883a 	add	r3,r3,r3
   135fc:	10c5883a 	add	r2,r2,r3
   13600:	10800017 	ldw	r2,0(r2)
   13604:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   13608:	e0bff817 	ldw	r2,-32(fp)
   1360c:	1000061e 	bne	r2,zero,13628 <OSTaskChangePrio+0x108>
   13610:	e0bff517 	ldw	r2,-44(fp)
   13614:	e0bff715 	stw	r2,-36(fp)
   13618:	e0bff717 	ldw	r2,-36(fp)
   1361c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   13620:	00800a44 	movi	r2,41
   13624:	0000f506 	br	139fc <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   13628:	e0bff817 	ldw	r2,-32(fp)
   1362c:	10800058 	cmpnei	r2,r2,1
   13630:	1000061e 	bne	r2,zero,1364c <OSTaskChangePrio+0x12c>
   13634:	e0bff517 	ldw	r2,-44(fp)
   13638:	e0bff915 	stw	r2,-28(fp)
   1363c:	e0bff917 	ldw	r2,-28(fp)
   13640:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   13644:	008010c4 	movi	r2,67
   13648:	0000ec06 	br	139fc <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   1364c:	e0bfff03 	ldbu	r2,-4(fp)
   13650:	1004d0fa 	srli	r2,r2,3
   13654:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   13658:	e0bfff03 	ldbu	r2,-4(fp)
   1365c:	108001cc 	andi	r2,r2,7
   13660:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   13664:	e0bffb03 	ldbu	r2,-20(fp)
   13668:	00c00044 	movi	r3,1
   1366c:	1884983a 	sll	r2,r3,r2
   13670:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   13674:	e0bffb43 	ldbu	r2,-19(fp)
   13678:	00c00044 	movi	r3,1
   1367c:	1884983a 	sll	r2,r3,r2
   13680:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   13684:	e0fffe03 	ldbu	r3,-8(fp)
   13688:	008000f4 	movhi	r2,3
   1368c:	1096bb04 	addi	r2,r2,23276
   13690:	18c7883a 	add	r3,r3,r3
   13694:	18c7883a 	add	r3,r3,r3
   13698:	10c5883a 	add	r2,r2,r3
   1369c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   136a0:	e0ffff03 	ldbu	r3,-4(fp)
   136a4:	008000f4 	movhi	r2,3
   136a8:	1096bb04 	addi	r2,r2,23276
   136ac:	18c7883a 	add	r3,r3,r3
   136b0:	18c7883a 	add	r3,r3,r3
   136b4:	10c5883a 	add	r2,r2,r3
   136b8:	e0fff817 	ldw	r3,-32(fp)
   136bc:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   136c0:	e0bff817 	ldw	r2,-32(fp)
   136c4:	10800d03 	ldbu	r2,52(r2)
   136c8:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   136cc:	e0bff817 	ldw	r2,-32(fp)
   136d0:	10800d83 	ldbu	r2,54(r2)
   136d4:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   136d8:	e0bff817 	ldw	r2,-32(fp)
   136dc:	10800d43 	ldbu	r2,53(r2)
   136e0:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   136e4:	e0fffc03 	ldbu	r3,-16(fp)
   136e8:	d0a7f844 	addi	r2,gp,-24607
   136ec:	1885883a 	add	r2,r3,r2
   136f0:	10c00003 	ldbu	r3,0(r2)
   136f4:	e0bffc83 	ldbu	r2,-14(fp)
   136f8:	1884703a 	and	r2,r3,r2
   136fc:	10803fcc 	andi	r2,r2,255
   13700:	10002826 	beq	r2,zero,137a4 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   13704:	e0fffc03 	ldbu	r3,-16(fp)
   13708:	e13ffc03 	ldbu	r4,-16(fp)
   1370c:	d0a7f844 	addi	r2,gp,-24607
   13710:	2085883a 	add	r2,r4,r2
   13714:	10800003 	ldbu	r2,0(r2)
   13718:	1009883a 	mov	r4,r2
   1371c:	e0bffc83 	ldbu	r2,-14(fp)
   13720:	0084303a 	nor	r2,zero,r2
   13724:	2084703a 	and	r2,r4,r2
   13728:	1009883a 	mov	r4,r2
   1372c:	d0a7f844 	addi	r2,gp,-24607
   13730:	1885883a 	add	r2,r3,r2
   13734:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   13738:	e0fffc03 	ldbu	r3,-16(fp)
   1373c:	d0a7f844 	addi	r2,gp,-24607
   13740:	1885883a 	add	r2,r3,r2
   13744:	10800003 	ldbu	r2,0(r2)
   13748:	10803fcc 	andi	r2,r2,255
   1374c:	1000061e 	bne	r2,zero,13768 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   13750:	e0bffc43 	ldbu	r2,-15(fp)
   13754:	0084303a 	nor	r2,zero,r2
   13758:	1007883a 	mov	r3,r2
   1375c:	d0a7f803 	ldbu	r2,-24608(gp)
   13760:	1884703a 	and	r2,r3,r2
   13764:	d0a7f805 	stb	r2,-24608(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   13768:	d0e7f803 	ldbu	r3,-24608(gp)
   1376c:	e0bffb83 	ldbu	r2,-18(fp)
   13770:	1884b03a 	or	r2,r3,r2
   13774:	d0a7f805 	stb	r2,-24608(gp)
         OSRdyTbl[y_new] |= bitx_new;
   13778:	e0fffb03 	ldbu	r3,-20(fp)
   1377c:	e13ffb03 	ldbu	r4,-20(fp)
   13780:	d0a7f844 	addi	r2,gp,-24607
   13784:	2085883a 	add	r2,r4,r2
   13788:	11000003 	ldbu	r4,0(r2)
   1378c:	e0bffbc3 	ldbu	r2,-17(fp)
   13790:	2084b03a 	or	r2,r4,r2
   13794:	1009883a 	mov	r4,r2
   13798:	d0a7f844 	addi	r2,gp,-24607
   1379c:	1885883a 	add	r2,r3,r2
   137a0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   137a4:	e0bff817 	ldw	r2,-32(fp)
   137a8:	10800717 	ldw	r2,28(r2)
   137ac:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   137b0:	e0bff317 	ldw	r2,-52(fp)
   137b4:	10003326 	beq	r2,zero,13884 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   137b8:	e0bffc03 	ldbu	r2,-16(fp)
   137bc:	e0fffc03 	ldbu	r3,-16(fp)
   137c0:	e13ff317 	ldw	r4,-52(fp)
   137c4:	20c7883a 	add	r3,r4,r3
   137c8:	18c002c4 	addi	r3,r3,11
   137cc:	18c00003 	ldbu	r3,0(r3)
   137d0:	1809883a 	mov	r4,r3
   137d4:	e0fffc83 	ldbu	r3,-14(fp)
   137d8:	00c6303a 	nor	r3,zero,r3
   137dc:	20c6703a 	and	r3,r4,r3
   137e0:	1809883a 	mov	r4,r3
   137e4:	e0fff317 	ldw	r3,-52(fp)
   137e8:	1885883a 	add	r2,r3,r2
   137ec:	108002c4 	addi	r2,r2,11
   137f0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   137f4:	e0bffc03 	ldbu	r2,-16(fp)
   137f8:	e0fff317 	ldw	r3,-52(fp)
   137fc:	1885883a 	add	r2,r3,r2
   13800:	108002c4 	addi	r2,r2,11
   13804:	10800003 	ldbu	r2,0(r2)
   13808:	10803fcc 	andi	r2,r2,255
   1380c:	1000091e 	bne	r2,zero,13834 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   13810:	e0bff317 	ldw	r2,-52(fp)
   13814:	10800283 	ldbu	r2,10(r2)
   13818:	1007883a 	mov	r3,r2
   1381c:	e0bffc43 	ldbu	r2,-15(fp)
   13820:	0084303a 	nor	r2,zero,r2
   13824:	1884703a 	and	r2,r3,r2
   13828:	1007883a 	mov	r3,r2
   1382c:	e0bff317 	ldw	r2,-52(fp)
   13830:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   13834:	e0bff317 	ldw	r2,-52(fp)
   13838:	10c00283 	ldbu	r3,10(r2)
   1383c:	e0bffb83 	ldbu	r2,-18(fp)
   13840:	1884b03a 	or	r2,r3,r2
   13844:	1007883a 	mov	r3,r2
   13848:	e0bff317 	ldw	r2,-52(fp)
   1384c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   13850:	e0bffb03 	ldbu	r2,-20(fp)
   13854:	e0fffb03 	ldbu	r3,-20(fp)
   13858:	e13ff317 	ldw	r4,-52(fp)
   1385c:	20c7883a 	add	r3,r4,r3
   13860:	18c002c4 	addi	r3,r3,11
   13864:	19000003 	ldbu	r4,0(r3)
   13868:	e0fffbc3 	ldbu	r3,-17(fp)
   1386c:	20c6b03a 	or	r3,r4,r3
   13870:	1809883a 	mov	r4,r3
   13874:	e0fff317 	ldw	r3,-52(fp)
   13878:	1885883a 	add	r2,r3,r2
   1387c:	108002c4 	addi	r2,r2,11
   13880:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   13884:	e0bff817 	ldw	r2,-32(fp)
   13888:	10800817 	ldw	r2,32(r2)
   1388c:	10004226 	beq	r2,zero,13998 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   13890:	e0bff817 	ldw	r2,-32(fp)
   13894:	10800817 	ldw	r2,32(r2)
   13898:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   1389c:	e0bff417 	ldw	r2,-48(fp)
   138a0:	10800017 	ldw	r2,0(r2)
   138a4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   138a8:	00003906 	br	13990 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   138ac:	e0bffc03 	ldbu	r2,-16(fp)
   138b0:	e0fffc03 	ldbu	r3,-16(fp)
   138b4:	e13ff317 	ldw	r4,-52(fp)
   138b8:	20c7883a 	add	r3,r4,r3
   138bc:	18c002c4 	addi	r3,r3,11
   138c0:	18c00003 	ldbu	r3,0(r3)
   138c4:	1809883a 	mov	r4,r3
   138c8:	e0fffc83 	ldbu	r3,-14(fp)
   138cc:	00c6303a 	nor	r3,zero,r3
   138d0:	20c6703a 	and	r3,r4,r3
   138d4:	1809883a 	mov	r4,r3
   138d8:	e0fff317 	ldw	r3,-52(fp)
   138dc:	1885883a 	add	r2,r3,r2
   138e0:	108002c4 	addi	r2,r2,11
   138e4:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   138e8:	e0bffc03 	ldbu	r2,-16(fp)
   138ec:	e0fff317 	ldw	r3,-52(fp)
   138f0:	1885883a 	add	r2,r3,r2
   138f4:	108002c4 	addi	r2,r2,11
   138f8:	10800003 	ldbu	r2,0(r2)
   138fc:	10803fcc 	andi	r2,r2,255
   13900:	1000091e 	bne	r2,zero,13928 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   13904:	e0bff317 	ldw	r2,-52(fp)
   13908:	10800283 	ldbu	r2,10(r2)
   1390c:	1007883a 	mov	r3,r2
   13910:	e0bffc43 	ldbu	r2,-15(fp)
   13914:	0084303a 	nor	r2,zero,r2
   13918:	1884703a 	and	r2,r3,r2
   1391c:	1007883a 	mov	r3,r2
   13920:	e0bff317 	ldw	r2,-52(fp)
   13924:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   13928:	e0bff317 	ldw	r2,-52(fp)
   1392c:	10c00283 	ldbu	r3,10(r2)
   13930:	e0bffb83 	ldbu	r2,-18(fp)
   13934:	1884b03a 	or	r2,r3,r2
   13938:	1007883a 	mov	r3,r2
   1393c:	e0bff317 	ldw	r2,-52(fp)
   13940:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   13944:	e0bffb03 	ldbu	r2,-20(fp)
   13948:	e0fffb03 	ldbu	r3,-20(fp)
   1394c:	e13ff317 	ldw	r4,-52(fp)
   13950:	20c7883a 	add	r3,r4,r3
   13954:	18c002c4 	addi	r3,r3,11
   13958:	19000003 	ldbu	r4,0(r3)
   1395c:	e0fffbc3 	ldbu	r3,-17(fp)
   13960:	20c6b03a 	or	r3,r4,r3
   13964:	1809883a 	mov	r4,r3
   13968:	e0fff317 	ldw	r3,-52(fp)
   1396c:	1885883a 	add	r2,r3,r2
   13970:	108002c4 	addi	r2,r2,11
   13974:	11000005 	stb	r4,0(r2)
            pevents++;
   13978:	e0bff417 	ldw	r2,-48(fp)
   1397c:	10800104 	addi	r2,r2,4
   13980:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   13984:	e0bff417 	ldw	r2,-48(fp)
   13988:	10800017 	ldw	r2,0(r2)
   1398c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   13990:	e0bff317 	ldw	r2,-52(fp)
   13994:	103fc51e 	bne	r2,zero,138ac <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   13998:	e0bff817 	ldw	r2,-32(fp)
   1399c:	e0ffff03 	ldbu	r3,-4(fp)
   139a0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   139a4:	e0bff817 	ldw	r2,-32(fp)
   139a8:	e0fffb03 	ldbu	r3,-20(fp)
   139ac:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   139b0:	e0bff817 	ldw	r2,-32(fp)
   139b4:	e0fffb43 	ldbu	r3,-19(fp)
   139b8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   139bc:	e0bff817 	ldw	r2,-32(fp)
   139c0:	e0fffb83 	ldbu	r3,-18(fp)
   139c4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   139c8:	e0bff817 	ldw	r2,-32(fp)
   139cc:	e0fffbc3 	ldbu	r3,-17(fp)
   139d0:	10c00d45 	stb	r3,53(r2)
   139d4:	e0bff517 	ldw	r2,-44(fp)
   139d8:	e0bffa15 	stw	r2,-24(fp)
   139dc:	e0bffa17 	ldw	r2,-24(fp)
   139e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   139e4:	d0a7eb03 	ldbu	r2,-24660(gp)
   139e8:	10803fcc 	andi	r2,r2,255
   139ec:	10800058 	cmpnei	r2,r2,1
   139f0:	1000011e 	bne	r2,zero,139f8 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   139f4:	000e7b80 	call	e7b8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   139f8:	0005883a 	mov	r2,zero
}
   139fc:	e037883a 	mov	sp,fp
   13a00:	dfc00117 	ldw	ra,4(sp)
   13a04:	df000017 	ldw	fp,0(sp)
   13a08:	dec00204 	addi	sp,sp,8
   13a0c:	f800283a 	ret

00013a10 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   13a10:	deffee04 	addi	sp,sp,-72
   13a14:	dfc01115 	stw	ra,68(sp)
   13a18:	df001015 	stw	fp,64(sp)
   13a1c:	df001004 	addi	fp,sp,64
   13a20:	e13ffc15 	stw	r4,-16(fp)
   13a24:	e17ffd15 	stw	r5,-12(fp)
   13a28:	e1bffe15 	stw	r6,-8(fp)
   13a2c:	3805883a 	mov	r2,r7
   13a30:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   13a34:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   13a38:	e0bfff03 	ldbu	r2,-4(fp)
   13a3c:	10800a70 	cmpltui	r2,r2,41
   13a40:	1000021e 	bne	r2,zero,13a4c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   13a44:	00800a84 	movi	r2,42
   13a48:	00005706 	br	13ba8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a4c:	0005303a 	rdctl	r2,status
   13a50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a54:	e0fffb17 	ldw	r3,-20(fp)
   13a58:	00bfff84 	movi	r2,-2
   13a5c:	1884703a 	and	r2,r3,r2
   13a60:	1001703a 	wrctl	status,r2
  
  return context;
   13a64:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13a68:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   13a6c:	d0a7fb03 	ldbu	r2,-24596(gp)
   13a70:	10803fcc 	andi	r2,r2,255
   13a74:	10000626 	beq	r2,zero,13a90 <OSTaskCreate+0x80>
   13a78:	e0bff317 	ldw	r2,-52(fp)
   13a7c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a80:	e0bff417 	ldw	r2,-48(fp)
   13a84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   13a88:	00800f04 	movi	r2,60
   13a8c:	00004606 	br	13ba8 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   13a90:	e0ffff03 	ldbu	r3,-4(fp)
   13a94:	008000f4 	movhi	r2,3
   13a98:	1096bb04 	addi	r2,r2,23276
   13a9c:	18c7883a 	add	r3,r3,r3
   13aa0:	18c7883a 	add	r3,r3,r3
   13aa4:	10c5883a 	add	r2,r2,r3
   13aa8:	10800017 	ldw	r2,0(r2)
   13aac:	1000391e 	bne	r2,zero,13b94 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   13ab0:	e0ffff03 	ldbu	r3,-4(fp)
   13ab4:	008000f4 	movhi	r2,3
   13ab8:	1096bb04 	addi	r2,r2,23276
   13abc:	18c7883a 	add	r3,r3,r3
   13ac0:	18c7883a 	add	r3,r3,r3
   13ac4:	10c5883a 	add	r2,r2,r3
   13ac8:	00c00044 	movi	r3,1
   13acc:	10c00015 	stw	r3,0(r2)
   13ad0:	e0bff317 	ldw	r2,-52(fp)
   13ad4:	e0bff515 	stw	r2,-44(fp)
   13ad8:	e0bff517 	ldw	r2,-44(fp)
   13adc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   13ae0:	000f883a 	mov	r7,zero
   13ae4:	e1bffe17 	ldw	r6,-8(fp)
   13ae8:	e17ffd17 	ldw	r5,-12(fp)
   13aec:	e13ffc17 	ldw	r4,-16(fp)
   13af0:	00199e40 	call	199e4 <OSTaskStkInit>
   13af4:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   13af8:	e0bfff03 	ldbu	r2,-4(fp)
   13afc:	d8000215 	stw	zero,8(sp)
   13b00:	d8000115 	stw	zero,4(sp)
   13b04:	d8000015 	stw	zero,0(sp)
   13b08:	000f883a 	mov	r7,zero
   13b0c:	000d883a 	mov	r6,zero
   13b10:	e17ff717 	ldw	r5,-36(fp)
   13b14:	1009883a 	mov	r4,r2
   13b18:	000ebc80 	call	ebc8 <OS_TCBInit>
   13b1c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   13b20:	e0bff803 	ldbu	r2,-32(fp)
   13b24:	1000061e 	bne	r2,zero,13b40 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   13b28:	d0a7eb03 	ldbu	r2,-24660(gp)
   13b2c:	10803fcc 	andi	r2,r2,255
   13b30:	10800058 	cmpnei	r2,r2,1
   13b34:	1000151e 	bne	r2,zero,13b8c <OSTaskCreate+0x17c>
                OS_Sched();
   13b38:	000e7b80 	call	e7b8 <OS_Sched>
   13b3c:	00001306 	br	13b8c <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b40:	0005303a 	rdctl	r2,status
   13b44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b48:	e0fffa17 	ldw	r3,-24(fp)
   13b4c:	00bfff84 	movi	r2,-2
   13b50:	1884703a 	and	r2,r3,r2
   13b54:	1001703a 	wrctl	status,r2
  
  return context;
   13b58:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   13b5c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   13b60:	e0ffff03 	ldbu	r3,-4(fp)
   13b64:	008000f4 	movhi	r2,3
   13b68:	1096bb04 	addi	r2,r2,23276
   13b6c:	18c7883a 	add	r3,r3,r3
   13b70:	18c7883a 	add	r3,r3,r3
   13b74:	10c5883a 	add	r2,r2,r3
   13b78:	10000015 	stw	zero,0(r2)
   13b7c:	e0bff317 	ldw	r2,-52(fp)
   13b80:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b84:	e0bff617 	ldw	r2,-40(fp)
   13b88:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   13b8c:	e0bff803 	ldbu	r2,-32(fp)
   13b90:	00000506 	br	13ba8 <OSTaskCreate+0x198>
   13b94:	e0bff317 	ldw	r2,-52(fp)
   13b98:	e0bff915 	stw	r2,-28(fp)
   13b9c:	e0bff917 	ldw	r2,-28(fp)
   13ba0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   13ba4:	00800a04 	movi	r2,40
}
   13ba8:	e037883a 	mov	sp,fp
   13bac:	dfc00117 	ldw	ra,4(sp)
   13bb0:	df000017 	ldw	fp,0(sp)
   13bb4:	dec00204 	addi	sp,sp,8
   13bb8:	f800283a 	ret

00013bbc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   13bbc:	deffec04 	addi	sp,sp,-80
   13bc0:	dfc01315 	stw	ra,76(sp)
   13bc4:	df001215 	stw	fp,72(sp)
   13bc8:	df001204 	addi	fp,sp,72
   13bcc:	e13ffa15 	stw	r4,-24(fp)
   13bd0:	e17ffb15 	stw	r5,-20(fp)
   13bd4:	e1bffc15 	stw	r6,-16(fp)
   13bd8:	3809883a 	mov	r4,r7
   13bdc:	e0c00217 	ldw	r3,8(fp)
   13be0:	e0800617 	ldw	r2,24(fp)
   13be4:	e13ffd05 	stb	r4,-12(fp)
   13be8:	e0fffe0d 	sth	r3,-8(fp)
   13bec:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   13bf0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   13bf4:	e0bffd03 	ldbu	r2,-12(fp)
   13bf8:	10800a70 	cmpltui	r2,r2,41
   13bfc:	1000021e 	bne	r2,zero,13c08 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   13c00:	00800a84 	movi	r2,42
   13c04:	00006106 	br	13d8c <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c08:	0005303a 	rdctl	r2,status
   13c0c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c10:	e0fff917 	ldw	r3,-28(fp)
   13c14:	00bfff84 	movi	r2,-2
   13c18:	1884703a 	and	r2,r3,r2
   13c1c:	1001703a 	wrctl	status,r2
  
  return context;
   13c20:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13c24:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   13c28:	d0a7fb03 	ldbu	r2,-24596(gp)
   13c2c:	10803fcc 	andi	r2,r2,255
   13c30:	10000626 	beq	r2,zero,13c4c <OSTaskCreateExt+0x90>
   13c34:	e0bff117 	ldw	r2,-60(fp)
   13c38:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c3c:	e0bff217 	ldw	r2,-56(fp)
   13c40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   13c44:	00800f04 	movi	r2,60
   13c48:	00005006 	br	13d8c <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   13c4c:	e0fffd03 	ldbu	r3,-12(fp)
   13c50:	008000f4 	movhi	r2,3
   13c54:	1096bb04 	addi	r2,r2,23276
   13c58:	18c7883a 	add	r3,r3,r3
   13c5c:	18c7883a 	add	r3,r3,r3
   13c60:	10c5883a 	add	r2,r2,r3
   13c64:	10800017 	ldw	r2,0(r2)
   13c68:	1000431e 	bne	r2,zero,13d78 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   13c6c:	e0fffd03 	ldbu	r3,-12(fp)
   13c70:	008000f4 	movhi	r2,3
   13c74:	1096bb04 	addi	r2,r2,23276
   13c78:	18c7883a 	add	r3,r3,r3
   13c7c:	18c7883a 	add	r3,r3,r3
   13c80:	10c5883a 	add	r2,r2,r3
   13c84:	00c00044 	movi	r3,1
   13c88:	10c00015 	stw	r3,0(r2)
   13c8c:	e0bff117 	ldw	r2,-60(fp)
   13c90:	e0bff315 	stw	r2,-52(fp)
   13c94:	e0bff317 	ldw	r2,-52(fp)
   13c98:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   13c9c:	e0bfff0b 	ldhu	r2,-4(fp)
   13ca0:	100d883a 	mov	r6,r2
   13ca4:	e1400417 	ldw	r5,16(fp)
   13ca8:	e1000317 	ldw	r4,12(fp)
   13cac:	0014c1c0 	call	14c1c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   13cb0:	e0bfff0b 	ldhu	r2,-4(fp)
   13cb4:	100f883a 	mov	r7,r2
   13cb8:	e1bffc17 	ldw	r6,-16(fp)
   13cbc:	e17ffb17 	ldw	r5,-20(fp)
   13cc0:	e13ffa17 	ldw	r4,-24(fp)
   13cc4:	00199e40 	call	199e4 <OSTaskStkInit>
   13cc8:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   13ccc:	e0fffd03 	ldbu	r3,-12(fp)
   13cd0:	e13ffe0b 	ldhu	r4,-8(fp)
   13cd4:	e0bfff0b 	ldhu	r2,-4(fp)
   13cd8:	d8800215 	stw	r2,8(sp)
   13cdc:	e0800517 	ldw	r2,20(fp)
   13ce0:	d8800115 	stw	r2,4(sp)
   13ce4:	e0800417 	ldw	r2,16(fp)
   13ce8:	d8800015 	stw	r2,0(sp)
   13cec:	200f883a 	mov	r7,r4
   13cf0:	e1800317 	ldw	r6,12(fp)
   13cf4:	e17ff517 	ldw	r5,-44(fp)
   13cf8:	1809883a 	mov	r4,r3
   13cfc:	000ebc80 	call	ebc8 <OS_TCBInit>
   13d00:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   13d04:	e0bff603 	ldbu	r2,-40(fp)
   13d08:	1000061e 	bne	r2,zero,13d24 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   13d0c:	d0a7eb03 	ldbu	r2,-24660(gp)
   13d10:	10803fcc 	andi	r2,r2,255
   13d14:	10800058 	cmpnei	r2,r2,1
   13d18:	1000151e 	bne	r2,zero,13d70 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   13d1c:	000e7b80 	call	e7b8 <OS_Sched>
   13d20:	00001306 	br	13d70 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d24:	0005303a 	rdctl	r2,status
   13d28:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d2c:	e0fff817 	ldw	r3,-32(fp)
   13d30:	00bfff84 	movi	r2,-2
   13d34:	1884703a 	and	r2,r3,r2
   13d38:	1001703a 	wrctl	status,r2
  
  return context;
   13d3c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   13d40:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   13d44:	e0fffd03 	ldbu	r3,-12(fp)
   13d48:	008000f4 	movhi	r2,3
   13d4c:	1096bb04 	addi	r2,r2,23276
   13d50:	18c7883a 	add	r3,r3,r3
   13d54:	18c7883a 	add	r3,r3,r3
   13d58:	10c5883a 	add	r2,r2,r3
   13d5c:	10000015 	stw	zero,0(r2)
   13d60:	e0bff117 	ldw	r2,-60(fp)
   13d64:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d68:	e0bff417 	ldw	r2,-48(fp)
   13d6c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   13d70:	e0bff603 	ldbu	r2,-40(fp)
   13d74:	00000506 	br	13d8c <OSTaskCreateExt+0x1d0>
   13d78:	e0bff117 	ldw	r2,-60(fp)
   13d7c:	e0bff715 	stw	r2,-36(fp)
   13d80:	e0bff717 	ldw	r2,-36(fp)
   13d84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   13d88:	00800a04 	movi	r2,40
}
   13d8c:	e037883a 	mov	sp,fp
   13d90:	dfc00117 	ldw	ra,4(sp)
   13d94:	df000017 	ldw	fp,0(sp)
   13d98:	dec00204 	addi	sp,sp,8
   13d9c:	f800283a 	ret

00013da0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   13da0:	defff404 	addi	sp,sp,-48
   13da4:	dfc00b15 	stw	ra,44(sp)
   13da8:	df000a15 	stw	fp,40(sp)
   13dac:	df000a04 	addi	fp,sp,40
   13db0:	2005883a 	mov	r2,r4
   13db4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   13db8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   13dbc:	d0a7fb03 	ldbu	r2,-24596(gp)
   13dc0:	10803fcc 	andi	r2,r2,255
   13dc4:	10000226 	beq	r2,zero,13dd0 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   13dc8:	00801004 	movi	r2,64
   13dcc:	0000c006 	br	140d0 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   13dd0:	e0bfff03 	ldbu	r2,-4(fp)
   13dd4:	10800a18 	cmpnei	r2,r2,40
   13dd8:	1000021e 	bne	r2,zero,13de4 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   13ddc:	00800f84 	movi	r2,62
   13de0:	0000bb06 	br	140d0 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   13de4:	e0bfff03 	ldbu	r2,-4(fp)
   13de8:	10800a30 	cmpltui	r2,r2,40
   13dec:	1000051e 	bne	r2,zero,13e04 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   13df0:	e0bfff03 	ldbu	r2,-4(fp)
   13df4:	10803fe0 	cmpeqi	r2,r2,255
   13df8:	1000021e 	bne	r2,zero,13e04 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   13dfc:	00800a84 	movi	r2,42
   13e00:	0000b306 	br	140d0 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e04:	0005303a 	rdctl	r2,status
   13e08:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e0c:	e0fffe17 	ldw	r3,-8(fp)
   13e10:	00bfff84 	movi	r2,-2
   13e14:	1884703a 	and	r2,r3,r2
   13e18:	1001703a 	wrctl	status,r2
  
  return context;
   13e1c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   13e20:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   13e24:	e0bfff03 	ldbu	r2,-4(fp)
   13e28:	10803fd8 	cmpnei	r2,r2,255
   13e2c:	1000031e 	bne	r2,zero,13e3c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   13e30:	d0a7fc17 	ldw	r2,-24592(gp)
   13e34:	10800c83 	ldbu	r2,50(r2)
   13e38:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   13e3c:	e0ffff03 	ldbu	r3,-4(fp)
   13e40:	008000f4 	movhi	r2,3
   13e44:	1096bb04 	addi	r2,r2,23276
   13e48:	18c7883a 	add	r3,r3,r3
   13e4c:	18c7883a 	add	r3,r3,r3
   13e50:	10c5883a 	add	r2,r2,r3
   13e54:	10800017 	ldw	r2,0(r2)
   13e58:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   13e5c:	e0bff817 	ldw	r2,-32(fp)
   13e60:	1000061e 	bne	r2,zero,13e7c <OSTaskDel+0xdc>
   13e64:	e0bff617 	ldw	r2,-40(fp)
   13e68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e6c:	e0bff717 	ldw	r2,-36(fp)
   13e70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   13e74:	008010c4 	movi	r2,67
   13e78:	00009506 	br	140d0 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   13e7c:	e0bff817 	ldw	r2,-32(fp)
   13e80:	10800058 	cmpnei	r2,r2,1
   13e84:	1000061e 	bne	r2,zero,13ea0 <OSTaskDel+0x100>
   13e88:	e0bff617 	ldw	r2,-40(fp)
   13e8c:	e0bff915 	stw	r2,-28(fp)
   13e90:	e0bff917 	ldw	r2,-28(fp)
   13e94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   13e98:	00800f44 	movi	r2,61
   13e9c:	00008c06 	br	140d0 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   13ea0:	e0bff817 	ldw	r2,-32(fp)
   13ea4:	10800d03 	ldbu	r2,52(r2)
   13ea8:	10c03fcc 	andi	r3,r2,255
   13eac:	e0bff817 	ldw	r2,-32(fp)
   13eb0:	10800d03 	ldbu	r2,52(r2)
   13eb4:	11003fcc 	andi	r4,r2,255
   13eb8:	d0a7f844 	addi	r2,gp,-24607
   13ebc:	2085883a 	add	r2,r4,r2
   13ec0:	10800003 	ldbu	r2,0(r2)
   13ec4:	1009883a 	mov	r4,r2
   13ec8:	e0bff817 	ldw	r2,-32(fp)
   13ecc:	10800d43 	ldbu	r2,53(r2)
   13ed0:	0084303a 	nor	r2,zero,r2
   13ed4:	2084703a 	and	r2,r4,r2
   13ed8:	1009883a 	mov	r4,r2
   13edc:	d0a7f844 	addi	r2,gp,-24607
   13ee0:	1885883a 	add	r2,r3,r2
   13ee4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   13ee8:	e0bff817 	ldw	r2,-32(fp)
   13eec:	10800d03 	ldbu	r2,52(r2)
   13ef0:	10c03fcc 	andi	r3,r2,255
   13ef4:	d0a7f844 	addi	r2,gp,-24607
   13ef8:	1885883a 	add	r2,r3,r2
   13efc:	10800003 	ldbu	r2,0(r2)
   13f00:	10803fcc 	andi	r2,r2,255
   13f04:	1000071e 	bne	r2,zero,13f24 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   13f08:	e0bff817 	ldw	r2,-32(fp)
   13f0c:	10800d83 	ldbu	r2,54(r2)
   13f10:	0084303a 	nor	r2,zero,r2
   13f14:	1007883a 	mov	r3,r2
   13f18:	d0a7f803 	ldbu	r2,-24608(gp)
   13f1c:	1884703a 	and	r2,r3,r2
   13f20:	d0a7f805 	stb	r2,-24608(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   13f24:	e0bff817 	ldw	r2,-32(fp)
   13f28:	10800717 	ldw	r2,28(r2)
   13f2c:	10000526 	beq	r2,zero,13f44 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   13f30:	e0bff817 	ldw	r2,-32(fp)
   13f34:	10800717 	ldw	r2,28(r2)
   13f38:	100b883a 	mov	r5,r2
   13f3c:	e13ff817 	ldw	r4,-32(fp)
   13f40:	000e1640 	call	e164 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   13f44:	e0bff817 	ldw	r2,-32(fp)
   13f48:	10800817 	ldw	r2,32(r2)
   13f4c:	10000526 	beq	r2,zero,13f64 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   13f50:	e0bff817 	ldw	r2,-32(fp)
   13f54:	10800817 	ldw	r2,32(r2)
   13f58:	100b883a 	mov	r5,r2
   13f5c:	e13ff817 	ldw	r4,-32(fp)
   13f60:	000e21c0 	call	e21c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   13f64:	e0bff817 	ldw	r2,-32(fp)
   13f68:	10800a17 	ldw	r2,40(r2)
   13f6c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   13f70:	e0bffb17 	ldw	r2,-20(fp)
   13f74:	10000226 	beq	r2,zero,13f80 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   13f78:	e13ffb17 	ldw	r4,-20(fp)
   13f7c:	00106fc0 	call	106fc <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   13f80:	e0bff817 	ldw	r2,-32(fp)
   13f84:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   13f88:	e0bff817 	ldw	r2,-32(fp)
   13f8c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   13f90:	e0bff817 	ldw	r2,-32(fp)
   13f94:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   13f98:	d0a7e903 	ldbu	r2,-24668(gp)
   13f9c:	10803fcc 	andi	r2,r2,255
   13fa0:	10803fe0 	cmpeqi	r2,r2,255
   13fa4:	1000031e 	bne	r2,zero,13fb4 <OSTaskDel+0x214>
        OSLockNesting++;
   13fa8:	d0a7e903 	ldbu	r2,-24668(gp)
   13fac:	10800044 	addi	r2,r2,1
   13fb0:	d0a7e905 	stb	r2,-24668(gp)
   13fb4:	e0bff617 	ldw	r2,-40(fp)
   13fb8:	e0bffd15 	stw	r2,-12(fp)
   13fbc:	e0bffd17 	ldw	r2,-12(fp)
   13fc0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   13fc4:	000dd4c0 	call	dd4c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13fc8:	0005303a 	rdctl	r2,status
   13fcc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13fd0:	e0fffa17 	ldw	r3,-24(fp)
   13fd4:	00bfff84 	movi	r2,-2
   13fd8:	1884703a 	and	r2,r3,r2
   13fdc:	1001703a 	wrctl	status,r2
  
  return context;
   13fe0:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   13fe4:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   13fe8:	d0a7e903 	ldbu	r2,-24668(gp)
   13fec:	10803fcc 	andi	r2,r2,255
   13ff0:	10000326 	beq	r2,zero,14000 <OSTaskDel+0x260>
        OSLockNesting--;
   13ff4:	d0a7e903 	ldbu	r2,-24668(gp)
   13ff8:	10bfffc4 	addi	r2,r2,-1
   13ffc:	d0a7e905 	stb	r2,-24668(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   14000:	e13ff817 	ldw	r4,-32(fp)
   14004:	0019b640 	call	19b64 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   14008:	d0a7f443 	ldbu	r2,-24623(gp)
   1400c:	10bfffc4 	addi	r2,r2,-1
   14010:	d0a7f445 	stb	r2,-24623(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   14014:	e0ffff03 	ldbu	r3,-4(fp)
   14018:	008000f4 	movhi	r2,3
   1401c:	1096bb04 	addi	r2,r2,23276
   14020:	18c7883a 	add	r3,r3,r3
   14024:	18c7883a 	add	r3,r3,r3
   14028:	10c5883a 	add	r2,r2,r3
   1402c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   14030:	e0bff817 	ldw	r2,-32(fp)
   14034:	10800617 	ldw	r2,24(r2)
   14038:	1000071e 	bne	r2,zero,14058 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1403c:	e0bff817 	ldw	r2,-32(fp)
   14040:	10800517 	ldw	r2,20(r2)
   14044:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   14048:	e0bff817 	ldw	r2,-32(fp)
   1404c:	10800517 	ldw	r2,20(r2)
   14050:	d0a7ee15 	stw	r2,-24648(gp)
   14054:	00000a06 	br	14080 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   14058:	e0bff817 	ldw	r2,-32(fp)
   1405c:	10800617 	ldw	r2,24(r2)
   14060:	e0fff817 	ldw	r3,-32(fp)
   14064:	18c00517 	ldw	r3,20(r3)
   14068:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1406c:	e0bff817 	ldw	r2,-32(fp)
   14070:	10800517 	ldw	r2,20(r2)
   14074:	e0fff817 	ldw	r3,-32(fp)
   14078:	18c00617 	ldw	r3,24(r3)
   1407c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   14080:	d0e7f317 	ldw	r3,-24628(gp)
   14084:	e0bff817 	ldw	r2,-32(fp)
   14088:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1408c:	e0bff817 	ldw	r2,-32(fp)
   14090:	d0a7f315 	stw	r2,-24628(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   14094:	e0bff817 	ldw	r2,-32(fp)
   14098:	00c00fc4 	movi	r3,63
   1409c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   140a0:	e0bff817 	ldw	r2,-32(fp)
   140a4:	10001345 	stb	zero,77(r2)
   140a8:	e0bff617 	ldw	r2,-40(fp)
   140ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   140b0:	e0bffc17 	ldw	r2,-16(fp)
   140b4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   140b8:	d0a7eb03 	ldbu	r2,-24660(gp)
   140bc:	10803fcc 	andi	r2,r2,255
   140c0:	10800058 	cmpnei	r2,r2,1
   140c4:	1000011e 	bne	r2,zero,140cc <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   140c8:	000e7b80 	call	e7b8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   140cc:	0005883a 	mov	r2,zero
}
   140d0:	e037883a 	mov	sp,fp
   140d4:	dfc00117 	ldw	ra,4(sp)
   140d8:	df000017 	ldw	fp,0(sp)
   140dc:	dec00204 	addi	sp,sp,8
   140e0:	f800283a 	ret

000140e4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   140e4:	defff504 	addi	sp,sp,-44
   140e8:	df000a15 	stw	fp,40(sp)
   140ec:	df000a04 	addi	fp,sp,40
   140f0:	2005883a 	mov	r2,r4
   140f4:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   140f8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   140fc:	e0bfff03 	ldbu	r2,-4(fp)
   14100:	10800a18 	cmpnei	r2,r2,40
   14104:	1000021e 	bne	r2,zero,14110 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   14108:	00800f84 	movi	r2,62
   1410c:	00004506 	br	14224 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   14110:	e0bfff03 	ldbu	r2,-4(fp)
   14114:	10800a30 	cmpltui	r2,r2,40
   14118:	1000051e 	bne	r2,zero,14130 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1411c:	e0bfff03 	ldbu	r2,-4(fp)
   14120:	10803fe0 	cmpeqi	r2,r2,255
   14124:	1000021e 	bne	r2,zero,14130 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   14128:	00800a84 	movi	r2,42
   1412c:	00003d06 	br	14224 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   14130:	e0bfff03 	ldbu	r2,-4(fp)
   14134:	10803fd8 	cmpnei	r2,r2,255
   14138:	1000111e 	bne	r2,zero,14180 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1413c:	0005303a 	rdctl	r2,status
   14140:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14144:	e0fff917 	ldw	r3,-28(fp)
   14148:	00bfff84 	movi	r2,-2
   1414c:	1884703a 	and	r2,r3,r2
   14150:	1001703a 	wrctl	status,r2
  
  return context;
   14154:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   14158:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1415c:	d0a7fc17 	ldw	r2,-24592(gp)
   14160:	10800dc3 	ldbu	r2,55(r2)
   14164:	e0bff805 	stb	r2,-32(fp)
   14168:	e0bff617 	ldw	r2,-40(fp)
   1416c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14170:	e0bffe17 	ldw	r2,-8(fp)
   14174:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   14178:	e0bff803 	ldbu	r2,-32(fp)
   1417c:	00002906 	br	14224 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14180:	0005303a 	rdctl	r2,status
   14184:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14188:	e0fff717 	ldw	r3,-36(fp)
   1418c:	00bfff84 	movi	r2,-2
   14190:	1884703a 	and	r2,r3,r2
   14194:	1001703a 	wrctl	status,r2
  
  return context;
   14198:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   1419c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   141a0:	e0ffff03 	ldbu	r3,-4(fp)
   141a4:	008000f4 	movhi	r2,3
   141a8:	1096bb04 	addi	r2,r2,23276
   141ac:	18c7883a 	add	r3,r3,r3
   141b0:	18c7883a 	add	r3,r3,r3
   141b4:	10c5883a 	add	r2,r2,r3
   141b8:	10800017 	ldw	r2,0(r2)
   141bc:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   141c0:	e0bffb17 	ldw	r2,-20(fp)
   141c4:	1000061e 	bne	r2,zero,141e0 <OSTaskDelReq+0xfc>
   141c8:	e0bff617 	ldw	r2,-40(fp)
   141cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141d0:	e0bffa17 	ldw	r2,-24(fp)
   141d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   141d8:	008010c4 	movi	r2,67
   141dc:	00001106 	br	14224 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   141e0:	e0bffb17 	ldw	r2,-20(fp)
   141e4:	10800058 	cmpnei	r2,r2,1
   141e8:	1000061e 	bne	r2,zero,14204 <OSTaskDelReq+0x120>
   141ec:	e0bff617 	ldw	r2,-40(fp)
   141f0:	e0bffc15 	stw	r2,-16(fp)
   141f4:	e0bffc17 	ldw	r2,-16(fp)
   141f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   141fc:	00800f44 	movi	r2,61
   14200:	00000806 	br	14224 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   14204:	e0bffb17 	ldw	r2,-20(fp)
   14208:	00c00fc4 	movi	r3,63
   1420c:	10c00dc5 	stb	r3,55(r2)
   14210:	e0bff617 	ldw	r2,-40(fp)
   14214:	e0bffd15 	stw	r2,-12(fp)
   14218:	e0bffd17 	ldw	r2,-12(fp)
   1421c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14220:	0005883a 	mov	r2,zero
}
   14224:	e037883a 	mov	sp,fp
   14228:	df000017 	ldw	fp,0(sp)
   1422c:	dec00104 	addi	sp,sp,4
   14230:	f800283a 	ret

00014234 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14234:	defff404 	addi	sp,sp,-48
   14238:	dfc00b15 	stw	ra,44(sp)
   1423c:	df000a15 	stw	fp,40(sp)
   14240:	df000a04 	addi	fp,sp,40
   14244:	2005883a 	mov	r2,r4
   14248:	e17ffe15 	stw	r5,-8(fp)
   1424c:	e1bfff15 	stw	r6,-4(fp)
   14250:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   14254:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   14258:	e0bfff17 	ldw	r2,-4(fp)
   1425c:	1000021e 	bne	r2,zero,14268 <OSTaskNameGet+0x34>
        return (0);
   14260:	0005883a 	mov	r2,zero
   14264:	00005406 	br	143b8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   14268:	e0bffd03 	ldbu	r2,-12(fp)
   1426c:	10800a70 	cmpltui	r2,r2,41
   14270:	1000081e 	bne	r2,zero,14294 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   14274:	e0bffd03 	ldbu	r2,-12(fp)
   14278:	10803fe0 	cmpeqi	r2,r2,255
   1427c:	1000051e 	bne	r2,zero,14294 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   14280:	e0bfff17 	ldw	r2,-4(fp)
   14284:	00c00a84 	movi	r3,42
   14288:	10c00005 	stb	r3,0(r2)
            return (0);
   1428c:	0005883a 	mov	r2,zero
   14290:	00004906 	br	143b8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   14294:	e0bffe17 	ldw	r2,-8(fp)
   14298:	1000051e 	bne	r2,zero,142b0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1429c:	e0bfff17 	ldw	r2,-4(fp)
   142a0:	00c00304 	movi	r3,12
   142a4:	10c00005 	stb	r3,0(r2)
        return (0);
   142a8:	0005883a 	mov	r2,zero
   142ac:	00004206 	br	143b8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   142b0:	d0a7fb03 	ldbu	r2,-24596(gp)
   142b4:	10803fcc 	andi	r2,r2,255
   142b8:	10000526 	beq	r2,zero,142d0 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   142bc:	e0bfff17 	ldw	r2,-4(fp)
   142c0:	00c00444 	movi	r3,17
   142c4:	10c00005 	stb	r3,0(r2)
        return (0);
   142c8:	0005883a 	mov	r2,zero
   142cc:	00003a06 	br	143b8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142d0:	0005303a 	rdctl	r2,status
   142d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142d8:	e0fffc17 	ldw	r3,-16(fp)
   142dc:	00bfff84 	movi	r2,-2
   142e0:	1884703a 	and	r2,r3,r2
   142e4:	1001703a 	wrctl	status,r2
  
  return context;
   142e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   142ec:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   142f0:	e0bffd03 	ldbu	r2,-12(fp)
   142f4:	10803fd8 	cmpnei	r2,r2,255
   142f8:	1000031e 	bne	r2,zero,14308 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   142fc:	d0a7fc17 	ldw	r2,-24592(gp)
   14300:	10800c83 	ldbu	r2,50(r2)
   14304:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14308:	e0fffd03 	ldbu	r3,-12(fp)
   1430c:	008000f4 	movhi	r2,3
   14310:	1096bb04 	addi	r2,r2,23276
   14314:	18c7883a 	add	r3,r3,r3
   14318:	18c7883a 	add	r3,r3,r3
   1431c:	10c5883a 	add	r2,r2,r3
   14320:	10800017 	ldw	r2,0(r2)
   14324:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   14328:	e0bff817 	ldw	r2,-32(fp)
   1432c:	1000091e 	bne	r2,zero,14354 <OSTaskNameGet+0x120>
   14330:	e0bff617 	ldw	r2,-40(fp)
   14334:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14338:	e0bff717 	ldw	r2,-36(fp)
   1433c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14340:	e0bfff17 	ldw	r2,-4(fp)
   14344:	00c010c4 	movi	r3,67
   14348:	10c00005 	stb	r3,0(r2)
        return (0);
   1434c:	0005883a 	mov	r2,zero
   14350:	00001906 	br	143b8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   14354:	e0bff817 	ldw	r2,-32(fp)
   14358:	10800058 	cmpnei	r2,r2,1
   1435c:	1000091e 	bne	r2,zero,14384 <OSTaskNameGet+0x150>
   14360:	e0bff617 	ldw	r2,-40(fp)
   14364:	e0bff915 	stw	r2,-28(fp)
   14368:	e0bff917 	ldw	r2,-28(fp)
   1436c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14370:	e0bfff17 	ldw	r2,-4(fp)
   14374:	00c010c4 	movi	r3,67
   14378:	10c00005 	stb	r3,0(r2)
        return (0);
   1437c:	0005883a 	mov	r2,zero
   14380:	00000d06 	br	143b8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   14384:	e0bff817 	ldw	r2,-32(fp)
   14388:	10801304 	addi	r2,r2,76
   1438c:	100b883a 	mov	r5,r2
   14390:	e13ffe17 	ldw	r4,-8(fp)
   14394:	000e8fc0 	call	e8fc <OS_StrCopy>
   14398:	e0bffb05 	stb	r2,-20(fp)
   1439c:	e0bff617 	ldw	r2,-40(fp)
   143a0:	e0bffa15 	stw	r2,-24(fp)
   143a4:	e0bffa17 	ldw	r2,-24(fp)
   143a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   143ac:	e0bfff17 	ldw	r2,-4(fp)
   143b0:	10000005 	stb	zero,0(r2)
    return (len);
   143b4:	e0bffb03 	ldbu	r2,-20(fp)
}
   143b8:	e037883a 	mov	sp,fp
   143bc:	dfc00117 	ldw	ra,4(sp)
   143c0:	df000017 	ldw	fp,0(sp)
   143c4:	dec00204 	addi	sp,sp,8
   143c8:	f800283a 	ret

000143cc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   143cc:	defff304 	addi	sp,sp,-52
   143d0:	dfc00c15 	stw	ra,48(sp)
   143d4:	df000b15 	stw	fp,44(sp)
   143d8:	df000b04 	addi	fp,sp,44
   143dc:	2005883a 	mov	r2,r4
   143e0:	e17ffe15 	stw	r5,-8(fp)
   143e4:	e1bfff15 	stw	r6,-4(fp)
   143e8:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   143ec:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   143f0:	e0bfff17 	ldw	r2,-4(fp)
   143f4:	10005c26 	beq	r2,zero,14568 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   143f8:	e0bffd03 	ldbu	r2,-12(fp)
   143fc:	10800a70 	cmpltui	r2,r2,41
   14400:	1000071e 	bne	r2,zero,14420 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   14404:	e0bffd03 	ldbu	r2,-12(fp)
   14408:	10803fe0 	cmpeqi	r2,r2,255
   1440c:	1000041e 	bne	r2,zero,14420 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   14410:	e0bfff17 	ldw	r2,-4(fp)
   14414:	00c00a84 	movi	r3,42
   14418:	10c00005 	stb	r3,0(r2)
            return;
   1441c:	00005306 	br	1456c <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   14420:	e0bffe17 	ldw	r2,-8(fp)
   14424:	1000041e 	bne	r2,zero,14438 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   14428:	e0bfff17 	ldw	r2,-4(fp)
   1442c:	00c00304 	movi	r3,12
   14430:	10c00005 	stb	r3,0(r2)
        return;
   14434:	00004d06 	br	1456c <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   14438:	d0a7fb03 	ldbu	r2,-24596(gp)
   1443c:	10803fcc 	andi	r2,r2,255
   14440:	10000426 	beq	r2,zero,14454 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   14444:	e0bfff17 	ldw	r2,-4(fp)
   14448:	00c00484 	movi	r3,18
   1444c:	10c00005 	stb	r3,0(r2)
        return;
   14450:	00004606 	br	1456c <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14454:	0005303a 	rdctl	r2,status
   14458:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1445c:	e0fffc17 	ldw	r3,-16(fp)
   14460:	00bfff84 	movi	r2,-2
   14464:	1884703a 	and	r2,r3,r2
   14468:	1001703a 	wrctl	status,r2
  
  return context;
   1446c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14470:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   14474:	e0bffd03 	ldbu	r2,-12(fp)
   14478:	10803fd8 	cmpnei	r2,r2,255
   1447c:	1000031e 	bne	r2,zero,1448c <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   14480:	d0a7fc17 	ldw	r2,-24592(gp)
   14484:	10800c83 	ldbu	r2,50(r2)
   14488:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1448c:	e0fffd03 	ldbu	r3,-12(fp)
   14490:	008000f4 	movhi	r2,3
   14494:	1096bb04 	addi	r2,r2,23276
   14498:	18c7883a 	add	r3,r3,r3
   1449c:	18c7883a 	add	r3,r3,r3
   144a0:	10c5883a 	add	r2,r2,r3
   144a4:	10800017 	ldw	r2,0(r2)
   144a8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   144ac:	e0bff717 	ldw	r2,-36(fp)
   144b0:	1000081e 	bne	r2,zero,144d4 <OSTaskNameSet+0x108>
   144b4:	e0bff517 	ldw	r2,-44(fp)
   144b8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   144bc:	e0bff617 	ldw	r2,-40(fp)
   144c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   144c4:	e0bfff17 	ldw	r2,-4(fp)
   144c8:	00c010c4 	movi	r3,67
   144cc:	10c00005 	stb	r3,0(r2)
        return;
   144d0:	00002606 	br	1456c <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   144d4:	e0bff717 	ldw	r2,-36(fp)
   144d8:	10800058 	cmpnei	r2,r2,1
   144dc:	1000081e 	bne	r2,zero,14500 <OSTaskNameSet+0x134>
   144e0:	e0bff517 	ldw	r2,-44(fp)
   144e4:	e0bff815 	stw	r2,-32(fp)
   144e8:	e0bff817 	ldw	r2,-32(fp)
   144ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   144f0:	e0bfff17 	ldw	r2,-4(fp)
   144f4:	00c010c4 	movi	r3,67
   144f8:	10c00005 	stb	r3,0(r2)
        return;
   144fc:	00001b06 	br	1456c <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   14500:	e13ffe17 	ldw	r4,-8(fp)
   14504:	000e9700 	call	e970 <OS_StrLen>
   14508:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1450c:	e0bffa03 	ldbu	r2,-24(fp)
   14510:	10800830 	cmpltui	r2,r2,32
   14514:	1000081e 	bne	r2,zero,14538 <OSTaskNameSet+0x16c>
   14518:	e0bff517 	ldw	r2,-44(fp)
   1451c:	e0bff915 	stw	r2,-28(fp)
   14520:	e0bff917 	ldw	r2,-28(fp)
   14524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   14528:	e0bfff17 	ldw	r2,-4(fp)
   1452c:	00c01044 	movi	r3,65
   14530:	10c00005 	stb	r3,0(r2)
        return;
   14534:	00000d06 	br	1456c <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   14538:	e0bff717 	ldw	r2,-36(fp)
   1453c:	10801304 	addi	r2,r2,76
   14540:	e17ffe17 	ldw	r5,-8(fp)
   14544:	1009883a 	mov	r4,r2
   14548:	000e8fc0 	call	e8fc <OS_StrCopy>
   1454c:	e0bff517 	ldw	r2,-44(fp)
   14550:	e0bffb15 	stw	r2,-20(fp)
   14554:	e0bffb17 	ldw	r2,-20(fp)
   14558:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1455c:	e0bfff17 	ldw	r2,-4(fp)
   14560:	10000005 	stb	zero,0(r2)
   14564:	00000106 	br	1456c <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   14568:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1456c:	e037883a 	mov	sp,fp
   14570:	dfc00117 	ldw	ra,4(sp)
   14574:	df000017 	ldw	fp,0(sp)
   14578:	dec00204 	addi	sp,sp,8
   1457c:	f800283a 	ret

00014580 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   14580:	defff404 	addi	sp,sp,-48
   14584:	dfc00b15 	stw	ra,44(sp)
   14588:	df000a15 	stw	fp,40(sp)
   1458c:	df000a04 	addi	fp,sp,40
   14590:	2005883a 	mov	r2,r4
   14594:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14598:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1459c:	e0bfff03 	ldbu	r2,-4(fp)
   145a0:	10800a30 	cmpltui	r2,r2,40
   145a4:	1000021e 	bne	r2,zero,145b0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   145a8:	00800a84 	movi	r2,42
   145ac:	00006406 	br	14740 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145b0:	0005303a 	rdctl	r2,status
   145b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145b8:	e0fffe17 	ldw	r3,-8(fp)
   145bc:	00bfff84 	movi	r2,-2
   145c0:	1884703a 	and	r2,r3,r2
   145c4:	1001703a 	wrctl	status,r2
  
  return context;
   145c8:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   145cc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   145d0:	e0ffff03 	ldbu	r3,-4(fp)
   145d4:	008000f4 	movhi	r2,3
   145d8:	1096bb04 	addi	r2,r2,23276
   145dc:	18c7883a 	add	r3,r3,r3
   145e0:	18c7883a 	add	r3,r3,r3
   145e4:	10c5883a 	add	r2,r2,r3
   145e8:	10800017 	ldw	r2,0(r2)
   145ec:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   145f0:	e0bff817 	ldw	r2,-32(fp)
   145f4:	1000061e 	bne	r2,zero,14610 <OSTaskResume+0x90>
   145f8:	e0bff617 	ldw	r2,-40(fp)
   145fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14600:	e0bff717 	ldw	r2,-36(fp)
   14604:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   14608:	00801184 	movi	r2,70
   1460c:	00004c06 	br	14740 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   14610:	e0bff817 	ldw	r2,-32(fp)
   14614:	10800058 	cmpnei	r2,r2,1
   14618:	1000061e 	bne	r2,zero,14634 <OSTaskResume+0xb4>
   1461c:	e0bff617 	ldw	r2,-40(fp)
   14620:	e0bff915 	stw	r2,-28(fp)
   14624:	e0bff917 	ldw	r2,-28(fp)
   14628:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1462c:	008010c4 	movi	r2,67
   14630:	00004306 	br	14740 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   14634:	e0bff817 	ldw	r2,-32(fp)
   14638:	10800c03 	ldbu	r2,48(r2)
   1463c:	10803fcc 	andi	r2,r2,255
   14640:	1080020c 	andi	r2,r2,8
   14644:	10003926 	beq	r2,zero,1472c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   14648:	e0bff817 	ldw	r2,-32(fp)
   1464c:	10c00c03 	ldbu	r3,48(r2)
   14650:	00bffdc4 	movi	r2,-9
   14654:	1884703a 	and	r2,r3,r2
   14658:	1007883a 	mov	r3,r2
   1465c:	e0bff817 	ldw	r2,-32(fp)
   14660:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   14664:	e0bff817 	ldw	r2,-32(fp)
   14668:	10800c03 	ldbu	r2,48(r2)
   1466c:	10803fcc 	andi	r2,r2,255
   14670:	1000281e 	bne	r2,zero,14714 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   14674:	e0bff817 	ldw	r2,-32(fp)
   14678:	10800b8b 	ldhu	r2,46(r2)
   1467c:	10bfffcc 	andi	r2,r2,65535
   14680:	10001f1e 	bne	r2,zero,14700 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   14684:	e0bff817 	ldw	r2,-32(fp)
   14688:	10c00d83 	ldbu	r3,54(r2)
   1468c:	d0a7f803 	ldbu	r2,-24608(gp)
   14690:	1884b03a 	or	r2,r3,r2
   14694:	d0a7f805 	stb	r2,-24608(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14698:	e0bff817 	ldw	r2,-32(fp)
   1469c:	10800d03 	ldbu	r2,52(r2)
   146a0:	10c03fcc 	andi	r3,r2,255
   146a4:	e0bff817 	ldw	r2,-32(fp)
   146a8:	10800d03 	ldbu	r2,52(r2)
   146ac:	11003fcc 	andi	r4,r2,255
   146b0:	d0a7f844 	addi	r2,gp,-24607
   146b4:	2085883a 	add	r2,r4,r2
   146b8:	11000003 	ldbu	r4,0(r2)
   146bc:	e0bff817 	ldw	r2,-32(fp)
   146c0:	10800d43 	ldbu	r2,53(r2)
   146c4:	2084b03a 	or	r2,r4,r2
   146c8:	1009883a 	mov	r4,r2
   146cc:	d0a7f844 	addi	r2,gp,-24607
   146d0:	1885883a 	add	r2,r3,r2
   146d4:	11000005 	stb	r4,0(r2)
   146d8:	e0bff617 	ldw	r2,-40(fp)
   146dc:	e0bffa15 	stw	r2,-24(fp)
   146e0:	e0bffa17 	ldw	r2,-24(fp)
   146e4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   146e8:	d0a7eb03 	ldbu	r2,-24660(gp)
   146ec:	10803fcc 	andi	r2,r2,255
   146f0:	10800058 	cmpnei	r2,r2,1
   146f4:	10000b1e 	bne	r2,zero,14724 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   146f8:	000e7b80 	call	e7b8 <OS_Sched>
   146fc:	00000906 	br	14724 <OSTaskResume+0x1a4>
   14700:	e0bff617 	ldw	r2,-40(fp)
   14704:	e0bffb15 	stw	r2,-20(fp)
   14708:	e0bffb17 	ldw	r2,-20(fp)
   1470c:	1001703a 	wrctl	status,r2
   14710:	00000406 	br	14724 <OSTaskResume+0x1a4>
   14714:	e0bff617 	ldw	r2,-40(fp)
   14718:	e0bffc15 	stw	r2,-16(fp)
   1471c:	e0bffc17 	ldw	r2,-16(fp)
   14720:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   14724:	0005883a 	mov	r2,zero
   14728:	00000506 	br	14740 <OSTaskResume+0x1c0>
   1472c:	e0bff617 	ldw	r2,-40(fp)
   14730:	e0bffd15 	stw	r2,-12(fp)
   14734:	e0bffd17 	ldw	r2,-12(fp)
   14738:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1473c:	00801104 	movi	r2,68
}
   14740:	e037883a 	mov	sp,fp
   14744:	dfc00117 	ldw	ra,4(sp)
   14748:	df000017 	ldw	fp,0(sp)
   1474c:	dec00204 	addi	sp,sp,8
   14750:	f800283a 	ret

00014754 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   14754:	defff304 	addi	sp,sp,-52
   14758:	df000c15 	stw	fp,48(sp)
   1475c:	df000c04 	addi	fp,sp,48
   14760:	2005883a 	mov	r2,r4
   14764:	e17fff15 	stw	r5,-4(fp)
   14768:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1476c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   14770:	e0bffe03 	ldbu	r2,-8(fp)
   14774:	10800a70 	cmpltui	r2,r2,41
   14778:	1000051e 	bne	r2,zero,14790 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1477c:	e0bffe03 	ldbu	r2,-8(fp)
   14780:	10803fe0 	cmpeqi	r2,r2,255
   14784:	1000021e 	bne	r2,zero,14790 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   14788:	00800a84 	movi	r2,42
   1478c:	00005d06 	br	14904 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   14790:	e0bfff17 	ldw	r2,-4(fp)
   14794:	1000021e 	bne	r2,zero,147a0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   14798:	00800244 	movi	r2,9
   1479c:	00005906 	br	14904 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   147a0:	e0bfff17 	ldw	r2,-4(fp)
   147a4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   147a8:	e0bfff17 	ldw	r2,-4(fp)
   147ac:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147b0:	0005303a 	rdctl	r2,status
   147b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147b8:	e0fffd17 	ldw	r3,-12(fp)
   147bc:	00bfff84 	movi	r2,-2
   147c0:	1884703a 	and	r2,r3,r2
   147c4:	1001703a 	wrctl	status,r2
  
  return context;
   147c8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   147cc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   147d0:	e0bffe03 	ldbu	r2,-8(fp)
   147d4:	10803fd8 	cmpnei	r2,r2,255
   147d8:	1000031e 	bne	r2,zero,147e8 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   147dc:	d0a7fc17 	ldw	r2,-24592(gp)
   147e0:	10800c83 	ldbu	r2,50(r2)
   147e4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   147e8:	e0fffe03 	ldbu	r3,-8(fp)
   147ec:	008000f4 	movhi	r2,3
   147f0:	1096bb04 	addi	r2,r2,23276
   147f4:	18c7883a 	add	r3,r3,r3
   147f8:	18c7883a 	add	r3,r3,r3
   147fc:	10c5883a 	add	r2,r2,r3
   14800:	10800017 	ldw	r2,0(r2)
   14804:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   14808:	e0bff817 	ldw	r2,-32(fp)
   1480c:	1000061e 	bne	r2,zero,14828 <OSTaskStkChk+0xd4>
   14810:	e0bff617 	ldw	r2,-40(fp)
   14814:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14818:	e0bff717 	ldw	r2,-36(fp)
   1481c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14820:	008010c4 	movi	r2,67
   14824:	00003706 	br	14904 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   14828:	e0bff817 	ldw	r2,-32(fp)
   1482c:	10800058 	cmpnei	r2,r2,1
   14830:	1000061e 	bne	r2,zero,1484c <OSTaskStkChk+0xf8>
   14834:	e0bff617 	ldw	r2,-40(fp)
   14838:	e0bff915 	stw	r2,-28(fp)
   1483c:	e0bff917 	ldw	r2,-28(fp)
   14840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14844:	008010c4 	movi	r2,67
   14848:	00002e06 	br	14904 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1484c:	e0bff817 	ldw	r2,-32(fp)
   14850:	1080040b 	ldhu	r2,16(r2)
   14854:	10bfffcc 	andi	r2,r2,65535
   14858:	1080004c 	andi	r2,r2,1
   1485c:	1000061e 	bne	r2,zero,14878 <OSTaskStkChk+0x124>
   14860:	e0bff617 	ldw	r2,-40(fp)
   14864:	e0bffa15 	stw	r2,-24(fp)
   14868:	e0bffa17 	ldw	r2,-24(fp)
   1486c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   14870:	00801144 	movi	r2,69
   14874:	00002306 	br	14904 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   14878:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1487c:	e0bff817 	ldw	r2,-32(fp)
   14880:	10800317 	ldw	r2,12(r2)
   14884:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   14888:	e0bff817 	ldw	r2,-32(fp)
   1488c:	10800217 	ldw	r2,8(r2)
   14890:	e0bff415 	stw	r2,-48(fp)
   14894:	e0bff617 	ldw	r2,-40(fp)
   14898:	e0bffb15 	stw	r2,-20(fp)
   1489c:	e0bffb17 	ldw	r2,-20(fp)
   148a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   148a4:	00000306 	br	148b4 <OSTaskStkChk+0x160>
        nfree++;
   148a8:	e0bff517 	ldw	r2,-44(fp)
   148ac:	10800044 	addi	r2,r2,1
   148b0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   148b4:	e0bff417 	ldw	r2,-48(fp)
   148b8:	10c00104 	addi	r3,r2,4
   148bc:	e0fff415 	stw	r3,-48(fp)
   148c0:	10800017 	ldw	r2,0(r2)
   148c4:	103ff826 	beq	r2,zero,148a8 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   148c8:	e0bff517 	ldw	r2,-44(fp)
   148cc:	1085883a 	add	r2,r2,r2
   148d0:	1085883a 	add	r2,r2,r2
   148d4:	1007883a 	mov	r3,r2
   148d8:	e0bfff17 	ldw	r2,-4(fp)
   148dc:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   148e0:	e0fffc17 	ldw	r3,-16(fp)
   148e4:	e0bff517 	ldw	r2,-44(fp)
   148e8:	1885c83a 	sub	r2,r3,r2
   148ec:	1085883a 	add	r2,r2,r2
   148f0:	1085883a 	add	r2,r2,r2
   148f4:	1007883a 	mov	r3,r2
   148f8:	e0bfff17 	ldw	r2,-4(fp)
   148fc:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   14900:	0005883a 	mov	r2,zero
}
   14904:	e037883a 	mov	sp,fp
   14908:	df000017 	ldw	fp,0(sp)
   1490c:	dec00104 	addi	sp,sp,4
   14910:	f800283a 	ret

00014914 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   14914:	defff504 	addi	sp,sp,-44
   14918:	dfc00a15 	stw	ra,40(sp)
   1491c:	df000915 	stw	fp,36(sp)
   14920:	df000904 	addi	fp,sp,36
   14924:	2005883a 	mov	r2,r4
   14928:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1492c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   14930:	e0bfff03 	ldbu	r2,-4(fp)
   14934:	10800a18 	cmpnei	r2,r2,40
   14938:	1000021e 	bne	r2,zero,14944 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1493c:	008011c4 	movi	r2,71
   14940:	00006806 	br	14ae4 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   14944:	e0bfff03 	ldbu	r2,-4(fp)
   14948:	10800a30 	cmpltui	r2,r2,40
   1494c:	1000051e 	bne	r2,zero,14964 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   14950:	e0bfff03 	ldbu	r2,-4(fp)
   14954:	10803fe0 	cmpeqi	r2,r2,255
   14958:	1000021e 	bne	r2,zero,14964 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1495c:	00800a84 	movi	r2,42
   14960:	00006006 	br	14ae4 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14964:	0005303a 	rdctl	r2,status
   14968:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1496c:	e0fffe17 	ldw	r3,-8(fp)
   14970:	00bfff84 	movi	r2,-2
   14974:	1884703a 	and	r2,r3,r2
   14978:	1001703a 	wrctl	status,r2
  
  return context;
   1497c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   14980:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   14984:	e0bfff03 	ldbu	r2,-4(fp)
   14988:	10803fd8 	cmpnei	r2,r2,255
   1498c:	1000061e 	bne	r2,zero,149a8 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   14990:	d0a7fc17 	ldw	r2,-24592(gp)
   14994:	10800c83 	ldbu	r2,50(r2)
   14998:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1499c:	00800044 	movi	r2,1
   149a0:	e0bff705 	stb	r2,-36(fp)
   149a4:	00000906 	br	149cc <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   149a8:	d0a7fc17 	ldw	r2,-24592(gp)
   149ac:	10800c83 	ldbu	r2,50(r2)
   149b0:	10c03fcc 	andi	r3,r2,255
   149b4:	e0bfff03 	ldbu	r2,-4(fp)
   149b8:	1880031e 	bne	r3,r2,149c8 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   149bc:	00800044 	movi	r2,1
   149c0:	e0bff705 	stb	r2,-36(fp)
   149c4:	00000106 	br	149cc <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   149c8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   149cc:	e0ffff03 	ldbu	r3,-4(fp)
   149d0:	008000f4 	movhi	r2,3
   149d4:	1096bb04 	addi	r2,r2,23276
   149d8:	18c7883a 	add	r3,r3,r3
   149dc:	18c7883a 	add	r3,r3,r3
   149e0:	10c5883a 	add	r2,r2,r3
   149e4:	10800017 	ldw	r2,0(r2)
   149e8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   149ec:	e0bffa17 	ldw	r2,-24(fp)
   149f0:	1000061e 	bne	r2,zero,14a0c <OSTaskSuspend+0xf8>
   149f4:	e0bff817 	ldw	r2,-32(fp)
   149f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149fc:	e0bff917 	ldw	r2,-28(fp)
   14a00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   14a04:	00801204 	movi	r2,72
   14a08:	00003606 	br	14ae4 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   14a0c:	e0bffa17 	ldw	r2,-24(fp)
   14a10:	10800058 	cmpnei	r2,r2,1
   14a14:	1000061e 	bne	r2,zero,14a30 <OSTaskSuspend+0x11c>
   14a18:	e0bff817 	ldw	r2,-32(fp)
   14a1c:	e0bffb15 	stw	r2,-20(fp)
   14a20:	e0bffb17 	ldw	r2,-20(fp)
   14a24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14a28:	008010c4 	movi	r2,67
   14a2c:	00002d06 	br	14ae4 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   14a30:	e0bffa17 	ldw	r2,-24(fp)
   14a34:	10800d03 	ldbu	r2,52(r2)
   14a38:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   14a3c:	e0fffd03 	ldbu	r3,-12(fp)
   14a40:	e13ffd03 	ldbu	r4,-12(fp)
   14a44:	d0a7f844 	addi	r2,gp,-24607
   14a48:	2085883a 	add	r2,r4,r2
   14a4c:	10800003 	ldbu	r2,0(r2)
   14a50:	1009883a 	mov	r4,r2
   14a54:	e0bffa17 	ldw	r2,-24(fp)
   14a58:	10800d43 	ldbu	r2,53(r2)
   14a5c:	0084303a 	nor	r2,zero,r2
   14a60:	2084703a 	and	r2,r4,r2
   14a64:	1009883a 	mov	r4,r2
   14a68:	d0a7f844 	addi	r2,gp,-24607
   14a6c:	1885883a 	add	r2,r3,r2
   14a70:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14a74:	e0fffd03 	ldbu	r3,-12(fp)
   14a78:	d0a7f844 	addi	r2,gp,-24607
   14a7c:	1885883a 	add	r2,r3,r2
   14a80:	10800003 	ldbu	r2,0(r2)
   14a84:	10803fcc 	andi	r2,r2,255
   14a88:	1000071e 	bne	r2,zero,14aa8 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   14a8c:	e0bffa17 	ldw	r2,-24(fp)
   14a90:	10800d83 	ldbu	r2,54(r2)
   14a94:	0084303a 	nor	r2,zero,r2
   14a98:	1007883a 	mov	r3,r2
   14a9c:	d0a7f803 	ldbu	r2,-24608(gp)
   14aa0:	1884703a 	and	r2,r3,r2
   14aa4:	d0a7f805 	stb	r2,-24608(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   14aa8:	e0bffa17 	ldw	r2,-24(fp)
   14aac:	10800c03 	ldbu	r2,48(r2)
   14ab0:	10800214 	ori	r2,r2,8
   14ab4:	1007883a 	mov	r3,r2
   14ab8:	e0bffa17 	ldw	r2,-24(fp)
   14abc:	10c00c05 	stb	r3,48(r2)
   14ac0:	e0bff817 	ldw	r2,-32(fp)
   14ac4:	e0bffc15 	stw	r2,-16(fp)
   14ac8:	e0bffc17 	ldw	r2,-16(fp)
   14acc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   14ad0:	e0bff703 	ldbu	r2,-36(fp)
   14ad4:	10800058 	cmpnei	r2,r2,1
   14ad8:	1000011e 	bne	r2,zero,14ae0 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   14adc:	000e7b80 	call	e7b8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14ae0:	0005883a 	mov	r2,zero
}
   14ae4:	e037883a 	mov	sp,fp
   14ae8:	dfc00117 	ldw	ra,4(sp)
   14aec:	df000017 	ldw	fp,0(sp)
   14af0:	dec00204 	addi	sp,sp,8
   14af4:	f800283a 	ret

00014af8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   14af8:	defff604 	addi	sp,sp,-40
   14afc:	dfc00915 	stw	ra,36(sp)
   14b00:	df000815 	stw	fp,32(sp)
   14b04:	df000804 	addi	fp,sp,32
   14b08:	2005883a 	mov	r2,r4
   14b0c:	e17fff15 	stw	r5,-4(fp)
   14b10:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14b14:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   14b18:	e0bffe03 	ldbu	r2,-8(fp)
   14b1c:	10800a70 	cmpltui	r2,r2,41
   14b20:	1000051e 	bne	r2,zero,14b38 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   14b24:	e0bffe03 	ldbu	r2,-8(fp)
   14b28:	10803fe0 	cmpeqi	r2,r2,255
   14b2c:	1000021e 	bne	r2,zero,14b38 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   14b30:	00800a84 	movi	r2,42
   14b34:	00003406 	br	14c08 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   14b38:	e0bfff17 	ldw	r2,-4(fp)
   14b3c:	1000021e 	bne	r2,zero,14b48 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   14b40:	00800244 	movi	r2,9
   14b44:	00003006 	br	14c08 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b48:	0005303a 	rdctl	r2,status
   14b4c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b50:	e0fffd17 	ldw	r3,-12(fp)
   14b54:	00bfff84 	movi	r2,-2
   14b58:	1884703a 	and	r2,r3,r2
   14b5c:	1001703a 	wrctl	status,r2
  
  return context;
   14b60:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14b64:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   14b68:	e0bffe03 	ldbu	r2,-8(fp)
   14b6c:	10803fd8 	cmpnei	r2,r2,255
   14b70:	1000031e 	bne	r2,zero,14b80 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   14b74:	d0a7fc17 	ldw	r2,-24592(gp)
   14b78:	10800c83 	ldbu	r2,50(r2)
   14b7c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14b80:	e0fffe03 	ldbu	r3,-8(fp)
   14b84:	008000f4 	movhi	r2,3
   14b88:	1096bb04 	addi	r2,r2,23276
   14b8c:	18c7883a 	add	r3,r3,r3
   14b90:	18c7883a 	add	r3,r3,r3
   14b94:	10c5883a 	add	r2,r2,r3
   14b98:	10800017 	ldw	r2,0(r2)
   14b9c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   14ba0:	e0bffa17 	ldw	r2,-24(fp)
   14ba4:	1000061e 	bne	r2,zero,14bc0 <OSTaskQuery+0xc8>
   14ba8:	e0bff817 	ldw	r2,-32(fp)
   14bac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14bb0:	e0bff917 	ldw	r2,-28(fp)
   14bb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   14bb8:	00800a44 	movi	r2,41
   14bbc:	00001206 	br	14c08 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   14bc0:	e0bffa17 	ldw	r2,-24(fp)
   14bc4:	10800058 	cmpnei	r2,r2,1
   14bc8:	1000061e 	bne	r2,zero,14be4 <OSTaskQuery+0xec>
   14bcc:	e0bff817 	ldw	r2,-32(fp)
   14bd0:	e0bffb15 	stw	r2,-20(fp)
   14bd4:	e0bffb17 	ldw	r2,-20(fp)
   14bd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14bdc:	008010c4 	movi	r2,67
   14be0:	00000906 	br	14c08 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   14be4:	01801b04 	movi	r6,108
   14be8:	e17ffa17 	ldw	r5,-24(fp)
   14bec:	e13fff17 	ldw	r4,-4(fp)
   14bf0:	000e7500 	call	e750 <OS_MemCopy>
   14bf4:	e0bff817 	ldw	r2,-32(fp)
   14bf8:	e0bffc15 	stw	r2,-16(fp)
   14bfc:	e0bffc17 	ldw	r2,-16(fp)
   14c00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14c04:	0005883a 	mov	r2,zero
}
   14c08:	e037883a 	mov	sp,fp
   14c0c:	dfc00117 	ldw	ra,4(sp)
   14c10:	df000017 	ldw	fp,0(sp)
   14c14:	dec00204 	addi	sp,sp,8
   14c18:	f800283a 	ret

00014c1c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   14c1c:	defffc04 	addi	sp,sp,-16
   14c20:	df000315 	stw	fp,12(sp)
   14c24:	df000304 	addi	fp,sp,12
   14c28:	e13ffd15 	stw	r4,-12(fp)
   14c2c:	e17ffe15 	stw	r5,-8(fp)
   14c30:	3005883a 	mov	r2,r6
   14c34:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   14c38:	e0bfff0b 	ldhu	r2,-4(fp)
   14c3c:	1080004c 	andi	r2,r2,1
   14c40:	10000d26 	beq	r2,zero,14c78 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   14c44:	e0bfff0b 	ldhu	r2,-4(fp)
   14c48:	1080008c 	andi	r2,r2,2
   14c4c:	10000a26 	beq	r2,zero,14c78 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   14c50:	00000706 	br	14c70 <OS_TaskStkClr+0x54>
                size--;
   14c54:	e0bffe17 	ldw	r2,-8(fp)
   14c58:	10bfffc4 	addi	r2,r2,-1
   14c5c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   14c60:	e0bffd17 	ldw	r2,-12(fp)
   14c64:	10c00104 	addi	r3,r2,4
   14c68:	e0fffd15 	stw	r3,-12(fp)
   14c6c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   14c70:	e0bffe17 	ldw	r2,-8(fp)
   14c74:	103ff71e 	bne	r2,zero,14c54 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   14c78:	0001883a 	nop
   14c7c:	e037883a 	mov	sp,fp
   14c80:	df000017 	ldw	fp,0(sp)
   14c84:	dec00104 	addi	sp,sp,4
   14c88:	f800283a 	ret

00014c8c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   14c8c:	defff904 	addi	sp,sp,-28
   14c90:	dfc00615 	stw	ra,24(sp)
   14c94:	df000515 	stw	fp,20(sp)
   14c98:	df000504 	addi	fp,sp,20
   14c9c:	2005883a 	mov	r2,r4
   14ca0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14ca4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14ca8:	d0a7fb03 	ldbu	r2,-24596(gp)
   14cac:	10803fcc 	andi	r2,r2,255
   14cb0:	1000311e 	bne	r2,zero,14d78 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   14cb4:	e0bfff0b 	ldhu	r2,-4(fp)
   14cb8:	10003026 	beq	r2,zero,14d7c <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cbc:	0005303a 	rdctl	r2,status
   14cc0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cc4:	e0fffe17 	ldw	r3,-8(fp)
   14cc8:	00bfff84 	movi	r2,-2
   14ccc:	1884703a 	and	r2,r3,r2
   14cd0:	1001703a 	wrctl	status,r2
  
  return context;
   14cd4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   14cd8:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   14cdc:	d0a7fc17 	ldw	r2,-24592(gp)
   14ce0:	10800d03 	ldbu	r2,52(r2)
   14ce4:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   14ce8:	e0fffd03 	ldbu	r3,-12(fp)
   14cec:	e13ffd03 	ldbu	r4,-12(fp)
   14cf0:	d0a7f844 	addi	r2,gp,-24607
   14cf4:	2085883a 	add	r2,r4,r2
   14cf8:	10800003 	ldbu	r2,0(r2)
   14cfc:	1009883a 	mov	r4,r2
   14d00:	d0a7fc17 	ldw	r2,-24592(gp)
   14d04:	10800d43 	ldbu	r2,53(r2)
   14d08:	0084303a 	nor	r2,zero,r2
   14d0c:	2084703a 	and	r2,r4,r2
   14d10:	1009883a 	mov	r4,r2
   14d14:	d0a7f844 	addi	r2,gp,-24607
   14d18:	1885883a 	add	r2,r3,r2
   14d1c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   14d20:	e0fffd03 	ldbu	r3,-12(fp)
   14d24:	d0a7f844 	addi	r2,gp,-24607
   14d28:	1885883a 	add	r2,r3,r2
   14d2c:	10800003 	ldbu	r2,0(r2)
   14d30:	10803fcc 	andi	r2,r2,255
   14d34:	1000071e 	bne	r2,zero,14d54 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   14d38:	d0a7fc17 	ldw	r2,-24592(gp)
   14d3c:	10800d83 	ldbu	r2,54(r2)
   14d40:	0084303a 	nor	r2,zero,r2
   14d44:	1007883a 	mov	r3,r2
   14d48:	d0a7f803 	ldbu	r2,-24608(gp)
   14d4c:	1884703a 	and	r2,r3,r2
   14d50:	d0a7f805 	stb	r2,-24608(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   14d54:	d0a7fc17 	ldw	r2,-24592(gp)
   14d58:	e0ffff0b 	ldhu	r3,-4(fp)
   14d5c:	10c00b8d 	sth	r3,46(r2)
   14d60:	e0bffb17 	ldw	r2,-20(fp)
   14d64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d68:	e0bffc17 	ldw	r2,-16(fp)
   14d6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   14d70:	000e7b80 	call	e7b8 <OS_Sched>
   14d74:	00000106 	br	14d7c <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   14d78:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   14d7c:	e037883a 	mov	sp,fp
   14d80:	dfc00117 	ldw	ra,4(sp)
   14d84:	df000017 	ldw	fp,0(sp)
   14d88:	dec00204 	addi	sp,sp,8
   14d8c:	f800283a 	ret

00014d90 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   14d90:	defff804 	addi	sp,sp,-32
   14d94:	dfc00715 	stw	ra,28(sp)
   14d98:	df000615 	stw	fp,24(sp)
   14d9c:	df000604 	addi	fp,sp,24
   14da0:	2015883a 	mov	r10,r4
   14da4:	2809883a 	mov	r4,r5
   14da8:	3007883a 	mov	r3,r6
   14dac:	3805883a 	mov	r2,r7
   14db0:	e2bffc05 	stb	r10,-16(fp)
   14db4:	e13ffd05 	stb	r4,-12(fp)
   14db8:	e0fffe05 	stb	r3,-8(fp)
   14dbc:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14dc0:	d0a7fb03 	ldbu	r2,-24596(gp)
   14dc4:	10803fcc 	andi	r2,r2,255
   14dc8:	10000226 	beq	r2,zero,14dd4 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   14dcc:	00801544 	movi	r2,85
   14dd0:	00004206 	br	14edc <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   14dd4:	e0bffc03 	ldbu	r2,-16(fp)
   14dd8:	1000081e 	bne	r2,zero,14dfc <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   14ddc:	e0bffd03 	ldbu	r2,-12(fp)
   14de0:	1000061e 	bne	r2,zero,14dfc <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   14de4:	e0bffe03 	ldbu	r2,-8(fp)
   14de8:	1000041e 	bne	r2,zero,14dfc <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   14dec:	e0bfff0b 	ldhu	r2,-4(fp)
   14df0:	1000021e 	bne	r2,zero,14dfc <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   14df4:	00801504 	movi	r2,84
   14df8:	00003806 	br	14edc <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   14dfc:	e0bffd03 	ldbu	r2,-12(fp)
   14e00:	10800f30 	cmpltui	r2,r2,60
   14e04:	1000021e 	bne	r2,zero,14e10 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   14e08:	00801444 	movi	r2,81
   14e0c:	00003306 	br	14edc <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   14e10:	e0bffe03 	ldbu	r2,-8(fp)
   14e14:	10800f30 	cmpltui	r2,r2,60
   14e18:	1000021e 	bne	r2,zero,14e24 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   14e1c:	00801484 	movi	r2,82
   14e20:	00002e06 	br	14edc <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   14e24:	e0bfff0b 	ldhu	r2,-4(fp)
   14e28:	1080fa30 	cmpltui	r2,r2,1000
   14e2c:	1000021e 	bne	r2,zero,14e38 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   14e30:	008014c4 	movi	r2,83
   14e34:	00002906 	br	14edc <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   14e38:	e0bffc03 	ldbu	r2,-16(fp)
   14e3c:	10c38424 	muli	r3,r2,3600
   14e40:	e0bffd03 	ldbu	r2,-12(fp)
   14e44:	10800f24 	muli	r2,r2,60
   14e48:	1887883a 	add	r3,r3,r2
   14e4c:	e0bffe03 	ldbu	r2,-8(fp)
   14e50:	1885883a 	add	r2,r3,r2
   14e54:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   14e58:	e0bfff0b 	ldhu	r2,-4(fp)
   14e5c:	10800f84 	addi	r2,r2,62
   14e60:	100690fa 	slli	r3,r2,3
   14e64:	008418b4 	movhi	r2,4194
   14e68:	109374c4 	addi	r2,r2,19923
   14e6c:	188a383a 	mulxuu	r5,r3,r2
   14e70:	1885383a 	mul	r2,r3,r2
   14e74:	1011883a 	mov	r8,r2
   14e78:	2813883a 	mov	r9,r5
   14e7c:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   14e80:	2085883a 	add	r2,r4,r2
   14e84:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   14e88:	e0bffb17 	ldw	r2,-20(fp)
   14e8c:	1004d43a 	srli	r2,r2,16
   14e90:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   14e94:	e0bffb17 	ldw	r2,-20(fp)
   14e98:	10bfffcc 	andi	r2,r2,65535
   14e9c:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   14ea0:	e0bffb17 	ldw	r2,-20(fp)
   14ea4:	10bfffcc 	andi	r2,r2,65535
   14ea8:	1009883a 	mov	r4,r2
   14eac:	0014c8c0 	call	14c8c <OSTimeDly>
    while (loops > 0) {
   14eb0:	00000706 	br	14ed0 <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   14eb4:	01200014 	movui	r4,32768
   14eb8:	0014c8c0 	call	14c8c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   14ebc:	01200014 	movui	r4,32768
   14ec0:	0014c8c0 	call	14c8c <OSTimeDly>
        loops--;
   14ec4:	e0bffa0b 	ldhu	r2,-24(fp)
   14ec8:	10bfffc4 	addi	r2,r2,-1
   14ecc:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   14ed0:	e0bffa0b 	ldhu	r2,-24(fp)
   14ed4:	103ff71e 	bne	r2,zero,14eb4 <OSTimeDlyHMSM+0x124>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   14ed8:	0005883a 	mov	r2,zero
}
   14edc:	e037883a 	mov	sp,fp
   14ee0:	dfc00117 	ldw	ra,4(sp)
   14ee4:	df000017 	ldw	fp,0(sp)
   14ee8:	dec00204 	addi	sp,sp,8
   14eec:	f800283a 	ret

00014ef0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   14ef0:	defff504 	addi	sp,sp,-44
   14ef4:	dfc00a15 	stw	ra,40(sp)
   14ef8:	df000915 	stw	fp,36(sp)
   14efc:	df000904 	addi	fp,sp,36
   14f00:	2005883a 	mov	r2,r4
   14f04:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14f08:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   14f0c:	e0bfff03 	ldbu	r2,-4(fp)
   14f10:	10800a30 	cmpltui	r2,r2,40
   14f14:	1000021e 	bne	r2,zero,14f20 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   14f18:	00800a84 	movi	r2,42
   14f1c:	00006406 	br	150b0 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f20:	0005303a 	rdctl	r2,status
   14f24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f28:	e0fffe17 	ldw	r3,-8(fp)
   14f2c:	00bfff84 	movi	r2,-2
   14f30:	1884703a 	and	r2,r3,r2
   14f34:	1001703a 	wrctl	status,r2
  
  return context;
   14f38:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   14f3c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   14f40:	e0ffff03 	ldbu	r3,-4(fp)
   14f44:	008000f4 	movhi	r2,3
   14f48:	1096bb04 	addi	r2,r2,23276
   14f4c:	18c7883a 	add	r3,r3,r3
   14f50:	18c7883a 	add	r3,r3,r3
   14f54:	10c5883a 	add	r2,r2,r3
   14f58:	10800017 	ldw	r2,0(r2)
   14f5c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   14f60:	e0bff917 	ldw	r2,-28(fp)
   14f64:	1000061e 	bne	r2,zero,14f80 <OSTimeDlyResume+0x90>
   14f68:	e0bff717 	ldw	r2,-36(fp)
   14f6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f70:	e0bff817 	ldw	r2,-32(fp)
   14f74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   14f78:	008010c4 	movi	r2,67
   14f7c:	00004c06 	br	150b0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   14f80:	e0bff917 	ldw	r2,-28(fp)
   14f84:	10800058 	cmpnei	r2,r2,1
   14f88:	1000061e 	bne	r2,zero,14fa4 <OSTimeDlyResume+0xb4>
   14f8c:	e0bff717 	ldw	r2,-36(fp)
   14f90:	e0bffa15 	stw	r2,-24(fp)
   14f94:	e0bffa17 	ldw	r2,-24(fp)
   14f98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   14f9c:	008010c4 	movi	r2,67
   14fa0:	00004306 	br	150b0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   14fa4:	e0bff917 	ldw	r2,-28(fp)
   14fa8:	10800b8b 	ldhu	r2,46(r2)
   14fac:	10bfffcc 	andi	r2,r2,65535
   14fb0:	1000061e 	bne	r2,zero,14fcc <OSTimeDlyResume+0xdc>
   14fb4:	e0bff717 	ldw	r2,-36(fp)
   14fb8:	e0bffb15 	stw	r2,-20(fp)
   14fbc:	e0bffb17 	ldw	r2,-20(fp)
   14fc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   14fc4:	00801404 	movi	r2,80
   14fc8:	00003906 	br	150b0 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   14fcc:	e0bff917 	ldw	r2,-28(fp)
   14fd0:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   14fd4:	e0bff917 	ldw	r2,-28(fp)
   14fd8:	10800c03 	ldbu	r2,48(r2)
   14fdc:	10803fcc 	andi	r2,r2,255
   14fe0:	10800dcc 	andi	r2,r2,55
   14fe4:	10000b26 	beq	r2,zero,15014 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   14fe8:	e0bff917 	ldw	r2,-28(fp)
   14fec:	10c00c03 	ldbu	r3,48(r2)
   14ff0:	00bff204 	movi	r2,-56
   14ff4:	1884703a 	and	r2,r3,r2
   14ff8:	1007883a 	mov	r3,r2
   14ffc:	e0bff917 	ldw	r2,-28(fp)
   15000:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   15004:	e0bff917 	ldw	r2,-28(fp)
   15008:	00c00044 	movi	r3,1
   1500c:	10c00c45 	stb	r3,49(r2)
   15010:	00000206 	br	1501c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   15014:	e0bff917 	ldw	r2,-28(fp)
   15018:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1501c:	e0bff917 	ldw	r2,-28(fp)
   15020:	10800c03 	ldbu	r2,48(r2)
   15024:	10803fcc 	andi	r2,r2,255
   15028:	1080020c 	andi	r2,r2,8
   1502c:	10001b1e 	bne	r2,zero,1509c <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   15030:	e0bff917 	ldw	r2,-28(fp)
   15034:	10c00d83 	ldbu	r3,54(r2)
   15038:	d0a7f803 	ldbu	r2,-24608(gp)
   1503c:	1884b03a 	or	r2,r3,r2
   15040:	d0a7f805 	stb	r2,-24608(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15044:	e0bff917 	ldw	r2,-28(fp)
   15048:	10800d03 	ldbu	r2,52(r2)
   1504c:	10c03fcc 	andi	r3,r2,255
   15050:	e0bff917 	ldw	r2,-28(fp)
   15054:	10800d03 	ldbu	r2,52(r2)
   15058:	11003fcc 	andi	r4,r2,255
   1505c:	d0a7f844 	addi	r2,gp,-24607
   15060:	2085883a 	add	r2,r4,r2
   15064:	11000003 	ldbu	r4,0(r2)
   15068:	e0bff917 	ldw	r2,-28(fp)
   1506c:	10800d43 	ldbu	r2,53(r2)
   15070:	2084b03a 	or	r2,r4,r2
   15074:	1009883a 	mov	r4,r2
   15078:	d0a7f844 	addi	r2,gp,-24607
   1507c:	1885883a 	add	r2,r3,r2
   15080:	11000005 	stb	r4,0(r2)
   15084:	e0bff717 	ldw	r2,-36(fp)
   15088:	e0bffc15 	stw	r2,-16(fp)
   1508c:	e0bffc17 	ldw	r2,-16(fp)
   15090:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   15094:	000e7b80 	call	e7b8 <OS_Sched>
   15098:	00000406 	br	150ac <OSTimeDlyResume+0x1bc>
   1509c:	e0bff717 	ldw	r2,-36(fp)
   150a0:	e0bffd15 	stw	r2,-12(fp)
   150a4:	e0bffd17 	ldw	r2,-12(fp)
   150a8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   150ac:	0005883a 	mov	r2,zero
}
   150b0:	e037883a 	mov	sp,fp
   150b4:	dfc00117 	ldw	ra,4(sp)
   150b8:	df000017 	ldw	fp,0(sp)
   150bc:	dec00204 	addi	sp,sp,8
   150c0:	f800283a 	ret

000150c4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   150c4:	defffb04 	addi	sp,sp,-20
   150c8:	df000415 	stw	fp,16(sp)
   150cc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   150d0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   150d4:	0005303a 	rdctl	r2,status
   150d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   150dc:	e0fffe17 	ldw	r3,-8(fp)
   150e0:	00bfff84 	movi	r2,-2
   150e4:	1884703a 	and	r2,r3,r2
   150e8:	1001703a 	wrctl	status,r2
  
  return context;
   150ec:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   150f0:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   150f4:	d0a7fe17 	ldw	r2,-24584(gp)
   150f8:	e0bffd15 	stw	r2,-12(fp)
   150fc:	e0bffc17 	ldw	r2,-16(fp)
   15100:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15104:	e0bfff17 	ldw	r2,-4(fp)
   15108:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1510c:	e0bffd17 	ldw	r2,-12(fp)
}
   15110:	e037883a 	mov	sp,fp
   15114:	df000017 	ldw	fp,0(sp)
   15118:	dec00104 	addi	sp,sp,4
   1511c:	f800283a 	ret

00015120 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   15120:	defffb04 	addi	sp,sp,-20
   15124:	df000415 	stw	fp,16(sp)
   15128:	df000404 	addi	fp,sp,16
   1512c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15130:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15134:	0005303a 	rdctl	r2,status
   15138:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1513c:	e0fffd17 	ldw	r3,-12(fp)
   15140:	00bfff84 	movi	r2,-2
   15144:	1884703a 	and	r2,r3,r2
   15148:	1001703a 	wrctl	status,r2
  
  return context;
   1514c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   15150:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   15154:	e0bfff17 	ldw	r2,-4(fp)
   15158:	d0a7fe15 	stw	r2,-24584(gp)
   1515c:	e0bffc17 	ldw	r2,-16(fp)
   15160:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15164:	e0bffe17 	ldw	r2,-8(fp)
   15168:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1516c:	0001883a 	nop
   15170:	e037883a 	mov	sp,fp
   15174:	df000017 	ldw	fp,0(sp)
   15178:	dec00104 	addi	sp,sp,4
   1517c:	f800283a 	ret

00015180 <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
   15180:	defff804 	addi	sp,sp,-32
   15184:	dfc00715 	stw	ra,28(sp)
   15188:	df000615 	stw	fp,24(sp)
   1518c:	df000604 	addi	fp,sp,24
   15190:	e13ffc15 	stw	r4,-16(fp)
   15194:	e17ffd15 	stw	r5,-12(fp)
   15198:	3005883a 	mov	r2,r6
   1519c:	e1ffff15 	stw	r7,-4(fp)
   151a0:	e0bffe05 	stb	r2,-8(fp)
    INT8U     len;
#endif


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
   151a4:	e0800417 	ldw	r2,16(fp)
   151a8:	1000021e 	bne	r2,zero,151b4 <OSTmrCreate+0x34>
        return ((OS_TMR *)0);
   151ac:	0005883a 	mov	r2,zero
   151b0:	00005d06 	br	15328 <OSTmrCreate+0x1a8>
    }
    switch (opt) {
   151b4:	e0bffe03 	ldbu	r2,-8(fp)
   151b8:	10c00060 	cmpeqi	r3,r2,1
   151bc:	1800091e 	bne	r3,zero,151e4 <OSTmrCreate+0x64>
   151c0:	108000a0 	cmpeqi	r2,r2,2
   151c4:	10000e26 	beq	r2,zero,15200 <OSTmrCreate+0x80>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
   151c8:	e0bffd17 	ldw	r2,-12(fp)
   151cc:	1000111e 	bne	r2,zero,15214 <OSTmrCreate+0x94>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
   151d0:	e0800417 	ldw	r2,16(fp)
   151d4:	00ffe0c4 	movi	r3,-125
   151d8:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
   151dc:	0005883a 	mov	r2,zero
   151e0:	00005106 	br	15328 <OSTmrCreate+0x1a8>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
   151e4:	e0bffc17 	ldw	r2,-16(fp)
   151e8:	10000c1e 	bne	r2,zero,1521c <OSTmrCreate+0x9c>
                 *perr = OS_ERR_TMR_INVALID_DLY;
   151ec:	e0800417 	ldw	r2,16(fp)
   151f0:	00ffe084 	movi	r3,-126
   151f4:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
   151f8:	0005883a 	mov	r2,zero
   151fc:	00004a06 	br	15328 <OSTmrCreate+0x1a8>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
   15200:	e0800417 	ldw	r2,16(fp)
   15204:	00ffe104 	movi	r3,-124
   15208:	10c00005 	stb	r3,0(r2)
             return ((OS_TMR *)0);
   1520c:	0005883a 	mov	r2,zero
   15210:	00004506 	br	15328 <OSTmrCreate+0x1a8>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
                 return ((OS_TMR *)0);
             }
             break;
   15214:	0001883a 	nop
   15218:	00000106 	br	15220 <OSTmrCreate+0xa0>
        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
                 *perr = OS_ERR_TMR_INVALID_DLY;
                 return ((OS_TMR *)0);
             }
             break;
   1521c:	0001883a 	nop
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
   15220:	d0a7fb03 	ldbu	r2,-24596(gp)
   15224:	10803fcc 	andi	r2,r2,255
   15228:	10000526 	beq	r2,zero,15240 <OSTmrCreate+0xc0>
        *perr  = OS_ERR_TMR_ISR;
   1522c:	e0800417 	ldw	r2,16(fp)
   15230:	00ffe2c4 	movi	r3,-117
   15234:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
   15238:	0005883a 	mov	r2,zero
   1523c:	00003a06 	br	15328 <OSTmrCreate+0x1a8>
    }
    OSTmr_Lock();
   15240:	00160c80 	call	160c8 <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
   15244:	0015b980 	call	15b98 <OSTmr_Alloc>
   15248:	e0bffa15 	stw	r2,-24(fp)
    if (ptmr == (OS_TMR *)0) {
   1524c:	e0bffa17 	ldw	r2,-24(fp)
   15250:	1000061e 	bne	r2,zero,1526c <OSTmrCreate+0xec>
        OSTmr_Unlock();
   15254:	00161040 	call	16104 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
   15258:	e0800417 	ldw	r2,16(fp)
   1525c:	00ffe184 	movi	r3,-122
   15260:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
   15264:	0005883a 	mov	r2,zero
   15268:	00002f06 	br	15328 <OSTmrCreate+0x1a8>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
   1526c:	e0bffa17 	ldw	r2,-24(fp)
   15270:	00c00044 	movi	r3,1
   15274:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrDly         = dly;
   15278:	e0bffa17 	ldw	r2,-24(fp)
   1527c:	e0fffc17 	ldw	r3,-16(fp)
   15280:	10c00615 	stw	r3,24(r2)
    ptmr->OSTmrPeriod      = period;
   15284:	e0bffa17 	ldw	r2,-24(fp)
   15288:	e0fffd17 	ldw	r3,-12(fp)
   1528c:	10c00715 	stw	r3,28(r2)
    ptmr->OSTmrOpt         = opt;
   15290:	e0bffa17 	ldw	r2,-24(fp)
   15294:	e0fffe03 	ldbu	r3,-8(fp)
   15298:	10c00c05 	stb	r3,48(r2)
    ptmr->OSTmrCallback    = callback;
   1529c:	e0bffa17 	ldw	r2,-24(fp)
   152a0:	e0ffff17 	ldw	r3,-4(fp)
   152a4:	10c00115 	stw	r3,4(r2)
    ptmr->OSTmrCallbackArg = callback_arg;
   152a8:	e0bffa17 	ldw	r2,-24(fp)
   152ac:	e0c00217 	ldw	r3,8(fp)
   152b0:	10c00215 	stw	r3,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
   152b4:	e0800317 	ldw	r2,12(fp)
   152b8:	10001726 	beq	r2,zero,15318 <OSTmrCreate+0x198>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
   152bc:	e1000317 	ldw	r4,12(fp)
   152c0:	000e9700 	call	e970 <OS_StrLen>
   152c4:	e0bffb05 	stb	r2,-20(fp)
        if (len < OS_TMR_CFG_NAME_SIZE) {
   152c8:	e0bffb03 	ldbu	r2,-20(fp)
   152cc:	10800428 	cmpgeui	r2,r2,16
   152d0:	1000061e 	bne	r2,zero,152ec <OSTmrCreate+0x16c>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
   152d4:	e0bffa17 	ldw	r2,-24(fp)
   152d8:	10800804 	addi	r2,r2,32
   152dc:	e1400317 	ldw	r5,12(fp)
   152e0:	1009883a 	mov	r4,r2
   152e4:	000e8fc0 	call	e8fc <OS_StrCopy>
   152e8:	00000b06 	br	15318 <OSTmrCreate+0x198>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
   152ec:	e0bffa17 	ldw	r2,-24(fp)
   152f0:	00c008c4 	movi	r3,35
   152f4:	10c00805 	stb	r3,32(r2)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
   152f8:	e0bffa17 	ldw	r2,-24(fp)
   152fc:	10000845 	stb	zero,33(r2)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
   15300:	e0800417 	ldw	r2,16(fp)
   15304:	00ffe304 	movi	r3,-116
   15308:	10c00005 	stb	r3,0(r2)
            OSTmr_Unlock();
   1530c:	00161040 	call	16104 <OSTmr_Unlock>
            return (ptmr);
   15310:	e0bffa17 	ldw	r2,-24(fp)
   15314:	00000406 	br	15328 <OSTmrCreate+0x1a8>
        }
    }
#endif
    OSTmr_Unlock();
   15318:	00161040 	call	16104 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
   1531c:	e0800417 	ldw	r2,16(fp)
   15320:	10000005 	stb	zero,0(r2)
    return (ptmr);
   15324:	e0bffa17 	ldw	r2,-24(fp)
}
   15328:	e037883a 	mov	sp,fp
   1532c:	dfc00117 	ldw	ra,4(sp)
   15330:	df000017 	ldw	fp,0(sp)
   15334:	dec00204 	addi	sp,sp,8
   15338:	f800283a 	ret

0001533c <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
   1533c:	defffc04 	addi	sp,sp,-16
   15340:	dfc00315 	stw	ra,12(sp)
   15344:	df000215 	stw	fp,8(sp)
   15348:	df000204 	addi	fp,sp,8
   1534c:	e13ffe15 	stw	r4,-8(fp)
   15350:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
   15354:	e0bfff17 	ldw	r2,-4(fp)
   15358:	1000021e 	bne	r2,zero,15364 <OSTmrDel+0x28>
        return (OS_FALSE);
   1535c:	0005883a 	mov	r2,zero
   15360:	00003f06 	br	15460 <OSTmrDel+0x124>
    }
    if (ptmr == (OS_TMR *)0) {
   15364:	e0bffe17 	ldw	r2,-8(fp)
   15368:	1000051e 	bne	r2,zero,15380 <OSTmrDel+0x44>
        *perr = OS_ERR_TMR_INVALID;
   1536c:	e0bfff17 	ldw	r2,-4(fp)
   15370:	00ffe284 	movi	r3,-118
   15374:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
   15378:	0005883a 	mov	r2,zero
   1537c:	00003806 	br	15460 <OSTmrDel+0x124>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
   15380:	e0bffe17 	ldw	r2,-8(fp)
   15384:	10800003 	ldbu	r2,0(r2)
   15388:	10803fcc 	andi	r2,r2,255
   1538c:	10801920 	cmpeqi	r2,r2,100
   15390:	1000051e 	bne	r2,zero,153a8 <OSTmrDel+0x6c>
        *perr = OS_ERR_TMR_INVALID_TYPE;
   15394:	e0bfff17 	ldw	r2,-4(fp)
   15398:	00ffe244 	movi	r3,-119
   1539c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
   153a0:	0005883a 	mov	r2,zero
   153a4:	00002e06 	br	15460 <OSTmrDel+0x124>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
   153a8:	d0a7fb03 	ldbu	r2,-24596(gp)
   153ac:	10803fcc 	andi	r2,r2,255
   153b0:	10000526 	beq	r2,zero,153c8 <OSTmrDel+0x8c>
        *perr  = OS_ERR_TMR_ISR;
   153b4:	e0bfff17 	ldw	r2,-4(fp)
   153b8:	00ffe2c4 	movi	r3,-117
   153bc:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
   153c0:	0005883a 	mov	r2,zero
   153c4:	00002606 	br	15460 <OSTmrDel+0x124>
    }
    OSTmr_Lock();
   153c8:	00160c80 	call	160c8 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
   153cc:	e0bffe17 	ldw	r2,-8(fp)
   153d0:	10800c43 	ldbu	r2,49(r2)
   153d4:	10803fcc 	andi	r2,r2,255
   153d8:	10c000c8 	cmpgei	r3,r2,3
   153dc:	1800031e 	bne	r3,zero,153ec <OSTmrDel+0xb0>
   153e0:	00800d16 	blt	zero,r2,15418 <OSTmrDel+0xdc>
   153e4:	10001326 	beq	r2,zero,15434 <OSTmrDel+0xf8>
   153e8:	00001806 	br	1544c <OSTmrDel+0x110>
   153ec:	108000e0 	cmpeqi	r2,r2,3
   153f0:	10001626 	beq	r2,zero,1544c <OSTmrDel+0x110>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
   153f4:	e13ffe17 	ldw	r4,-8(fp)
   153f8:	0015fd40 	call	15fd4 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
   153fc:	e13ffe17 	ldw	r4,-8(fp)
   15400:	0015c040 	call	15c04 <OSTmr_Free>
             OSTmr_Unlock();
   15404:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
   15408:	e0bfff17 	ldw	r2,-4(fp)
   1540c:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
   15410:	00800044 	movi	r2,1
   15414:	00001206 	br	15460 <OSTmrDel+0x124>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
   15418:	e13ffe17 	ldw	r4,-8(fp)
   1541c:	0015c040 	call	15c04 <OSTmr_Free>
             OSTmr_Unlock();
   15420:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
   15424:	e0bfff17 	ldw	r2,-4(fp)
   15428:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
   1542c:	00800044 	movi	r2,1
   15430:	00000b06 	br	15460 <OSTmrDel+0x124>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
   15434:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
   15438:	e0bfff17 	ldw	r2,-4(fp)
   1543c:	00ffe1c4 	movi	r3,-121
   15440:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
   15444:	0005883a 	mov	r2,zero
   15448:	00000506 	br	15460 <OSTmrDel+0x124>

        default:
             OSTmr_Unlock();
   1544c:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
   15450:	e0bfff17 	ldw	r2,-4(fp)
   15454:	00ffe344 	movi	r3,-115
   15458:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
   1545c:	0005883a 	mov	r2,zero
    }
}
   15460:	e037883a 	mov	sp,fp
   15464:	dfc00117 	ldw	ra,4(sp)
   15468:	df000017 	ldw	fp,0(sp)
   1546c:	dec00204 	addi	sp,sp,8
   15470:	f800283a 	ret

00015474 <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
   15474:	defffa04 	addi	sp,sp,-24
   15478:	dfc00515 	stw	ra,20(sp)
   1547c:	df000415 	stw	fp,16(sp)
   15480:	df000404 	addi	fp,sp,16
   15484:	e13ffd15 	stw	r4,-12(fp)
   15488:	e17ffe15 	stw	r5,-8(fp)
   1548c:	e1bfff15 	stw	r6,-4(fp)
    INT8U  len;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
   15490:	e0bfff17 	ldw	r2,-4(fp)
   15494:	1000021e 	bne	r2,zero,154a0 <OSTmrNameGet+0x2c>
        return (0);
   15498:	0005883a 	mov	r2,zero
   1549c:	00003e06 	br	15598 <OSTmrNameGet+0x124>
    }
    if (pdest == (INT8U *)0) {
   154a0:	e0bffe17 	ldw	r2,-8(fp)
   154a4:	1000051e 	bne	r2,zero,154bc <OSTmrNameGet+0x48>
        *perr = OS_ERR_TMR_INVALID_DEST;
   154a8:	e0bfff17 	ldw	r2,-4(fp)
   154ac:	00ffe204 	movi	r3,-120
   154b0:	10c00005 	stb	r3,0(r2)
        return (0);
   154b4:	0005883a 	mov	r2,zero
   154b8:	00003706 	br	15598 <OSTmrNameGet+0x124>
    }
    if (ptmr == (OS_TMR *)0) {
   154bc:	e0bffd17 	ldw	r2,-12(fp)
   154c0:	1000051e 	bne	r2,zero,154d8 <OSTmrNameGet+0x64>
        *perr = OS_ERR_TMR_INVALID;
   154c4:	e0bfff17 	ldw	r2,-4(fp)
   154c8:	00ffe284 	movi	r3,-118
   154cc:	10c00005 	stb	r3,0(r2)
        return (0);
   154d0:	0005883a 	mov	r2,zero
   154d4:	00003006 	br	15598 <OSTmrNameGet+0x124>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
   154d8:	e0bffd17 	ldw	r2,-12(fp)
   154dc:	10800003 	ldbu	r2,0(r2)
   154e0:	10803fcc 	andi	r2,r2,255
   154e4:	10801920 	cmpeqi	r2,r2,100
   154e8:	1000051e 	bne	r2,zero,15500 <OSTmrNameGet+0x8c>
        *perr = OS_ERR_TMR_INVALID_TYPE;
   154ec:	e0bfff17 	ldw	r2,-4(fp)
   154f0:	00ffe244 	movi	r3,-119
   154f4:	10c00005 	stb	r3,0(r2)
        return (0);
   154f8:	0005883a 	mov	r2,zero
   154fc:	00002606 	br	15598 <OSTmrNameGet+0x124>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
   15500:	d0a7fb03 	ldbu	r2,-24596(gp)
   15504:	10803fcc 	andi	r2,r2,255
   15508:	10000526 	beq	r2,zero,15520 <OSTmrNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
   1550c:	e0bfff17 	ldw	r2,-4(fp)
   15510:	00c00444 	movi	r3,17
   15514:	10c00005 	stb	r3,0(r2)
        return (0);
   15518:	0005883a 	mov	r2,zero
   1551c:	00001e06 	br	15598 <OSTmrNameGet+0x124>
    }
    OSTmr_Lock();
   15520:	00160c80 	call	160c8 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
   15524:	e0bffd17 	ldw	r2,-12(fp)
   15528:	10800c43 	ldbu	r2,49(r2)
   1552c:	10803fcc 	andi	r2,r2,255
   15530:	10000e26 	beq	r2,zero,1556c <OSTmrNameGet+0xf8>
   15534:	10001316 	blt	r2,zero,15584 <OSTmrNameGet+0x110>
   15538:	10800108 	cmpgei	r2,r2,4
   1553c:	1000111e 	bne	r2,zero,15584 <OSTmrNameGet+0x110>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
   15540:	e0bffd17 	ldw	r2,-12(fp)
   15544:	10800804 	addi	r2,r2,32
   15548:	100b883a 	mov	r5,r2
   1554c:	e13ffe17 	ldw	r4,-8(fp)
   15550:	000e8fc0 	call	e8fc <OS_StrCopy>
   15554:	e0bffc05 	stb	r2,-16(fp)
             OSTmr_Unlock();
   15558:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
   1555c:	e0bfff17 	ldw	r2,-4(fp)
   15560:	10000005 	stb	zero,0(r2)
             return (len);
   15564:	e0bffc03 	ldbu	r2,-16(fp)
   15568:	00000b06 	br	15598 <OSTmrNameGet+0x124>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
   1556c:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
   15570:	e0bfff17 	ldw	r2,-4(fp)
   15574:	00ffe1c4 	movi	r3,-121
   15578:	10c00005 	stb	r3,0(r2)
             return (0);
   1557c:	0005883a 	mov	r2,zero
   15580:	00000506 	br	15598 <OSTmrNameGet+0x124>

        default:
             OSTmr_Unlock();
   15584:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
   15588:	e0bfff17 	ldw	r2,-4(fp)
   1558c:	00ffe344 	movi	r3,-115
   15590:	10c00005 	stb	r3,0(r2)
             return (0);
   15594:	0005883a 	mov	r2,zero
    }
}
   15598:	e037883a 	mov	sp,fp
   1559c:	dfc00117 	ldw	ra,4(sp)
   155a0:	df000017 	ldw	fp,0(sp)
   155a4:	dec00204 	addi	sp,sp,8
   155a8:	f800283a 	ret

000155ac <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
   155ac:	defffb04 	addi	sp,sp,-20
   155b0:	dfc00415 	stw	ra,16(sp)
   155b4:	df000315 	stw	fp,12(sp)
   155b8:	df000304 	addi	fp,sp,12
   155bc:	e13ffe15 	stw	r4,-8(fp)
   155c0:	e17fff15 	stw	r5,-4(fp)
    INT32U  remain;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
   155c4:	e0bfff17 	ldw	r2,-4(fp)
   155c8:	1000021e 	bne	r2,zero,155d4 <OSTmrRemainGet+0x28>
        return (0);
   155cc:	0005883a 	mov	r2,zero
   155d0:	00005d06 	br	15748 <OSTmrRemainGet+0x19c>
    }
    if (ptmr == (OS_TMR *)0) {
   155d4:	e0bffe17 	ldw	r2,-8(fp)
   155d8:	1000051e 	bne	r2,zero,155f0 <OSTmrRemainGet+0x44>
        *perr = OS_ERR_TMR_INVALID;
   155dc:	e0bfff17 	ldw	r2,-4(fp)
   155e0:	00ffe284 	movi	r3,-118
   155e4:	10c00005 	stb	r3,0(r2)
        return (0);
   155e8:	0005883a 	mov	r2,zero
   155ec:	00005606 	br	15748 <OSTmrRemainGet+0x19c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
   155f0:	e0bffe17 	ldw	r2,-8(fp)
   155f4:	10800003 	ldbu	r2,0(r2)
   155f8:	10803fcc 	andi	r2,r2,255
   155fc:	10801920 	cmpeqi	r2,r2,100
   15600:	1000051e 	bne	r2,zero,15618 <OSTmrRemainGet+0x6c>
        *perr = OS_ERR_TMR_INVALID_TYPE;
   15604:	e0bfff17 	ldw	r2,-4(fp)
   15608:	00ffe244 	movi	r3,-119
   1560c:	10c00005 	stb	r3,0(r2)
        return (0);
   15610:	0005883a 	mov	r2,zero
   15614:	00004c06 	br	15748 <OSTmrRemainGet+0x19c>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
   15618:	d0a7fb03 	ldbu	r2,-24596(gp)
   1561c:	10803fcc 	andi	r2,r2,255
   15620:	10000526 	beq	r2,zero,15638 <OSTmrRemainGet+0x8c>
        *perr = OS_ERR_TMR_ISR;
   15624:	e0bfff17 	ldw	r2,-4(fp)
   15628:	00ffe2c4 	movi	r3,-117
   1562c:	10c00005 	stb	r3,0(r2)
        return (0);
   15630:	0005883a 	mov	r2,zero
   15634:	00004406 	br	15748 <OSTmrRemainGet+0x19c>
    }
    OSTmr_Lock();
   15638:	00160c80 	call	160c8 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
   1563c:	e0bffe17 	ldw	r2,-8(fp)
   15640:	10800c43 	ldbu	r2,49(r2)
   15644:	10803fcc 	andi	r2,r2,255
   15648:	10c00060 	cmpeqi	r3,r2,1
   1564c:	1800121e 	bne	r3,zero,15698 <OSTmrRemainGet+0xec>
   15650:	10c00088 	cmpgei	r3,r2,2
   15654:	1800021e 	bne	r3,zero,15660 <OSTmrRemainGet+0xb4>
   15658:	10003026 	beq	r2,zero,1571c <OSTmrRemainGet+0x170>
   1565c:	00003506 	br	15734 <OSTmrRemainGet+0x188>
   15660:	10c000a0 	cmpeqi	r3,r2,2
   15664:	1800281e 	bne	r3,zero,15708 <OSTmrRemainGet+0x15c>
   15668:	108000e0 	cmpeqi	r2,r2,3
   1566c:	10003126 	beq	r2,zero,15734 <OSTmrRemainGet+0x188>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
   15670:	e0bffe17 	ldw	r2,-8(fp)
   15674:	10c00517 	ldw	r3,20(r2)
   15678:	d0a7fd17 	ldw	r2,-24588(gp)
   1567c:	1885c83a 	sub	r2,r3,r2
   15680:	e0bffd15 	stw	r2,-12(fp)
             OSTmr_Unlock();
   15684:	00161040 	call	16104 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
   15688:	e0bfff17 	ldw	r2,-4(fp)
   1568c:	10000005 	stb	zero,0(r2)
             return (remain);
   15690:	e0bffd17 	ldw	r2,-12(fp)
   15694:	00002c06 	br	15748 <OSTmrRemainGet+0x19c>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
   15698:	e0bffe17 	ldw	r2,-8(fp)
   1569c:	10800c03 	ldbu	r2,48(r2)
   156a0:	10803fcc 	andi	r2,r2,255
   156a4:	108000a0 	cmpeqi	r2,r2,2
   156a8:	10000e26 	beq	r2,zero,156e4 <OSTmrRemainGet+0x138>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
   156ac:	e0bffe17 	ldw	r2,-8(fp)
   156b0:	10800617 	ldw	r2,24(r2)
   156b4:	1000041e 	bne	r2,zero,156c8 <OSTmrRemainGet+0x11c>
                          remain = ptmr->OSTmrPeriod;
   156b8:	e0bffe17 	ldw	r2,-8(fp)
   156bc:	10800717 	ldw	r2,28(r2)
   156c0:	e0bffd15 	stw	r2,-12(fp)
   156c4:	00000306 	br	156d4 <OSTmrRemainGet+0x128>
                      } else {
                          remain = ptmr->OSTmrDly;
   156c8:	e0bffe17 	ldw	r2,-8(fp)
   156cc:	10800617 	ldw	r2,24(r2)
   156d0:	e0bffd15 	stw	r2,-12(fp)
                      }
                      OSTmr_Unlock();
   156d4:	00161040 	call	16104 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
   156d8:	e0bfff17 	ldw	r2,-4(fp)
   156dc:	10000005 	stb	zero,0(r2)
                      break;
   156e0:	00000706 	br	15700 <OSTmrRemainGet+0x154>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
   156e4:	e0bffe17 	ldw	r2,-8(fp)
   156e8:	10800617 	ldw	r2,24(r2)
   156ec:	e0bffd15 	stw	r2,-12(fp)
                      OSTmr_Unlock();
   156f0:	00161040 	call	16104 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
   156f4:	e0bfff17 	ldw	r2,-4(fp)
   156f8:	10000005 	stb	zero,0(r2)
                      break;
   156fc:	0001883a 	nop
             }
             return (remain);
   15700:	e0bffd17 	ldw	r2,-12(fp)
   15704:	00001006 	br	15748 <OSTmrRemainGet+0x19c>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
   15708:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
   1570c:	e0bfff17 	ldw	r2,-4(fp)
   15710:	10000005 	stb	zero,0(r2)
             return (0);
   15714:	0005883a 	mov	r2,zero
   15718:	00000b06 	br	15748 <OSTmrRemainGet+0x19c>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
   1571c:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
   15720:	e0bfff17 	ldw	r2,-4(fp)
   15724:	00ffe1c4 	movi	r3,-121
   15728:	10c00005 	stb	r3,0(r2)
             return (0);
   1572c:	0005883a 	mov	r2,zero
   15730:	00000506 	br	15748 <OSTmrRemainGet+0x19c>

        default:
             OSTmr_Unlock();
   15734:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
   15738:	e0bfff17 	ldw	r2,-4(fp)
   1573c:	00ffe344 	movi	r3,-115
   15740:	10c00005 	stb	r3,0(r2)
             return (0);
   15744:	0005883a 	mov	r2,zero
    }
}
   15748:	e037883a 	mov	sp,fp
   1574c:	dfc00117 	ldw	ra,4(sp)
   15750:	df000017 	ldw	fp,0(sp)
   15754:	dec00204 	addi	sp,sp,8
   15758:	f800283a 	ret

0001575c <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
   1575c:	defffb04 	addi	sp,sp,-20
   15760:	dfc00415 	stw	ra,16(sp)
   15764:	df000315 	stw	fp,12(sp)
   15768:	df000304 	addi	fp,sp,12
   1576c:	e13ffe15 	stw	r4,-8(fp)
   15770:	e17fff15 	stw	r5,-4(fp)
    INT8U  state;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
   15774:	e0bfff17 	ldw	r2,-4(fp)
   15778:	1000021e 	bne	r2,zero,15784 <OSTmrStateGet+0x28>
        return (0);
   1577c:	0005883a 	mov	r2,zero
   15780:	00002a06 	br	1582c <OSTmrStateGet+0xd0>
    }
    if (ptmr == (OS_TMR *)0) {
   15784:	e0bffe17 	ldw	r2,-8(fp)
   15788:	1000051e 	bne	r2,zero,157a0 <OSTmrStateGet+0x44>
        *perr = OS_ERR_TMR_INVALID;
   1578c:	e0bfff17 	ldw	r2,-4(fp)
   15790:	00ffe284 	movi	r3,-118
   15794:	10c00005 	stb	r3,0(r2)
        return (0);
   15798:	0005883a 	mov	r2,zero
   1579c:	00002306 	br	1582c <OSTmrStateGet+0xd0>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
   157a0:	e0bffe17 	ldw	r2,-8(fp)
   157a4:	10800003 	ldbu	r2,0(r2)
   157a8:	10803fcc 	andi	r2,r2,255
   157ac:	10801920 	cmpeqi	r2,r2,100
   157b0:	1000051e 	bne	r2,zero,157c8 <OSTmrStateGet+0x6c>
        *perr = OS_ERR_TMR_INVALID_TYPE;
   157b4:	e0bfff17 	ldw	r2,-4(fp)
   157b8:	00ffe244 	movi	r3,-119
   157bc:	10c00005 	stb	r3,0(r2)
        return (0);
   157c0:	0005883a 	mov	r2,zero
   157c4:	00001906 	br	1582c <OSTmrStateGet+0xd0>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
   157c8:	d0a7fb03 	ldbu	r2,-24596(gp)
   157cc:	10803fcc 	andi	r2,r2,255
   157d0:	10000526 	beq	r2,zero,157e8 <OSTmrStateGet+0x8c>
        *perr = OS_ERR_TMR_ISR;
   157d4:	e0bfff17 	ldw	r2,-4(fp)
   157d8:	00ffe2c4 	movi	r3,-117
   157dc:	10c00005 	stb	r3,0(r2)
        return (0);
   157e0:	0005883a 	mov	r2,zero
   157e4:	00001106 	br	1582c <OSTmrStateGet+0xd0>
    }
    OSTmr_Lock();
   157e8:	00160c80 	call	160c8 <OSTmr_Lock>
    state = ptmr->OSTmrState;
   157ec:	e0bffe17 	ldw	r2,-8(fp)
   157f0:	10800c43 	ldbu	r2,49(r2)
   157f4:	e0bffd05 	stb	r2,-12(fp)
    switch (state) {
   157f8:	e0bffd03 	ldbu	r2,-12(fp)
   157fc:	1005883a 	mov	r2,r2
   15800:	10800128 	cmpgeui	r2,r2,4
   15804:	1000031e 	bne	r2,zero,15814 <OSTmrStateGet+0xb8>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
   15808:	e0bfff17 	ldw	r2,-4(fp)
   1580c:	10000005 	stb	zero,0(r2)
             break;
   15810:	00000406 	br	15824 <OSTmrStateGet+0xc8>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
   15814:	e0bfff17 	ldw	r2,-4(fp)
   15818:	00ffe344 	movi	r3,-115
   1581c:	10c00005 	stb	r3,0(r2)
             break;
   15820:	0001883a 	nop
    }
    OSTmr_Unlock();
   15824:	00161040 	call	16104 <OSTmr_Unlock>
    return (state);
   15828:	e0bffd03 	ldbu	r2,-12(fp)
}
   1582c:	e037883a 	mov	sp,fp
   15830:	dfc00117 	ldw	ra,4(sp)
   15834:	df000017 	ldw	fp,0(sp)
   15838:	dec00204 	addi	sp,sp,8
   1583c:	f800283a 	ret

00015840 <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
   15840:	defffc04 	addi	sp,sp,-16
   15844:	dfc00315 	stw	ra,12(sp)
   15848:	df000215 	stw	fp,8(sp)
   1584c:	df000204 	addi	fp,sp,8
   15850:	e13ffe15 	stw	r4,-8(fp)
   15854:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
   15858:	e0bfff17 	ldw	r2,-4(fp)
   1585c:	1000021e 	bne	r2,zero,15868 <OSTmrStart+0x28>
        return (OS_FALSE);
   15860:	0005883a 	mov	r2,zero
   15864:	00004106 	br	1596c <OSTmrStart+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
   15868:	e0bffe17 	ldw	r2,-8(fp)
   1586c:	1000051e 	bne	r2,zero,15884 <OSTmrStart+0x44>
        *perr = OS_ERR_TMR_INVALID;
   15870:	e0bfff17 	ldw	r2,-4(fp)
   15874:	00ffe284 	movi	r3,-118
   15878:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
   1587c:	0005883a 	mov	r2,zero
   15880:	00003a06 	br	1596c <OSTmrStart+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
   15884:	e0bffe17 	ldw	r2,-8(fp)
   15888:	10800003 	ldbu	r2,0(r2)
   1588c:	10803fcc 	andi	r2,r2,255
   15890:	10801920 	cmpeqi	r2,r2,100
   15894:	1000051e 	bne	r2,zero,158ac <OSTmrStart+0x6c>
        *perr = OS_ERR_TMR_INVALID_TYPE;
   15898:	e0bfff17 	ldw	r2,-4(fp)
   1589c:	00ffe244 	movi	r3,-119
   158a0:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
   158a4:	0005883a 	mov	r2,zero
   158a8:	00003006 	br	1596c <OSTmrStart+0x12c>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
   158ac:	d0a7fb03 	ldbu	r2,-24596(gp)
   158b0:	10803fcc 	andi	r2,r2,255
   158b4:	10000526 	beq	r2,zero,158cc <OSTmrStart+0x8c>
        *perr  = OS_ERR_TMR_ISR;
   158b8:	e0bfff17 	ldw	r2,-4(fp)
   158bc:	00ffe2c4 	movi	r3,-117
   158c0:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
   158c4:	0005883a 	mov	r2,zero
   158c8:	00002806 	br	1596c <OSTmrStart+0x12c>
    }
    OSTmr_Lock();
   158cc:	00160c80 	call	160c8 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
   158d0:	e0bffe17 	ldw	r2,-8(fp)
   158d4:	10800c43 	ldbu	r2,49(r2)
   158d8:	10803fcc 	andi	r2,r2,255
   158dc:	10c000c8 	cmpgei	r3,r2,3
   158e0:	1800031e 	bne	r3,zero,158f0 <OSTmrStart+0xb0>
   158e4:	00800e16 	blt	zero,r2,15920 <OSTmrStart+0xe0>
   158e8:	10001526 	beq	r2,zero,15940 <OSTmrStart+0x100>
   158ec:	00001a06 	br	15958 <OSTmrStart+0x118>
   158f0:	108000e0 	cmpeqi	r2,r2,3
   158f4:	10001826 	beq	r2,zero,15958 <OSTmrStart+0x118>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
   158f8:	e13ffe17 	ldw	r4,-8(fp)
   158fc:	0015fd40 	call	15fd4 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
   15900:	000b883a 	mov	r5,zero
   15904:	e13ffe17 	ldw	r4,-8(fp)
   15908:	0015e8c0 	call	15e8c <OSTmr_Link>
             OSTmr_Unlock();
   1590c:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
   15910:	e0bfff17 	ldw	r2,-4(fp)
   15914:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
   15918:	00800044 	movi	r2,1
   1591c:	00001306 	br	1596c <OSTmrStart+0x12c>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
   15920:	000b883a 	mov	r5,zero
   15924:	e13ffe17 	ldw	r4,-8(fp)
   15928:	0015e8c0 	call	15e8c <OSTmr_Link>
             OSTmr_Unlock();
   1592c:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
   15930:	e0bfff17 	ldw	r2,-4(fp)
   15934:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
   15938:	00800044 	movi	r2,1
   1593c:	00000b06 	br	1596c <OSTmrStart+0x12c>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
   15940:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
   15944:	e0bfff17 	ldw	r2,-4(fp)
   15948:	00ffe1c4 	movi	r3,-121
   1594c:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
   15950:	0005883a 	mov	r2,zero
   15954:	00000506 	br	1596c <OSTmrStart+0x12c>

        default:
             OSTmr_Unlock();
   15958:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
   1595c:	e0bfff17 	ldw	r2,-4(fp)
   15960:	00ffe344 	movi	r3,-115
   15964:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
   15968:	0005883a 	mov	r2,zero
    }
}
   1596c:	e037883a 	mov	sp,fp
   15970:	dfc00117 	ldw	ra,4(sp)
   15974:	df000017 	ldw	fp,0(sp)
   15978:	dec00204 	addi	sp,sp,8
   1597c:	f800283a 	ret

00015980 <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
   15980:	defff904 	addi	sp,sp,-28
   15984:	dfc00615 	stw	ra,24(sp)
   15988:	df000515 	stw	fp,20(sp)
   1598c:	df000504 	addi	fp,sp,20
   15990:	e13ffc15 	stw	r4,-16(fp)
   15994:	2805883a 	mov	r2,r5
   15998:	e1bffe15 	stw	r6,-8(fp)
   1599c:	e1ffff15 	stw	r7,-4(fp)
   159a0:	e0bffd05 	stb	r2,-12(fp)
    OS_TMR_CALLBACK  pfnct;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
   159a4:	e0bfff17 	ldw	r2,-4(fp)
   159a8:	1000021e 	bne	r2,zero,159b4 <OSTmrStop+0x34>
        return (OS_FALSE);
   159ac:	0005883a 	mov	r2,zero
   159b0:	00006606 	br	15b4c <OSTmrStop+0x1cc>
    }
    if (ptmr == (OS_TMR *)0) {
   159b4:	e0bffc17 	ldw	r2,-16(fp)
   159b8:	1000051e 	bne	r2,zero,159d0 <OSTmrStop+0x50>
        *perr = OS_ERR_TMR_INVALID;
   159bc:	e0bfff17 	ldw	r2,-4(fp)
   159c0:	00ffe284 	movi	r3,-118
   159c4:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
   159c8:	0005883a 	mov	r2,zero
   159cc:	00005f06 	br	15b4c <OSTmrStop+0x1cc>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
   159d0:	e0bffc17 	ldw	r2,-16(fp)
   159d4:	10800003 	ldbu	r2,0(r2)
   159d8:	10803fcc 	andi	r2,r2,255
   159dc:	10801920 	cmpeqi	r2,r2,100
   159e0:	1000051e 	bne	r2,zero,159f8 <OSTmrStop+0x78>
        *perr = OS_ERR_TMR_INVALID_TYPE;
   159e4:	e0bfff17 	ldw	r2,-4(fp)
   159e8:	00ffe244 	movi	r3,-119
   159ec:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
   159f0:	0005883a 	mov	r2,zero
   159f4:	00005506 	br	15b4c <OSTmrStop+0x1cc>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
   159f8:	d0a7fb03 	ldbu	r2,-24596(gp)
   159fc:	10803fcc 	andi	r2,r2,255
   15a00:	10000526 	beq	r2,zero,15a18 <OSTmrStop+0x98>
        *perr  = OS_ERR_TMR_ISR;
   15a04:	e0bfff17 	ldw	r2,-4(fp)
   15a08:	00ffe2c4 	movi	r3,-117
   15a0c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
   15a10:	0005883a 	mov	r2,zero
   15a14:	00004d06 	br	15b4c <OSTmrStop+0x1cc>
    }
    OSTmr_Lock();
   15a18:	00160c80 	call	160c8 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
   15a1c:	e0bffc17 	ldw	r2,-16(fp)
   15a20:	10800c43 	ldbu	r2,49(r2)
   15a24:	10803fcc 	andi	r2,r2,255
   15a28:	10c000c8 	cmpgei	r3,r2,3
   15a2c:	1800031e 	bne	r3,zero,15a3c <OSTmrStop+0xbc>
   15a30:	00803516 	blt	zero,r2,15b08 <OSTmrStop+0x188>
   15a34:	10003a26 	beq	r2,zero,15b20 <OSTmrStop+0x1a0>
   15a38:	00003f06 	br	15b38 <OSTmrStop+0x1b8>
   15a3c:	108000e0 	cmpeqi	r2,r2,3
   15a40:	10003d26 	beq	r2,zero,15b38 <OSTmrStop+0x1b8>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
   15a44:	e13ffc17 	ldw	r4,-16(fp)
   15a48:	0015fd40 	call	15fd4 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
   15a4c:	e0bfff17 	ldw	r2,-4(fp)
   15a50:	10000005 	stb	zero,0(r2)
             switch (opt) {
   15a54:	e0bffd03 	ldbu	r2,-12(fp)
   15a58:	10c000e0 	cmpeqi	r3,r2,3
   15a5c:	1800041e 	bne	r3,zero,15a70 <OSTmrStop+0xf0>
   15a60:	10c00120 	cmpeqi	r3,r2,4
   15a64:	1800121e 	bne	r3,zero,15ab0 <OSTmrStop+0x130>
   15a68:	10002326 	beq	r2,zero,15af8 <OSTmrStop+0x178>
   15a6c:	00001e06 	br	15ae8 <OSTmrStop+0x168>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
   15a70:	e0bffc17 	ldw	r2,-16(fp)
   15a74:	10800117 	ldw	r2,4(r2)
   15a78:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
   15a7c:	e0bffb17 	ldw	r2,-20(fp)
   15a80:	10000726 	beq	r2,zero,15aa0 <OSTmrStop+0x120>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
   15a84:	e0bffc17 	ldw	r2,-16(fp)
   15a88:	10c00217 	ldw	r3,8(r2)
   15a8c:	e0bffb17 	ldw	r2,-20(fp)
   15a90:	180b883a 	mov	r5,r3
   15a94:	e13ffc17 	ldw	r4,-16(fp)
   15a98:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
   15a9c:	00001706 	br	15afc <OSTmrStop+0x17c>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
   15aa0:	e0bfff17 	ldw	r2,-4(fp)
   15aa4:	00ffe3c4 	movi	r3,-113
   15aa8:	10c00005 	stb	r3,0(r2)
                      }
                      break;
   15aac:	00001306 	br	15afc <OSTmrStop+0x17c>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
   15ab0:	e0bffc17 	ldw	r2,-16(fp)
   15ab4:	10800117 	ldw	r2,4(r2)
   15ab8:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
   15abc:	e0bffb17 	ldw	r2,-20(fp)
   15ac0:	10000526 	beq	r2,zero,15ad8 <OSTmrStop+0x158>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
   15ac4:	e0bffb17 	ldw	r2,-20(fp)
   15ac8:	e17ffe17 	ldw	r5,-8(fp)
   15acc:	e13ffc17 	ldw	r4,-16(fp)
   15ad0:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
   15ad4:	00000906 	br	15afc <OSTmrStop+0x17c>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
   15ad8:	e0bfff17 	ldw	r2,-4(fp)
   15adc:	00ffe3c4 	movi	r3,-113
   15ae0:	10c00005 	stb	r3,0(r2)
                      }
                      break;
   15ae4:	00000506 	br	15afc <OSTmrStop+0x17c>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
   15ae8:	e0bfff17 	ldw	r2,-4(fp)
   15aec:	00ffe104 	movi	r3,-124
   15af0:	10c00005 	stb	r3,0(r2)
                     break;
   15af4:	00000106 	br	15afc <OSTmrStop+0x17c>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
   15af8:	0001883a 	nop

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSTmr_Unlock();
   15afc:	00161040 	call	16104 <OSTmr_Unlock>
             return (OS_TRUE);
   15b00:	00800044 	movi	r2,1
   15b04:	00001106 	br	15b4c <OSTmrStop+0x1cc>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
   15b08:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
   15b0c:	e0bfff17 	ldw	r2,-4(fp)
   15b10:	00ffe384 	movi	r3,-114
   15b14:	10c00005 	stb	r3,0(r2)
             return (OS_TRUE);
   15b18:	00800044 	movi	r2,1
   15b1c:	00000b06 	br	15b4c <OSTmrStop+0x1cc>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
   15b20:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
   15b24:	e0bfff17 	ldw	r2,-4(fp)
   15b28:	00ffe1c4 	movi	r3,-121
   15b2c:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
   15b30:	0005883a 	mov	r2,zero
   15b34:	00000506 	br	15b4c <OSTmrStop+0x1cc>

        default:
             OSTmr_Unlock();
   15b38:	00161040 	call	16104 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
   15b3c:	e0bfff17 	ldw	r2,-4(fp)
   15b40:	00ffe344 	movi	r3,-115
   15b44:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
   15b48:	0005883a 	mov	r2,zero
    }
}
   15b4c:	e037883a 	mov	sp,fp
   15b50:	dfc00117 	ldw	ra,4(sp)
   15b54:	df000017 	ldw	fp,0(sp)
   15b58:	dec00204 	addi	sp,sp,8
   15b5c:	f800283a 	ret

00015b60 <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
   15b60:	defffd04 	addi	sp,sp,-12
   15b64:	dfc00215 	stw	ra,8(sp)
   15b68:	df000115 	stw	fp,4(sp)
   15b6c:	df000104 	addi	fp,sp,4
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
   15b70:	d0a7ea17 	ldw	r2,-24664(gp)
   15b74:	1009883a 	mov	r4,r2
   15b78:	00132000 	call	13200 <OSSemPost>
   15b7c:	e0bfff05 	stb	r2,-4(fp)
    return (err);
   15b80:	e0bfff03 	ldbu	r2,-4(fp)
}
   15b84:	e037883a 	mov	sp,fp
   15b88:	dfc00117 	ldw	ra,4(sp)
   15b8c:	df000017 	ldw	fp,0(sp)
   15b90:	dec00204 	addi	sp,sp,8
   15b94:	f800283a 	ret

00015b98 <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
   15b98:	defffe04 	addi	sp,sp,-8
   15b9c:	df000115 	stw	fp,4(sp)
   15ba0:	df000104 	addi	fp,sp,4
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
   15ba4:	d0a7e817 	ldw	r2,-24672(gp)
   15ba8:	1000021e 	bne	r2,zero,15bb4 <OSTmr_Alloc+0x1c>
        return ((OS_TMR *)0);
   15bac:	0005883a 	mov	r2,zero
   15bb0:	00001006 	br	15bf4 <OSTmr_Alloc+0x5c>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
   15bb4:	d0a7e817 	ldw	r2,-24672(gp)
   15bb8:	e0bfff15 	stw	r2,-4(fp)
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
   15bbc:	e0bfff17 	ldw	r2,-4(fp)
   15bc0:	10800317 	ldw	r2,12(r2)
   15bc4:	d0a7e815 	stw	r2,-24672(gp)
    ptmr->OSTmrNext = (OS_TCB *)0;
   15bc8:	e0bfff17 	ldw	r2,-4(fp)
   15bcc:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev = (OS_TCB *)0;
   15bd0:	e0bfff17 	ldw	r2,-4(fp)
   15bd4:	10000415 	stw	zero,16(r2)
    OSTmrUsed++;
   15bd8:	d0a7ed0b 	ldhu	r2,-24652(gp)
   15bdc:	10800044 	addi	r2,r2,1
   15be0:	d0a7ed0d 	sth	r2,-24652(gp)
    OSTmrFree--;
   15be4:	d0a7f10b 	ldhu	r2,-24636(gp)
   15be8:	10bfffc4 	addi	r2,r2,-1
   15bec:	d0a7f10d 	sth	r2,-24636(gp)
    return (ptmr);
   15bf0:	e0bfff17 	ldw	r2,-4(fp)
}
   15bf4:	e037883a 	mov	sp,fp
   15bf8:	df000017 	ldw	fp,0(sp)
   15bfc:	dec00104 	addi	sp,sp,4
   15c00:	f800283a 	ret

00015c04 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
   15c04:	defffe04 	addi	sp,sp,-8
   15c08:	df000115 	stw	fp,4(sp)
   15c0c:	df000104 	addi	fp,sp,4
   15c10:	e13fff15 	stw	r4,-4(fp)
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
   15c14:	e0bfff17 	ldw	r2,-4(fp)
   15c18:	10000c45 	stb	zero,49(r2)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
   15c1c:	e0bfff17 	ldw	r2,-4(fp)
   15c20:	10000c05 	stb	zero,48(r2)
    ptmr->OSTmrPeriod      = 0;
   15c24:	e0bfff17 	ldw	r2,-4(fp)
   15c28:	10000715 	stw	zero,28(r2)
    ptmr->OSTmrMatch       = 0;
   15c2c:	e0bfff17 	ldw	r2,-4(fp)
   15c30:	10000515 	stw	zero,20(r2)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
   15c34:	e0bfff17 	ldw	r2,-4(fp)
   15c38:	10000115 	stw	zero,4(r2)
    ptmr->OSTmrCallbackArg = (void *)0;
   15c3c:	e0bfff17 	ldw	r2,-4(fp)
   15c40:	10000215 	stw	zero,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
   15c44:	e0bfff17 	ldw	r2,-4(fp)
   15c48:	00c00fc4 	movi	r3,63
   15c4c:	10c00805 	stb	r3,32(r2)
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
   15c50:	e0bfff17 	ldw	r2,-4(fp)
   15c54:	10000845 	stb	zero,33(r2)
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
   15c58:	e0bfff17 	ldw	r2,-4(fp)
   15c5c:	10000415 	stw	zero,16(r2)
    ptmr->OSTmrNext        = OSTmrFreeList;
   15c60:	d0e7e817 	ldw	r3,-24672(gp)
   15c64:	e0bfff17 	ldw	r2,-4(fp)
   15c68:	10c00315 	stw	r3,12(r2)
    OSTmrFreeList          = ptmr;
   15c6c:	e0bfff17 	ldw	r2,-4(fp)
   15c70:	d0a7e815 	stw	r2,-24672(gp)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
   15c74:	d0a7ed0b 	ldhu	r2,-24652(gp)
   15c78:	10bfffc4 	addi	r2,r2,-1
   15c7c:	d0a7ed0d 	sth	r2,-24652(gp)
    OSTmrFree++;
   15c80:	d0a7f10b 	ldhu	r2,-24636(gp)
   15c84:	10800044 	addi	r2,r2,1
   15c88:	d0a7f10d 	sth	r2,-24636(gp)
}
   15c8c:	0001883a 	nop
   15c90:	e037883a 	mov	sp,fp
   15c94:	df000017 	ldw	fp,0(sp)
   15c98:	dec00104 	addi	sp,sp,4
   15c9c:	f800283a 	ret

00015ca0 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
   15ca0:	defffa04 	addi	sp,sp,-24
   15ca4:	dfc00515 	stw	ra,20(sp)
   15ca8:	df000415 	stw	fp,16(sp)
   15cac:	df000404 	addi	fp,sp,16
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
   15cb0:	0141d404 	movi	r5,1872
   15cb4:	010000f4 	movhi	r4,3
   15cb8:	21040404 	addi	r4,r4,4112
   15cbc:	000e6fc0 	call	e6fc <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
   15cc0:	01400404 	movi	r5,16
   15cc4:	010000f4 	movhi	r4,3
   15cc8:	21027404 	addi	r4,r4,2512
   15ccc:	000e6fc0 	call	e6fc <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
   15cd0:	008000f4 	movhi	r2,3
   15cd4:	10840404 	addi	r2,r2,4112
   15cd8:	e0bffd15 	stw	r2,-12(fp)
    ptmr2 = &OSTmrTbl[1];
   15cdc:	008000f4 	movhi	r2,3
   15ce0:	10841104 	addi	r2,r2,4164
   15ce4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
   15ce8:	e03ffc0d 	sth	zero,-16(fp)
   15cec:	00001606 	br	15d48 <OSTmr_Init+0xa8>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
   15cf0:	e0bffd17 	ldw	r2,-12(fp)
   15cf4:	00c01904 	movi	r3,100
   15cf8:	10c00005 	stb	r3,0(r2)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
   15cfc:	e0bffd17 	ldw	r2,-12(fp)
   15d00:	10000c45 	stb	zero,49(r2)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
   15d04:	e0bffd17 	ldw	r2,-12(fp)
   15d08:	e0fffe17 	ldw	r3,-8(fp)
   15d0c:	10c00315 	stw	r3,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
   15d10:	e0bffd17 	ldw	r2,-12(fp)
   15d14:	00c00fc4 	movi	r3,63
   15d18:	10c00805 	stb	r3,32(r2)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
   15d1c:	e0bffd17 	ldw	r2,-12(fp)
   15d20:	10000845 	stb	zero,33(r2)
#endif
        ptmr1++;
   15d24:	e0bffd17 	ldw	r2,-12(fp)
   15d28:	10800d04 	addi	r2,r2,52
   15d2c:	e0bffd15 	stw	r2,-12(fp)
        ptmr2++;
   15d30:	e0bffe17 	ldw	r2,-8(fp)
   15d34:	10800d04 	addi	r2,r2,52
   15d38:	e0bffe15 	stw	r2,-8(fp)
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
   15d3c:	e0bffc0b 	ldhu	r2,-16(fp)
   15d40:	10800044 	addi	r2,r2,1
   15d44:	e0bffc0d 	sth	r2,-16(fp)
   15d48:	e0bffc0b 	ldhu	r2,-16(fp)
   15d4c:	108008f0 	cmpltui	r2,r2,35
   15d50:	103fe71e 	bne	r2,zero,15cf0 <OSTmr_Init+0x50>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
   15d54:	e0bffd17 	ldw	r2,-12(fp)
   15d58:	00c01904 	movi	r3,100
   15d5c:	10c00005 	stb	r3,0(r2)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
   15d60:	e0bffd17 	ldw	r2,-12(fp)
   15d64:	10000c45 	stb	zero,49(r2)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
   15d68:	e0bffd17 	ldw	r2,-12(fp)
   15d6c:	10000315 	stw	zero,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
   15d70:	e0bffd17 	ldw	r2,-12(fp)
   15d74:	00c00fc4 	movi	r3,63
   15d78:	10c00805 	stb	r3,32(r2)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
   15d7c:	e0bffd17 	ldw	r2,-12(fp)
   15d80:	10000845 	stb	zero,33(r2)
#endif
    OSTmrTime           = 0;
   15d84:	d027fd15 	stw	zero,-24588(gp)
    OSTmrUsed           = 0;
   15d88:	d027ed0d 	sth	zero,-24652(gp)
    OSTmrFree           = OS_TMR_CFG_MAX;
   15d8c:	00800904 	movi	r2,36
   15d90:	d0a7f10d 	sth	r2,-24636(gp)
    OSTmrFreeList       = &OSTmrTbl[0];
   15d94:	008000f4 	movhi	r2,3
   15d98:	10840404 	addi	r2,r2,4112
   15d9c:	d0a7e815 	stw	r2,-24672(gp)
    OSTmrSem            = OSSemCreate(1);
   15da0:	01000044 	movi	r4,1
   15da4:	0012b700 	call	12b70 <OSSemCreate>
   15da8:	d0a7ff15 	stw	r2,-24580(gp)
    OSTmrSemSignal      = OSSemCreate(0);
   15dac:	0009883a 	mov	r4,zero
   15db0:	0012b700 	call	12b70 <OSSemCreate>
   15db4:	d0a7ea15 	stw	r2,-24664(gp)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
   15db8:	d0a7ff17 	ldw	r2,-24580(gp)
   15dbc:	e0ffff04 	addi	r3,fp,-4
   15dc0:	180d883a 	mov	r6,r3
   15dc4:	014000b4 	movhi	r5,2
   15dc8:	296ac704 	addi	r5,r5,-21732
   15dcc:	1009883a 	mov	r4,r2
   15dd0:	000cf940 	call	cf94 <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
   15dd4:	d0a7ea17 	ldw	r2,-24664(gp)
   15dd8:	e0ffff04 	addi	r3,fp,-4
   15ddc:	180d883a 	mov	r6,r3
   15de0:	014000b4 	movhi	r5,2
   15de4:	296acc04 	addi	r5,r5,-21712
   15de8:	1009883a 	mov	r4,r2
   15dec:	000cf940 	call	cf94 <OSEventNameSet>
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
   15df0:	0015e0c0 	call	15e0c <OSTmr_InitTask>
}
   15df4:	0001883a 	nop
   15df8:	e037883a 	mov	sp,fp
   15dfc:	dfc00117 	ldw	ra,4(sp)
   15e00:	df000017 	ldw	fp,0(sp)
   15e04:	dec00204 	addi	sp,sp,8
   15e08:	f800283a 	ret

00015e0c <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
   15e0c:	defff804 	addi	sp,sp,-32
   15e10:	dfc00715 	stw	ra,28(sp)
   15e14:	df000615 	stw	fp,24(sp)
   15e18:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
   15e1c:	008000c4 	movi	r2,3
   15e20:	d8800415 	stw	r2,16(sp)
   15e24:	d8000315 	stw	zero,12(sp)
   15e28:	00808004 	movi	r2,512
   15e2c:	d8800215 	stw	r2,8(sp)
   15e30:	008000f4 	movhi	r2,3
   15e34:	108b5c04 	addi	r2,r2,11632
   15e38:	d8800115 	stw	r2,4(sp)
   15e3c:	00bfff54 	movui	r2,65533
   15e40:	d8800015 	stw	r2,0(sp)
   15e44:	000f883a 	mov	r7,zero
   15e48:	018000f4 	movhi	r6,3
   15e4c:	318d5b04 	addi	r6,r6,13676
   15e50:	000b883a 	mov	r5,zero
   15e54:	01000074 	movhi	r4,1
   15e58:	21184e04 	addi	r4,r4,24888
   15e5c:	0013bbc0 	call	13bbc <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
   15e60:	e1bfff04 	addi	r6,fp,-4
   15e64:	014000b4 	movhi	r5,2
   15e68:	296ad104 	addi	r5,r5,-21692
   15e6c:	0009883a 	mov	r4,zero
   15e70:	00143cc0 	call	143cc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
   15e74:	0001883a 	nop
   15e78:	e037883a 	mov	sp,fp
   15e7c:	dfc00117 	ldw	ra,4(sp)
   15e80:	df000017 	ldw	fp,0(sp)
   15e84:	dec00204 	addi	sp,sp,8
   15e88:	f800283a 	ret

00015e8c <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
   15e8c:	defffa04 	addi	sp,sp,-24
   15e90:	df000515 	stw	fp,20(sp)
   15e94:	df000504 	addi	fp,sp,20
   15e98:	e13ffe15 	stw	r4,-8(fp)
   15e9c:	2805883a 	mov	r2,r5
   15ea0:	e0bfff05 	stb	r2,-4(fp)
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
   15ea4:	e0bffe17 	ldw	r2,-8(fp)
   15ea8:	00c000c4 	movi	r3,3
   15eac:	10c00c45 	stb	r3,49(r2)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
   15eb0:	e0bfff03 	ldbu	r2,-4(fp)
   15eb4:	10800058 	cmpnei	r2,r2,1
   15eb8:	1000071e 	bne	r2,zero,15ed8 <OSTmr_Link+0x4c>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
   15ebc:	e0bffe17 	ldw	r2,-8(fp)
   15ec0:	10c00717 	ldw	r3,28(r2)
   15ec4:	d0a7fd17 	ldw	r2,-24588(gp)
   15ec8:	1887883a 	add	r3,r3,r2
   15ecc:	e0bffe17 	ldw	r2,-8(fp)
   15ed0:	10c00515 	stw	r3,20(r2)
   15ed4:	00001006 	br	15f18 <OSTmr_Link+0x8c>
    } else {
        if (ptmr->OSTmrDly == 0) {
   15ed8:	e0bffe17 	ldw	r2,-8(fp)
   15edc:	10800617 	ldw	r2,24(r2)
   15ee0:	1000071e 	bne	r2,zero,15f00 <OSTmr_Link+0x74>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
   15ee4:	e0bffe17 	ldw	r2,-8(fp)
   15ee8:	10c00717 	ldw	r3,28(r2)
   15eec:	d0a7fd17 	ldw	r2,-24588(gp)
   15ef0:	1887883a 	add	r3,r3,r2
   15ef4:	e0bffe17 	ldw	r2,-8(fp)
   15ef8:	10c00515 	stw	r3,20(r2)
   15efc:	00000606 	br	15f18 <OSTmr_Link+0x8c>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
   15f00:	e0bffe17 	ldw	r2,-8(fp)
   15f04:	10c00617 	ldw	r3,24(r2)
   15f08:	d0a7fd17 	ldw	r2,-24588(gp)
   15f0c:	1887883a 	add	r3,r3,r2
   15f10:	e0bffe17 	ldw	r2,-8(fp)
   15f14:	10c00515 	stw	r3,20(r2)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
   15f18:	e0bffe17 	ldw	r2,-8(fp)
   15f1c:	10800517 	ldw	r2,20(r2)
   15f20:	1080004c 	andi	r2,r2,1
   15f24:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
   15f28:	e0bffb0b 	ldhu	r2,-20(fp)
   15f2c:	100690fa 	slli	r3,r2,3
   15f30:	008000f4 	movhi	r2,3
   15f34:	10827404 	addi	r2,r2,2512
   15f38:	1885883a 	add	r2,r3,r2
   15f3c:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
   15f40:	e0bffc17 	ldw	r2,-16(fp)
   15f44:	10800017 	ldw	r2,0(r2)
   15f48:	1000091e 	bne	r2,zero,15f70 <OSTmr_Link+0xe4>
        pspoke->OSTmrFirst   = ptmr;
   15f4c:	e0bffc17 	ldw	r2,-16(fp)
   15f50:	e0fffe17 	ldw	r3,-8(fp)
   15f54:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (OS_TMR *)0;
   15f58:	e0bffe17 	ldw	r2,-8(fp)
   15f5c:	10000315 	stw	zero,12(r2)
        pspoke->OSTmrEntries = 1;
   15f60:	e0bffc17 	ldw	r2,-16(fp)
   15f64:	00c00044 	movi	r3,1
   15f68:	10c0010d 	sth	r3,4(r2)
   15f6c:	00001206 	br	15fb8 <OSTmr_Link+0x12c>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
   15f70:	e0bffc17 	ldw	r2,-16(fp)
   15f74:	10800017 	ldw	r2,0(r2)
   15f78:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst   = ptmr;
   15f7c:	e0bffc17 	ldw	r2,-16(fp)
   15f80:	e0fffe17 	ldw	r3,-8(fp)
   15f84:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (void *)ptmr1;
   15f88:	e0bffe17 	ldw	r2,-8(fp)
   15f8c:	e0fffd17 	ldw	r3,-12(fp)
   15f90:	10c00315 	stw	r3,12(r2)
        ptmr1->OSTmrPrev     = (void *)ptmr;
   15f94:	e0bffd17 	ldw	r2,-12(fp)
   15f98:	e0fffe17 	ldw	r3,-8(fp)
   15f9c:	10c00415 	stw	r3,16(r2)
        pspoke->OSTmrEntries++;
   15fa0:	e0bffc17 	ldw	r2,-16(fp)
   15fa4:	1080010b 	ldhu	r2,4(r2)
   15fa8:	10800044 	addi	r2,r2,1
   15fac:	1007883a 	mov	r3,r2
   15fb0:	e0bffc17 	ldw	r2,-16(fp)
   15fb4:	10c0010d 	sth	r3,4(r2)
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
   15fb8:	e0bffe17 	ldw	r2,-8(fp)
   15fbc:	10000415 	stw	zero,16(r2)
}
   15fc0:	0001883a 	nop
   15fc4:	e037883a 	mov	sp,fp
   15fc8:	df000017 	ldw	fp,0(sp)
   15fcc:	dec00104 	addi	sp,sp,4
   15fd0:	f800283a 	ret

00015fd4 <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
   15fd4:	defffa04 	addi	sp,sp,-24
   15fd8:	df000515 	stw	fp,20(sp)
   15fdc:	df000504 	addi	fp,sp,20
   15fe0:	e13fff15 	stw	r4,-4(fp)
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
   15fe4:	e0bfff17 	ldw	r2,-4(fp)
   15fe8:	10800517 	ldw	r2,20(r2)
   15fec:	1080004c 	andi	r2,r2,1
   15ff0:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
   15ff4:	e0bffb0b 	ldhu	r2,-20(fp)
   15ff8:	100690fa 	slli	r3,r2,3
   15ffc:	008000f4 	movhi	r2,3
   16000:	10827404 	addi	r2,r2,2512
   16004:	1885883a 	add	r2,r3,r2
   16008:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
   1600c:	e0bffc17 	ldw	r2,-16(fp)
   16010:	10c00017 	ldw	r3,0(r2)
   16014:	e0bfff17 	ldw	r2,-4(fp)
   16018:	18800b1e 	bne	r3,r2,16048 <OSTmr_Unlink+0x74>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
   1601c:	e0bfff17 	ldw	r2,-4(fp)
   16020:	10800317 	ldw	r2,12(r2)
   16024:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
   16028:	e0bffc17 	ldw	r2,-16(fp)
   1602c:	e0fffd17 	ldw	r3,-12(fp)
   16030:	10c00015 	stw	r3,0(r2)
        if (ptmr1 != (OS_TMR *)0) {
   16034:	e0bffd17 	ldw	r2,-12(fp)
   16038:	10001126 	beq	r2,zero,16080 <OSTmr_Unlink+0xac>
            ptmr1->OSTmrPrev = (void *)0;
   1603c:	e0bffd17 	ldw	r2,-12(fp)
   16040:	10000415 	stw	zero,16(r2)
   16044:	00000e06 	br	16080 <OSTmr_Unlink+0xac>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
   16048:	e0bfff17 	ldw	r2,-4(fp)
   1604c:	10800417 	ldw	r2,16(r2)
   16050:	e0bffd15 	stw	r2,-12(fp)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
   16054:	e0bfff17 	ldw	r2,-4(fp)
   16058:	10800317 	ldw	r2,12(r2)
   1605c:	e0bffe15 	stw	r2,-8(fp)
        ptmr1->OSTmrNext = ptmr2;
   16060:	e0bffd17 	ldw	r2,-12(fp)
   16064:	e0fffe17 	ldw	r3,-8(fp)
   16068:	10c00315 	stw	r3,12(r2)
        if (ptmr2 != (OS_TMR *)0) {
   1606c:	e0bffe17 	ldw	r2,-8(fp)
   16070:	10000326 	beq	r2,zero,16080 <OSTmr_Unlink+0xac>
            ptmr2->OSTmrPrev = (void *)ptmr1;
   16074:	e0bffe17 	ldw	r2,-8(fp)
   16078:	e0fffd17 	ldw	r3,-12(fp)
   1607c:	10c00415 	stw	r3,16(r2)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
   16080:	e0bfff17 	ldw	r2,-4(fp)
   16084:	00c00044 	movi	r3,1
   16088:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrNext  = (void *)0;
   1608c:	e0bfff17 	ldw	r2,-4(fp)
   16090:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev  = (void *)0;
   16094:	e0bfff17 	ldw	r2,-4(fp)
   16098:	10000415 	stw	zero,16(r2)
    pspoke->OSTmrEntries--;
   1609c:	e0bffc17 	ldw	r2,-16(fp)
   160a0:	1080010b 	ldhu	r2,4(r2)
   160a4:	10bfffc4 	addi	r2,r2,-1
   160a8:	1007883a 	mov	r3,r2
   160ac:	e0bffc17 	ldw	r2,-16(fp)
   160b0:	10c0010d 	sth	r3,4(r2)
}
   160b4:	0001883a 	nop
   160b8:	e037883a 	mov	sp,fp
   160bc:	df000017 	ldw	fp,0(sp)
   160c0:	dec00104 	addi	sp,sp,4
   160c4:	f800283a 	ret

000160c8 <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
   160c8:	defffd04 	addi	sp,sp,-12
   160cc:	dfc00215 	stw	ra,8(sp)
   160d0:	df000115 	stw	fp,4(sp)
   160d4:	df000104 	addi	fp,sp,4
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
   160d8:	d0a7ff17 	ldw	r2,-24580(gp)
   160dc:	e1bfff04 	addi	r6,fp,-4
   160e0:	000b883a 	mov	r5,zero
   160e4:	1009883a 	mov	r4,r2
   160e8:	0012e880 	call	12e88 <OSSemPend>
    (void)err;
}
   160ec:	0001883a 	nop
   160f0:	e037883a 	mov	sp,fp
   160f4:	dfc00117 	ldw	ra,4(sp)
   160f8:	df000017 	ldw	fp,0(sp)
   160fc:	dec00204 	addi	sp,sp,8
   16100:	f800283a 	ret

00016104 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
   16104:	defffe04 	addi	sp,sp,-8
   16108:	dfc00115 	stw	ra,4(sp)
   1610c:	df000015 	stw	fp,0(sp)
   16110:	d839883a 	mov	fp,sp
    (void)OSSemPost(OSTmrSem);
   16114:	d0a7ff17 	ldw	r2,-24580(gp)
   16118:	1009883a 	mov	r4,r2
   1611c:	00132000 	call	13200 <OSSemPost>
}
   16120:	0001883a 	nop
   16124:	e037883a 	mov	sp,fp
   16128:	dfc00117 	ldw	ra,4(sp)
   1612c:	df000017 	ldw	fp,0(sp)
   16130:	dec00204 	addi	sp,sp,8
   16134:	f800283a 	ret

00016138 <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
   16138:	defff704 	addi	sp,sp,-36
   1613c:	dfc00815 	stw	ra,32(sp)
   16140:	df000715 	stw	fp,28(sp)
   16144:	df000704 	addi	fp,sp,28
   16148:	e13fff15 	stw	r4,-4(fp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
   1614c:	d0a7ea17 	ldw	r2,-24664(gp)
   16150:	e0fffe04 	addi	r3,fp,-8
   16154:	180d883a 	mov	r6,r3
   16158:	000b883a 	mov	r5,zero
   1615c:	1009883a 	mov	r4,r2
   16160:	0012e880 	call	12e88 <OSSemPend>
        OSTmr_Lock();
   16164:	00160c80 	call	160c8 <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
   16168:	d0a7fd17 	ldw	r2,-24588(gp)
   1616c:	10800044 	addi	r2,r2,1
   16170:	d0a7fd15 	stw	r2,-24588(gp)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
   16174:	d0a7fd17 	ldw	r2,-24588(gp)
   16178:	1080004c 	andi	r2,r2,1
   1617c:	e0bffa0d 	sth	r2,-24(fp)
        pspoke = &OSTmrWheelTbl[spoke];
   16180:	e0bffa0b 	ldhu	r2,-24(fp)
   16184:	100690fa 	slli	r3,r2,3
   16188:	008000f4 	movhi	r2,3
   1618c:	10827404 	addi	r2,r2,2512
   16190:	1885883a 	add	r2,r3,r2
   16194:	e0bffb15 	stw	r2,-20(fp)
        ptmr   = pspoke->OSTmrFirst;
   16198:	e0bffb17 	ldw	r2,-20(fp)
   1619c:	10800017 	ldw	r2,0(r2)
   161a0:	e0bff915 	stw	r2,-28(fp)
        while (ptmr != (OS_TMR *)0) {
   161a4:	00002206 	br	16230 <OSTmr_Task+0xf8>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
   161a8:	e0bff917 	ldw	r2,-28(fp)
   161ac:	10800317 	ldw	r2,12(r2)
   161b0:	e0bffc15 	stw	r2,-16(fp)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
   161b4:	e0bff917 	ldw	r2,-28(fp)
   161b8:	10c00517 	ldw	r3,20(r2)
   161bc:	d0a7fd17 	ldw	r2,-24588(gp)
   161c0:	1880191e 	bne	r3,r2,16228 <OSTmr_Task+0xf0>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
   161c4:	e0bff917 	ldw	r2,-28(fp)
   161c8:	10800117 	ldw	r2,4(r2)
   161cc:	e0bffd15 	stw	r2,-12(fp)
                if (pfnct != (OS_TMR_CALLBACK)0) {
   161d0:	e0bffd17 	ldw	r2,-12(fp)
   161d4:	10000626 	beq	r2,zero,161f0 <OSTmr_Task+0xb8>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
   161d8:	e0bff917 	ldw	r2,-28(fp)
   161dc:	10c00217 	ldw	r3,8(r2)
   161e0:	e0bffd17 	ldw	r2,-12(fp)
   161e4:	180b883a 	mov	r5,r3
   161e8:	e13ff917 	ldw	r4,-28(fp)
   161ec:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
   161f0:	e13ff917 	ldw	r4,-28(fp)
   161f4:	0015fd40 	call	15fd4 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
   161f8:	e0bff917 	ldw	r2,-28(fp)
   161fc:	10800c03 	ldbu	r2,48(r2)
   16200:	10803fcc 	andi	r2,r2,255
   16204:	10800098 	cmpnei	r2,r2,2
   16208:	1000041e 	bne	r2,zero,1621c <OSTmr_Task+0xe4>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
   1620c:	01400044 	movi	r5,1
   16210:	e13ff917 	ldw	r4,-28(fp)
   16214:	0015e8c0 	call	15e8c <OSTmr_Link>
   16218:	00000306 	br	16228 <OSTmr_Task+0xf0>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
   1621c:	e0bff917 	ldw	r2,-28(fp)
   16220:	00c00084 	movi	r3,2
   16224:	10c00c45 	stb	r3,49(r2)
                }
            }
            ptmr = ptmr_next;
   16228:	e0bffc17 	ldw	r2,-16(fp)
   1622c:	e0bff915 	stw	r2,-28(fp)
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
   16230:	e0bff917 	ldw	r2,-28(fp)
   16234:	103fdc1e 	bne	r2,zero,161a8 <OSTmr_Task+0x70>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
   16238:	00161040 	call	16104 <OSTmr_Unlock>
    }
   1623c:	003fc306 	br	1614c <OSTmr_Task+0x14>

00016240 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   16240:	defffd04 	addi	sp,sp,-12
   16244:	dfc00215 	stw	ra,8(sp)
   16248:	df000115 	stw	fp,4(sp)
   1624c:	df000104 	addi	fp,sp,4
   16250:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   16254:	d1602704 	addi	r5,gp,-32612
   16258:	e13fff17 	ldw	r4,-4(fp)
   1625c:	0018fac0 	call	18fac <alt_dev_llist_insert>
}
   16260:	e037883a 	mov	sp,fp
   16264:	dfc00117 	ldw	ra,4(sp)
   16268:	df000017 	ldw	fp,0(sp)
   1626c:	dec00204 	addi	sp,sp,8
   16270:	f800283a 	ret

00016274 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   16274:	defffd04 	addi	sp,sp,-12
   16278:	dfc00215 	stw	ra,8(sp)
   1627c:	df000115 	stw	fp,4(sp)
   16280:	df000104 	addi	fp,sp,4
   16284:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   16288:	00198f00 	call	198f0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1628c:	00800044 	movi	r2,1
   16290:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   16294:	0001883a 	nop
   16298:	e037883a 	mov	sp,fp
   1629c:	dfc00117 	ldw	ra,4(sp)
   162a0:	df000017 	ldw	fp,0(sp)
   162a4:	dec00204 	addi	sp,sp,8
   162a8:	f800283a 	ret

000162ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   162ac:	defffb04 	addi	sp,sp,-20
   162b0:	dfc00415 	stw	ra,16(sp)
   162b4:	df000315 	stw	fp,12(sp)
   162b8:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   162bc:	01c00204 	movi	r7,8
   162c0:	000d883a 	mov	r6,zero
   162c4:	000b883a 	mov	r5,zero
   162c8:	013fc834 	movhi	r4,65312
   162cc:	21080004 	addi	r4,r4,8192
   162d0:	00179b80 	call	179b8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   162d4:	01800204 	movi	r6,8
   162d8:	000b883a 	mov	r5,zero
   162dc:	010000b4 	movhi	r4,2
   162e0:	212d6304 	addi	r4,r4,-19060
   162e4:	0016d7c0 	call	16d7c <altera_avalon_jtag_uart_init>
   162e8:	010000b4 	movhi	r4,2
   162ec:	212d5904 	addi	r4,r4,-19100
   162f0:	00162400 	call	16240 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   162f4:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   162f8:	010000b4 	movhi	r4,2
   162fc:	21317404 	addi	r4,r4,-14896
   16300:	00162400 	call	16240 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   16304:	010000b4 	movhi	r4,2
   16308:	21318004 	addi	r4,r4,-14848
   1630c:	00162400 	call	16240 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   16310:	010000b4 	movhi	r4,2
   16314:	21318c04 	addi	r4,r4,-14800
   16318:	0017ae00 	call	17ae0 <alt_up_character_lcd_init>
   1631c:	010000b4 	movhi	r4,2
   16320:	21318c04 	addi	r4,r4,-14800
   16324:	00162400 	call	16240 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   16328:	010000b4 	movhi	r4,2
   1632c:	21319704 	addi	r4,r4,-14756
   16330:	00162400 	call	16240 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   16334:	010000b4 	movhi	r4,2
   16338:	2131a204 	addi	r4,r4,-14712
   1633c:	00183d40 	call	183d4 <alt_up_ps2_init>
   16340:	010000b4 	movhi	r4,2
   16344:	2131a204 	addi	r4,r4,-14712
   16348:	00162400 	call	16240 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1634c:	010000b4 	movhi	r4,2
   16350:	2131b004 	addi	r4,r4,-14656
   16354:	00183d40 	call	183d4 <alt_up_ps2_init>
   16358:	010000b4 	movhi	r4,2
   1635c:	2131b004 	addi	r4,r4,-14656
   16360:	00162400 	call	16240 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   16364:	010000b4 	movhi	r4,2
   16368:	2131be04 	addi	r4,r4,-14600
   1636c:	00162400 	call	16240 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   16370:	010000b4 	movhi	r4,2
   16374:	2131c904 	addi	r4,r4,-14556
   16378:	00162400 	call	16240 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   1637c:	008000b4 	movhi	r2,2
   16380:	10b1d604 	addi	r2,r2,-14504
   16384:	10800a17 	ldw	r2,40(r2)
   16388:	10800017 	ldw	r2,0(r2)
   1638c:	1007883a 	mov	r3,r2
   16390:	008000b4 	movhi	r2,2
   16394:	10b1d604 	addi	r2,r2,-14504
   16398:	10c00b15 	stw	r3,44(r2)
   1639c:	008000b4 	movhi	r2,2
   163a0:	10b1d604 	addi	r2,r2,-14504
   163a4:	10800a17 	ldw	r2,40(r2)
   163a8:	10800104 	addi	r2,r2,4
   163ac:	10800017 	ldw	r2,0(r2)
   163b0:	1007883a 	mov	r3,r2
   163b4:	008000b4 	movhi	r2,2
   163b8:	10b1d604 	addi	r2,r2,-14504
   163bc:	10c00c15 	stw	r3,48(r2)
   163c0:	008000b4 	movhi	r2,2
   163c4:	10b1d604 	addi	r2,r2,-14504
   163c8:	10800a17 	ldw	r2,40(r2)
   163cc:	10800204 	addi	r2,r2,8
   163d0:	10800017 	ldw	r2,0(r2)
   163d4:	10ffffcc 	andi	r3,r2,65535
   163d8:	008000b4 	movhi	r2,2
   163dc:	10b1d604 	addi	r2,r2,-14504
   163e0:	10c01115 	stw	r3,68(r2)
   163e4:	008000b4 	movhi	r2,2
   163e8:	10b1d604 	addi	r2,r2,-14504
   163ec:	10800a17 	ldw	r2,40(r2)
   163f0:	10800204 	addi	r2,r2,8
   163f4:	10800017 	ldw	r2,0(r2)
   163f8:	1006d43a 	srli	r3,r2,16
   163fc:	008000b4 	movhi	r2,2
   16400:	10b1d604 	addi	r2,r2,-14504
   16404:	10c01215 	stw	r3,72(r2)
   16408:	008000b4 	movhi	r2,2
   1640c:	10b1d604 	addi	r2,r2,-14504
   16410:	10800a17 	ldw	r2,40(r2)
   16414:	10800304 	addi	r2,r2,12
   16418:	10800017 	ldw	r2,0(r2)
   1641c:	1005d07a 	srai	r2,r2,1
   16420:	10c0004c 	andi	r3,r2,1
   16424:	008000b4 	movhi	r2,2
   16428:	10b1d604 	addi	r2,r2,-14504
   1642c:	10c00d15 	stw	r3,52(r2)
   16430:	008000b4 	movhi	r2,2
   16434:	10b1d604 	addi	r2,r2,-14504
   16438:	10800a17 	ldw	r2,40(r2)
   1643c:	10800304 	addi	r2,r2,12
   16440:	10800017 	ldw	r2,0(r2)
   16444:	1005d23a 	srai	r2,r2,8
   16448:	108003cc 	andi	r2,r2,15
   1644c:	10800044 	addi	r2,r2,1
   16450:	1007883a 	mov	r3,r2
   16454:	008000b4 	movhi	r2,2
   16458:	10b1d604 	addi	r2,r2,-14504
   1645c:	10c00e15 	stw	r3,56(r2)
   16460:	008000b4 	movhi	r2,2
   16464:	10b1d604 	addi	r2,r2,-14504
   16468:	10800a17 	ldw	r2,40(r2)
   1646c:	10800304 	addi	r2,r2,12
   16470:	10800017 	ldw	r2,0(r2)
   16474:	1005d1ba 	srai	r2,r2,6
   16478:	108000cc 	andi	r2,r2,3
   1647c:	10800044 	addi	r2,r2,1
   16480:	1007883a 	mov	r3,r2
   16484:	008000b4 	movhi	r2,2
   16488:	10b1d604 	addi	r2,r2,-14504
   1648c:	10c00f15 	stw	r3,60(r2)
   16490:	008000b4 	movhi	r2,2
   16494:	10b1d604 	addi	r2,r2,-14504
   16498:	10800e17 	ldw	r2,56(r2)
   1649c:	1007883a 	mov	r3,r2
   164a0:	008000b4 	movhi	r2,2
   164a4:	10b1d604 	addi	r2,r2,-14504
   164a8:	10800f17 	ldw	r2,60(r2)
   164ac:	1885383a 	mul	r2,r3,r2
   164b0:	e0bffd05 	stb	r2,-12(fp)
   164b4:	e0bffd03 	ldbu	r2,-12(fp)
   164b8:	10800268 	cmpgeui	r2,r2,9
   164bc:	1000051e 	bne	r2,zero,164d4 <alt_sys_init+0x228>
   164c0:	008000b4 	movhi	r2,2
   164c4:	10b1d604 	addi	r2,r2,-14504
   164c8:	00c00044 	movi	r3,1
   164cc:	10c01015 	stw	r3,64(r2)
   164d0:	00000c06 	br	16504 <alt_sys_init+0x258>
   164d4:	e0bffd03 	ldbu	r2,-12(fp)
   164d8:	10800468 	cmpgeui	r2,r2,17
   164dc:	1000051e 	bne	r2,zero,164f4 <alt_sys_init+0x248>
   164e0:	008000b4 	movhi	r2,2
   164e4:	10b1d604 	addi	r2,r2,-14504
   164e8:	00c00084 	movi	r3,2
   164ec:	10c01015 	stw	r3,64(r2)
   164f0:	00000406 	br	16504 <alt_sys_init+0x258>
   164f4:	008000b4 	movhi	r2,2
   164f8:	10b1d604 	addi	r2,r2,-14504
   164fc:	00c00104 	movi	r3,4
   16500:	10c01015 	stw	r3,64(r2)
   16504:	008000b4 	movhi	r2,2
   16508:	10b1d604 	addi	r2,r2,-14504
   1650c:	10800a17 	ldw	r2,40(r2)
   16510:	10800304 	addi	r2,r2,12
   16514:	10800017 	ldw	r2,0(r2)
   16518:	1005d43a 	srai	r2,r2,16
   1651c:	e0bffd45 	stb	r2,-11(fp)
   16520:	008000b4 	movhi	r2,2
   16524:	10b1d604 	addi	r2,r2,-14504
   16528:	10800a17 	ldw	r2,40(r2)
   1652c:	10800304 	addi	r2,r2,12
   16530:	10800017 	ldw	r2,0(r2)
   16534:	1004d63a 	srli	r2,r2,24
   16538:	e0bffd85 	stb	r2,-10(fp)
   1653c:	008000b4 	movhi	r2,2
   16540:	10b1d604 	addi	r2,r2,-14504
   16544:	10801017 	ldw	r2,64(r2)
   16548:	10800058 	cmpnei	r2,r2,1
   1654c:	1000041e 	bne	r2,zero,16560 <alt_sys_init+0x2b4>
   16550:	008000b4 	movhi	r2,2
   16554:	10b1d604 	addi	r2,r2,-14504
   16558:	10001315 	stw	zero,76(r2)
   1655c:	00000e06 	br	16598 <alt_sys_init+0x2ec>
   16560:	008000b4 	movhi	r2,2
   16564:	10b1d604 	addi	r2,r2,-14504
   16568:	10801017 	ldw	r2,64(r2)
   1656c:	10800098 	cmpnei	r2,r2,2
   16570:	1000051e 	bne	r2,zero,16588 <alt_sys_init+0x2dc>
   16574:	008000b4 	movhi	r2,2
   16578:	10b1d604 	addi	r2,r2,-14504
   1657c:	00c00044 	movi	r3,1
   16580:	10c01315 	stw	r3,76(r2)
   16584:	00000406 	br	16598 <alt_sys_init+0x2ec>
   16588:	008000b4 	movhi	r2,2
   1658c:	10b1d604 	addi	r2,r2,-14504
   16590:	00c00084 	movi	r3,2
   16594:	10c01315 	stw	r3,76(r2)
   16598:	e0bffd43 	ldbu	r2,-11(fp)
   1659c:	00c00804 	movi	r3,32
   165a0:	1885c83a 	sub	r2,r3,r2
   165a4:	00ffffc4 	movi	r3,-1
   165a8:	1886d83a 	srl	r3,r3,r2
   165ac:	008000b4 	movhi	r2,2
   165b0:	10b1d604 	addi	r2,r2,-14504
   165b4:	10c01415 	stw	r3,80(r2)
   165b8:	e0fffd43 	ldbu	r3,-11(fp)
   165bc:	008000b4 	movhi	r2,2
   165c0:	10b1d604 	addi	r2,r2,-14504
   165c4:	10801317 	ldw	r2,76(r2)
   165c8:	1887883a 	add	r3,r3,r2
   165cc:	008000b4 	movhi	r2,2
   165d0:	10b1d604 	addi	r2,r2,-14504
   165d4:	10c01515 	stw	r3,84(r2)
   165d8:	e0bffd83 	ldbu	r2,-10(fp)
   165dc:	00c00804 	movi	r3,32
   165e0:	1885c83a 	sub	r2,r3,r2
   165e4:	00ffffc4 	movi	r3,-1
   165e8:	1886d83a 	srl	r3,r3,r2
   165ec:	008000b4 	movhi	r2,2
   165f0:	10b1d604 	addi	r2,r2,-14504
   165f4:	10c01615 	stw	r3,88(r2)
   165f8:	010000b4 	movhi	r4,2
   165fc:	2131d604 	addi	r4,r4,-14504
   16600:	00162400 	call	16240 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   16604:	008000b4 	movhi	r2,2
   16608:	10b1ed04 	addi	r2,r2,-14412
   1660c:	10800a17 	ldw	r2,40(r2)
   16610:	10800017 	ldw	r2,0(r2)
   16614:	1007883a 	mov	r3,r2
   16618:	008000b4 	movhi	r2,2
   1661c:	10b1ed04 	addi	r2,r2,-14412
   16620:	10c00b15 	stw	r3,44(r2)
   16624:	008000b4 	movhi	r2,2
   16628:	10b1ed04 	addi	r2,r2,-14412
   1662c:	10800a17 	ldw	r2,40(r2)
   16630:	10800104 	addi	r2,r2,4
   16634:	10800017 	ldw	r2,0(r2)
   16638:	1007883a 	mov	r3,r2
   1663c:	008000b4 	movhi	r2,2
   16640:	10b1ed04 	addi	r2,r2,-14412
   16644:	10c00c15 	stw	r3,48(r2)
   16648:	008000b4 	movhi	r2,2
   1664c:	10b1ed04 	addi	r2,r2,-14412
   16650:	10800a17 	ldw	r2,40(r2)
   16654:	10800204 	addi	r2,r2,8
   16658:	10800017 	ldw	r2,0(r2)
   1665c:	10ffffcc 	andi	r3,r2,65535
   16660:	008000b4 	movhi	r2,2
   16664:	10b1ed04 	addi	r2,r2,-14412
   16668:	10c01115 	stw	r3,68(r2)
   1666c:	008000b4 	movhi	r2,2
   16670:	10b1ed04 	addi	r2,r2,-14412
   16674:	10800a17 	ldw	r2,40(r2)
   16678:	10800204 	addi	r2,r2,8
   1667c:	10800017 	ldw	r2,0(r2)
   16680:	1006d43a 	srli	r3,r2,16
   16684:	008000b4 	movhi	r2,2
   16688:	10b1ed04 	addi	r2,r2,-14412
   1668c:	10c01215 	stw	r3,72(r2)
   16690:	008000b4 	movhi	r2,2
   16694:	10b1ed04 	addi	r2,r2,-14412
   16698:	10800a17 	ldw	r2,40(r2)
   1669c:	10800304 	addi	r2,r2,12
   166a0:	10800017 	ldw	r2,0(r2)
   166a4:	1005d07a 	srai	r2,r2,1
   166a8:	10c0004c 	andi	r3,r2,1
   166ac:	008000b4 	movhi	r2,2
   166b0:	10b1ed04 	addi	r2,r2,-14412
   166b4:	10c00d15 	stw	r3,52(r2)
   166b8:	008000b4 	movhi	r2,2
   166bc:	10b1ed04 	addi	r2,r2,-14412
   166c0:	10800a17 	ldw	r2,40(r2)
   166c4:	10800304 	addi	r2,r2,12
   166c8:	10800017 	ldw	r2,0(r2)
   166cc:	1005d23a 	srai	r2,r2,8
   166d0:	108003cc 	andi	r2,r2,15
   166d4:	10800044 	addi	r2,r2,1
   166d8:	1007883a 	mov	r3,r2
   166dc:	008000b4 	movhi	r2,2
   166e0:	10b1ed04 	addi	r2,r2,-14412
   166e4:	10c00e15 	stw	r3,56(r2)
   166e8:	008000b4 	movhi	r2,2
   166ec:	10b1ed04 	addi	r2,r2,-14412
   166f0:	10800a17 	ldw	r2,40(r2)
   166f4:	10800304 	addi	r2,r2,12
   166f8:	10800017 	ldw	r2,0(r2)
   166fc:	1005d1ba 	srai	r2,r2,6
   16700:	108000cc 	andi	r2,r2,3
   16704:	10800044 	addi	r2,r2,1
   16708:	1007883a 	mov	r3,r2
   1670c:	008000b4 	movhi	r2,2
   16710:	10b1ed04 	addi	r2,r2,-14412
   16714:	10c00f15 	stw	r3,60(r2)
   16718:	008000b4 	movhi	r2,2
   1671c:	10b1ed04 	addi	r2,r2,-14412
   16720:	10800e17 	ldw	r2,56(r2)
   16724:	1007883a 	mov	r3,r2
   16728:	008000b4 	movhi	r2,2
   1672c:	10b1ed04 	addi	r2,r2,-14412
   16730:	10800f17 	ldw	r2,60(r2)
   16734:	1885383a 	mul	r2,r3,r2
   16738:	e0bffdc5 	stb	r2,-9(fp)
   1673c:	e0bffdc3 	ldbu	r2,-9(fp)
   16740:	10800268 	cmpgeui	r2,r2,9
   16744:	1000051e 	bne	r2,zero,1675c <alt_sys_init+0x4b0>
   16748:	008000b4 	movhi	r2,2
   1674c:	10b1ed04 	addi	r2,r2,-14412
   16750:	00c00044 	movi	r3,1
   16754:	10c01015 	stw	r3,64(r2)
   16758:	00000c06 	br	1678c <alt_sys_init+0x4e0>
   1675c:	e0bffdc3 	ldbu	r2,-9(fp)
   16760:	10800468 	cmpgeui	r2,r2,17
   16764:	1000051e 	bne	r2,zero,1677c <alt_sys_init+0x4d0>
   16768:	008000b4 	movhi	r2,2
   1676c:	10b1ed04 	addi	r2,r2,-14412
   16770:	00c00084 	movi	r3,2
   16774:	10c01015 	stw	r3,64(r2)
   16778:	00000406 	br	1678c <alt_sys_init+0x4e0>
   1677c:	008000b4 	movhi	r2,2
   16780:	10b1ed04 	addi	r2,r2,-14412
   16784:	00c00104 	movi	r3,4
   16788:	10c01015 	stw	r3,64(r2)
   1678c:	008000b4 	movhi	r2,2
   16790:	10b1ed04 	addi	r2,r2,-14412
   16794:	10800a17 	ldw	r2,40(r2)
   16798:	10800304 	addi	r2,r2,12
   1679c:	10800017 	ldw	r2,0(r2)
   167a0:	1005d43a 	srai	r2,r2,16
   167a4:	e0bffe05 	stb	r2,-8(fp)
   167a8:	008000b4 	movhi	r2,2
   167ac:	10b1ed04 	addi	r2,r2,-14412
   167b0:	10800a17 	ldw	r2,40(r2)
   167b4:	10800304 	addi	r2,r2,12
   167b8:	10800017 	ldw	r2,0(r2)
   167bc:	1004d63a 	srli	r2,r2,24
   167c0:	e0bffe45 	stb	r2,-7(fp)
   167c4:	008000b4 	movhi	r2,2
   167c8:	10b1ed04 	addi	r2,r2,-14412
   167cc:	10801017 	ldw	r2,64(r2)
   167d0:	10800058 	cmpnei	r2,r2,1
   167d4:	1000041e 	bne	r2,zero,167e8 <alt_sys_init+0x53c>
   167d8:	008000b4 	movhi	r2,2
   167dc:	10b1ed04 	addi	r2,r2,-14412
   167e0:	10001315 	stw	zero,76(r2)
   167e4:	00000e06 	br	16820 <alt_sys_init+0x574>
   167e8:	008000b4 	movhi	r2,2
   167ec:	10b1ed04 	addi	r2,r2,-14412
   167f0:	10801017 	ldw	r2,64(r2)
   167f4:	10800098 	cmpnei	r2,r2,2
   167f8:	1000051e 	bne	r2,zero,16810 <alt_sys_init+0x564>
   167fc:	008000b4 	movhi	r2,2
   16800:	10b1ed04 	addi	r2,r2,-14412
   16804:	00c00044 	movi	r3,1
   16808:	10c01315 	stw	r3,76(r2)
   1680c:	00000406 	br	16820 <alt_sys_init+0x574>
   16810:	008000b4 	movhi	r2,2
   16814:	10b1ed04 	addi	r2,r2,-14412
   16818:	00c00084 	movi	r3,2
   1681c:	10c01315 	stw	r3,76(r2)
   16820:	e0bffe03 	ldbu	r2,-8(fp)
   16824:	00c00804 	movi	r3,32
   16828:	1885c83a 	sub	r2,r3,r2
   1682c:	00ffffc4 	movi	r3,-1
   16830:	1886d83a 	srl	r3,r3,r2
   16834:	008000b4 	movhi	r2,2
   16838:	10b1ed04 	addi	r2,r2,-14412
   1683c:	10c01415 	stw	r3,80(r2)
   16840:	e0fffe03 	ldbu	r3,-8(fp)
   16844:	008000b4 	movhi	r2,2
   16848:	10b1ed04 	addi	r2,r2,-14412
   1684c:	10801317 	ldw	r2,76(r2)
   16850:	1887883a 	add	r3,r3,r2
   16854:	008000b4 	movhi	r2,2
   16858:	10b1ed04 	addi	r2,r2,-14412
   1685c:	10c01515 	stw	r3,84(r2)
   16860:	e0bffe43 	ldbu	r2,-7(fp)
   16864:	00c00804 	movi	r3,32
   16868:	1885c83a 	sub	r2,r3,r2
   1686c:	00ffffc4 	movi	r3,-1
   16870:	1886d83a 	srl	r3,r3,r2
   16874:	008000b4 	movhi	r2,2
   16878:	10b1ed04 	addi	r2,r2,-14412
   1687c:	10c01615 	stw	r3,88(r2)
   16880:	010000b4 	movhi	r4,2
   16884:	2131ed04 	addi	r4,r4,-14412
   16888:	00162400 	call	16240 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   1688c:	008000b4 	movhi	r2,2
   16890:	10b20404 	addi	r2,r2,-14320
   16894:	10800a17 	ldw	r2,40(r2)
   16898:	10800017 	ldw	r2,0(r2)
   1689c:	1007883a 	mov	r3,r2
   168a0:	008000b4 	movhi	r2,2
   168a4:	10b20404 	addi	r2,r2,-14320
   168a8:	10c00b15 	stw	r3,44(r2)
   168ac:	008000b4 	movhi	r2,2
   168b0:	10b20404 	addi	r2,r2,-14320
   168b4:	10800a17 	ldw	r2,40(r2)
   168b8:	10800104 	addi	r2,r2,4
   168bc:	10800017 	ldw	r2,0(r2)
   168c0:	1007883a 	mov	r3,r2
   168c4:	008000b4 	movhi	r2,2
   168c8:	10b20404 	addi	r2,r2,-14320
   168cc:	10c00c15 	stw	r3,48(r2)
   168d0:	008000b4 	movhi	r2,2
   168d4:	10b20404 	addi	r2,r2,-14320
   168d8:	10800a17 	ldw	r2,40(r2)
   168dc:	10800204 	addi	r2,r2,8
   168e0:	10800017 	ldw	r2,0(r2)
   168e4:	10ffffcc 	andi	r3,r2,65535
   168e8:	008000b4 	movhi	r2,2
   168ec:	10b20404 	addi	r2,r2,-14320
   168f0:	10c01115 	stw	r3,68(r2)
   168f4:	008000b4 	movhi	r2,2
   168f8:	10b20404 	addi	r2,r2,-14320
   168fc:	10800a17 	ldw	r2,40(r2)
   16900:	10800204 	addi	r2,r2,8
   16904:	10800017 	ldw	r2,0(r2)
   16908:	1006d43a 	srli	r3,r2,16
   1690c:	008000b4 	movhi	r2,2
   16910:	10b20404 	addi	r2,r2,-14320
   16914:	10c01215 	stw	r3,72(r2)
   16918:	008000b4 	movhi	r2,2
   1691c:	10b20404 	addi	r2,r2,-14320
   16920:	10800a17 	ldw	r2,40(r2)
   16924:	10800304 	addi	r2,r2,12
   16928:	10800017 	ldw	r2,0(r2)
   1692c:	1005d07a 	srai	r2,r2,1
   16930:	10c0004c 	andi	r3,r2,1
   16934:	008000b4 	movhi	r2,2
   16938:	10b20404 	addi	r2,r2,-14320
   1693c:	10c00d15 	stw	r3,52(r2)
   16940:	008000b4 	movhi	r2,2
   16944:	10b20404 	addi	r2,r2,-14320
   16948:	10800a17 	ldw	r2,40(r2)
   1694c:	10800304 	addi	r2,r2,12
   16950:	10800017 	ldw	r2,0(r2)
   16954:	1005d23a 	srai	r2,r2,8
   16958:	108003cc 	andi	r2,r2,15
   1695c:	10800044 	addi	r2,r2,1
   16960:	1007883a 	mov	r3,r2
   16964:	008000b4 	movhi	r2,2
   16968:	10b20404 	addi	r2,r2,-14320
   1696c:	10c00e15 	stw	r3,56(r2)
   16970:	008000b4 	movhi	r2,2
   16974:	10b20404 	addi	r2,r2,-14320
   16978:	10800a17 	ldw	r2,40(r2)
   1697c:	10800304 	addi	r2,r2,12
   16980:	10800017 	ldw	r2,0(r2)
   16984:	1005d1ba 	srai	r2,r2,6
   16988:	108000cc 	andi	r2,r2,3
   1698c:	10800044 	addi	r2,r2,1
   16990:	1007883a 	mov	r3,r2
   16994:	008000b4 	movhi	r2,2
   16998:	10b20404 	addi	r2,r2,-14320
   1699c:	10c00f15 	stw	r3,60(r2)
   169a0:	008000b4 	movhi	r2,2
   169a4:	10b20404 	addi	r2,r2,-14320
   169a8:	10800e17 	ldw	r2,56(r2)
   169ac:	1007883a 	mov	r3,r2
   169b0:	008000b4 	movhi	r2,2
   169b4:	10b20404 	addi	r2,r2,-14320
   169b8:	10800f17 	ldw	r2,60(r2)
   169bc:	1885383a 	mul	r2,r3,r2
   169c0:	e0bffe85 	stb	r2,-6(fp)
   169c4:	e0bffe83 	ldbu	r2,-6(fp)
   169c8:	10800268 	cmpgeui	r2,r2,9
   169cc:	1000051e 	bne	r2,zero,169e4 <alt_sys_init+0x738>
   169d0:	008000b4 	movhi	r2,2
   169d4:	10b20404 	addi	r2,r2,-14320
   169d8:	00c00044 	movi	r3,1
   169dc:	10c01015 	stw	r3,64(r2)
   169e0:	00000c06 	br	16a14 <alt_sys_init+0x768>
   169e4:	e0bffe83 	ldbu	r2,-6(fp)
   169e8:	10800468 	cmpgeui	r2,r2,17
   169ec:	1000051e 	bne	r2,zero,16a04 <alt_sys_init+0x758>
   169f0:	008000b4 	movhi	r2,2
   169f4:	10b20404 	addi	r2,r2,-14320
   169f8:	00c00084 	movi	r3,2
   169fc:	10c01015 	stw	r3,64(r2)
   16a00:	00000406 	br	16a14 <alt_sys_init+0x768>
   16a04:	008000b4 	movhi	r2,2
   16a08:	10b20404 	addi	r2,r2,-14320
   16a0c:	00c00104 	movi	r3,4
   16a10:	10c01015 	stw	r3,64(r2)
   16a14:	008000b4 	movhi	r2,2
   16a18:	10b20404 	addi	r2,r2,-14320
   16a1c:	10800a17 	ldw	r2,40(r2)
   16a20:	10800304 	addi	r2,r2,12
   16a24:	10800017 	ldw	r2,0(r2)
   16a28:	1005d43a 	srai	r2,r2,16
   16a2c:	e0bffec5 	stb	r2,-5(fp)
   16a30:	008000b4 	movhi	r2,2
   16a34:	10b20404 	addi	r2,r2,-14320
   16a38:	10800a17 	ldw	r2,40(r2)
   16a3c:	10800304 	addi	r2,r2,12
   16a40:	10800017 	ldw	r2,0(r2)
   16a44:	1004d63a 	srli	r2,r2,24
   16a48:	e0bfff05 	stb	r2,-4(fp)
   16a4c:	008000b4 	movhi	r2,2
   16a50:	10b20404 	addi	r2,r2,-14320
   16a54:	10801017 	ldw	r2,64(r2)
   16a58:	10800058 	cmpnei	r2,r2,1
   16a5c:	1000041e 	bne	r2,zero,16a70 <alt_sys_init+0x7c4>
   16a60:	008000b4 	movhi	r2,2
   16a64:	10b20404 	addi	r2,r2,-14320
   16a68:	10001315 	stw	zero,76(r2)
   16a6c:	00000e06 	br	16aa8 <alt_sys_init+0x7fc>
   16a70:	008000b4 	movhi	r2,2
   16a74:	10b20404 	addi	r2,r2,-14320
   16a78:	10801017 	ldw	r2,64(r2)
   16a7c:	10800098 	cmpnei	r2,r2,2
   16a80:	1000051e 	bne	r2,zero,16a98 <alt_sys_init+0x7ec>
   16a84:	008000b4 	movhi	r2,2
   16a88:	10b20404 	addi	r2,r2,-14320
   16a8c:	00c00044 	movi	r3,1
   16a90:	10c01315 	stw	r3,76(r2)
   16a94:	00000406 	br	16aa8 <alt_sys_init+0x7fc>
   16a98:	008000b4 	movhi	r2,2
   16a9c:	10b20404 	addi	r2,r2,-14320
   16aa0:	00c00084 	movi	r3,2
   16aa4:	10c01315 	stw	r3,76(r2)
   16aa8:	e0bffec3 	ldbu	r2,-5(fp)
   16aac:	00c00804 	movi	r3,32
   16ab0:	1885c83a 	sub	r2,r3,r2
   16ab4:	00ffffc4 	movi	r3,-1
   16ab8:	1886d83a 	srl	r3,r3,r2
   16abc:	008000b4 	movhi	r2,2
   16ac0:	10b20404 	addi	r2,r2,-14320
   16ac4:	10c01415 	stw	r3,80(r2)
   16ac8:	e0fffec3 	ldbu	r3,-5(fp)
   16acc:	008000b4 	movhi	r2,2
   16ad0:	10b20404 	addi	r2,r2,-14320
   16ad4:	10801317 	ldw	r2,76(r2)
   16ad8:	1887883a 	add	r3,r3,r2
   16adc:	008000b4 	movhi	r2,2
   16ae0:	10b20404 	addi	r2,r2,-14320
   16ae4:	10c01515 	stw	r3,84(r2)
   16ae8:	e0bfff03 	ldbu	r2,-4(fp)
   16aec:	00c00804 	movi	r3,32
   16af0:	1885c83a 	sub	r2,r3,r2
   16af4:	00ffffc4 	movi	r3,-1
   16af8:	1886d83a 	srl	r3,r3,r2
   16afc:	008000b4 	movhi	r2,2
   16b00:	10b20404 	addi	r2,r2,-14320
   16b04:	10c01615 	stw	r3,88(r2)
   16b08:	010000b4 	movhi	r4,2
   16b0c:	21320404 	addi	r4,r4,-14320
   16b10:	00162400 	call	16240 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
   16b14:	008000b4 	movhi	r2,2
   16b18:	10b21b04 	addi	r2,r2,-14228
   16b1c:	10800a17 	ldw	r2,40(r2)
   16b20:	10800017 	ldw	r2,0(r2)
   16b24:	10c003cc 	andi	r3,r2,15
   16b28:	008000b4 	movhi	r2,2
   16b2c:	10b21b04 	addi	r2,r2,-14228
   16b30:	10c00b15 	stw	r3,44(r2)
   16b34:	008000b4 	movhi	r2,2
   16b38:	10b21b04 	addi	r2,r2,-14228
   16b3c:	10800a17 	ldw	r2,40(r2)
   16b40:	10800017 	ldw	r2,0(r2)
   16b44:	1005d13a 	srai	r2,r2,4
   16b48:	10c0004c 	andi	r3,r2,1
   16b4c:	008000b4 	movhi	r2,2
   16b50:	10b21b04 	addi	r2,r2,-14228
   16b54:	10c00c15 	stw	r3,48(r2)
   16b58:	008000b4 	movhi	r2,2
   16b5c:	10b21b04 	addi	r2,r2,-14228
   16b60:	10800a17 	ldw	r2,40(r2)
   16b64:	10800017 	ldw	r2,0(r2)
   16b68:	1005d17a 	srai	r2,r2,5
   16b6c:	10c0004c 	andi	r3,r2,1
   16b70:	008000b4 	movhi	r2,2
   16b74:	10b21b04 	addi	r2,r2,-14228
   16b78:	10c00d15 	stw	r3,52(r2)
   16b7c:	008000b4 	movhi	r2,2
   16b80:	10b21b04 	addi	r2,r2,-14228
   16b84:	10800a17 	ldw	r2,40(r2)
   16b88:	10800017 	ldw	r2,0(r2)
   16b8c:	1005d43a 	srai	r2,r2,16
   16b90:	10c003cc 	andi	r3,r2,15
   16b94:	008000b4 	movhi	r2,2
   16b98:	10b21b04 	addi	r2,r2,-14228
   16b9c:	10c00e15 	stw	r3,56(r2)
   16ba0:	008000b4 	movhi	r2,2
   16ba4:	10b21b04 	addi	r2,r2,-14228
   16ba8:	10800a17 	ldw	r2,40(r2)
   16bac:	10800017 	ldw	r2,0(r2)
   16bb0:	1005d53a 	srai	r2,r2,20
   16bb4:	10c0004c 	andi	r3,r2,1
   16bb8:	008000b4 	movhi	r2,2
   16bbc:	10b21b04 	addi	r2,r2,-14228
   16bc0:	10c00f15 	stw	r3,60(r2)
   16bc4:	008000b4 	movhi	r2,2
   16bc8:	10b21b04 	addi	r2,r2,-14228
   16bcc:	10800a17 	ldw	r2,40(r2)
   16bd0:	10800017 	ldw	r2,0(r2)
   16bd4:	1005d57a 	srai	r2,r2,21
   16bd8:	10c0004c 	andi	r3,r2,1
   16bdc:	008000b4 	movhi	r2,2
   16be0:	10b21b04 	addi	r2,r2,-14228
   16be4:	10c01015 	stw	r3,64(r2)
   16be8:	010000b4 	movhi	r4,2
   16bec:	21321b04 	addi	r4,r4,-14228
   16bf0:	00162400 	call	16240 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   16bf4:	010000b4 	movhi	r4,2
   16bf8:	21322c04 	addi	r4,r4,-14160
   16bfc:	00162400 	call	16240 <alt_dev_reg>
}
   16c00:	0001883a 	nop
   16c04:	e037883a 	mov	sp,fp
   16c08:	dfc00117 	ldw	ra,4(sp)
   16c0c:	df000017 	ldw	fp,0(sp)
   16c10:	dec00204 	addi	sp,sp,8
   16c14:	f800283a 	ret

00016c18 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   16c18:	defffa04 	addi	sp,sp,-24
   16c1c:	dfc00515 	stw	ra,20(sp)
   16c20:	df000415 	stw	fp,16(sp)
   16c24:	df000404 	addi	fp,sp,16
   16c28:	e13ffd15 	stw	r4,-12(fp)
   16c2c:	e17ffe15 	stw	r5,-8(fp)
   16c30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16c34:	e0bffd17 	ldw	r2,-12(fp)
   16c38:	10800017 	ldw	r2,0(r2)
   16c3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   16c40:	e0bffc17 	ldw	r2,-16(fp)
   16c44:	10c00a04 	addi	r3,r2,40
   16c48:	e0bffd17 	ldw	r2,-12(fp)
   16c4c:	10800217 	ldw	r2,8(r2)
   16c50:	100f883a 	mov	r7,r2
   16c54:	e1bfff17 	ldw	r6,-4(fp)
   16c58:	e17ffe17 	ldw	r5,-8(fp)
   16c5c:	1809883a 	mov	r4,r3
   16c60:	00173bc0 	call	173bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   16c64:	e037883a 	mov	sp,fp
   16c68:	dfc00117 	ldw	ra,4(sp)
   16c6c:	df000017 	ldw	fp,0(sp)
   16c70:	dec00204 	addi	sp,sp,8
   16c74:	f800283a 	ret

00016c78 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   16c78:	defffa04 	addi	sp,sp,-24
   16c7c:	dfc00515 	stw	ra,20(sp)
   16c80:	df000415 	stw	fp,16(sp)
   16c84:	df000404 	addi	fp,sp,16
   16c88:	e13ffd15 	stw	r4,-12(fp)
   16c8c:	e17ffe15 	stw	r5,-8(fp)
   16c90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16c94:	e0bffd17 	ldw	r2,-12(fp)
   16c98:	10800017 	ldw	r2,0(r2)
   16c9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   16ca0:	e0bffc17 	ldw	r2,-16(fp)
   16ca4:	10c00a04 	addi	r3,r2,40
   16ca8:	e0bffd17 	ldw	r2,-12(fp)
   16cac:	10800217 	ldw	r2,8(r2)
   16cb0:	100f883a 	mov	r7,r2
   16cb4:	e1bfff17 	ldw	r6,-4(fp)
   16cb8:	e17ffe17 	ldw	r5,-8(fp)
   16cbc:	1809883a 	mov	r4,r3
   16cc0:	00176780 	call	17678 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   16cc4:	e037883a 	mov	sp,fp
   16cc8:	dfc00117 	ldw	ra,4(sp)
   16ccc:	df000017 	ldw	fp,0(sp)
   16cd0:	dec00204 	addi	sp,sp,8
   16cd4:	f800283a 	ret

00016cd8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   16cd8:	defffc04 	addi	sp,sp,-16
   16cdc:	dfc00315 	stw	ra,12(sp)
   16ce0:	df000215 	stw	fp,8(sp)
   16ce4:	df000204 	addi	fp,sp,8
   16ce8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16cec:	e0bfff17 	ldw	r2,-4(fp)
   16cf0:	10800017 	ldw	r2,0(r2)
   16cf4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   16cf8:	e0bffe17 	ldw	r2,-8(fp)
   16cfc:	10c00a04 	addi	r3,r2,40
   16d00:	e0bfff17 	ldw	r2,-4(fp)
   16d04:	10800217 	ldw	r2,8(r2)
   16d08:	100b883a 	mov	r5,r2
   16d0c:	1809883a 	mov	r4,r3
   16d10:	00172640 	call	17264 <altera_avalon_jtag_uart_close>
}
   16d14:	e037883a 	mov	sp,fp
   16d18:	dfc00117 	ldw	ra,4(sp)
   16d1c:	df000017 	ldw	fp,0(sp)
   16d20:	dec00204 	addi	sp,sp,8
   16d24:	f800283a 	ret

00016d28 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   16d28:	defffa04 	addi	sp,sp,-24
   16d2c:	dfc00515 	stw	ra,20(sp)
   16d30:	df000415 	stw	fp,16(sp)
   16d34:	df000404 	addi	fp,sp,16
   16d38:	e13ffd15 	stw	r4,-12(fp)
   16d3c:	e17ffe15 	stw	r5,-8(fp)
   16d40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   16d44:	e0bffd17 	ldw	r2,-12(fp)
   16d48:	10800017 	ldw	r2,0(r2)
   16d4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   16d50:	e0bffc17 	ldw	r2,-16(fp)
   16d54:	10800a04 	addi	r2,r2,40
   16d58:	e1bfff17 	ldw	r6,-4(fp)
   16d5c:	e17ffe17 	ldw	r5,-8(fp)
   16d60:	1009883a 	mov	r4,r2
   16d64:	00172cc0 	call	172cc <altera_avalon_jtag_uart_ioctl>
}
   16d68:	e037883a 	mov	sp,fp
   16d6c:	dfc00117 	ldw	ra,4(sp)
   16d70:	df000017 	ldw	fp,0(sp)
   16d74:	dec00204 	addi	sp,sp,8
   16d78:	f800283a 	ret

00016d7c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   16d7c:	defff204 	addi	sp,sp,-56
   16d80:	dfc00d15 	stw	ra,52(sp)
   16d84:	df000c15 	stw	fp,48(sp)
   16d88:	df000c04 	addi	fp,sp,48
   16d8c:	e13ff915 	stw	r4,-28(fp)
   16d90:	e17ffa15 	stw	r5,-24(fp)
   16d94:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   16d98:	e0bff917 	ldw	r2,-28(fp)
   16d9c:	10800c04 	addi	r2,r2,48
   16da0:	e0bff415 	stw	r2,-48(fp)
   16da4:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   16da8:	e0bff80b 	ldhu	r2,-32(fp)
   16dac:	e0fff884 	addi	r3,fp,-30
   16db0:	180b883a 	mov	r5,r3
   16db4:	1009883a 	mov	r4,r2
   16db8:	000f3940 	call	f394 <OSFlagCreate>
   16dbc:	1007883a 	mov	r3,r2
   16dc0:	e0bff417 	ldw	r2,-48(fp)
   16dc4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   16dc8:	e0bff917 	ldw	r2,-28(fp)
   16dcc:	10800a04 	addi	r2,r2,40
   16dd0:	e0bff515 	stw	r2,-44(fp)
   16dd4:	00800044 	movi	r2,1
   16dd8:	e0bff78d 	sth	r2,-34(fp)
   16ddc:	e0bff78b 	ldhu	r2,-34(fp)
   16de0:	1009883a 	mov	r4,r2
   16de4:	0012b700 	call	12b70 <OSSemCreate>
   16de8:	1007883a 	mov	r3,r2
   16dec:	e0bff517 	ldw	r2,-44(fp)
   16df0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   16df4:	e0bff917 	ldw	r2,-28(fp)
   16df8:	10800b04 	addi	r2,r2,44
   16dfc:	e0bff615 	stw	r2,-40(fp)
   16e00:	00800044 	movi	r2,1
   16e04:	e0bff70d 	sth	r2,-36(fp)
   16e08:	e0bff70b 	ldhu	r2,-36(fp)
   16e0c:	1009883a 	mov	r4,r2
   16e10:	0012b700 	call	12b70 <OSSemCreate>
   16e14:	1007883a 	mov	r3,r2
   16e18:	e0bff617 	ldw	r2,-40(fp)
   16e1c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16e20:	e0bff917 	ldw	r2,-28(fp)
   16e24:	00c00044 	movi	r3,1
   16e28:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   16e2c:	e0bff917 	ldw	r2,-28(fp)
   16e30:	10800017 	ldw	r2,0(r2)
   16e34:	10800104 	addi	r2,r2,4
   16e38:	1007883a 	mov	r3,r2
   16e3c:	e0bff917 	ldw	r2,-28(fp)
   16e40:	10800817 	ldw	r2,32(r2)
   16e44:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   16e48:	e0bffb17 	ldw	r2,-20(fp)
   16e4c:	01800074 	movhi	r6,1
   16e50:	319bae04 	addi	r6,r6,28344
   16e54:	e17ff917 	ldw	r5,-28(fp)
   16e58:	1009883a 	mov	r4,r2
   16e5c:	00193140 	call	19314 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   16e60:	e0bff917 	ldw	r2,-28(fp)
   16e64:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   16e68:	e0bff917 	ldw	r2,-28(fp)
   16e6c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   16e70:	d0e80517 	ldw	r3,-24556(gp)
   16e74:	e1fff917 	ldw	r7,-28(fp)
   16e78:	01800074 	movhi	r6,1
   16e7c:	319c5804 	addi	r6,r6,29024
   16e80:	180b883a 	mov	r5,r3
   16e84:	1009883a 	mov	r4,r2
   16e88:	0018cec0 	call	18cec <alt_alarm_start>
   16e8c:	1000040e 	bge	r2,zero,16ea0 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   16e90:	e0fff917 	ldw	r3,-28(fp)
   16e94:	00a00034 	movhi	r2,32768
   16e98:	10bfffc4 	addi	r2,r2,-1
   16e9c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   16ea0:	0001883a 	nop
   16ea4:	e037883a 	mov	sp,fp
   16ea8:	dfc00117 	ldw	ra,4(sp)
   16eac:	df000017 	ldw	fp,0(sp)
   16eb0:	dec00204 	addi	sp,sp,8
   16eb4:	f800283a 	ret

00016eb8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   16eb8:	defff104 	addi	sp,sp,-60
   16ebc:	dfc00e15 	stw	ra,56(sp)
   16ec0:	df000d15 	stw	fp,52(sp)
   16ec4:	df000d04 	addi	fp,sp,52
   16ec8:	e13ffe15 	stw	r4,-8(fp)
   16ecc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   16ed0:	e0bffe17 	ldw	r2,-8(fp)
   16ed4:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   16ed8:	e0bff517 	ldw	r2,-44(fp)
   16edc:	10800017 	ldw	r2,0(r2)
   16ee0:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16ee4:	e0bff617 	ldw	r2,-40(fp)
   16ee8:	10800104 	addi	r2,r2,4
   16eec:	10800037 	ldwio	r2,0(r2)
   16ef0:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   16ef4:	e0bff717 	ldw	r2,-36(fp)
   16ef8:	1080c00c 	andi	r2,r2,768
   16efc:	10009126 	beq	r2,zero,17144 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   16f00:	e0bff717 	ldw	r2,-36(fp)
   16f04:	1080400c 	andi	r2,r2,256
   16f08:	10004726 	beq	r2,zero,17028 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   16f0c:	00800074 	movhi	r2,1
   16f10:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16f14:	e0bff517 	ldw	r2,-44(fp)
   16f18:	10800d17 	ldw	r2,52(r2)
   16f1c:	10800044 	addi	r2,r2,1
   16f20:	1081ffcc 	andi	r2,r2,2047
   16f24:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   16f28:	e0bff517 	ldw	r2,-44(fp)
   16f2c:	10c00e17 	ldw	r3,56(r2)
   16f30:	e0bff817 	ldw	r2,-32(fp)
   16f34:	18802726 	beq	r3,r2,16fd4 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   16f38:	e0bff617 	ldw	r2,-40(fp)
   16f3c:	10800037 	ldwio	r2,0(r2)
   16f40:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   16f44:	e0bff317 	ldw	r2,-52(fp)
   16f48:	10a0000c 	andi	r2,r2,32768
   16f4c:	10002326 	beq	r2,zero,16fdc <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   16f50:	e0bff517 	ldw	r2,-44(fp)
   16f54:	10800d17 	ldw	r2,52(r2)
   16f58:	e0fff317 	ldw	r3,-52(fp)
   16f5c:	1809883a 	mov	r4,r3
   16f60:	e0fff517 	ldw	r3,-44(fp)
   16f64:	1885883a 	add	r2,r3,r2
   16f68:	10801104 	addi	r2,r2,68
   16f6c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16f70:	e0bff517 	ldw	r2,-44(fp)
   16f74:	10800d17 	ldw	r2,52(r2)
   16f78:	10800044 	addi	r2,r2,1
   16f7c:	10c1ffcc 	andi	r3,r2,2047
   16f80:	e0bff517 	ldw	r2,-44(fp)
   16f84:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   16f88:	e0bff517 	ldw	r2,-44(fp)
   16f8c:	10800c17 	ldw	r2,48(r2)
   16f90:	e0bffa15 	stw	r2,-24(fp)
   16f94:	00800044 	movi	r2,1
   16f98:	e0bffb0d 	sth	r2,-20(fp)
   16f9c:	00800044 	movi	r2,1
   16fa0:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16fa4:	d0a7eb03 	ldbu	r2,-24660(gp)
   16fa8:	10803fcc 	andi	r2,r2,255
   16fac:	103fd926 	beq	r2,zero,16f14 <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
   16fb0:	e0bffb0b 	ldhu	r2,-20(fp)
   16fb4:	e0fffb83 	ldbu	r3,-18(fp)
   16fb8:	e13ffcc4 	addi	r4,fp,-13
   16fbc:	200f883a 	mov	r7,r4
   16fc0:	180d883a 	mov	r6,r3
   16fc4:	100b883a 	mov	r5,r2
   16fc8:	e13ffa17 	ldw	r4,-24(fp)
   16fcc:	000ff700 	call	ff70 <OSFlagPost>
      }
   16fd0:	003fd006 	br	16f14 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   16fd4:	0001883a 	nop
   16fd8:	00000106 	br	16fe0 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   16fdc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   16fe0:	e0bff317 	ldw	r2,-52(fp)
   16fe4:	10bfffec 	andhi	r2,r2,65535
   16fe8:	10000f26 	beq	r2,zero,17028 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16fec:	e0bff517 	ldw	r2,-44(fp)
   16ff0:	10c00817 	ldw	r3,32(r2)
   16ff4:	00bfff84 	movi	r2,-2
   16ff8:	1886703a 	and	r3,r3,r2
   16ffc:	e0bff517 	ldw	r2,-44(fp)
   17000:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   17004:	e0bff617 	ldw	r2,-40(fp)
   17008:	10800104 	addi	r2,r2,4
   1700c:	1007883a 	mov	r3,r2
   17010:	e0bff517 	ldw	r2,-44(fp)
   17014:	10800817 	ldw	r2,32(r2)
   17018:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1701c:	e0bff617 	ldw	r2,-40(fp)
   17020:	10800104 	addi	r2,r2,4
   17024:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   17028:	e0bff717 	ldw	r2,-36(fp)
   1702c:	1080800c 	andi	r2,r2,512
   17030:	103fac26 	beq	r2,zero,16ee4 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   17034:	e0bff717 	ldw	r2,-36(fp)
   17038:	1004d43a 	srli	r2,r2,16
   1703c:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   17040:	00002606 	br	170dc <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   17044:	e0bff617 	ldw	r2,-40(fp)
   17048:	e0fff517 	ldw	r3,-44(fp)
   1704c:	18c01017 	ldw	r3,64(r3)
   17050:	e13ff517 	ldw	r4,-44(fp)
   17054:	20c7883a 	add	r3,r4,r3
   17058:	18c21104 	addi	r3,r3,2116
   1705c:	18c00003 	ldbu	r3,0(r3)
   17060:	18c03fcc 	andi	r3,r3,255
   17064:	18c0201c 	xori	r3,r3,128
   17068:	18ffe004 	addi	r3,r3,-128
   1706c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   17070:	e0bff517 	ldw	r2,-44(fp)
   17074:	10801017 	ldw	r2,64(r2)
   17078:	10800044 	addi	r2,r2,1
   1707c:	10c1ffcc 	andi	r3,r2,2047
   17080:	e0bff517 	ldw	r2,-44(fp)
   17084:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   17088:	e0bff517 	ldw	r2,-44(fp)
   1708c:	10800c17 	ldw	r2,48(r2)
   17090:	e0bff915 	stw	r2,-28(fp)
   17094:	00800084 	movi	r2,2
   17098:	e0bffc0d 	sth	r2,-16(fp)
   1709c:	00800044 	movi	r2,1
   170a0:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   170a4:	d0a7eb03 	ldbu	r2,-24660(gp)
   170a8:	10803fcc 	andi	r2,r2,255
   170ac:	10000826 	beq	r2,zero,170d0 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   170b0:	e0bffc0b 	ldhu	r2,-16(fp)
   170b4:	e0fffc83 	ldbu	r3,-14(fp)
   170b8:	e13ffd04 	addi	r4,fp,-12
   170bc:	200f883a 	mov	r7,r4
   170c0:	180d883a 	mov	r6,r3
   170c4:	100b883a 	mov	r5,r2
   170c8:	e13ff917 	ldw	r4,-28(fp)
   170cc:	000ff700 	call	ff70 <OSFlagPost>

        space--;
   170d0:	e0bff417 	ldw	r2,-48(fp)
   170d4:	10bfffc4 	addi	r2,r2,-1
   170d8:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   170dc:	e0bff417 	ldw	r2,-48(fp)
   170e0:	10000526 	beq	r2,zero,170f8 <altera_avalon_jtag_uart_irq+0x240>
   170e4:	e0bff517 	ldw	r2,-44(fp)
   170e8:	10c01017 	ldw	r3,64(r2)
   170ec:	e0bff517 	ldw	r2,-44(fp)
   170f0:	10800f17 	ldw	r2,60(r2)
   170f4:	18bfd31e 	bne	r3,r2,17044 <altera_avalon_jtag_uart_irq+0x18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   170f8:	e0bff417 	ldw	r2,-48(fp)
   170fc:	103f7926 	beq	r2,zero,16ee4 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   17100:	e0bff517 	ldw	r2,-44(fp)
   17104:	10c00817 	ldw	r3,32(r2)
   17108:	00bfff44 	movi	r2,-3
   1710c:	1886703a 	and	r3,r3,r2
   17110:	e0bff517 	ldw	r2,-44(fp)
   17114:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   17118:	e0bff517 	ldw	r2,-44(fp)
   1711c:	10800017 	ldw	r2,0(r2)
   17120:	10800104 	addi	r2,r2,4
   17124:	1007883a 	mov	r3,r2
   17128:	e0bff517 	ldw	r2,-44(fp)
   1712c:	10800817 	ldw	r2,32(r2)
   17130:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   17134:	e0bff617 	ldw	r2,-40(fp)
   17138:	10800104 	addi	r2,r2,4
   1713c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   17140:	003f6806 	br	16ee4 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   17144:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   17148:	0001883a 	nop
   1714c:	e037883a 	mov	sp,fp
   17150:	dfc00117 	ldw	ra,4(sp)
   17154:	df000017 	ldw	fp,0(sp)
   17158:	dec00204 	addi	sp,sp,8
   1715c:	f800283a 	ret

00017160 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   17160:	defff904 	addi	sp,sp,-28
   17164:	dfc00615 	stw	ra,24(sp)
   17168:	df000515 	stw	fp,20(sp)
   1716c:	df000504 	addi	fp,sp,20
   17170:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   17174:	e0bfff17 	ldw	r2,-4(fp)
   17178:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1717c:	e0bffb17 	ldw	r2,-20(fp)
   17180:	10800017 	ldw	r2,0(r2)
   17184:	10800104 	addi	r2,r2,4
   17188:	10800037 	ldwio	r2,0(r2)
   1718c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   17190:	e0bffc17 	ldw	r2,-16(fp)
   17194:	1081000c 	andi	r2,r2,1024
   17198:	10000b26 	beq	r2,zero,171c8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1719c:	e0bffb17 	ldw	r2,-20(fp)
   171a0:	10800017 	ldw	r2,0(r2)
   171a4:	10800104 	addi	r2,r2,4
   171a8:	1007883a 	mov	r3,r2
   171ac:	e0bffb17 	ldw	r2,-20(fp)
   171b0:	10800817 	ldw	r2,32(r2)
   171b4:	10810014 	ori	r2,r2,1024
   171b8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   171bc:	e0bffb17 	ldw	r2,-20(fp)
   171c0:	10000915 	stw	zero,36(r2)
   171c4:	00002106 	br	1724c <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   171c8:	e0bffb17 	ldw	r2,-20(fp)
   171cc:	10c00917 	ldw	r3,36(r2)
   171d0:	00a00034 	movhi	r2,32768
   171d4:	10bfff04 	addi	r2,r2,-4
   171d8:	10c01c36 	bltu	r2,r3,1724c <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   171dc:	e0bffb17 	ldw	r2,-20(fp)
   171e0:	10800917 	ldw	r2,36(r2)
   171e4:	10c00044 	addi	r3,r2,1
   171e8:	e0bffb17 	ldw	r2,-20(fp)
   171ec:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   171f0:	e0bffb17 	ldw	r2,-20(fp)
   171f4:	10c00917 	ldw	r3,36(r2)
   171f8:	e0bffb17 	ldw	r2,-20(fp)
   171fc:	10800117 	ldw	r2,4(r2)
   17200:	18801236 	bltu	r3,r2,1724c <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   17204:	e0bffb17 	ldw	r2,-20(fp)
   17208:	10800c17 	ldw	r2,48(r2)
   1720c:	e0bffd15 	stw	r2,-12(fp)
   17210:	00800104 	movi	r2,4
   17214:	e0bffe0d 	sth	r2,-8(fp)
   17218:	00800044 	movi	r2,1
   1721c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   17220:	d0a7eb03 	ldbu	r2,-24660(gp)
   17224:	10803fcc 	andi	r2,r2,255
   17228:	10000826 	beq	r2,zero,1724c <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   1722c:	e0bffe0b 	ldhu	r2,-8(fp)
   17230:	e0fffe83 	ldbu	r3,-6(fp)
   17234:	e13ffec4 	addi	r4,fp,-5
   17238:	200f883a 	mov	r7,r4
   1723c:	180d883a 	mov	r6,r3
   17240:	100b883a 	mov	r5,r2
   17244:	e13ffd17 	ldw	r4,-12(fp)
   17248:	000ff700 	call	ff70 <OSFlagPost>
   1724c:	d0a80517 	ldw	r2,-24556(gp)
    }
  }

  return alt_ticks_per_second();
}
   17250:	e037883a 	mov	sp,fp
   17254:	dfc00117 	ldw	ra,4(sp)
   17258:	df000017 	ldw	fp,0(sp)
   1725c:	dec00204 	addi	sp,sp,8
   17260:	f800283a 	ret

00017264 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   17264:	defffd04 	addi	sp,sp,-12
   17268:	df000215 	stw	fp,8(sp)
   1726c:	df000204 	addi	fp,sp,8
   17270:	e13ffe15 	stw	r4,-8(fp)
   17274:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   17278:	00000506 	br	17290 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1727c:	e0bfff17 	ldw	r2,-4(fp)
   17280:	1090000c 	andi	r2,r2,16384
   17284:	10000226 	beq	r2,zero,17290 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   17288:	00bffd44 	movi	r2,-11
   1728c:	00000b06 	br	172bc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   17290:	e0bffe17 	ldw	r2,-8(fp)
   17294:	10c01017 	ldw	r3,64(r2)
   17298:	e0bffe17 	ldw	r2,-8(fp)
   1729c:	10800f17 	ldw	r2,60(r2)
   172a0:	18800526 	beq	r3,r2,172b8 <altera_avalon_jtag_uart_close+0x54>
   172a4:	e0bffe17 	ldw	r2,-8(fp)
   172a8:	10c00917 	ldw	r3,36(r2)
   172ac:	e0bffe17 	ldw	r2,-8(fp)
   172b0:	10800117 	ldw	r2,4(r2)
   172b4:	18bff136 	bltu	r3,r2,1727c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   172b8:	0005883a 	mov	r2,zero
}
   172bc:	e037883a 	mov	sp,fp
   172c0:	df000017 	ldw	fp,0(sp)
   172c4:	dec00104 	addi	sp,sp,4
   172c8:	f800283a 	ret

000172cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   172cc:	defffa04 	addi	sp,sp,-24
   172d0:	df000515 	stw	fp,20(sp)
   172d4:	df000504 	addi	fp,sp,20
   172d8:	e13ffd15 	stw	r4,-12(fp)
   172dc:	e17ffe15 	stw	r5,-8(fp)
   172e0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   172e4:	00bff9c4 	movi	r2,-25
   172e8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   172ec:	e0bffe17 	ldw	r2,-8(fp)
   172f0:	10da8060 	cmpeqi	r3,r2,27137
   172f4:	1800031e 	bne	r3,zero,17304 <altera_avalon_jtag_uart_ioctl+0x38>
   172f8:	109a80a0 	cmpeqi	r2,r2,27138
   172fc:	1000181e 	bne	r2,zero,17360 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   17300:	00002906 	br	173a8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   17304:	e0bffd17 	ldw	r2,-12(fp)
   17308:	10c00117 	ldw	r3,4(r2)
   1730c:	00a00034 	movhi	r2,32768
   17310:	10bfffc4 	addi	r2,r2,-1
   17314:	18802126 	beq	r3,r2,1739c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   17318:	e0bfff17 	ldw	r2,-4(fp)
   1731c:	10800017 	ldw	r2,0(r2)
   17320:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   17324:	e0bffc17 	ldw	r2,-16(fp)
   17328:	10800090 	cmplti	r2,r2,2
   1732c:	1000061e 	bne	r2,zero,17348 <altera_avalon_jtag_uart_ioctl+0x7c>
   17330:	e0fffc17 	ldw	r3,-16(fp)
   17334:	00a00034 	movhi	r2,32768
   17338:	10bfffc4 	addi	r2,r2,-1
   1733c:	18800226 	beq	r3,r2,17348 <altera_avalon_jtag_uart_ioctl+0x7c>
   17340:	e0bffc17 	ldw	r2,-16(fp)
   17344:	00000206 	br	17350 <altera_avalon_jtag_uart_ioctl+0x84>
   17348:	00a00034 	movhi	r2,32768
   1734c:	10bfff84 	addi	r2,r2,-2
   17350:	e0fffd17 	ldw	r3,-12(fp)
   17354:	18800115 	stw	r2,4(r3)
      rc = 0;
   17358:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1735c:	00000f06 	br	1739c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   17360:	e0bffd17 	ldw	r2,-12(fp)
   17364:	10c00117 	ldw	r3,4(r2)
   17368:	00a00034 	movhi	r2,32768
   1736c:	10bfffc4 	addi	r2,r2,-1
   17370:	18800c26 	beq	r3,r2,173a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   17374:	e0bffd17 	ldw	r2,-12(fp)
   17378:	10c00917 	ldw	r3,36(r2)
   1737c:	e0bffd17 	ldw	r2,-12(fp)
   17380:	10800117 	ldw	r2,4(r2)
   17384:	1885803a 	cmpltu	r2,r3,r2
   17388:	10c03fcc 	andi	r3,r2,255
   1738c:	e0bfff17 	ldw	r2,-4(fp)
   17390:	10c00015 	stw	r3,0(r2)
      rc = 0;
   17394:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   17398:	00000206 	br	173a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1739c:	0001883a 	nop
   173a0:	00000106 	br	173a8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   173a4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   173a8:	e0bffb17 	ldw	r2,-20(fp)
}
   173ac:	e037883a 	mov	sp,fp
   173b0:	df000017 	ldw	fp,0(sp)
   173b4:	dec00104 	addi	sp,sp,4
   173b8:	f800283a 	ret

000173bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   173bc:	deffed04 	addi	sp,sp,-76
   173c0:	dfc01215 	stw	ra,72(sp)
   173c4:	df001115 	stw	fp,68(sp)
   173c8:	df001104 	addi	fp,sp,68
   173cc:	e13ffc15 	stw	r4,-16(fp)
   173d0:	e17ffd15 	stw	r5,-12(fp)
   173d4:	e1bffe15 	stw	r6,-8(fp)
   173d8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   173dc:	e0bffd17 	ldw	r2,-12(fp)
   173e0:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   173e4:	e0bffc17 	ldw	r2,-16(fp)
   173e8:	10800a17 	ldw	r2,40(r2)
   173ec:	e0bff815 	stw	r2,-32(fp)
   173f0:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   173f4:	e0bff90b 	ldhu	r2,-28(fp)
   173f8:	e0fffb04 	addi	r3,fp,-20
   173fc:	180d883a 	mov	r6,r3
   17400:	100b883a 	mov	r5,r2
   17404:	e13ff817 	ldw	r4,-32(fp)
   17408:	0012e880 	call	12e88 <OSSemPend>

  while (space > 0)
   1740c:	00006106 	br	17594 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   17410:	e0bffc17 	ldw	r2,-16(fp)
   17414:	10800d17 	ldw	r2,52(r2)
   17418:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   1741c:	e0bffc17 	ldw	r2,-16(fp)
   17420:	10800e17 	ldw	r2,56(r2)
   17424:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   17428:	e0fff317 	ldw	r3,-52(fp)
   1742c:	e0bff417 	ldw	r2,-48(fp)
   17430:	18800536 	bltu	r3,r2,17448 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   17434:	e0fff317 	ldw	r3,-52(fp)
   17438:	e0bff417 	ldw	r2,-48(fp)
   1743c:	1885c83a 	sub	r2,r3,r2
   17440:	e0bff115 	stw	r2,-60(fp)
   17444:	00000406 	br	17458 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   17448:	00c20004 	movi	r3,2048
   1744c:	e0bff417 	ldw	r2,-48(fp)
   17450:	1885c83a 	sub	r2,r3,r2
   17454:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   17458:	e0bff117 	ldw	r2,-60(fp)
   1745c:	10001e26 	beq	r2,zero,174d8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   17460:	e0fffe17 	ldw	r3,-8(fp)
   17464:	e0bff117 	ldw	r2,-60(fp)
   17468:	1880022e 	bgeu	r3,r2,17474 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   1746c:	e0bffe17 	ldw	r2,-8(fp)
   17470:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   17474:	e0bffc17 	ldw	r2,-16(fp)
   17478:	10c01104 	addi	r3,r2,68
   1747c:	e0bff417 	ldw	r2,-48(fp)
   17480:	1885883a 	add	r2,r3,r2
   17484:	e1bff117 	ldw	r6,-60(fp)
   17488:	100b883a 	mov	r5,r2
   1748c:	e13ff017 	ldw	r4,-64(fp)
   17490:	00061d40 	call	61d4 <memcpy>
      ptr   += n;
   17494:	e0fff017 	ldw	r3,-64(fp)
   17498:	e0bff117 	ldw	r2,-60(fp)
   1749c:	1885883a 	add	r2,r3,r2
   174a0:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   174a4:	e0fffe17 	ldw	r3,-8(fp)
   174a8:	e0bff117 	ldw	r2,-60(fp)
   174ac:	1885c83a 	sub	r2,r3,r2
   174b0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   174b4:	e0fff417 	ldw	r3,-48(fp)
   174b8:	e0bff117 	ldw	r2,-60(fp)
   174bc:	1885883a 	add	r2,r3,r2
   174c0:	10c1ffcc 	andi	r3,r2,2047
   174c4:	e0bffc17 	ldw	r2,-16(fp)
   174c8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   174cc:	e0bffe17 	ldw	r2,-8(fp)
   174d0:	00bfcf16 	blt	zero,r2,17410 <altera_avalon_jtag_uart_read+0x54>
   174d4:	00000106 	br	174dc <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   174d8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   174dc:	e0fff017 	ldw	r3,-64(fp)
   174e0:	e0bffd17 	ldw	r2,-12(fp)
   174e4:	18802e1e 	bne	r3,r2,175a0 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   174e8:	e0bfff17 	ldw	r2,-4(fp)
   174ec:	1090000c 	andi	r2,r2,16384
   174f0:	10002d1e 	bne	r2,zero,175a8 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   174f4:	d0a7eb03 	ldbu	r2,-24660(gp)
   174f8:	10803fcc 	andi	r2,r2,255
   174fc:	10800058 	cmpnei	r2,r2,1
   17500:	1000161e 	bne	r2,zero,1755c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   17504:	e0bffc17 	ldw	r2,-16(fp)
   17508:	10800c17 	ldw	r2,48(r2)
   1750c:	e0bff215 	stw	r2,-56(fp)
   17510:	00800144 	movi	r2,5
   17514:	e0bff98d 	sth	r2,-26(fp)
   17518:	00bfe0c4 	movi	r2,-125
   1751c:	e0bffa05 	stb	r2,-24(fp)
   17520:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   17524:	d0a7eb03 	ldbu	r2,-24660(gp)
   17528:	10803fcc 	andi	r2,r2,255
   1752c:	10001526 	beq	r2,zero,17584 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   17530:	e0fff98b 	ldhu	r3,-26(fp)
   17534:	e13ffa03 	ldbu	r4,-24(fp)
   17538:	e17ffa8b 	ldhu	r5,-22(fp)
   1753c:	e0bffb44 	addi	r2,fp,-19
   17540:	d8800015 	stw	r2,0(sp)
   17544:	280f883a 	mov	r7,r5
   17548:	200d883a 	mov	r6,r4
   1754c:	180b883a 	mov	r5,r3
   17550:	e13ff217 	ldw	r4,-56(fp)
   17554:	000f9580 	call	f958 <OSFlagPend>
   17558:	00000a06 	br	17584 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1755c:	0001883a 	nop
   17560:	e0bffc17 	ldw	r2,-16(fp)
   17564:	10c00d17 	ldw	r3,52(r2)
   17568:	e0bff317 	ldw	r2,-52(fp)
   1756c:	1880051e 	bne	r3,r2,17584 <altera_avalon_jtag_uart_read+0x1c8>
   17570:	e0bffc17 	ldw	r2,-16(fp)
   17574:	10c00917 	ldw	r3,36(r2)
   17578:	e0bffc17 	ldw	r2,-16(fp)
   1757c:	10800117 	ldw	r2,4(r2)
   17580:	18bff736 	bltu	r3,r2,17560 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   17584:	e0bffc17 	ldw	r2,-16(fp)
   17588:	10c00d17 	ldw	r3,52(r2)
   1758c:	e0bff317 	ldw	r2,-52(fp)
   17590:	18800726 	beq	r3,r2,175b0 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   17594:	e0bffe17 	ldw	r2,-8(fp)
   17598:	00bf9d16 	blt	zero,r2,17410 <altera_avalon_jtag_uart_read+0x54>
   1759c:	00000506 	br	175b4 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   175a0:	0001883a 	nop
   175a4:	00000306 	br	175b4 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   175a8:	0001883a 	nop
   175ac:	00000106 	br	175b4 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   175b0:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   175b4:	e0bffc17 	ldw	r2,-16(fp)
   175b8:	10800a17 	ldw	r2,40(r2)
   175bc:	1009883a 	mov	r4,r2
   175c0:	00132000 	call	13200 <OSSemPost>

  if (ptr != buffer)
   175c4:	e0fff017 	ldw	r3,-64(fp)
   175c8:	e0bffd17 	ldw	r2,-12(fp)
   175cc:	18801826 	beq	r3,r2,17630 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   175d0:	0005303a 	rdctl	r2,status
   175d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   175d8:	e0fff717 	ldw	r3,-36(fp)
   175dc:	00bfff84 	movi	r2,-2
   175e0:	1884703a 	and	r2,r3,r2
   175e4:	1001703a 	wrctl	status,r2
  
  return context;
   175e8:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   175ec:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   175f0:	e0bffc17 	ldw	r2,-16(fp)
   175f4:	10800817 	ldw	r2,32(r2)
   175f8:	10c00054 	ori	r3,r2,1
   175fc:	e0bffc17 	ldw	r2,-16(fp)
   17600:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   17604:	e0bffc17 	ldw	r2,-16(fp)
   17608:	10800017 	ldw	r2,0(r2)
   1760c:	10800104 	addi	r2,r2,4
   17610:	1007883a 	mov	r3,r2
   17614:	e0bffc17 	ldw	r2,-16(fp)
   17618:	10800817 	ldw	r2,32(r2)
   1761c:	18800035 	stwio	r2,0(r3)
   17620:	e0bff617 	ldw	r2,-40(fp)
   17624:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17628:	e0bff517 	ldw	r2,-44(fp)
   1762c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   17630:	e0fff017 	ldw	r3,-64(fp)
   17634:	e0bffd17 	ldw	r2,-12(fp)
   17638:	18800426 	beq	r3,r2,1764c <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   1763c:	e0fff017 	ldw	r3,-64(fp)
   17640:	e0bffd17 	ldw	r2,-12(fp)
   17644:	1885c83a 	sub	r2,r3,r2
   17648:	00000606 	br	17664 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   1764c:	e0bfff17 	ldw	r2,-4(fp)
   17650:	1090000c 	andi	r2,r2,16384
   17654:	10000226 	beq	r2,zero,17660 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   17658:	00bffd44 	movi	r2,-11
   1765c:	00000106 	br	17664 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   17660:	00bffec4 	movi	r2,-5
}
   17664:	e037883a 	mov	sp,fp
   17668:	dfc00117 	ldw	ra,4(sp)
   1766c:	df000017 	ldw	fp,0(sp)
   17670:	dec00204 	addi	sp,sp,8
   17674:	f800283a 	ret

00017678 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   17678:	deffed04 	addi	sp,sp,-76
   1767c:	dfc01215 	stw	ra,72(sp)
   17680:	df001115 	stw	fp,68(sp)
   17684:	df001104 	addi	fp,sp,68
   17688:	e13ffc15 	stw	r4,-16(fp)
   1768c:	e17ffd15 	stw	r5,-12(fp)
   17690:	e1bffe15 	stw	r6,-8(fp)
   17694:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   17698:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1769c:	e0bffd17 	ldw	r2,-12(fp)
   176a0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   176a4:	e0bffc17 	ldw	r2,-16(fp)
   176a8:	10800b17 	ldw	r2,44(r2)
   176ac:	e0bff815 	stw	r2,-32(fp)
   176b0:	e03ff90d 	sth	zero,-28(fp)
   176b4:	e0bff90b 	ldhu	r2,-28(fp)
   176b8:	e0fffb44 	addi	r3,fp,-19
   176bc:	180d883a 	mov	r6,r3
   176c0:	100b883a 	mov	r5,r2
   176c4:	e13ff817 	ldw	r4,-32(fp)
   176c8:	0012e880 	call	12e88 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   176cc:	00003706 	br	177ac <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   176d0:	e0bffc17 	ldw	r2,-16(fp)
   176d4:	10800f17 	ldw	r2,60(r2)
   176d8:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   176dc:	e0bffc17 	ldw	r2,-16(fp)
   176e0:	10801017 	ldw	r2,64(r2)
   176e4:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   176e8:	e0fff417 	ldw	r3,-48(fp)
   176ec:	e0bff017 	ldw	r2,-64(fp)
   176f0:	1880062e 	bgeu	r3,r2,1770c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   176f4:	e0fff017 	ldw	r3,-64(fp)
   176f8:	e0bff417 	ldw	r2,-48(fp)
   176fc:	1885c83a 	sub	r2,r3,r2
   17700:	10bfffc4 	addi	r2,r2,-1
   17704:	e0bff115 	stw	r2,-60(fp)
   17708:	00000b06 	br	17738 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1770c:	e0bff017 	ldw	r2,-64(fp)
   17710:	10000526 	beq	r2,zero,17728 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   17714:	00c20004 	movi	r3,2048
   17718:	e0bff417 	ldw	r2,-48(fp)
   1771c:	1885c83a 	sub	r2,r3,r2
   17720:	e0bff115 	stw	r2,-60(fp)
   17724:	00000406 	br	17738 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   17728:	00c1ffc4 	movi	r3,2047
   1772c:	e0bff417 	ldw	r2,-48(fp)
   17730:	1885c83a 	sub	r2,r3,r2
   17734:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   17738:	e0bff117 	ldw	r2,-60(fp)
   1773c:	10001e26 	beq	r2,zero,177b8 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   17740:	e0fffe17 	ldw	r3,-8(fp)
   17744:	e0bff117 	ldw	r2,-60(fp)
   17748:	1880022e 	bgeu	r3,r2,17754 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   1774c:	e0bffe17 	ldw	r2,-8(fp)
   17750:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   17754:	e0bffc17 	ldw	r2,-16(fp)
   17758:	10c21104 	addi	r3,r2,2116
   1775c:	e0bff417 	ldw	r2,-48(fp)
   17760:	1885883a 	add	r2,r3,r2
   17764:	e1bff117 	ldw	r6,-60(fp)
   17768:	e17ffd17 	ldw	r5,-12(fp)
   1776c:	1009883a 	mov	r4,r2
   17770:	00061d40 	call	61d4 <memcpy>
      ptr   += n;
   17774:	e0fffd17 	ldw	r3,-12(fp)
   17778:	e0bff117 	ldw	r2,-60(fp)
   1777c:	1885883a 	add	r2,r3,r2
   17780:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   17784:	e0fffe17 	ldw	r3,-8(fp)
   17788:	e0bff117 	ldw	r2,-60(fp)
   1778c:	1885c83a 	sub	r2,r3,r2
   17790:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   17794:	e0fff417 	ldw	r3,-48(fp)
   17798:	e0bff117 	ldw	r2,-60(fp)
   1779c:	1885883a 	add	r2,r3,r2
   177a0:	10c1ffcc 	andi	r3,r2,2047
   177a4:	e0bffc17 	ldw	r2,-16(fp)
   177a8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   177ac:	e0bffe17 	ldw	r2,-8(fp)
   177b0:	00bfc716 	blt	zero,r2,176d0 <altera_avalon_jtag_uart_write+0x58>
   177b4:	00000106 	br	177bc <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   177b8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   177bc:	0005303a 	rdctl	r2,status
   177c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   177c4:	e0fff717 	ldw	r3,-36(fp)
   177c8:	00bfff84 	movi	r2,-2
   177cc:	1884703a 	and	r2,r3,r2
   177d0:	1001703a 	wrctl	status,r2
  
  return context;
   177d4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   177d8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   177dc:	e0bffc17 	ldw	r2,-16(fp)
   177e0:	10800817 	ldw	r2,32(r2)
   177e4:	10c00094 	ori	r3,r2,2
   177e8:	e0bffc17 	ldw	r2,-16(fp)
   177ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   177f0:	e0bffc17 	ldw	r2,-16(fp)
   177f4:	10800017 	ldw	r2,0(r2)
   177f8:	10800104 	addi	r2,r2,4
   177fc:	1007883a 	mov	r3,r2
   17800:	e0bffc17 	ldw	r2,-16(fp)
   17804:	10800817 	ldw	r2,32(r2)
   17808:	18800035 	stwio	r2,0(r3)
   1780c:	e0bff617 	ldw	r2,-40(fp)
   17810:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17814:	e0bff317 	ldw	r2,-52(fp)
   17818:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1781c:	e0bffe17 	ldw	r2,-8(fp)
   17820:	00802a0e 	bge	zero,r2,178cc <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   17824:	e0bfff17 	ldw	r2,-4(fp)
   17828:	1090000c 	andi	r2,r2,16384
   1782c:	10002a1e 	bne	r2,zero,178d8 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   17830:	d0a7eb03 	ldbu	r2,-24660(gp)
   17834:	10803fcc 	andi	r2,r2,255
   17838:	10800058 	cmpnei	r2,r2,1
   1783c:	1000161e 	bne	r2,zero,17898 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   17840:	e0bffc17 	ldw	r2,-16(fp)
   17844:	10800c17 	ldw	r2,48(r2)
   17848:	e0bff515 	stw	r2,-44(fp)
   1784c:	00800184 	movi	r2,6
   17850:	e0bff98d 	sth	r2,-26(fp)
   17854:	00bfe0c4 	movi	r2,-125
   17858:	e0bffa05 	stb	r2,-24(fp)
   1785c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   17860:	d0a7eb03 	ldbu	r2,-24660(gp)
   17864:	10803fcc 	andi	r2,r2,255
   17868:	10001526 	beq	r2,zero,178c0 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1786c:	e0fff98b 	ldhu	r3,-26(fp)
   17870:	e13ffa03 	ldbu	r4,-24(fp)
   17874:	e17ffa8b 	ldhu	r5,-22(fp)
   17878:	e0bffb04 	addi	r2,fp,-20
   1787c:	d8800015 	stw	r2,0(sp)
   17880:	280f883a 	mov	r7,r5
   17884:	200d883a 	mov	r6,r4
   17888:	180b883a 	mov	r5,r3
   1788c:	e13ff517 	ldw	r4,-44(fp)
   17890:	000f9580 	call	f958 <OSFlagPend>
   17894:	00000a06 	br	178c0 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   17898:	0001883a 	nop
   1789c:	e0bffc17 	ldw	r2,-16(fp)
   178a0:	10c01017 	ldw	r3,64(r2)
   178a4:	e0bff017 	ldw	r2,-64(fp)
   178a8:	1880051e 	bne	r3,r2,178c0 <altera_avalon_jtag_uart_write+0x248>
   178ac:	e0bffc17 	ldw	r2,-16(fp)
   178b0:	10c00917 	ldw	r3,36(r2)
   178b4:	e0bffc17 	ldw	r2,-16(fp)
   178b8:	10800117 	ldw	r2,4(r2)
   178bc:	18bff736 	bltu	r3,r2,1789c <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   178c0:	e0bffc17 	ldw	r2,-16(fp)
   178c4:	10800917 	ldw	r2,36(r2)
   178c8:	1000051e 	bne	r2,zero,178e0 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   178cc:	e0bffe17 	ldw	r2,-8(fp)
   178d0:	00bfb616 	blt	zero,r2,177ac <altera_avalon_jtag_uart_write+0x134>
   178d4:	00000306 	br	178e4 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   178d8:	0001883a 	nop
   178dc:	00000106 	br	178e4 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   178e0:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   178e4:	e0bffc17 	ldw	r2,-16(fp)
   178e8:	10800b17 	ldw	r2,44(r2)
   178ec:	1009883a 	mov	r4,r2
   178f0:	00132000 	call	13200 <OSSemPost>

  if (ptr != start)
   178f4:	e0fffd17 	ldw	r3,-12(fp)
   178f8:	e0bff217 	ldw	r2,-56(fp)
   178fc:	18800426 	beq	r3,r2,17910 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   17900:	e0fffd17 	ldw	r3,-12(fp)
   17904:	e0bff217 	ldw	r2,-56(fp)
   17908:	1885c83a 	sub	r2,r3,r2
   1790c:	00000606 	br	17928 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   17910:	e0bfff17 	ldw	r2,-4(fp)
   17914:	1090000c 	andi	r2,r2,16384
   17918:	10000226 	beq	r2,zero,17924 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   1791c:	00bffd44 	movi	r2,-11
   17920:	00000106 	br	17928 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   17924:	00bffec4 	movi	r2,-5
}
   17928:	e037883a 	mov	sp,fp
   1792c:	dfc00117 	ldw	ra,4(sp)
   17930:	df000017 	ldw	fp,0(sp)
   17934:	dec00204 	addi	sp,sp,8
   17938:	f800283a 	ret

0001793c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1793c:	defff904 	addi	sp,sp,-28
   17940:	dfc00615 	stw	ra,24(sp)
   17944:	df000515 	stw	fp,20(sp)
   17948:	df000504 	addi	fp,sp,20
   1794c:	e13ffe15 	stw	r4,-8(fp)
   17950:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   17954:	0007883a 	mov	r3,zero
   17958:	e0bffe17 	ldw	r2,-8(fp)
   1795c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   17960:	e0bffe17 	ldw	r2,-8(fp)
   17964:	10800104 	addi	r2,r2,4
   17968:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1796c:	0005303a 	rdctl	r2,status
   17970:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17974:	e0fffc17 	ldw	r3,-16(fp)
   17978:	00bfff84 	movi	r2,-2
   1797c:	1884703a 	and	r2,r3,r2
   17980:	1001703a 	wrctl	status,r2
  
  return context;
   17984:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   17988:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1798c:	00197e80 	call	197e8 <alt_tick>
   17990:	e0bffb17 	ldw	r2,-20(fp)
   17994:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17998:	e0bffd17 	ldw	r2,-12(fp)
   1799c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   179a0:	0001883a 	nop
   179a4:	e037883a 	mov	sp,fp
   179a8:	dfc00117 	ldw	ra,4(sp)
   179ac:	df000017 	ldw	fp,0(sp)
   179b0:	dec00204 	addi	sp,sp,8
   179b4:	f800283a 	ret

000179b8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   179b8:	defff904 	addi	sp,sp,-28
   179bc:	dfc00615 	stw	ra,24(sp)
   179c0:	df000515 	stw	fp,20(sp)
   179c4:	df000504 	addi	fp,sp,20
   179c8:	e13ffc15 	stw	r4,-16(fp)
   179cc:	e17ffd15 	stw	r5,-12(fp)
   179d0:	e1bffe15 	stw	r6,-8(fp)
   179d4:	e1ffff15 	stw	r7,-4(fp)
   179d8:	e0bfff17 	ldw	r2,-4(fp)
   179dc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   179e0:	d0a80517 	ldw	r2,-24556(gp)
   179e4:	1000021e 	bne	r2,zero,179f0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   179e8:	e0bffb17 	ldw	r2,-20(fp)
   179ec:	d0a80515 	stw	r2,-24556(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   179f0:	e0bffc17 	ldw	r2,-16(fp)
   179f4:	10800104 	addi	r2,r2,4
   179f8:	00c001c4 	movi	r3,7
   179fc:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   17a00:	01800074 	movhi	r6,1
   17a04:	319e4f04 	addi	r6,r6,31036
   17a08:	e17ffc17 	ldw	r5,-16(fp)
   17a0c:	e13ffe17 	ldw	r4,-8(fp)
   17a10:	00193140 	call	19314 <alt_irq_register>
#endif  
}
   17a14:	0001883a 	nop
   17a18:	e037883a 	mov	sp,fp
   17a1c:	dfc00117 	ldw	ra,4(sp)
   17a20:	df000017 	ldw	fp,0(sp)
   17a24:	dec00204 	addi	sp,sp,8
   17a28:	f800283a 	ret

00017a2c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   17a2c:	defffc04 	addi	sp,sp,-16
   17a30:	df000315 	stw	fp,12(sp)
   17a34:	df000304 	addi	fp,sp,12
   17a38:	e13ffe15 	stw	r4,-8(fp)
   17a3c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   17a40:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   17a44:	e0bfff17 	ldw	r2,-4(fp)
   17a48:	1000061e 	bne	r2,zero,17a64 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   17a4c:	e0bffe17 	ldw	r2,-8(fp)
   17a50:	1007883a 	mov	r3,r2
   17a54:	e0bffd03 	ldbu	r2,-12(fp)
   17a58:	1884b03a 	or	r2,r3,r2
   17a5c:	e0bffd05 	stb	r2,-12(fp)
   17a60:	00000806 	br	17a84 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   17a64:	e0bffe17 	ldw	r2,-8(fp)
   17a68:	1007883a 	mov	r3,r2
   17a6c:	e0bffd03 	ldbu	r2,-12(fp)
   17a70:	1884b03a 	or	r2,r3,r2
   17a74:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   17a78:	e0bffd03 	ldbu	r2,-12(fp)
   17a7c:	10801014 	ori	r2,r2,64
   17a80:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   17a84:	e0fffd03 	ldbu	r3,-12(fp)
   17a88:	00bfe004 	movi	r2,-128
   17a8c:	1884b03a 	or	r2,r3,r2
}
   17a90:	e037883a 	mov	sp,fp
   17a94:	df000017 	ldw	fp,0(sp)
   17a98:	dec00104 	addi	sp,sp,4
   17a9c:	f800283a 	ret

00017aa0 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   17aa0:	defffd04 	addi	sp,sp,-12
   17aa4:	df000215 	stw	fp,8(sp)
   17aa8:	df000204 	addi	fp,sp,8
   17aac:	e13ffe15 	stw	r4,-8(fp)
   17ab0:	2805883a 	mov	r2,r5
   17ab4:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   17ab8:	e0bffe17 	ldw	r2,-8(fp)
   17abc:	10800a17 	ldw	r2,40(r2)
   17ac0:	1007883a 	mov	r3,r2
   17ac4:	e0bfff03 	ldbu	r2,-4(fp)
   17ac8:	18800025 	stbio	r2,0(r3)
}
   17acc:	0001883a 	nop
   17ad0:	e037883a 	mov	sp,fp
   17ad4:	df000017 	ldw	fp,0(sp)
   17ad8:	dec00104 	addi	sp,sp,4
   17adc:	f800283a 	ret

00017ae0 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   17ae0:	defffe04 	addi	sp,sp,-8
   17ae4:	df000115 	stw	fp,4(sp)
   17ae8:	df000104 	addi	fp,sp,4
   17aec:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   17af0:	e0bfff17 	ldw	r2,-4(fp)
   17af4:	10800a17 	ldw	r2,40(r2)
   17af8:	1007883a 	mov	r3,r2
   17afc:	00800044 	movi	r2,1
   17b00:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   17b04:	0001883a 	nop
   17b08:	e037883a 	mov	sp,fp
   17b0c:	df000017 	ldw	fp,0(sp)
   17b10:	dec00104 	addi	sp,sp,4
   17b14:	f800283a 	ret

00017b18 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   17b18:	defffc04 	addi	sp,sp,-16
   17b1c:	dfc00315 	stw	ra,12(sp)
   17b20:	df000215 	stw	fp,8(sp)
   17b24:	df000204 	addi	fp,sp,8
   17b28:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   17b2c:	d1602704 	addi	r5,gp,-32612
   17b30:	e13fff17 	ldw	r4,-4(fp)
   17b34:	00191100 	call	19110 <alt_find_dev>
   17b38:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17b3c:	e0bffe17 	ldw	r2,-8(fp)
}
   17b40:	e037883a 	mov	sp,fp
   17b44:	dfc00117 	ldw	ra,4(sp)
   17b48:	df000017 	ldw	fp,0(sp)
   17b4c:	dec00204 	addi	sp,sp,8
   17b50:	f800283a 	ret

00017b54 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   17b54:	defffb04 	addi	sp,sp,-20
   17b58:	df000415 	stw	fp,16(sp)
   17b5c:	df000404 	addi	fp,sp,16
   17b60:	e13ffd15 	stw	r4,-12(fp)
   17b64:	e17ffe15 	stw	r5,-8(fp)
   17b68:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   17b6c:	e03ffc15 	stw	zero,-16(fp)
   17b70:	00000f06 	br	17bb0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   17b74:	e0bffd17 	ldw	r2,-12(fp)
   17b78:	10800a17 	ldw	r2,40(r2)
   17b7c:	10800044 	addi	r2,r2,1
   17b80:	1009883a 	mov	r4,r2
   17b84:	e0fffe17 	ldw	r3,-8(fp)
   17b88:	e0bffc17 	ldw	r2,-16(fp)
   17b8c:	1885883a 	add	r2,r3,r2
   17b90:	10800003 	ldbu	r2,0(r2)
   17b94:	10803fcc 	andi	r2,r2,255
   17b98:	1080201c 	xori	r2,r2,128
   17b9c:	10bfe004 	addi	r2,r2,-128
   17ba0:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   17ba4:	e0bffc17 	ldw	r2,-16(fp)
   17ba8:	10800044 	addi	r2,r2,1
   17bac:	e0bffc15 	stw	r2,-16(fp)
   17bb0:	e0fffc17 	ldw	r3,-16(fp)
   17bb4:	e0bfff17 	ldw	r2,-4(fp)
   17bb8:	18bfee36 	bltu	r3,r2,17b74 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   17bbc:	0001883a 	nop
   17bc0:	e037883a 	mov	sp,fp
   17bc4:	df000017 	ldw	fp,0(sp)
   17bc8:	dec00104 	addi	sp,sp,4
   17bcc:	f800283a 	ret

00017bd0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   17bd0:	defffd04 	addi	sp,sp,-12
   17bd4:	df000215 	stw	fp,8(sp)
   17bd8:	df000204 	addi	fp,sp,8
   17bdc:	e13ffe15 	stw	r4,-8(fp)
   17be0:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   17be4:	00000d06 	br	17c1c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   17be8:	e0bffe17 	ldw	r2,-8(fp)
   17bec:	10800a17 	ldw	r2,40(r2)
   17bf0:	10800044 	addi	r2,r2,1
   17bf4:	1007883a 	mov	r3,r2
   17bf8:	e0bfff17 	ldw	r2,-4(fp)
   17bfc:	10800003 	ldbu	r2,0(r2)
   17c00:	10803fcc 	andi	r2,r2,255
   17c04:	1080201c 	xori	r2,r2,128
   17c08:	10bfe004 	addi	r2,r2,-128
   17c0c:	18800025 	stbio	r2,0(r3)
		++ptr;
   17c10:	e0bfff17 	ldw	r2,-4(fp)
   17c14:	10800044 	addi	r2,r2,1
   17c18:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   17c1c:	e0bfff17 	ldw	r2,-4(fp)
   17c20:	10800003 	ldbu	r2,0(r2)
   17c24:	10803fcc 	andi	r2,r2,255
   17c28:	1080201c 	xori	r2,r2,128
   17c2c:	10bfe004 	addi	r2,r2,-128
   17c30:	103fed1e 	bne	r2,zero,17be8 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   17c34:	0001883a 	nop
   17c38:	e037883a 	mov	sp,fp
   17c3c:	df000017 	ldw	fp,0(sp)
   17c40:	dec00104 	addi	sp,sp,4
   17c44:	f800283a 	ret

00017c48 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   17c48:	defffb04 	addi	sp,sp,-20
   17c4c:	dfc00415 	stw	ra,16(sp)
   17c50:	df000315 	stw	fp,12(sp)
   17c54:	df000304 	addi	fp,sp,12
   17c58:	e13ffd15 	stw	r4,-12(fp)
   17c5c:	e17ffe15 	stw	r5,-8(fp)
   17c60:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   17c64:	e0bffd17 	ldw	r2,-12(fp)
   17c68:	10800017 	ldw	r2,0(r2)
   17c6c:	e0ffff17 	ldw	r3,-4(fp)
   17c70:	180d883a 	mov	r6,r3
   17c74:	e17ffe17 	ldw	r5,-8(fp)
   17c78:	1009883a 	mov	r4,r2
   17c7c:	0017b540 	call	17b54 <alt_up_character_lcd_write>
	return 0;
   17c80:	0005883a 	mov	r2,zero
}
   17c84:	e037883a 	mov	sp,fp
   17c88:	dfc00117 	ldw	ra,4(sp)
   17c8c:	df000017 	ldw	fp,0(sp)
   17c90:	dec00204 	addi	sp,sp,8
   17c94:	f800283a 	ret

00017c98 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   17c98:	defffa04 	addi	sp,sp,-24
   17c9c:	dfc00515 	stw	ra,20(sp)
   17ca0:	df000415 	stw	fp,16(sp)
   17ca4:	df000404 	addi	fp,sp,16
   17ca8:	e13ffd15 	stw	r4,-12(fp)
   17cac:	e17ffe15 	stw	r5,-8(fp)
   17cb0:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   17cb4:	e0bffe17 	ldw	r2,-8(fp)
   17cb8:	10800a28 	cmpgeui	r2,r2,40
   17cbc:	1000031e 	bne	r2,zero,17ccc <alt_up_character_lcd_set_cursor_pos+0x34>
   17cc0:	e0bfff17 	ldw	r2,-4(fp)
   17cc4:	108000b0 	cmpltui	r2,r2,2
   17cc8:	1000021e 	bne	r2,zero,17cd4 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   17ccc:	00bfffc4 	movi	r2,-1
   17cd0:	00000906 	br	17cf8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   17cd4:	e17fff17 	ldw	r5,-4(fp)
   17cd8:	e13ffe17 	ldw	r4,-8(fp)
   17cdc:	0017a2c0 	call	17a2c <get_DDRAM_addr>
   17ce0:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   17ce4:	e0bffc03 	ldbu	r2,-16(fp)
   17ce8:	100b883a 	mov	r5,r2
   17cec:	e13ffd17 	ldw	r4,-12(fp)
   17cf0:	0017aa00 	call	17aa0 <alt_up_character_lcd_send_cmd>
	return 0;
   17cf4:	0005883a 	mov	r2,zero
}
   17cf8:	e037883a 	mov	sp,fp
   17cfc:	dfc00117 	ldw	ra,4(sp)
   17d00:	df000017 	ldw	fp,0(sp)
   17d04:	dec00204 	addi	sp,sp,8
   17d08:	f800283a 	ret

00017d0c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   17d0c:	defffb04 	addi	sp,sp,-20
   17d10:	dfc00415 	stw	ra,16(sp)
   17d14:	df000315 	stw	fp,12(sp)
   17d18:	df000304 	addi	fp,sp,12
   17d1c:	e13ffe15 	stw	r4,-8(fp)
   17d20:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   17d24:	e0bfff17 	ldw	r2,-4(fp)
   17d28:	10001526 	beq	r2,zero,17d80 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   17d2c:	e0bfff17 	ldw	r2,-4(fp)
   17d30:	0080020e 	bge	zero,r2,17d3c <alt_up_character_lcd_shift_cursor+0x30>
   17d34:	00800504 	movi	r2,20
   17d38:	00000106 	br	17d40 <alt_up_character_lcd_shift_cursor+0x34>
   17d3c:	00800404 	movi	r2,16
   17d40:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   17d44:	e0bfff17 	ldw	r2,-4(fp)
   17d48:	1000010e 	bge	r2,zero,17d50 <alt_up_character_lcd_shift_cursor+0x44>
   17d4c:	0085c83a 	sub	r2,zero,r2
   17d50:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   17d54:	00000406 	br	17d68 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   17d58:	e0bffd43 	ldbu	r2,-11(fp)
   17d5c:	100b883a 	mov	r5,r2
   17d60:	e13ffe17 	ldw	r4,-8(fp)
   17d64:	0017aa00 	call	17aa0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   17d68:	e0bffd03 	ldbu	r2,-12(fp)
   17d6c:	10ffffc4 	addi	r3,r2,-1
   17d70:	e0fffd05 	stb	r3,-12(fp)
   17d74:	10803fcc 	andi	r2,r2,255
   17d78:	103ff71e 	bne	r2,zero,17d58 <alt_up_character_lcd_shift_cursor+0x4c>
   17d7c:	00000106 	br	17d84 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   17d80:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   17d84:	e037883a 	mov	sp,fp
   17d88:	dfc00117 	ldw	ra,4(sp)
   17d8c:	df000017 	ldw	fp,0(sp)
   17d90:	dec00204 	addi	sp,sp,8
   17d94:	f800283a 	ret

00017d98 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   17d98:	defffb04 	addi	sp,sp,-20
   17d9c:	dfc00415 	stw	ra,16(sp)
   17da0:	df000315 	stw	fp,12(sp)
   17da4:	df000304 	addi	fp,sp,12
   17da8:	e13ffe15 	stw	r4,-8(fp)
   17dac:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   17db0:	e0bfff17 	ldw	r2,-4(fp)
   17db4:	10001526 	beq	r2,zero,17e0c <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   17db8:	e0bfff17 	ldw	r2,-4(fp)
   17dbc:	0080020e 	bge	zero,r2,17dc8 <alt_up_character_lcd_shift_display+0x30>
   17dc0:	00800704 	movi	r2,28
   17dc4:	00000106 	br	17dcc <alt_up_character_lcd_shift_display+0x34>
   17dc8:	00800604 	movi	r2,24
   17dcc:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   17dd0:	e0bfff17 	ldw	r2,-4(fp)
   17dd4:	1000010e 	bge	r2,zero,17ddc <alt_up_character_lcd_shift_display+0x44>
   17dd8:	0085c83a 	sub	r2,zero,r2
   17ddc:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   17de0:	00000406 	br	17df4 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   17de4:	e0bffd43 	ldbu	r2,-11(fp)
   17de8:	100b883a 	mov	r5,r2
   17dec:	e13ffe17 	ldw	r4,-8(fp)
   17df0:	0017aa00 	call	17aa0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   17df4:	e0bffd03 	ldbu	r2,-12(fp)
   17df8:	10ffffc4 	addi	r3,r2,-1
   17dfc:	e0fffd05 	stb	r3,-12(fp)
   17e00:	10803fcc 	andi	r2,r2,255
   17e04:	103ff71e 	bne	r2,zero,17de4 <alt_up_character_lcd_shift_display+0x4c>
   17e08:	00000106 	br	17e10 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   17e0c:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   17e10:	e037883a 	mov	sp,fp
   17e14:	dfc00117 	ldw	ra,4(sp)
   17e18:	df000017 	ldw	fp,0(sp)
   17e1c:	dec00204 	addi	sp,sp,8
   17e20:	f800283a 	ret

00017e24 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   17e24:	defffa04 	addi	sp,sp,-24
   17e28:	dfc00515 	stw	ra,20(sp)
   17e2c:	df000415 	stw	fp,16(sp)
   17e30:	df000404 	addi	fp,sp,16
   17e34:	e13ffd15 	stw	r4,-12(fp)
   17e38:	e17ffe15 	stw	r5,-8(fp)
   17e3c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   17e40:	e0bffe17 	ldw	r2,-8(fp)
   17e44:	10800a28 	cmpgeui	r2,r2,40
   17e48:	1000031e 	bne	r2,zero,17e58 <alt_up_character_lcd_erase_pos+0x34>
   17e4c:	e0bfff17 	ldw	r2,-4(fp)
   17e50:	108000b0 	cmpltui	r2,r2,2
   17e54:	1000021e 	bne	r2,zero,17e60 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   17e58:	00bfffc4 	movi	r2,-1
   17e5c:	00000f06 	br	17e9c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   17e60:	e17fff17 	ldw	r5,-4(fp)
   17e64:	e13ffe17 	ldw	r4,-8(fp)
   17e68:	0017a2c0 	call	17a2c <get_DDRAM_addr>
   17e6c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   17e70:	e0bffc03 	ldbu	r2,-16(fp)
   17e74:	100b883a 	mov	r5,r2
   17e78:	e13ffd17 	ldw	r4,-12(fp)
   17e7c:	0017aa00 	call	17aa0 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   17e80:	e0bffd17 	ldw	r2,-12(fp)
   17e84:	10800a17 	ldw	r2,40(r2)
   17e88:	10800044 	addi	r2,r2,1
   17e8c:	1007883a 	mov	r3,r2
   17e90:	00800084 	movi	r2,2
   17e94:	18800025 	stbio	r2,0(r3)
	return 0;
   17e98:	0005883a 	mov	r2,zero
}
   17e9c:	e037883a 	mov	sp,fp
   17ea0:	dfc00117 	ldw	ra,4(sp)
   17ea4:	df000017 	ldw	fp,0(sp)
   17ea8:	dec00204 	addi	sp,sp,8
   17eac:	f800283a 	ret

00017eb0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   17eb0:	defffd04 	addi	sp,sp,-12
   17eb4:	dfc00215 	stw	ra,8(sp)
   17eb8:	df000115 	stw	fp,4(sp)
   17ebc:	df000104 	addi	fp,sp,4
   17ec0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   17ec4:	01400304 	movi	r5,12
   17ec8:	e13fff17 	ldw	r4,-4(fp)
   17ecc:	0017aa00 	call	17aa0 <alt_up_character_lcd_send_cmd>
}
   17ed0:	0001883a 	nop
   17ed4:	e037883a 	mov	sp,fp
   17ed8:	dfc00117 	ldw	ra,4(sp)
   17edc:	df000017 	ldw	fp,0(sp)
   17ee0:	dec00204 	addi	sp,sp,8
   17ee4:	f800283a 	ret

00017ee8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   17ee8:	defffd04 	addi	sp,sp,-12
   17eec:	dfc00215 	stw	ra,8(sp)
   17ef0:	df000115 	stw	fp,4(sp)
   17ef4:	df000104 	addi	fp,sp,4
   17ef8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   17efc:	014003c4 	movi	r5,15
   17f00:	e13fff17 	ldw	r4,-4(fp)
   17f04:	0017aa00 	call	17aa0 <alt_up_character_lcd_send_cmd>
}
   17f08:	0001883a 	nop
   17f0c:	e037883a 	mov	sp,fp
   17f10:	dfc00117 	ldw	ra,4(sp)
   17f14:	df000017 	ldw	fp,0(sp)
   17f18:	dec00204 	addi	sp,sp,8
   17f1c:	f800283a 	ret

00017f20 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   17f20:	defffd04 	addi	sp,sp,-12
   17f24:	df000215 	stw	fp,8(sp)
   17f28:	df000204 	addi	fp,sp,8
   17f2c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17f30:	e0bfff17 	ldw	r2,-4(fp)
   17f34:	10800a17 	ldw	r2,40(r2)
   17f38:	10800104 	addi	r2,r2,4
   17f3c:	10800037 	ldwio	r2,0(r2)
   17f40:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   17f44:	e0bffe17 	ldw	r2,-8(fp)
   17f48:	10800054 	ori	r2,r2,1
   17f4c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   17f50:	e0bfff17 	ldw	r2,-4(fp)
   17f54:	10800a17 	ldw	r2,40(r2)
   17f58:	10800104 	addi	r2,r2,4
   17f5c:	1007883a 	mov	r3,r2
   17f60:	e0bffe17 	ldw	r2,-8(fp)
   17f64:	18800035 	stwio	r2,0(r3)
}
   17f68:	0001883a 	nop
   17f6c:	e037883a 	mov	sp,fp
   17f70:	df000017 	ldw	fp,0(sp)
   17f74:	dec00104 	addi	sp,sp,4
   17f78:	f800283a 	ret

00017f7c <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   17f7c:	defffd04 	addi	sp,sp,-12
   17f80:	df000215 	stw	fp,8(sp)
   17f84:	df000204 	addi	fp,sp,8
   17f88:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17f8c:	e0bfff17 	ldw	r2,-4(fp)
   17f90:	10800a17 	ldw	r2,40(r2)
   17f94:	10800104 	addi	r2,r2,4
   17f98:	10800037 	ldwio	r2,0(r2)
   17f9c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   17fa0:	e0fffe17 	ldw	r3,-8(fp)
   17fa4:	00bfff84 	movi	r2,-2
   17fa8:	1884703a 	and	r2,r3,r2
   17fac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   17fb0:	e0bfff17 	ldw	r2,-4(fp)
   17fb4:	10800a17 	ldw	r2,40(r2)
   17fb8:	10800104 	addi	r2,r2,4
   17fbc:	1007883a 	mov	r3,r2
   17fc0:	e0bffe17 	ldw	r2,-8(fp)
   17fc4:	18800035 	stwio	r2,0(r3)
}
   17fc8:	0001883a 	nop
   17fcc:	e037883a 	mov	sp,fp
   17fd0:	df000017 	ldw	fp,0(sp)
   17fd4:	dec00104 	addi	sp,sp,4
   17fd8:	f800283a 	ret

00017fdc <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   17fdc:	defffd04 	addi	sp,sp,-12
   17fe0:	df000215 	stw	fp,8(sp)
   17fe4:	df000204 	addi	fp,sp,8
   17fe8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   17fec:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   17ff0:	e0bfff17 	ldw	r2,-4(fp)
   17ff4:	10800a17 	ldw	r2,40(r2)
   17ff8:	10800084 	addi	r2,r2,2
   17ffc:	1080002b 	ldhuio	r2,0(r2)
   18000:	10bfffcc 	andi	r2,r2,65535
   18004:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   18008:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1800c:	e037883a 	mov	sp,fp
   18010:	df000017 	ldw	fp,0(sp)
   18014:	dec00104 	addi	sp,sp,4
   18018:	f800283a 	ret

0001801c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1801c:	defffd04 	addi	sp,sp,-12
   18020:	df000215 	stw	fp,8(sp)
   18024:	df000204 	addi	fp,sp,8
   18028:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1802c:	e0bfff17 	ldw	r2,-4(fp)
   18030:	10800a17 	ldw	r2,40(r2)
   18034:	10800104 	addi	r2,r2,4
   18038:	10800037 	ldwio	r2,0(r2)
   1803c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   18040:	e0bffe17 	ldw	r2,-8(fp)
   18044:	1004d43a 	srli	r2,r2,16
}
   18048:	e037883a 	mov	sp,fp
   1804c:	df000017 	ldw	fp,0(sp)
   18050:	dec00104 	addi	sp,sp,4
   18054:	f800283a 	ret

00018058 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   18058:	defffd04 	addi	sp,sp,-12
   1805c:	df000215 	stw	fp,8(sp)
   18060:	df000204 	addi	fp,sp,8
   18064:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   18068:	e0bfff17 	ldw	r2,-4(fp)
   1806c:	1080800c 	andi	r2,r2,512
   18070:	1004d27a 	srli	r2,r2,9
   18074:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   18078:	e0bffe17 	ldw	r2,-8(fp)
   1807c:	10000226 	beq	r2,zero,18088 <alt_up_irda_check_parity+0x30>
   18080:	00bfffc4 	movi	r2,-1
   18084:	00000106 	br	1808c <alt_up_irda_check_parity+0x34>
   18088:	0005883a 	mov	r2,zero
}
   1808c:	e037883a 	mov	sp,fp
   18090:	df000017 	ldw	fp,0(sp)
   18094:	dec00104 	addi	sp,sp,4
   18098:	f800283a 	ret

0001809c <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1809c:	defffd04 	addi	sp,sp,-12
   180a0:	df000215 	stw	fp,8(sp)
   180a4:	df000204 	addi	fp,sp,8
   180a8:	e13ffe15 	stw	r4,-8(fp)
   180ac:	2805883a 	mov	r2,r5
   180b0:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   180b4:	e0bffe17 	ldw	r2,-8(fp)
   180b8:	10800a17 	ldw	r2,40(r2)
   180bc:	1007883a 	mov	r3,r2
   180c0:	e0bfff03 	ldbu	r2,-4(fp)
   180c4:	18800035 	stwio	r2,0(r3)
	return 0;
   180c8:	0005883a 	mov	r2,zero
}
   180cc:	e037883a 	mov	sp,fp
   180d0:	df000017 	ldw	fp,0(sp)
   180d4:	dec00104 	addi	sp,sp,4
   180d8:	f800283a 	ret

000180dc <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   180dc:	defffa04 	addi	sp,sp,-24
   180e0:	dfc00515 	stw	ra,20(sp)
   180e4:	df000415 	stw	fp,16(sp)
   180e8:	df000404 	addi	fp,sp,16
   180ec:	e13ffd15 	stw	r4,-12(fp)
   180f0:	e17ffe15 	stw	r5,-8(fp)
   180f4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   180f8:	e0bffd17 	ldw	r2,-12(fp)
   180fc:	10800a17 	ldw	r2,40(r2)
   18100:	10800037 	ldwio	r2,0(r2)
   18104:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   18108:	e0bffc17 	ldw	r2,-16(fp)
   1810c:	1007883a 	mov	r3,r2
   18110:	e0bffe17 	ldw	r2,-8(fp)
   18114:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   18118:	e13ffc17 	ldw	r4,-16(fp)
   1811c:	00180580 	call	18058 <alt_up_irda_check_parity>
   18120:	1007883a 	mov	r3,r2
   18124:	e0bfff17 	ldw	r2,-4(fp)
   18128:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1812c:	e0bffc17 	ldw	r2,-16(fp)
   18130:	10a0000c 	andi	r2,r2,32768
   18134:	1004d3fa 	srli	r2,r2,15
   18138:	10bfffc4 	addi	r2,r2,-1
}
   1813c:	e037883a 	mov	sp,fp
   18140:	dfc00117 	ldw	ra,4(sp)
   18144:	df000017 	ldw	fp,0(sp)
   18148:	dec00204 	addi	sp,sp,8
   1814c:	f800283a 	ret

00018150 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   18150:	defff804 	addi	sp,sp,-32
   18154:	dfc00715 	stw	ra,28(sp)
   18158:	df000615 	stw	fp,24(sp)
   1815c:	df000604 	addi	fp,sp,24
   18160:	e13ffd15 	stw	r4,-12(fp)
   18164:	e17ffe15 	stw	r5,-8(fp)
   18168:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1816c:	e0bffd17 	ldw	r2,-12(fp)
   18170:	10800017 	ldw	r2,0(r2)
   18174:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   18178:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1817c:	00000c06 	br	181b0 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   18180:	e0bffe17 	ldw	r2,-8(fp)
   18184:	10c00044 	addi	r3,r2,1
   18188:	e0fffe15 	stw	r3,-8(fp)
   1818c:	e0fffc04 	addi	r3,fp,-16
   18190:	180d883a 	mov	r6,r3
   18194:	100b883a 	mov	r5,r2
   18198:	e13ffb17 	ldw	r4,-20(fp)
   1819c:	00180dc0 	call	180dc <alt_up_irda_read_data>
   181a0:	1000081e 	bne	r2,zero,181c4 <alt_up_irda_read_fd+0x74>
			count++;
   181a4:	e0bffa17 	ldw	r2,-24(fp)
   181a8:	10800044 	addi	r2,r2,1
   181ac:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   181b0:	e0bfff17 	ldw	r2,-4(fp)
   181b4:	10ffffc4 	addi	r3,r2,-1
   181b8:	e0ffff15 	stw	r3,-4(fp)
   181bc:	103ff01e 	bne	r2,zero,18180 <alt_up_irda_read_fd+0x30>
   181c0:	00000106 	br	181c8 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   181c4:	0001883a 	nop
	}
	return count;
   181c8:	e0bffa17 	ldw	r2,-24(fp)
}
   181cc:	e037883a 	mov	sp,fp
   181d0:	dfc00117 	ldw	ra,4(sp)
   181d4:	df000017 	ldw	fp,0(sp)
   181d8:	dec00204 	addi	sp,sp,8
   181dc:	f800283a 	ret

000181e0 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   181e0:	defff904 	addi	sp,sp,-28
   181e4:	dfc00615 	stw	ra,24(sp)
   181e8:	df000515 	stw	fp,20(sp)
   181ec:	df000504 	addi	fp,sp,20
   181f0:	e13ffd15 	stw	r4,-12(fp)
   181f4:	e17ffe15 	stw	r5,-8(fp)
   181f8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   181fc:	e0bffd17 	ldw	r2,-12(fp)
   18200:	10800017 	ldw	r2,0(r2)
   18204:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   18208:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1820c:	00000c06 	br	18240 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   18210:	e0bffe17 	ldw	r2,-8(fp)
   18214:	10c00044 	addi	r3,r2,1
   18218:	e0fffe15 	stw	r3,-8(fp)
   1821c:	10800003 	ldbu	r2,0(r2)
   18220:	10803fcc 	andi	r2,r2,255
   18224:	100b883a 	mov	r5,r2
   18228:	e13ffc17 	ldw	r4,-16(fp)
   1822c:	001809c0 	call	1809c <alt_up_irda_write_data>
   18230:	1000081e 	bne	r2,zero,18254 <alt_up_irda_write_fd+0x74>
			count++;
   18234:	e0bffb17 	ldw	r2,-20(fp)
   18238:	10800044 	addi	r2,r2,1
   1823c:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   18240:	e0bfff17 	ldw	r2,-4(fp)
   18244:	10ffffc4 	addi	r3,r2,-1
   18248:	e0ffff15 	stw	r3,-4(fp)
   1824c:	103ff01e 	bne	r2,zero,18210 <alt_up_irda_write_fd+0x30>
   18250:	00000106 	br	18258 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   18254:	0001883a 	nop
	}
	return count;
   18258:	e0bffb17 	ldw	r2,-20(fp)
}
   1825c:	e037883a 	mov	sp,fp
   18260:	dfc00117 	ldw	ra,4(sp)
   18264:	df000017 	ldw	fp,0(sp)
   18268:	dec00204 	addi	sp,sp,8
   1826c:	f800283a 	ret

00018270 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   18270:	defffc04 	addi	sp,sp,-16
   18274:	dfc00315 	stw	ra,12(sp)
   18278:	df000215 	stw	fp,8(sp)
   1827c:	df000204 	addi	fp,sp,8
   18280:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   18284:	d1602704 	addi	r5,gp,-32612
   18288:	e13fff17 	ldw	r4,-4(fp)
   1828c:	00191100 	call	19110 <alt_find_dev>
   18290:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   18294:	e0bffe17 	ldw	r2,-8(fp)
}
   18298:	e037883a 	mov	sp,fp
   1829c:	dfc00117 	ldw	ra,4(sp)
   182a0:	df000017 	ldw	fp,0(sp)
   182a4:	dec00204 	addi	sp,sp,8
   182a8:	f800283a 	ret

000182ac <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   182ac:	defffd04 	addi	sp,sp,-12
   182b0:	df000215 	stw	fp,8(sp)
   182b4:	df000204 	addi	fp,sp,8
   182b8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   182bc:	e0bfff17 	ldw	r2,-4(fp)
   182c0:	1080400c 	andi	r2,r2,256
   182c4:	1004d23a 	srli	r2,r2,8
   182c8:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   182cc:	e0bffe03 	ldbu	r2,-8(fp)
}
   182d0:	e037883a 	mov	sp,fp
   182d4:	df000017 	ldw	fp,0(sp)
   182d8:	dec00104 	addi	sp,sp,4
   182dc:	f800283a 	ret

000182e0 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   182e0:	defffd04 	addi	sp,sp,-12
   182e4:	df000215 	stw	fp,8(sp)
   182e8:	df000204 	addi	fp,sp,8
   182ec:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   182f0:	e0bfff17 	ldw	r2,-4(fp)
   182f4:	1080004c 	andi	r2,r2,1
   182f8:	e0bffe05 	stb	r2,-8(fp)
	return re;
   182fc:	e0bffe03 	ldbu	r2,-8(fp)
}
   18300:	e037883a 	mov	sp,fp
   18304:	df000017 	ldw	fp,0(sp)
   18308:	dec00104 	addi	sp,sp,4
   1830c:	f800283a 	ret

00018310 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   18310:	defffd04 	addi	sp,sp,-12
   18314:	df000215 	stw	fp,8(sp)
   18318:	df000204 	addi	fp,sp,8
   1831c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   18320:	e0bfff17 	ldw	r2,-4(fp)
   18324:	1081000c 	andi	r2,r2,1024
   18328:	1004d2ba 	srli	r2,r2,10
   1832c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   18330:	e0bffe03 	ldbu	r2,-8(fp)
}
   18334:	e037883a 	mov	sp,fp
   18338:	df000017 	ldw	fp,0(sp)
   1833c:	dec00104 	addi	sp,sp,4
   18340:	f800283a 	ret

00018344 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   18344:	defffd04 	addi	sp,sp,-12
   18348:	df000215 	stw	fp,8(sp)
   1834c:	df000204 	addi	fp,sp,8
   18350:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   18354:	e0bfff17 	ldw	r2,-4(fp)
   18358:	1004d43a 	srli	r2,r2,16
   1835c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   18360:	e0bffe0b 	ldhu	r2,-8(fp)
}
   18364:	e037883a 	mov	sp,fp
   18368:	df000017 	ldw	fp,0(sp)
   1836c:	dec00104 	addi	sp,sp,4
   18370:	f800283a 	ret

00018374 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   18374:	defffd04 	addi	sp,sp,-12
   18378:	df000215 	stw	fp,8(sp)
   1837c:	df000204 	addi	fp,sp,8
   18380:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   18384:	e0bfff17 	ldw	r2,-4(fp)
   18388:	10a0000c 	andi	r2,r2,32768
   1838c:	1004d3fa 	srli	r2,r2,15
   18390:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   18394:	e0bffe03 	ldbu	r2,-8(fp)
}
   18398:	e037883a 	mov	sp,fp
   1839c:	df000017 	ldw	fp,0(sp)
   183a0:	dec00104 	addi	sp,sp,4
   183a4:	f800283a 	ret

000183a8 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   183a8:	defffd04 	addi	sp,sp,-12
   183ac:	df000215 	stw	fp,8(sp)
   183b0:	df000204 	addi	fp,sp,8
   183b4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   183b8:	e0bfff17 	ldw	r2,-4(fp)
   183bc:	e0bffe05 	stb	r2,-8(fp)
	return data;
   183c0:	e0bffe03 	ldbu	r2,-8(fp)
}
   183c4:	e037883a 	mov	sp,fp
   183c8:	df000017 	ldw	fp,0(sp)
   183cc:	dec00104 	addi	sp,sp,4
   183d0:	f800283a 	ret

000183d4 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   183d4:	defffb04 	addi	sp,sp,-20
   183d8:	dfc00415 	stw	ra,16(sp)
   183dc:	df000315 	stw	fp,12(sp)
   183e0:	df000304 	addi	fp,sp,12
   183e4:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   183e8:	01403fc4 	movi	r5,255
   183ec:	e13fff17 	ldw	r4,-4(fp)
   183f0:	00186340 	call	18634 <alt_up_ps2_write_data_byte_with_ack>
   183f4:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   183f8:	e0bffd17 	ldw	r2,-12(fp)
   183fc:	1000211e 	bne	r2,zero,18484 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   18400:	e0bffe04 	addi	r2,fp,-8
   18404:	100b883a 	mov	r5,r2
   18408:	e13fff17 	ldw	r4,-4(fp)
   1840c:	00186980 	call	18698 <alt_up_ps2_read_data_byte_timeout>
   18410:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   18414:	e0bffd17 	ldw	r2,-12(fp)
   18418:	10001a1e 	bne	r2,zero,18484 <alt_up_ps2_init+0xb0>
   1841c:	e0bffe03 	ldbu	r2,-8(fp)
   18420:	10803fcc 	andi	r2,r2,255
   18424:	10802a98 	cmpnei	r2,r2,170
   18428:	1000161e 	bne	r2,zero,18484 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1842c:	e0bffe04 	addi	r2,fp,-8
   18430:	100b883a 	mov	r5,r2
   18434:	e13fff17 	ldw	r4,-4(fp)
   18438:	00186980 	call	18698 <alt_up_ps2_read_data_byte_timeout>
   1843c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   18440:	e0bffd17 	ldw	r2,-12(fp)
   18444:	10bfe318 	cmpnei	r2,r2,-116
   18448:	1000041e 	bne	r2,zero,1845c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1844c:	e0bfff17 	ldw	r2,-4(fp)
   18450:	00c00044 	movi	r3,1
   18454:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   18458:	00000a06 	br	18484 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   1845c:	e0bffd17 	ldw	r2,-12(fp)
   18460:	1000081e 	bne	r2,zero,18484 <alt_up_ps2_init+0xb0>
   18464:	e0bffe03 	ldbu	r2,-8(fp)
   18468:	10803fcc 	andi	r2,r2,255
   1846c:	1000051e 	bne	r2,zero,18484 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   18470:	e0bfff17 	ldw	r2,-4(fp)
   18474:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   18478:	01403d04 	movi	r5,244
   1847c:	e13fff17 	ldw	r4,-4(fp)
   18480:	00185580 	call	18558 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   18484:	0001883a 	nop
   18488:	e037883a 	mov	sp,fp
   1848c:	dfc00117 	ldw	ra,4(sp)
   18490:	df000017 	ldw	fp,0(sp)
   18494:	dec00204 	addi	sp,sp,8
   18498:	f800283a 	ret

0001849c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1849c:	defffd04 	addi	sp,sp,-12
   184a0:	df000215 	stw	fp,8(sp)
   184a4:	df000204 	addi	fp,sp,8
   184a8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   184ac:	e0bfff17 	ldw	r2,-4(fp)
   184b0:	10800a17 	ldw	r2,40(r2)
   184b4:	10800104 	addi	r2,r2,4
   184b8:	10800037 	ldwio	r2,0(r2)
   184bc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   184c0:	e0bffe17 	ldw	r2,-8(fp)
   184c4:	10800054 	ori	r2,r2,1
   184c8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   184cc:	e0bfff17 	ldw	r2,-4(fp)
   184d0:	10800a17 	ldw	r2,40(r2)
   184d4:	10800104 	addi	r2,r2,4
   184d8:	1007883a 	mov	r3,r2
   184dc:	e0bffe17 	ldw	r2,-8(fp)
   184e0:	18800035 	stwio	r2,0(r3)
}
   184e4:	0001883a 	nop
   184e8:	e037883a 	mov	sp,fp
   184ec:	df000017 	ldw	fp,0(sp)
   184f0:	dec00104 	addi	sp,sp,4
   184f4:	f800283a 	ret

000184f8 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   184f8:	defffd04 	addi	sp,sp,-12
   184fc:	df000215 	stw	fp,8(sp)
   18500:	df000204 	addi	fp,sp,8
   18504:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   18508:	e0bfff17 	ldw	r2,-4(fp)
   1850c:	10800a17 	ldw	r2,40(r2)
   18510:	10800104 	addi	r2,r2,4
   18514:	10800037 	ldwio	r2,0(r2)
   18518:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1851c:	e0fffe17 	ldw	r3,-8(fp)
   18520:	00bfff84 	movi	r2,-2
   18524:	1884703a 	and	r2,r3,r2
   18528:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1852c:	e0bfff17 	ldw	r2,-4(fp)
   18530:	10800a17 	ldw	r2,40(r2)
   18534:	10800104 	addi	r2,r2,4
   18538:	1007883a 	mov	r3,r2
   1853c:	e0bffe17 	ldw	r2,-8(fp)
   18540:	18800035 	stwio	r2,0(r3)
}
   18544:	0001883a 	nop
   18548:	e037883a 	mov	sp,fp
   1854c:	df000017 	ldw	fp,0(sp)
   18550:	dec00104 	addi	sp,sp,4
   18554:	f800283a 	ret

00018558 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   18558:	defffb04 	addi	sp,sp,-20
   1855c:	dfc00415 	stw	ra,16(sp)
   18560:	df000315 	stw	fp,12(sp)
   18564:	df000304 	addi	fp,sp,12
   18568:	e13ffe15 	stw	r4,-8(fp)
   1856c:	2805883a 	mov	r2,r5
   18570:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   18574:	e0bffe17 	ldw	r2,-8(fp)
   18578:	10800a17 	ldw	r2,40(r2)
   1857c:	1007883a 	mov	r3,r2
   18580:	e0bfff03 	ldbu	r2,-4(fp)
   18584:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   18588:	e0bffe17 	ldw	r2,-8(fp)
   1858c:	10800a17 	ldw	r2,40(r2)
   18590:	10800104 	addi	r2,r2,4
   18594:	10800037 	ldwio	r2,0(r2)
   18598:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1859c:	e13ffd17 	ldw	r4,-12(fp)
   185a0:	00183100 	call	18310 <read_CE_bit>
   185a4:	10803fcc 	andi	r2,r2,255
   185a8:	10000226 	beq	r2,zero,185b4 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   185ac:	00bffec4 	movi	r2,-5
   185b0:	00000106 	br	185b8 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   185b4:	0005883a 	mov	r2,zero
}
   185b8:	e037883a 	mov	sp,fp
   185bc:	dfc00117 	ldw	ra,4(sp)
   185c0:	df000017 	ldw	fp,0(sp)
   185c4:	dec00204 	addi	sp,sp,8
   185c8:	f800283a 	ret

000185cc <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   185cc:	defffc04 	addi	sp,sp,-16
   185d0:	dfc00315 	stw	ra,12(sp)
   185d4:	df000215 	stw	fp,8(sp)
   185d8:	df000204 	addi	fp,sp,8
   185dc:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   185e0:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   185e4:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   185e8:	e0bffe44 	addi	r2,fp,-7
   185ec:	100b883a 	mov	r5,r2
   185f0:	e13fff17 	ldw	r4,-4(fp)
   185f4:	00186980 	call	18698 <alt_up_ps2_read_data_byte_timeout>
   185f8:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   185fc:	e0bffe03 	ldbu	r2,-8(fp)
   18600:	1000061e 	bne	r2,zero,1861c <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   18604:	e0bffe43 	ldbu	r2,-7(fp)
   18608:	10803fcc 	andi	r2,r2,255
   1860c:	10803e98 	cmpnei	r2,r2,250
   18610:	103ff51e 	bne	r2,zero,185e8 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   18614:	0005883a 	mov	r2,zero
   18618:	00000106 	br	18620 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   1861c:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   18620:	e037883a 	mov	sp,fp
   18624:	dfc00117 	ldw	ra,4(sp)
   18628:	df000017 	ldw	fp,0(sp)
   1862c:	dec00204 	addi	sp,sp,8
   18630:	f800283a 	ret

00018634 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   18634:	defffa04 	addi	sp,sp,-24
   18638:	dfc00515 	stw	ra,20(sp)
   1863c:	df000415 	stw	fp,16(sp)
   18640:	df000404 	addi	fp,sp,16
   18644:	e13ffe15 	stw	r4,-8(fp)
   18648:	2805883a 	mov	r2,r5
   1864c:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   18650:	e0bfff03 	ldbu	r2,-4(fp)
   18654:	100b883a 	mov	r5,r2
   18658:	e13ffe17 	ldw	r4,-8(fp)
   1865c:	00185580 	call	18558 <alt_up_ps2_write_data_byte>
   18660:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   18664:	e0bffc17 	ldw	r2,-16(fp)
   18668:	10000226 	beq	r2,zero,18674 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1866c:	e0bffc17 	ldw	r2,-16(fp)
   18670:	00000406 	br	18684 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   18674:	e13ffe17 	ldw	r4,-8(fp)
   18678:	00185cc0 	call	185cc <alt_up_ps2_wait_for_ack>
   1867c:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   18680:	e0bffd17 	ldw	r2,-12(fp)
}
   18684:	e037883a 	mov	sp,fp
   18688:	dfc00117 	ldw	ra,4(sp)
   1868c:	df000017 	ldw	fp,0(sp)
   18690:	dec00204 	addi	sp,sp,8
   18694:	f800283a 	ret

00018698 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   18698:	defffa04 	addi	sp,sp,-24
   1869c:	dfc00515 	stw	ra,20(sp)
   186a0:	df000415 	stw	fp,16(sp)
   186a4:	df000404 	addi	fp,sp,16
   186a8:	e13ffe15 	stw	r4,-8(fp)
   186ac:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   186b0:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   186b4:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   186b8:	e0bffc17 	ldw	r2,-16(fp)
   186bc:	10800044 	addi	r2,r2,1
   186c0:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   186c4:	e0bffe17 	ldw	r2,-8(fp)
   186c8:	10800a17 	ldw	r2,40(r2)
   186cc:	10800037 	ldwio	r2,0(r2)
   186d0:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   186d4:	e13ffd17 	ldw	r4,-12(fp)
   186d8:	00183740 	call	18374 <read_data_valid>
   186dc:	10803fcc 	andi	r2,r2,255
   186e0:	10000726 	beq	r2,zero,18700 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   186e4:	e13ffd17 	ldw	r4,-12(fp)
   186e8:	00183a80 	call	183a8 <read_data_byte>
   186ec:	1007883a 	mov	r3,r2
   186f0:	e0bfff17 	ldw	r2,-4(fp)
   186f4:	10c00005 	stb	r3,0(r2)
			return 0;
   186f8:	0005883a 	mov	r2,zero
   186fc:	00000806 	br	18720 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   18700:	e0bffe17 	ldw	r2,-8(fp)
   18704:	10800c17 	ldw	r2,48(r2)
   18708:	103feb26 	beq	r2,zero,186b8 <alt_up_ps2_read_data_byte_timeout+0x20>
   1870c:	e0bffe17 	ldw	r2,-8(fp)
   18710:	10c00c17 	ldw	r3,48(r2)
   18714:	e0bffc17 	ldw	r2,-16(fp)
   18718:	18bfe72e 	bgeu	r3,r2,186b8 <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
   1871c:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   18720:	e037883a 	mov	sp,fp
   18724:	dfc00117 	ldw	ra,4(sp)
   18728:	df000017 	ldw	fp,0(sp)
   1872c:	dec00204 	addi	sp,sp,8
   18730:	f800283a 	ret

00018734 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   18734:	defffb04 	addi	sp,sp,-20
   18738:	dfc00415 	stw	ra,16(sp)
   1873c:	df000315 	stw	fp,12(sp)
   18740:	df000304 	addi	fp,sp,12
   18744:	e13ffe15 	stw	r4,-8(fp)
   18748:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1874c:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   18750:	e0bffe17 	ldw	r2,-8(fp)
   18754:	10800a17 	ldw	r2,40(r2)
   18758:	10800037 	ldwio	r2,0(r2)
   1875c:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   18760:	e13ffd17 	ldw	r4,-12(fp)
   18764:	00183740 	call	18374 <read_data_valid>
   18768:	10803fcc 	andi	r2,r2,255
   1876c:	10000726 	beq	r2,zero,1878c <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   18770:	e13ffd17 	ldw	r4,-12(fp)
   18774:	00183a80 	call	183a8 <read_data_byte>
   18778:	1007883a 	mov	r3,r2
   1877c:	e0bfff17 	ldw	r2,-4(fp)
   18780:	10c00005 	stb	r3,0(r2)
		return 0;
   18784:	0005883a 	mov	r2,zero
   18788:	00000106 	br	18790 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1878c:	00bfffc4 	movi	r2,-1
}
   18790:	e037883a 	mov	sp,fp
   18794:	dfc00117 	ldw	ra,4(sp)
   18798:	df000017 	ldw	fp,0(sp)
   1879c:	dec00204 	addi	sp,sp,8
   187a0:	f800283a 	ret

000187a4 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   187a4:	defffb04 	addi	sp,sp,-20
   187a8:	dfc00415 	stw	ra,16(sp)
   187ac:	df000315 	stw	fp,12(sp)
   187b0:	df000304 	addi	fp,sp,12
   187b4:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   187b8:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   187bc:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   187c0:	e0bfff17 	ldw	r2,-4(fp)
   187c4:	10800a17 	ldw	r2,40(r2)
   187c8:	10800037 	ldwio	r2,0(r2)
   187cc:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   187d0:	e13ffe17 	ldw	r4,-8(fp)
   187d4:	00183440 	call	18344 <read_num_bytes_available>
   187d8:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   187dc:	e0bffd0b 	ldhu	r2,-12(fp)
   187e0:	103ff71e 	bne	r2,zero,187c0 <alt_up_ps2_clear_fifo+0x1c>
}
   187e4:	0001883a 	nop
   187e8:	e037883a 	mov	sp,fp
   187ec:	dfc00117 	ldw	ra,4(sp)
   187f0:	df000017 	ldw	fp,0(sp)
   187f4:	dec00204 	addi	sp,sp,8
   187f8:	f800283a 	ret

000187fc <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   187fc:	defff804 	addi	sp,sp,-32
   18800:	dfc00715 	stw	ra,28(sp)
   18804:	df000615 	stw	fp,24(sp)
   18808:	df000604 	addi	fp,sp,24
   1880c:	e13ffd15 	stw	r4,-12(fp)
   18810:	e17ffe15 	stw	r5,-8(fp)
   18814:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   18818:	e0bffd17 	ldw	r2,-12(fp)
   1881c:	10800017 	ldw	r2,0(r2)
   18820:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   18824:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   18828:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1882c:	e0fffc17 	ldw	r3,-16(fp)
   18830:	e0bfff17 	ldw	r2,-4(fp)
   18834:	18bffd16 	blt	r3,r2,1882c <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   18838:	e0bffe17 	ldw	r2,-8(fp)
   1883c:	10c00044 	addi	r3,r2,1
   18840:	e0fffe15 	stw	r3,-8(fp)
   18844:	100b883a 	mov	r5,r2
   18848:	e13ffa17 	ldw	r4,-24(fp)
   1884c:	00186980 	call	18698 <alt_up_ps2_read_data_byte_timeout>
   18850:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   18854:	e0bffb17 	ldw	r2,-20(fp)
   18858:	10000226 	beq	r2,zero,18864 <alt_up_ps2_read_fd+0x68>
			return count;
   1885c:	e0bffc17 	ldw	r2,-16(fp)
   18860:	00000406 	br	18874 <alt_up_ps2_read_fd+0x78>
		count++;
   18864:	e0bffc17 	ldw	r2,-16(fp)
   18868:	10800044 	addi	r2,r2,1
   1886c:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   18870:	e0bffc17 	ldw	r2,-16(fp)
}
   18874:	e037883a 	mov	sp,fp
   18878:	dfc00117 	ldw	ra,4(sp)
   1887c:	df000017 	ldw	fp,0(sp)
   18880:	dec00204 	addi	sp,sp,8
   18884:	f800283a 	ret

00018888 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   18888:	defff804 	addi	sp,sp,-32
   1888c:	dfc00715 	stw	ra,28(sp)
   18890:	df000615 	stw	fp,24(sp)
   18894:	df000604 	addi	fp,sp,24
   18898:	e13ffd15 	stw	r4,-12(fp)
   1889c:	e17ffe15 	stw	r5,-8(fp)
   188a0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   188a4:	e0bffd17 	ldw	r2,-12(fp)
   188a8:	10800017 	ldw	r2,0(r2)
   188ac:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   188b0:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   188b4:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   188b8:	00001006 	br	188fc <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   188bc:	e0bffe17 	ldw	r2,-8(fp)
   188c0:	10c00044 	addi	r3,r2,1
   188c4:	e0fffe15 	stw	r3,-8(fp)
   188c8:	10800003 	ldbu	r2,0(r2)
   188cc:	10803fcc 	andi	r2,r2,255
   188d0:	100b883a 	mov	r5,r2
   188d4:	e13ffb17 	ldw	r4,-20(fp)
   188d8:	00185580 	call	18558 <alt_up_ps2_write_data_byte>
   188dc:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   188e0:	e0bffc17 	ldw	r2,-16(fp)
   188e4:	10000226 	beq	r2,zero,188f0 <alt_up_ps2_write_fd+0x68>
			return count;
   188e8:	e0bffa17 	ldw	r2,-24(fp)
   188ec:	00000706 	br	1890c <alt_up_ps2_write_fd+0x84>
		count++;
   188f0:	e0bffa17 	ldw	r2,-24(fp)
   188f4:	10800044 	addi	r2,r2,1
   188f8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   188fc:	e0fffa17 	ldw	r3,-24(fp)
   18900:	e0bfff17 	ldw	r2,-4(fp)
   18904:	18bfed16 	blt	r3,r2,188bc <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   18908:	e0bffa17 	ldw	r2,-24(fp)
}
   1890c:	e037883a 	mov	sp,fp
   18910:	dfc00117 	ldw	ra,4(sp)
   18914:	df000017 	ldw	fp,0(sp)
   18918:	dec00204 	addi	sp,sp,8
   1891c:	f800283a 	ret

00018920 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   18920:	defffc04 	addi	sp,sp,-16
   18924:	dfc00315 	stw	ra,12(sp)
   18928:	df000215 	stw	fp,8(sp)
   1892c:	df000204 	addi	fp,sp,8
   18930:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   18934:	d1602704 	addi	r5,gp,-32612
   18938:	e13fff17 	ldw	r4,-4(fp)
   1893c:	00191100 	call	19110 <alt_find_dev>
   18940:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   18944:	e0bffe17 	ldw	r2,-8(fp)
}
   18948:	e037883a 	mov	sp,fp
   1894c:	dfc00117 	ldw	ra,4(sp)
   18950:	df000017 	ldw	fp,0(sp)
   18954:	dec00204 	addi	sp,sp,8
   18958:	f800283a 	ret

0001895c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1895c:	defffd04 	addi	sp,sp,-12
   18960:	df000215 	stw	fp,8(sp)
   18964:	df000204 	addi	fp,sp,8
   18968:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1896c:	e0bfff17 	ldw	r2,-4(fp)
   18970:	10800a17 	ldw	r2,40(r2)
   18974:	10800104 	addi	r2,r2,4
   18978:	10800037 	ldwio	r2,0(r2)
   1897c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   18980:	e0bffe17 	ldw	r2,-8(fp)
   18984:	10800054 	ori	r2,r2,1
   18988:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1898c:	e0bfff17 	ldw	r2,-4(fp)
   18990:	10800a17 	ldw	r2,40(r2)
   18994:	10800104 	addi	r2,r2,4
   18998:	1007883a 	mov	r3,r2
   1899c:	e0bffe17 	ldw	r2,-8(fp)
   189a0:	18800035 	stwio	r2,0(r3)
}
   189a4:	0001883a 	nop
   189a8:	e037883a 	mov	sp,fp
   189ac:	df000017 	ldw	fp,0(sp)
   189b0:	dec00104 	addi	sp,sp,4
   189b4:	f800283a 	ret

000189b8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   189b8:	defffd04 	addi	sp,sp,-12
   189bc:	df000215 	stw	fp,8(sp)
   189c0:	df000204 	addi	fp,sp,8
   189c4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   189c8:	e0bfff17 	ldw	r2,-4(fp)
   189cc:	10800a17 	ldw	r2,40(r2)
   189d0:	10800104 	addi	r2,r2,4
   189d4:	10800037 	ldwio	r2,0(r2)
   189d8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   189dc:	e0fffe17 	ldw	r3,-8(fp)
   189e0:	00bfff84 	movi	r2,-2
   189e4:	1884703a 	and	r2,r3,r2
   189e8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   189ec:	e0bfff17 	ldw	r2,-4(fp)
   189f0:	10800a17 	ldw	r2,40(r2)
   189f4:	10800104 	addi	r2,r2,4
   189f8:	1007883a 	mov	r3,r2
   189fc:	e0bffe17 	ldw	r2,-8(fp)
   18a00:	18800035 	stwio	r2,0(r3)
}
   18a04:	0001883a 	nop
   18a08:	e037883a 	mov	sp,fp
   18a0c:	df000017 	ldw	fp,0(sp)
   18a10:	dec00104 	addi	sp,sp,4
   18a14:	f800283a 	ret

00018a18 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   18a18:	defffd04 	addi	sp,sp,-12
   18a1c:	df000215 	stw	fp,8(sp)
   18a20:	df000204 	addi	fp,sp,8
   18a24:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   18a28:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   18a2c:	e0bfff17 	ldw	r2,-4(fp)
   18a30:	10800a17 	ldw	r2,40(r2)
   18a34:	10800084 	addi	r2,r2,2
   18a38:	1080002b 	ldhuio	r2,0(r2)
   18a3c:	10bfffcc 	andi	r2,r2,65535
   18a40:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   18a44:	e0bffe0b 	ldhu	r2,-8(fp)
}
   18a48:	e037883a 	mov	sp,fp
   18a4c:	df000017 	ldw	fp,0(sp)
   18a50:	dec00104 	addi	sp,sp,4
   18a54:	f800283a 	ret

00018a58 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   18a58:	defffd04 	addi	sp,sp,-12
   18a5c:	df000215 	stw	fp,8(sp)
   18a60:	df000204 	addi	fp,sp,8
   18a64:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   18a68:	e0bfff17 	ldw	r2,-4(fp)
   18a6c:	10800a17 	ldw	r2,40(r2)
   18a70:	10800104 	addi	r2,r2,4
   18a74:	10800037 	ldwio	r2,0(r2)
   18a78:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   18a7c:	e0bffe17 	ldw	r2,-8(fp)
   18a80:	1004d43a 	srli	r2,r2,16
}
   18a84:	e037883a 	mov	sp,fp
   18a88:	df000017 	ldw	fp,0(sp)
   18a8c:	dec00104 	addi	sp,sp,4
   18a90:	f800283a 	ret

00018a94 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   18a94:	defffd04 	addi	sp,sp,-12
   18a98:	df000215 	stw	fp,8(sp)
   18a9c:	df000204 	addi	fp,sp,8
   18aa0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   18aa4:	e0bfff17 	ldw	r2,-4(fp)
   18aa8:	1080800c 	andi	r2,r2,512
   18aac:	1004d27a 	srli	r2,r2,9
   18ab0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   18ab4:	e0bffe17 	ldw	r2,-8(fp)
   18ab8:	10000226 	beq	r2,zero,18ac4 <alt_up_rs232_check_parity+0x30>
   18abc:	00bfffc4 	movi	r2,-1
   18ac0:	00000106 	br	18ac8 <alt_up_rs232_check_parity+0x34>
   18ac4:	0005883a 	mov	r2,zero
}
   18ac8:	e037883a 	mov	sp,fp
   18acc:	df000017 	ldw	fp,0(sp)
   18ad0:	dec00104 	addi	sp,sp,4
   18ad4:	f800283a 	ret

00018ad8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   18ad8:	defffd04 	addi	sp,sp,-12
   18adc:	df000215 	stw	fp,8(sp)
   18ae0:	df000204 	addi	fp,sp,8
   18ae4:	e13ffe15 	stw	r4,-8(fp)
   18ae8:	2805883a 	mov	r2,r5
   18aec:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   18af0:	e0bffe17 	ldw	r2,-8(fp)
   18af4:	10800a17 	ldw	r2,40(r2)
   18af8:	1007883a 	mov	r3,r2
   18afc:	e0bfff03 	ldbu	r2,-4(fp)
   18b00:	18800035 	stwio	r2,0(r3)
	return 0;
   18b04:	0005883a 	mov	r2,zero
}
   18b08:	e037883a 	mov	sp,fp
   18b0c:	df000017 	ldw	fp,0(sp)
   18b10:	dec00104 	addi	sp,sp,4
   18b14:	f800283a 	ret

00018b18 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   18b18:	defffa04 	addi	sp,sp,-24
   18b1c:	dfc00515 	stw	ra,20(sp)
   18b20:	df000415 	stw	fp,16(sp)
   18b24:	df000404 	addi	fp,sp,16
   18b28:	e13ffd15 	stw	r4,-12(fp)
   18b2c:	e17ffe15 	stw	r5,-8(fp)
   18b30:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   18b34:	e0bffd17 	ldw	r2,-12(fp)
   18b38:	10800a17 	ldw	r2,40(r2)
   18b3c:	10800037 	ldwio	r2,0(r2)
   18b40:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   18b44:	e0bffc17 	ldw	r2,-16(fp)
   18b48:	1007883a 	mov	r3,r2
   18b4c:	e0bffe17 	ldw	r2,-8(fp)
   18b50:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   18b54:	e13ffc17 	ldw	r4,-16(fp)
   18b58:	0018a940 	call	18a94 <alt_up_rs232_check_parity>
   18b5c:	1007883a 	mov	r3,r2
   18b60:	e0bfff17 	ldw	r2,-4(fp)
   18b64:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   18b68:	e0bffc17 	ldw	r2,-16(fp)
   18b6c:	10a0000c 	andi	r2,r2,32768
   18b70:	1004d3fa 	srli	r2,r2,15
   18b74:	10bfffc4 	addi	r2,r2,-1
}
   18b78:	e037883a 	mov	sp,fp
   18b7c:	dfc00117 	ldw	ra,4(sp)
   18b80:	df000017 	ldw	fp,0(sp)
   18b84:	dec00204 	addi	sp,sp,8
   18b88:	f800283a 	ret

00018b8c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   18b8c:	defff804 	addi	sp,sp,-32
   18b90:	dfc00715 	stw	ra,28(sp)
   18b94:	df000615 	stw	fp,24(sp)
   18b98:	df000604 	addi	fp,sp,24
   18b9c:	e13ffd15 	stw	r4,-12(fp)
   18ba0:	e17ffe15 	stw	r5,-8(fp)
   18ba4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   18ba8:	e0bffd17 	ldw	r2,-12(fp)
   18bac:	10800017 	ldw	r2,0(r2)
   18bb0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   18bb4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   18bb8:	00000c06 	br	18bec <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   18bbc:	e0bffe17 	ldw	r2,-8(fp)
   18bc0:	10c00044 	addi	r3,r2,1
   18bc4:	e0fffe15 	stw	r3,-8(fp)
   18bc8:	e0fffc04 	addi	r3,fp,-16
   18bcc:	180d883a 	mov	r6,r3
   18bd0:	100b883a 	mov	r5,r2
   18bd4:	e13ffb17 	ldw	r4,-20(fp)
   18bd8:	0018b180 	call	18b18 <alt_up_rs232_read_data>
   18bdc:	1000081e 	bne	r2,zero,18c00 <alt_up_rs232_read_fd+0x74>
			count++;
   18be0:	e0bffa17 	ldw	r2,-24(fp)
   18be4:	10800044 	addi	r2,r2,1
   18be8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   18bec:	e0bfff17 	ldw	r2,-4(fp)
   18bf0:	10ffffc4 	addi	r3,r2,-1
   18bf4:	e0ffff15 	stw	r3,-4(fp)
   18bf8:	103ff01e 	bne	r2,zero,18bbc <alt_up_rs232_read_fd+0x30>
   18bfc:	00000106 	br	18c04 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   18c00:	0001883a 	nop
	}
	return count;
   18c04:	e0bffa17 	ldw	r2,-24(fp)
}
   18c08:	e037883a 	mov	sp,fp
   18c0c:	dfc00117 	ldw	ra,4(sp)
   18c10:	df000017 	ldw	fp,0(sp)
   18c14:	dec00204 	addi	sp,sp,8
   18c18:	f800283a 	ret

00018c1c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   18c1c:	defff904 	addi	sp,sp,-28
   18c20:	dfc00615 	stw	ra,24(sp)
   18c24:	df000515 	stw	fp,20(sp)
   18c28:	df000504 	addi	fp,sp,20
   18c2c:	e13ffd15 	stw	r4,-12(fp)
   18c30:	e17ffe15 	stw	r5,-8(fp)
   18c34:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   18c38:	e0bffd17 	ldw	r2,-12(fp)
   18c3c:	10800017 	ldw	r2,0(r2)
   18c40:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   18c44:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   18c48:	00000d06 	br	18c80 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   18c4c:	e0bffe17 	ldw	r2,-8(fp)
   18c50:	10800003 	ldbu	r2,0(r2)
   18c54:	10803fcc 	andi	r2,r2,255
   18c58:	100b883a 	mov	r5,r2
   18c5c:	e13ffc17 	ldw	r4,-16(fp)
   18c60:	0018ad80 	call	18ad8 <alt_up_rs232_write_data>
   18c64:	10000b1e 	bne	r2,zero,18c94 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   18c68:	e0bffb17 	ldw	r2,-20(fp)
   18c6c:	10800044 	addi	r2,r2,1
   18c70:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   18c74:	e0bffe17 	ldw	r2,-8(fp)
   18c78:	10800044 	addi	r2,r2,1
   18c7c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   18c80:	e0bfff17 	ldw	r2,-4(fp)
   18c84:	10ffffc4 	addi	r3,r2,-1
   18c88:	e0ffff15 	stw	r3,-4(fp)
   18c8c:	103fef1e 	bne	r2,zero,18c4c <alt_up_rs232_write_fd+0x30>
   18c90:	00000106 	br	18c98 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   18c94:	0001883a 	nop
	}
	return count;
   18c98:	e0bffb17 	ldw	r2,-20(fp)
}
   18c9c:	e037883a 	mov	sp,fp
   18ca0:	dfc00117 	ldw	ra,4(sp)
   18ca4:	df000017 	ldw	fp,0(sp)
   18ca8:	dec00204 	addi	sp,sp,8
   18cac:	f800283a 	ret

00018cb0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   18cb0:	defffc04 	addi	sp,sp,-16
   18cb4:	dfc00315 	stw	ra,12(sp)
   18cb8:	df000215 	stw	fp,8(sp)
   18cbc:	df000204 	addi	fp,sp,8
   18cc0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   18cc4:	d1602704 	addi	r5,gp,-32612
   18cc8:	e13fff17 	ldw	r4,-4(fp)
   18ccc:	00191100 	call	19110 <alt_find_dev>
   18cd0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   18cd4:	e0bffe17 	ldw	r2,-8(fp)
}
   18cd8:	e037883a 	mov	sp,fp
   18cdc:	dfc00117 	ldw	ra,4(sp)
   18ce0:	df000017 	ldw	fp,0(sp)
   18ce4:	dec00204 	addi	sp,sp,8
   18ce8:	f800283a 	ret

00018cec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   18cec:	defff504 	addi	sp,sp,-44
   18cf0:	df000a15 	stw	fp,40(sp)
   18cf4:	df000a04 	addi	fp,sp,40
   18cf8:	e13ffc15 	stw	r4,-16(fp)
   18cfc:	e17ffd15 	stw	r5,-12(fp)
   18d00:	e1bffe15 	stw	r6,-8(fp)
   18d04:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   18d08:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   18d0c:	d0a80517 	ldw	r2,-24556(gp)
  
  if (alt_ticks_per_second ())
   18d10:	10003c26 	beq	r2,zero,18e04 <alt_alarm_start+0x118>
  {
    if (alarm)
   18d14:	e0bffc17 	ldw	r2,-16(fp)
   18d18:	10003826 	beq	r2,zero,18dfc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   18d1c:	e0bffc17 	ldw	r2,-16(fp)
   18d20:	e0fffe17 	ldw	r3,-8(fp)
   18d24:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   18d28:	e0bffc17 	ldw	r2,-16(fp)
   18d2c:	e0ffff17 	ldw	r3,-4(fp)
   18d30:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18d34:	0005303a 	rdctl	r2,status
   18d38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18d3c:	e0fff917 	ldw	r3,-28(fp)
   18d40:	00bfff84 	movi	r2,-2
   18d44:	1884703a 	and	r2,r3,r2
   18d48:	1001703a 	wrctl	status,r2
  
  return context;
   18d4c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   18d50:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   18d54:	d0a80617 	ldw	r2,-24552(gp)
      
      current_nticks = alt_nticks();
   18d58:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   18d5c:	e0fffd17 	ldw	r3,-12(fp)
   18d60:	e0bff617 	ldw	r2,-40(fp)
   18d64:	1885883a 	add	r2,r3,r2
   18d68:	10c00044 	addi	r3,r2,1
   18d6c:	e0bffc17 	ldw	r2,-16(fp)
   18d70:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   18d74:	e0bffc17 	ldw	r2,-16(fp)
   18d78:	10c00217 	ldw	r3,8(r2)
   18d7c:	e0bff617 	ldw	r2,-40(fp)
   18d80:	1880042e 	bgeu	r3,r2,18d94 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   18d84:	e0bffc17 	ldw	r2,-16(fp)
   18d88:	00c00044 	movi	r3,1
   18d8c:	10c00405 	stb	r3,16(r2)
   18d90:	00000206 	br	18d9c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   18d94:	e0bffc17 	ldw	r2,-16(fp)
   18d98:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   18d9c:	e0bffc17 	ldw	r2,-16(fp)
   18da0:	d0e02c04 	addi	r3,gp,-32592
   18da4:	e0fffa15 	stw	r3,-24(fp)
   18da8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   18dac:	e0bffb17 	ldw	r2,-20(fp)
   18db0:	e0fffa17 	ldw	r3,-24(fp)
   18db4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   18db8:	e0bffa17 	ldw	r2,-24(fp)
   18dbc:	10c00017 	ldw	r3,0(r2)
   18dc0:	e0bffb17 	ldw	r2,-20(fp)
   18dc4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   18dc8:	e0bffa17 	ldw	r2,-24(fp)
   18dcc:	10800017 	ldw	r2,0(r2)
   18dd0:	e0fffb17 	ldw	r3,-20(fp)
   18dd4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   18dd8:	e0bffa17 	ldw	r2,-24(fp)
   18ddc:	e0fffb17 	ldw	r3,-20(fp)
   18de0:	10c00015 	stw	r3,0(r2)
   18de4:	e0bff817 	ldw	r2,-32(fp)
   18de8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18dec:	e0bff717 	ldw	r2,-36(fp)
   18df0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   18df4:	0005883a 	mov	r2,zero
   18df8:	00000306 	br	18e08 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   18dfc:	00bffa84 	movi	r2,-22
   18e00:	00000106 	br	18e08 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   18e04:	00bfde84 	movi	r2,-134
  }
}
   18e08:	e037883a 	mov	sp,fp
   18e0c:	df000017 	ldw	fp,0(sp)
   18e10:	dec00104 	addi	sp,sp,4
   18e14:	f800283a 	ret

00018e18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18e18:	defffe04 	addi	sp,sp,-8
   18e1c:	dfc00115 	stw	ra,4(sp)
   18e20:	df000015 	stw	fp,0(sp)
   18e24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18e28:	d0a02a17 	ldw	r2,-32600(gp)
   18e2c:	10000326 	beq	r2,zero,18e3c <alt_get_errno+0x24>
   18e30:	d0a02a17 	ldw	r2,-32600(gp)
   18e34:	103ee83a 	callr	r2
   18e38:	00000106 	br	18e40 <alt_get_errno+0x28>
   18e3c:	d0a7e004 	addi	r2,gp,-24704
}
   18e40:	e037883a 	mov	sp,fp
   18e44:	dfc00117 	ldw	ra,4(sp)
   18e48:	df000017 	ldw	fp,0(sp)
   18e4c:	dec00204 	addi	sp,sp,8
   18e50:	f800283a 	ret

00018e54 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   18e54:	defffb04 	addi	sp,sp,-20
   18e58:	dfc00415 	stw	ra,16(sp)
   18e5c:	df000315 	stw	fp,12(sp)
   18e60:	df000304 	addi	fp,sp,12
   18e64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   18e68:	e0bfff17 	ldw	r2,-4(fp)
   18e6c:	10000616 	blt	r2,zero,18e88 <close+0x34>
   18e70:	e0bfff17 	ldw	r2,-4(fp)
   18e74:	10c00324 	muli	r3,r2,12
   18e78:	008000b4 	movhi	r2,2
   18e7c:	10b24104 	addi	r2,r2,-14076
   18e80:	1885883a 	add	r2,r3,r2
   18e84:	00000106 	br	18e8c <close+0x38>
   18e88:	0005883a 	mov	r2,zero
   18e8c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   18e90:	e0bffd17 	ldw	r2,-12(fp)
   18e94:	10001926 	beq	r2,zero,18efc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   18e98:	e0bffd17 	ldw	r2,-12(fp)
   18e9c:	10800017 	ldw	r2,0(r2)
   18ea0:	10800417 	ldw	r2,16(r2)
   18ea4:	10000626 	beq	r2,zero,18ec0 <close+0x6c>
   18ea8:	e0bffd17 	ldw	r2,-12(fp)
   18eac:	10800017 	ldw	r2,0(r2)
   18eb0:	10800417 	ldw	r2,16(r2)
   18eb4:	e13ffd17 	ldw	r4,-12(fp)
   18eb8:	103ee83a 	callr	r2
   18ebc:	00000106 	br	18ec4 <close+0x70>
   18ec0:	0005883a 	mov	r2,zero
   18ec4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   18ec8:	e13fff17 	ldw	r4,-4(fp)
   18ecc:	00196e80 	call	196e8 <alt_release_fd>
    if (rval < 0)
   18ed0:	e0bffe17 	ldw	r2,-8(fp)
   18ed4:	1000070e 	bge	r2,zero,18ef4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   18ed8:	0018e180 	call	18e18 <alt_get_errno>
   18edc:	1007883a 	mov	r3,r2
   18ee0:	e0bffe17 	ldw	r2,-8(fp)
   18ee4:	0085c83a 	sub	r2,zero,r2
   18ee8:	18800015 	stw	r2,0(r3)
      return -1;
   18eec:	00bfffc4 	movi	r2,-1
   18ef0:	00000706 	br	18f10 <close+0xbc>
    }
    return 0;
   18ef4:	0005883a 	mov	r2,zero
   18ef8:	00000506 	br	18f10 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   18efc:	0018e180 	call	18e18 <alt_get_errno>
   18f00:	1007883a 	mov	r3,r2
   18f04:	00801444 	movi	r2,81
   18f08:	18800015 	stw	r2,0(r3)
    return -1;
   18f0c:	00bfffc4 	movi	r2,-1
  }
}
   18f10:	e037883a 	mov	sp,fp
   18f14:	dfc00117 	ldw	ra,4(sp)
   18f18:	df000017 	ldw	fp,0(sp)
   18f1c:	dec00204 	addi	sp,sp,8
   18f20:	f800283a 	ret

00018f24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   18f24:	deffff04 	addi	sp,sp,-4
   18f28:	df000015 	stw	fp,0(sp)
   18f2c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   18f30:	0001883a 	nop
   18f34:	e037883a 	mov	sp,fp
   18f38:	df000017 	ldw	fp,0(sp)
   18f3c:	dec00104 	addi	sp,sp,4
   18f40:	f800283a 	ret

00018f44 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   18f44:	defffc04 	addi	sp,sp,-16
   18f48:	df000315 	stw	fp,12(sp)
   18f4c:	df000304 	addi	fp,sp,12
   18f50:	e13ffd15 	stw	r4,-12(fp)
   18f54:	e17ffe15 	stw	r5,-8(fp)
   18f58:	e1bfff15 	stw	r6,-4(fp)
  return len;
   18f5c:	e0bfff17 	ldw	r2,-4(fp)
}
   18f60:	e037883a 	mov	sp,fp
   18f64:	df000017 	ldw	fp,0(sp)
   18f68:	dec00104 	addi	sp,sp,4
   18f6c:	f800283a 	ret

00018f70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18f70:	defffe04 	addi	sp,sp,-8
   18f74:	dfc00115 	stw	ra,4(sp)
   18f78:	df000015 	stw	fp,0(sp)
   18f7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18f80:	d0a02a17 	ldw	r2,-32600(gp)
   18f84:	10000326 	beq	r2,zero,18f94 <alt_get_errno+0x24>
   18f88:	d0a02a17 	ldw	r2,-32600(gp)
   18f8c:	103ee83a 	callr	r2
   18f90:	00000106 	br	18f98 <alt_get_errno+0x28>
   18f94:	d0a7e004 	addi	r2,gp,-24704
}
   18f98:	e037883a 	mov	sp,fp
   18f9c:	dfc00117 	ldw	ra,4(sp)
   18fa0:	df000017 	ldw	fp,0(sp)
   18fa4:	dec00204 	addi	sp,sp,8
   18fa8:	f800283a 	ret

00018fac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   18fac:	defffa04 	addi	sp,sp,-24
   18fb0:	dfc00515 	stw	ra,20(sp)
   18fb4:	df000415 	stw	fp,16(sp)
   18fb8:	df000404 	addi	fp,sp,16
   18fbc:	e13ffe15 	stw	r4,-8(fp)
   18fc0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   18fc4:	e0bffe17 	ldw	r2,-8(fp)
   18fc8:	10000326 	beq	r2,zero,18fd8 <alt_dev_llist_insert+0x2c>
   18fcc:	e0bffe17 	ldw	r2,-8(fp)
   18fd0:	10800217 	ldw	r2,8(r2)
   18fd4:	1000061e 	bne	r2,zero,18ff0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   18fd8:	0018f700 	call	18f70 <alt_get_errno>
   18fdc:	1007883a 	mov	r3,r2
   18fe0:	00800584 	movi	r2,22
   18fe4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   18fe8:	00bffa84 	movi	r2,-22
   18fec:	00001306 	br	1903c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   18ff0:	e0bffe17 	ldw	r2,-8(fp)
   18ff4:	e0ffff17 	ldw	r3,-4(fp)
   18ff8:	e0fffc15 	stw	r3,-16(fp)
   18ffc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   19000:	e0bffd17 	ldw	r2,-12(fp)
   19004:	e0fffc17 	ldw	r3,-16(fp)
   19008:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1900c:	e0bffc17 	ldw	r2,-16(fp)
   19010:	10c00017 	ldw	r3,0(r2)
   19014:	e0bffd17 	ldw	r2,-12(fp)
   19018:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1901c:	e0bffc17 	ldw	r2,-16(fp)
   19020:	10800017 	ldw	r2,0(r2)
   19024:	e0fffd17 	ldw	r3,-12(fp)
   19028:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1902c:	e0bffc17 	ldw	r2,-16(fp)
   19030:	e0fffd17 	ldw	r3,-12(fp)
   19034:	10c00015 	stw	r3,0(r2)

  return 0;  
   19038:	0005883a 	mov	r2,zero
}
   1903c:	e037883a 	mov	sp,fp
   19040:	dfc00117 	ldw	ra,4(sp)
   19044:	df000017 	ldw	fp,0(sp)
   19048:	dec00204 	addi	sp,sp,8
   1904c:	f800283a 	ret

00019050 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   19050:	defffd04 	addi	sp,sp,-12
   19054:	dfc00215 	stw	ra,8(sp)
   19058:	df000115 	stw	fp,4(sp)
   1905c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   19060:	008000b4 	movhi	r2,2
   19064:	10a8cf04 	addi	r2,r2,-23748
   19068:	e0bfff15 	stw	r2,-4(fp)
   1906c:	00000606 	br	19088 <_do_ctors+0x38>
        (*ctor) (); 
   19070:	e0bfff17 	ldw	r2,-4(fp)
   19074:	10800017 	ldw	r2,0(r2)
   19078:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1907c:	e0bfff17 	ldw	r2,-4(fp)
   19080:	10bfff04 	addi	r2,r2,-4
   19084:	e0bfff15 	stw	r2,-4(fp)
   19088:	e0ffff17 	ldw	r3,-4(fp)
   1908c:	008000b4 	movhi	r2,2
   19090:	10a8d004 	addi	r2,r2,-23744
   19094:	18bff62e 	bgeu	r3,r2,19070 <_do_ctors+0x20>
        (*ctor) (); 
}
   19098:	0001883a 	nop
   1909c:	e037883a 	mov	sp,fp
   190a0:	dfc00117 	ldw	ra,4(sp)
   190a4:	df000017 	ldw	fp,0(sp)
   190a8:	dec00204 	addi	sp,sp,8
   190ac:	f800283a 	ret

000190b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   190b0:	defffd04 	addi	sp,sp,-12
   190b4:	dfc00215 	stw	ra,8(sp)
   190b8:	df000115 	stw	fp,4(sp)
   190bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   190c0:	008000b4 	movhi	r2,2
   190c4:	10a8cf04 	addi	r2,r2,-23748
   190c8:	e0bfff15 	stw	r2,-4(fp)
   190cc:	00000606 	br	190e8 <_do_dtors+0x38>
        (*dtor) (); 
   190d0:	e0bfff17 	ldw	r2,-4(fp)
   190d4:	10800017 	ldw	r2,0(r2)
   190d8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   190dc:	e0bfff17 	ldw	r2,-4(fp)
   190e0:	10bfff04 	addi	r2,r2,-4
   190e4:	e0bfff15 	stw	r2,-4(fp)
   190e8:	e0ffff17 	ldw	r3,-4(fp)
   190ec:	008000b4 	movhi	r2,2
   190f0:	10a8d004 	addi	r2,r2,-23744
   190f4:	18bff62e 	bgeu	r3,r2,190d0 <_do_dtors+0x20>
        (*dtor) (); 
}
   190f8:	0001883a 	nop
   190fc:	e037883a 	mov	sp,fp
   19100:	dfc00117 	ldw	ra,4(sp)
   19104:	df000017 	ldw	fp,0(sp)
   19108:	dec00204 	addi	sp,sp,8
   1910c:	f800283a 	ret

00019110 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   19110:	defffa04 	addi	sp,sp,-24
   19114:	dfc00515 	stw	ra,20(sp)
   19118:	df000415 	stw	fp,16(sp)
   1911c:	df000404 	addi	fp,sp,16
   19120:	e13ffe15 	stw	r4,-8(fp)
   19124:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   19128:	e0bfff17 	ldw	r2,-4(fp)
   1912c:	10800017 	ldw	r2,0(r2)
   19130:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   19134:	e13ffe17 	ldw	r4,-8(fp)
   19138:	00074bc0 	call	74bc <strlen>
   1913c:	10800044 	addi	r2,r2,1
   19140:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   19144:	00000d06 	br	1917c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   19148:	e0bffc17 	ldw	r2,-16(fp)
   1914c:	10800217 	ldw	r2,8(r2)
   19150:	e0fffd17 	ldw	r3,-12(fp)
   19154:	180d883a 	mov	r6,r3
   19158:	e17ffe17 	ldw	r5,-8(fp)
   1915c:	1009883a 	mov	r4,r2
   19160:	0019ff80 	call	19ff8 <memcmp>
   19164:	1000021e 	bne	r2,zero,19170 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   19168:	e0bffc17 	ldw	r2,-16(fp)
   1916c:	00000706 	br	1918c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   19170:	e0bffc17 	ldw	r2,-16(fp)
   19174:	10800017 	ldw	r2,0(r2)
   19178:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1917c:	e0fffc17 	ldw	r3,-16(fp)
   19180:	e0bfff17 	ldw	r2,-4(fp)
   19184:	18bff01e 	bne	r3,r2,19148 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   19188:	0005883a 	mov	r2,zero
}
   1918c:	e037883a 	mov	sp,fp
   19190:	dfc00117 	ldw	ra,4(sp)
   19194:	df000017 	ldw	fp,0(sp)
   19198:	dec00204 	addi	sp,sp,8
   1919c:	f800283a 	ret

000191a0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   191a0:	defffe04 	addi	sp,sp,-8
   191a4:	dfc00115 	stw	ra,4(sp)
   191a8:	df000015 	stw	fp,0(sp)
   191ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   191b0:	01440004 	movi	r5,4096
   191b4:	0009883a 	mov	r4,zero
   191b8:	0019e800 	call	19e80 <alt_icache_flush>
#endif
}
   191bc:	0001883a 	nop
   191c0:	e037883a 	mov	sp,fp
   191c4:	dfc00117 	ldw	ra,4(sp)
   191c8:	df000017 	ldw	fp,0(sp)
   191cc:	dec00204 	addi	sp,sp,8
   191d0:	f800283a 	ret

000191d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   191d4:	defff904 	addi	sp,sp,-28
   191d8:	dfc00615 	stw	ra,24(sp)
   191dc:	df000515 	stw	fp,20(sp)
   191e0:	df000504 	addi	fp,sp,20
   191e4:	e13ffc15 	stw	r4,-16(fp)
   191e8:	e17ffd15 	stw	r5,-12(fp)
   191ec:	e1bffe15 	stw	r6,-8(fp)
   191f0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   191f4:	e1bfff17 	ldw	r6,-4(fp)
   191f8:	e17ffe17 	ldw	r5,-8(fp)
   191fc:	e13ffd17 	ldw	r4,-12(fp)
   19200:	00195940 	call	19594 <open>
   19204:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   19208:	e0bffb17 	ldw	r2,-20(fp)
   1920c:	10001c16 	blt	r2,zero,19280 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   19210:	008000b4 	movhi	r2,2
   19214:	10b24104 	addi	r2,r2,-14076
   19218:	e0fffb17 	ldw	r3,-20(fp)
   1921c:	18c00324 	muli	r3,r3,12
   19220:	10c5883a 	add	r2,r2,r3
   19224:	10c00017 	ldw	r3,0(r2)
   19228:	e0bffc17 	ldw	r2,-16(fp)
   1922c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   19230:	008000b4 	movhi	r2,2
   19234:	10b24104 	addi	r2,r2,-14076
   19238:	e0fffb17 	ldw	r3,-20(fp)
   1923c:	18c00324 	muli	r3,r3,12
   19240:	10c5883a 	add	r2,r2,r3
   19244:	10800104 	addi	r2,r2,4
   19248:	10c00017 	ldw	r3,0(r2)
   1924c:	e0bffc17 	ldw	r2,-16(fp)
   19250:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   19254:	008000b4 	movhi	r2,2
   19258:	10b24104 	addi	r2,r2,-14076
   1925c:	e0fffb17 	ldw	r3,-20(fp)
   19260:	18c00324 	muli	r3,r3,12
   19264:	10c5883a 	add	r2,r2,r3
   19268:	10800204 	addi	r2,r2,8
   1926c:	10c00017 	ldw	r3,0(r2)
   19270:	e0bffc17 	ldw	r2,-16(fp)
   19274:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   19278:	e13ffb17 	ldw	r4,-20(fp)
   1927c:	00196e80 	call	196e8 <alt_release_fd>
  }
} 
   19280:	0001883a 	nop
   19284:	e037883a 	mov	sp,fp
   19288:	dfc00117 	ldw	ra,4(sp)
   1928c:	df000017 	ldw	fp,0(sp)
   19290:	dec00204 	addi	sp,sp,8
   19294:	f800283a 	ret

00019298 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   19298:	defffb04 	addi	sp,sp,-20
   1929c:	dfc00415 	stw	ra,16(sp)
   192a0:	df000315 	stw	fp,12(sp)
   192a4:	df000304 	addi	fp,sp,12
   192a8:	e13ffd15 	stw	r4,-12(fp)
   192ac:	e17ffe15 	stw	r5,-8(fp)
   192b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   192b4:	01c07fc4 	movi	r7,511
   192b8:	01800044 	movi	r6,1
   192bc:	e17ffd17 	ldw	r5,-12(fp)
   192c0:	010000b4 	movhi	r4,2
   192c4:	21324404 	addi	r4,r4,-14064
   192c8:	00191d40 	call	191d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   192cc:	01c07fc4 	movi	r7,511
   192d0:	000d883a 	mov	r6,zero
   192d4:	e17ffe17 	ldw	r5,-8(fp)
   192d8:	010000b4 	movhi	r4,2
   192dc:	21324104 	addi	r4,r4,-14076
   192e0:	00191d40 	call	191d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   192e4:	01c07fc4 	movi	r7,511
   192e8:	01800044 	movi	r6,1
   192ec:	e17fff17 	ldw	r5,-4(fp)
   192f0:	010000b4 	movhi	r4,2
   192f4:	21324704 	addi	r4,r4,-14052
   192f8:	00191d40 	call	191d4 <alt_open_fd>
}  
   192fc:	0001883a 	nop
   19300:	e037883a 	mov	sp,fp
   19304:	dfc00117 	ldw	ra,4(sp)
   19308:	df000017 	ldw	fp,0(sp)
   1930c:	dec00204 	addi	sp,sp,8
   19310:	f800283a 	ret

00019314 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   19314:	defff004 	addi	sp,sp,-64
   19318:	df000f15 	stw	fp,60(sp)
   1931c:	df000f04 	addi	fp,sp,60
   19320:	e13ffd15 	stw	r4,-12(fp)
   19324:	e17ffe15 	stw	r5,-8(fp)
   19328:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1932c:	00bffa84 	movi	r2,-22
   19330:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   19334:	e0bffd17 	ldw	r2,-12(fp)
   19338:	10800828 	cmpgeui	r2,r2,32
   1933c:	1000501e 	bne	r2,zero,19480 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19340:	0005303a 	rdctl	r2,status
   19344:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19348:	e0fff617 	ldw	r3,-40(fp)
   1934c:	00bfff84 	movi	r2,-2
   19350:	1884703a 	and	r2,r3,r2
   19354:	1001703a 	wrctl	status,r2
  
  return context;
   19358:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1935c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   19360:	008000f4 	movhi	r2,3
   19364:	1096e404 	addi	r2,r2,23440
   19368:	e0fffd17 	ldw	r3,-12(fp)
   1936c:	180690fa 	slli	r3,r3,3
   19370:	10c5883a 	add	r2,r2,r3
   19374:	e0ffff17 	ldw	r3,-4(fp)
   19378:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1937c:	008000f4 	movhi	r2,3
   19380:	1096e404 	addi	r2,r2,23440
   19384:	e0fffd17 	ldw	r3,-12(fp)
   19388:	180690fa 	slli	r3,r3,3
   1938c:	10c5883a 	add	r2,r2,r3
   19390:	10800104 	addi	r2,r2,4
   19394:	e0fffe17 	ldw	r3,-8(fp)
   19398:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1939c:	e0bfff17 	ldw	r2,-4(fp)
   193a0:	10001926 	beq	r2,zero,19408 <alt_irq_register+0xf4>
   193a4:	e0bffd17 	ldw	r2,-12(fp)
   193a8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   193ac:	0005303a 	rdctl	r2,status
   193b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   193b4:	e0fff717 	ldw	r3,-36(fp)
   193b8:	00bfff84 	movi	r2,-2
   193bc:	1884703a 	and	r2,r3,r2
   193c0:	1001703a 	wrctl	status,r2
  
  return context;
   193c4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   193c8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   193cc:	00c00044 	movi	r3,1
   193d0:	e0bff217 	ldw	r2,-56(fp)
   193d4:	1884983a 	sll	r2,r3,r2
   193d8:	1007883a 	mov	r3,r2
   193dc:	d0a80417 	ldw	r2,-24560(gp)
   193e0:	1884b03a 	or	r2,r3,r2
   193e4:	d0a80415 	stw	r2,-24560(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   193e8:	d0a80417 	ldw	r2,-24560(gp)
   193ec:	100170fa 	wrctl	ienable,r2
   193f0:	e0bff817 	ldw	r2,-32(fp)
   193f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   193f8:	e0bff917 	ldw	r2,-28(fp)
   193fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   19400:	0005883a 	mov	r2,zero
   19404:	00001906 	br	1946c <alt_irq_register+0x158>
   19408:	e0bffd17 	ldw	r2,-12(fp)
   1940c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19410:	0005303a 	rdctl	r2,status
   19414:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19418:	e0fffa17 	ldw	r3,-24(fp)
   1941c:	00bfff84 	movi	r2,-2
   19420:	1884703a 	and	r2,r3,r2
   19424:	1001703a 	wrctl	status,r2
  
  return context;
   19428:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1942c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   19430:	00c00044 	movi	r3,1
   19434:	e0bff417 	ldw	r2,-48(fp)
   19438:	1884983a 	sll	r2,r3,r2
   1943c:	0084303a 	nor	r2,zero,r2
   19440:	1007883a 	mov	r3,r2
   19444:	d0a80417 	ldw	r2,-24560(gp)
   19448:	1884703a 	and	r2,r3,r2
   1944c:	d0a80415 	stw	r2,-24560(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   19450:	d0a80417 	ldw	r2,-24560(gp)
   19454:	100170fa 	wrctl	ienable,r2
   19458:	e0bffb17 	ldw	r2,-20(fp)
   1945c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19460:	e0bffc17 	ldw	r2,-16(fp)
   19464:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   19468:	0005883a 	mov	r2,zero
   1946c:	e0bff115 	stw	r2,-60(fp)
   19470:	e0bff317 	ldw	r2,-52(fp)
   19474:	e0bff515 	stw	r2,-44(fp)
   19478:	e0bff517 	ldw	r2,-44(fp)
   1947c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   19480:	e0bff117 	ldw	r2,-60(fp)
}
   19484:	e037883a 	mov	sp,fp
   19488:	df000017 	ldw	fp,0(sp)
   1948c:	dec00104 	addi	sp,sp,4
   19490:	f800283a 	ret

00019494 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19494:	defffe04 	addi	sp,sp,-8
   19498:	dfc00115 	stw	ra,4(sp)
   1949c:	df000015 	stw	fp,0(sp)
   194a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   194a4:	d0a02a17 	ldw	r2,-32600(gp)
   194a8:	10000326 	beq	r2,zero,194b8 <alt_get_errno+0x24>
   194ac:	d0a02a17 	ldw	r2,-32600(gp)
   194b0:	103ee83a 	callr	r2
   194b4:	00000106 	br	194bc <alt_get_errno+0x28>
   194b8:	d0a7e004 	addi	r2,gp,-24704
}
   194bc:	e037883a 	mov	sp,fp
   194c0:	dfc00117 	ldw	ra,4(sp)
   194c4:	df000017 	ldw	fp,0(sp)
   194c8:	dec00204 	addi	sp,sp,8
   194cc:	f800283a 	ret

000194d0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   194d0:	defffd04 	addi	sp,sp,-12
   194d4:	df000215 	stw	fp,8(sp)
   194d8:	df000204 	addi	fp,sp,8
   194dc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   194e0:	e0bfff17 	ldw	r2,-4(fp)
   194e4:	10800217 	ldw	r2,8(r2)
   194e8:	10d00034 	orhi	r3,r2,16384
   194ec:	e0bfff17 	ldw	r2,-4(fp)
   194f0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   194f4:	e03ffe15 	stw	zero,-8(fp)
   194f8:	00001d06 	br	19570 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   194fc:	008000b4 	movhi	r2,2
   19500:	10b24104 	addi	r2,r2,-14076
   19504:	e0fffe17 	ldw	r3,-8(fp)
   19508:	18c00324 	muli	r3,r3,12
   1950c:	10c5883a 	add	r2,r2,r3
   19510:	10c00017 	ldw	r3,0(r2)
   19514:	e0bfff17 	ldw	r2,-4(fp)
   19518:	10800017 	ldw	r2,0(r2)
   1951c:	1880111e 	bne	r3,r2,19564 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   19520:	008000b4 	movhi	r2,2
   19524:	10b24104 	addi	r2,r2,-14076
   19528:	e0fffe17 	ldw	r3,-8(fp)
   1952c:	18c00324 	muli	r3,r3,12
   19530:	10c5883a 	add	r2,r2,r3
   19534:	10800204 	addi	r2,r2,8
   19538:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1953c:	1000090e 	bge	r2,zero,19564 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   19540:	e0bffe17 	ldw	r2,-8(fp)
   19544:	10c00324 	muli	r3,r2,12
   19548:	008000b4 	movhi	r2,2
   1954c:	10b24104 	addi	r2,r2,-14076
   19550:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   19554:	e0bfff17 	ldw	r2,-4(fp)
   19558:	18800226 	beq	r3,r2,19564 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1955c:	00bffcc4 	movi	r2,-13
   19560:	00000806 	br	19584 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   19564:	e0bffe17 	ldw	r2,-8(fp)
   19568:	10800044 	addi	r2,r2,1
   1956c:	e0bffe15 	stw	r2,-8(fp)
   19570:	d0a02917 	ldw	r2,-32604(gp)
   19574:	1007883a 	mov	r3,r2
   19578:	e0bffe17 	ldw	r2,-8(fp)
   1957c:	18bfdf2e 	bgeu	r3,r2,194fc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   19580:	0005883a 	mov	r2,zero
}
   19584:	e037883a 	mov	sp,fp
   19588:	df000017 	ldw	fp,0(sp)
   1958c:	dec00104 	addi	sp,sp,4
   19590:	f800283a 	ret

00019594 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   19594:	defff604 	addi	sp,sp,-40
   19598:	dfc00915 	stw	ra,36(sp)
   1959c:	df000815 	stw	fp,32(sp)
   195a0:	df000804 	addi	fp,sp,32
   195a4:	e13ffd15 	stw	r4,-12(fp)
   195a8:	e17ffe15 	stw	r5,-8(fp)
   195ac:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   195b0:	00bfffc4 	movi	r2,-1
   195b4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   195b8:	00bffb44 	movi	r2,-19
   195bc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   195c0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   195c4:	d1602704 	addi	r5,gp,-32612
   195c8:	e13ffd17 	ldw	r4,-12(fp)
   195cc:	00191100 	call	19110 <alt_find_dev>
   195d0:	e0bff815 	stw	r2,-32(fp)
   195d4:	e0bff817 	ldw	r2,-32(fp)
   195d8:	1000051e 	bne	r2,zero,195f0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   195dc:	e13ffd17 	ldw	r4,-12(fp)
   195e0:	0019c9c0 	call	19c9c <alt_find_file>
   195e4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   195e8:	00800044 	movi	r2,1
   195ec:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   195f0:	e0bff817 	ldw	r2,-32(fp)
   195f4:	10002926 	beq	r2,zero,1969c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   195f8:	e13ff817 	ldw	r4,-32(fp)
   195fc:	0019da40 	call	19da4 <alt_get_fd>
   19600:	e0bff915 	stw	r2,-28(fp)
   19604:	e0bff917 	ldw	r2,-28(fp)
   19608:	1000030e 	bge	r2,zero,19618 <open+0x84>
    {
      status = index;
   1960c:	e0bff917 	ldw	r2,-28(fp)
   19610:	e0bffa15 	stw	r2,-24(fp)
   19614:	00002306 	br	196a4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   19618:	e0bff917 	ldw	r2,-28(fp)
   1961c:	10c00324 	muli	r3,r2,12
   19620:	008000b4 	movhi	r2,2
   19624:	10b24104 	addi	r2,r2,-14076
   19628:	1885883a 	add	r2,r3,r2
   1962c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   19630:	e0fffe17 	ldw	r3,-8(fp)
   19634:	00900034 	movhi	r2,16384
   19638:	10bfffc4 	addi	r2,r2,-1
   1963c:	1886703a 	and	r3,r3,r2
   19640:	e0bffc17 	ldw	r2,-16(fp)
   19644:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   19648:	e0bffb17 	ldw	r2,-20(fp)
   1964c:	1000051e 	bne	r2,zero,19664 <open+0xd0>
   19650:	e13ffc17 	ldw	r4,-16(fp)
   19654:	00194d00 	call	194d0 <alt_file_locked>
   19658:	e0bffa15 	stw	r2,-24(fp)
   1965c:	e0bffa17 	ldw	r2,-24(fp)
   19660:	10001016 	blt	r2,zero,196a4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   19664:	e0bff817 	ldw	r2,-32(fp)
   19668:	10800317 	ldw	r2,12(r2)
   1966c:	10000826 	beq	r2,zero,19690 <open+0xfc>
   19670:	e0bff817 	ldw	r2,-32(fp)
   19674:	10800317 	ldw	r2,12(r2)
   19678:	e1ffff17 	ldw	r7,-4(fp)
   1967c:	e1bffe17 	ldw	r6,-8(fp)
   19680:	e17ffd17 	ldw	r5,-12(fp)
   19684:	e13ffc17 	ldw	r4,-16(fp)
   19688:	103ee83a 	callr	r2
   1968c:	00000106 	br	19694 <open+0x100>
   19690:	0005883a 	mov	r2,zero
   19694:	e0bffa15 	stw	r2,-24(fp)
   19698:	00000206 	br	196a4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1969c:	00bffb44 	movi	r2,-19
   196a0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   196a4:	e0bffa17 	ldw	r2,-24(fp)
   196a8:	1000090e 	bge	r2,zero,196d0 <open+0x13c>
  {
    alt_release_fd (index);  
   196ac:	e13ff917 	ldw	r4,-28(fp)
   196b0:	00196e80 	call	196e8 <alt_release_fd>
    ALT_ERRNO = -status;
   196b4:	00194940 	call	19494 <alt_get_errno>
   196b8:	1007883a 	mov	r3,r2
   196bc:	e0bffa17 	ldw	r2,-24(fp)
   196c0:	0085c83a 	sub	r2,zero,r2
   196c4:	18800015 	stw	r2,0(r3)
    return -1;
   196c8:	00bfffc4 	movi	r2,-1
   196cc:	00000106 	br	196d4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   196d0:	e0bff917 	ldw	r2,-28(fp)
}
   196d4:	e037883a 	mov	sp,fp
   196d8:	dfc00117 	ldw	ra,4(sp)
   196dc:	df000017 	ldw	fp,0(sp)
   196e0:	dec00204 	addi	sp,sp,8
   196e4:	f800283a 	ret

000196e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   196e8:	defffe04 	addi	sp,sp,-8
   196ec:	df000115 	stw	fp,4(sp)
   196f0:	df000104 	addi	fp,sp,4
   196f4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   196f8:	e0bfff17 	ldw	r2,-4(fp)
   196fc:	108000d0 	cmplti	r2,r2,3
   19700:	10000d1e 	bne	r2,zero,19738 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   19704:	008000b4 	movhi	r2,2
   19708:	10b24104 	addi	r2,r2,-14076
   1970c:	e0ffff17 	ldw	r3,-4(fp)
   19710:	18c00324 	muli	r3,r3,12
   19714:	10c5883a 	add	r2,r2,r3
   19718:	10800204 	addi	r2,r2,8
   1971c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   19720:	008000b4 	movhi	r2,2
   19724:	10b24104 	addi	r2,r2,-14076
   19728:	e0ffff17 	ldw	r3,-4(fp)
   1972c:	18c00324 	muli	r3,r3,12
   19730:	10c5883a 	add	r2,r2,r3
   19734:	10000015 	stw	zero,0(r2)
  }
}
   19738:	0001883a 	nop
   1973c:	e037883a 	mov	sp,fp
   19740:	df000017 	ldw	fp,0(sp)
   19744:	dec00104 	addi	sp,sp,4
   19748:	f800283a 	ret

0001974c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1974c:	defffa04 	addi	sp,sp,-24
   19750:	df000515 	stw	fp,20(sp)
   19754:	df000504 	addi	fp,sp,20
   19758:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1975c:	0005303a 	rdctl	r2,status
   19760:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19764:	e0fffc17 	ldw	r3,-16(fp)
   19768:	00bfff84 	movi	r2,-2
   1976c:	1884703a 	and	r2,r3,r2
   19770:	1001703a 	wrctl	status,r2
  
  return context;
   19774:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   19778:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1977c:	e0bfff17 	ldw	r2,-4(fp)
   19780:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   19784:	e0bffd17 	ldw	r2,-12(fp)
   19788:	10800017 	ldw	r2,0(r2)
   1978c:	e0fffd17 	ldw	r3,-12(fp)
   19790:	18c00117 	ldw	r3,4(r3)
   19794:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   19798:	e0bffd17 	ldw	r2,-12(fp)
   1979c:	10800117 	ldw	r2,4(r2)
   197a0:	e0fffd17 	ldw	r3,-12(fp)
   197a4:	18c00017 	ldw	r3,0(r3)
   197a8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   197ac:	e0bffd17 	ldw	r2,-12(fp)
   197b0:	e0fffd17 	ldw	r3,-12(fp)
   197b4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   197b8:	e0bffd17 	ldw	r2,-12(fp)
   197bc:	e0fffd17 	ldw	r3,-12(fp)
   197c0:	10c00015 	stw	r3,0(r2)
   197c4:	e0bffb17 	ldw	r2,-20(fp)
   197c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   197cc:	e0bffe17 	ldw	r2,-8(fp)
   197d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   197d4:	0001883a 	nop
   197d8:	e037883a 	mov	sp,fp
   197dc:	df000017 	ldw	fp,0(sp)
   197e0:	dec00104 	addi	sp,sp,4
   197e4:	f800283a 	ret

000197e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   197e8:	defffb04 	addi	sp,sp,-20
   197ec:	dfc00415 	stw	ra,16(sp)
   197f0:	df000315 	stw	fp,12(sp)
   197f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   197f8:	d0a02c17 	ldw	r2,-32592(gp)
   197fc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   19800:	d0a80617 	ldw	r2,-24552(gp)
   19804:	10800044 	addi	r2,r2,1
   19808:	d0a80615 	stw	r2,-24552(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1980c:	00002e06 	br	198c8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   19810:	e0bffd17 	ldw	r2,-12(fp)
   19814:	10800017 	ldw	r2,0(r2)
   19818:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1981c:	e0bffd17 	ldw	r2,-12(fp)
   19820:	10800403 	ldbu	r2,16(r2)
   19824:	10803fcc 	andi	r2,r2,255
   19828:	10000426 	beq	r2,zero,1983c <alt_tick+0x54>
   1982c:	d0a80617 	ldw	r2,-24552(gp)
   19830:	1000021e 	bne	r2,zero,1983c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   19834:	e0bffd17 	ldw	r2,-12(fp)
   19838:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1983c:	e0bffd17 	ldw	r2,-12(fp)
   19840:	10800217 	ldw	r2,8(r2)
   19844:	d0e80617 	ldw	r3,-24552(gp)
   19848:	18801d36 	bltu	r3,r2,198c0 <alt_tick+0xd8>
   1984c:	e0bffd17 	ldw	r2,-12(fp)
   19850:	10800403 	ldbu	r2,16(r2)
   19854:	10803fcc 	andi	r2,r2,255
   19858:	1000191e 	bne	r2,zero,198c0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1985c:	e0bffd17 	ldw	r2,-12(fp)
   19860:	10800317 	ldw	r2,12(r2)
   19864:	e0fffd17 	ldw	r3,-12(fp)
   19868:	18c00517 	ldw	r3,20(r3)
   1986c:	1809883a 	mov	r4,r3
   19870:	103ee83a 	callr	r2
   19874:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   19878:	e0bfff17 	ldw	r2,-4(fp)
   1987c:	1000031e 	bne	r2,zero,1988c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   19880:	e13ffd17 	ldw	r4,-12(fp)
   19884:	001974c0 	call	1974c <alt_alarm_stop>
   19888:	00000d06 	br	198c0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1988c:	e0bffd17 	ldw	r2,-12(fp)
   19890:	10c00217 	ldw	r3,8(r2)
   19894:	e0bfff17 	ldw	r2,-4(fp)
   19898:	1887883a 	add	r3,r3,r2
   1989c:	e0bffd17 	ldw	r2,-12(fp)
   198a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   198a4:	e0bffd17 	ldw	r2,-12(fp)
   198a8:	10c00217 	ldw	r3,8(r2)
   198ac:	d0a80617 	ldw	r2,-24552(gp)
   198b0:	1880032e 	bgeu	r3,r2,198c0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   198b4:	e0bffd17 	ldw	r2,-12(fp)
   198b8:	00c00044 	movi	r3,1
   198bc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   198c0:	e0bffe17 	ldw	r2,-8(fp)
   198c4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   198c8:	e0fffd17 	ldw	r3,-12(fp)
   198cc:	d0a02c04 	addi	r2,gp,-32592
   198d0:	18bfcf1e 	bne	r3,r2,19810 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   198d4:	000db0c0 	call	db0c <OSTimeTick>
}
   198d8:	0001883a 	nop
   198dc:	e037883a 	mov	sp,fp
   198e0:	dfc00117 	ldw	ra,4(sp)
   198e4:	df000017 	ldw	fp,0(sp)
   198e8:	dec00204 	addi	sp,sp,8
   198ec:	f800283a 	ret

000198f0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   198f0:	deffff04 	addi	sp,sp,-4
   198f4:	df000015 	stw	fp,0(sp)
   198f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   198fc:	000170fa 	wrctl	ienable,zero
}
   19900:	0001883a 	nop
   19904:	e037883a 	mov	sp,fp
   19908:	df000017 	ldw	fp,0(sp)
   1990c:	dec00104 	addi	sp,sp,4
   19910:	f800283a 	ret

00019914 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   19914:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   19918:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1991c:	d127fc17 	ldw	r4,-24592(gp)

      stw ra,  0(sp)
   19920:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   19924:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   19928:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1992c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   19930:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   19934:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   19938:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1993c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   19940:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   19944:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   19948:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1994c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   19950:	0019b880 	call	19b88 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   19954:	d127f617 	ldw	r4,-24616(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   19958:	d167ed87 	ldb	r5,-24650(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1995c:	d127fc15 	stw	r4,-24592(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   19960:	d167edc5 	stb	r5,-24649(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   19964:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   19968:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1996c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   19970:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   19974:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   19978:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1997c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   19980:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   19984:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   19988:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1998c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   19990:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   19994:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   19998:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1999c:	f800283a 	ret

000199a0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   199a0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   199a4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   199a8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   199ac:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   199b0:	0019b880 	call	19b88 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   199b4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   199b8:	d4a7eb05 	stb	r18,-24660(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   199bc:	003fe506 	br	19954 <OSCtxSw+0x40>

000199c0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   199c0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   199c4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   199c8:	10800054 	ori	r2,r2,1
      wrctl status, r2
   199cc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   199d0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   199d4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   199d8:	dec00204 	addi	sp,sp,8

      callr r2
   199dc:	103ee83a 	callr	r2

      nop
   199e0:	0001883a 	nop

000199e4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   199e4:	defff704 	addi	sp,sp,-36
   199e8:	dfc00815 	stw	ra,32(sp)
   199ec:	df000715 	stw	fp,28(sp)
   199f0:	df000704 	addi	fp,sp,28
   199f4:	e13ffc15 	stw	r4,-16(fp)
   199f8:	e17ffd15 	stw	r5,-12(fp)
   199fc:	e1bffe15 	stw	r6,-8(fp)
   19a00:	3805883a 	mov	r2,r7
   19a04:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   19a08:	e0fffe17 	ldw	r3,-8(fp)
   19a0c:	00bfff04 	movi	r2,-4
   19a10:	1884703a 	and	r2,r3,r2
   19a14:	10bef704 	addi	r2,r2,-1060
   19a18:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   19a1c:	01810904 	movi	r6,1060
   19a20:	000b883a 	mov	r5,zero
   19a24:	e13ff917 	ldw	r4,-28(fp)
   19a28:	0008fb40 	call	8fb4 <memset>
   19a2c:	e0bff917 	ldw	r2,-28(fp)
   19a30:	10c0bb04 	addi	r3,r2,748
   19a34:	e0bff917 	ldw	r2,-28(fp)
   19a38:	10c00115 	stw	r3,4(r2)
   19a3c:	e0bff917 	ldw	r2,-28(fp)
   19a40:	10c0d504 	addi	r3,r2,852
   19a44:	e0bff917 	ldw	r2,-28(fp)
   19a48:	10c00215 	stw	r3,8(r2)
   19a4c:	e0bff917 	ldw	r2,-28(fp)
   19a50:	10c0ef04 	addi	r3,r2,956
   19a54:	e0bff917 	ldw	r2,-28(fp)
   19a58:	10c00315 	stw	r3,12(r2)
   19a5c:	e0fff917 	ldw	r3,-28(fp)
   19a60:	008000b4 	movhi	r2,2
   19a64:	10ab2f04 	addi	r2,r2,-21316
   19a68:	18800d15 	stw	r2,52(r3)
   19a6c:	e0bff917 	ldw	r2,-28(fp)
   19a70:	00c00044 	movi	r3,1
   19a74:	10c02915 	stw	r3,164(r2)
   19a78:	10002a15 	stw	zero,168(r2)
   19a7c:	e0bff917 	ldw	r2,-28(fp)
   19a80:	00ccc384 	movi	r3,13070
   19a84:	10c02b0d 	sth	r3,172(r2)
   19a88:	e0bff917 	ldw	r2,-28(fp)
   19a8c:	00eaf344 	movi	r3,-21555
   19a90:	10c02b8d 	sth	r3,174(r2)
   19a94:	e0bff917 	ldw	r2,-28(fp)
   19a98:	00c48d04 	movi	r3,4660
   19a9c:	10c02c0d 	sth	r3,176(r2)
   19aa0:	e0bff917 	ldw	r2,-28(fp)
   19aa4:	00f99b44 	movi	r3,-6547
   19aa8:	10c02c8d 	sth	r3,178(r2)
   19aac:	e0bff917 	ldw	r2,-28(fp)
   19ab0:	00f7bb04 	movi	r3,-8468
   19ab4:	10c02d0d 	sth	r3,180(r2)
   19ab8:	e0bff917 	ldw	r2,-28(fp)
   19abc:	00c00144 	movi	r3,5
   19ac0:	10c02d8d 	sth	r3,182(r2)
   19ac4:	e0bff917 	ldw	r2,-28(fp)
   19ac8:	00c002c4 	movi	r3,11
   19acc:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   19ad0:	e0bff917 	ldw	r2,-28(fp)
   19ad4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   19ad8:	e0bffa17 	ldw	r2,-24(fp)
   19adc:	10bff304 	addi	r2,r2,-52
   19ae0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   19ae4:	e0bffb17 	ldw	r2,-20(fp)
   19ae8:	10800c04 	addi	r2,r2,48
   19aec:	e0fffc17 	ldw	r3,-16(fp)
   19af0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   19af4:	e0bffb17 	ldw	r2,-20(fp)
   19af8:	10800b04 	addi	r2,r2,44
   19afc:	e0fffd17 	ldw	r3,-12(fp)
   19b00:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   19b04:	e0bffb17 	ldw	r2,-20(fp)
   19b08:	10800a04 	addi	r2,r2,40
   19b0c:	e0fff917 	ldw	r3,-28(fp)
   19b10:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   19b14:	008000b4 	movhi	r2,2
   19b18:	10a67004 	addi	r2,r2,-26176
   19b1c:	10c00104 	addi	r3,r2,4
   19b20:	e0bffb17 	ldw	r2,-20(fp)
   19b24:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   19b28:	e0bffb17 	ldw	r2,-20(fp)
}
   19b2c:	e037883a 	mov	sp,fp
   19b30:	dfc00117 	ldw	ra,4(sp)
   19b34:	df000017 	ldw	fp,0(sp)
   19b38:	dec00204 	addi	sp,sp,8
   19b3c:	f800283a 	ret

00019b40 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   19b40:	defffe04 	addi	sp,sp,-8
   19b44:	df000115 	stw	fp,4(sp)
   19b48:	df000104 	addi	fp,sp,4
   19b4c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   19b50:	0001883a 	nop
   19b54:	e037883a 	mov	sp,fp
   19b58:	df000017 	ldw	fp,0(sp)
   19b5c:	dec00104 	addi	sp,sp,4
   19b60:	f800283a 	ret

00019b64 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   19b64:	defffe04 	addi	sp,sp,-8
   19b68:	df000115 	stw	fp,4(sp)
   19b6c:	df000104 	addi	fp,sp,4
   19b70:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   19b74:	0001883a 	nop
   19b78:	e037883a 	mov	sp,fp
   19b7c:	df000017 	ldw	fp,0(sp)
   19b80:	dec00104 	addi	sp,sp,4
   19b84:	f800283a 	ret

00019b88 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   19b88:	deffff04 	addi	sp,sp,-4
   19b8c:	df000015 	stw	fp,0(sp)
   19b90:	d839883a 	mov	fp,sp
}
   19b94:	0001883a 	nop
   19b98:	e037883a 	mov	sp,fp
   19b9c:	df000017 	ldw	fp,0(sp)
   19ba0:	dec00104 	addi	sp,sp,4
   19ba4:	f800283a 	ret

00019ba8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   19ba8:	deffff04 	addi	sp,sp,-4
   19bac:	df000015 	stw	fp,0(sp)
   19bb0:	d839883a 	mov	fp,sp
}
   19bb4:	0001883a 	nop
   19bb8:	e037883a 	mov	sp,fp
   19bbc:	df000017 	ldw	fp,0(sp)
   19bc0:	dec00104 	addi	sp,sp,4
   19bc4:	f800283a 	ret

00019bc8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   19bc8:	defffe04 	addi	sp,sp,-8
   19bcc:	dfc00115 	stw	ra,4(sp)
   19bd0:	df000015 	stw	fp,0(sp)
   19bd4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr++;
   19bd8:	d0a8070b 	ldhu	r2,-24548(gp)
   19bdc:	10800044 	addi	r2,r2,1
   19be0:	d0a8070d 	sth	r2,-24548(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
   19be4:	d0a8070b 	ldhu	r2,-24548(gp)
   19be8:	10bfffcc 	andi	r2,r2,65535
   19bec:	10800230 	cmpltui	r2,r2,8
   19bf0:	1000021e 	bne	r2,zero,19bfc <OSTimeTickHook+0x34>
        OSTmrCtr = 0;
   19bf4:	d028070d 	sth	zero,-24548(gp)
        OSTmrSignal();
   19bf8:	0015b600 	call	15b60 <OSTmrSignal>

#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   19bfc:	0001883a 	nop
   19c00:	e037883a 	mov	sp,fp
   19c04:	dfc00117 	ldw	ra,4(sp)
   19c08:	df000017 	ldw	fp,0(sp)
   19c0c:	dec00204 	addi	sp,sp,8
   19c10:	f800283a 	ret

00019c14 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   19c14:	deffff04 	addi	sp,sp,-4
   19c18:	df000015 	stw	fp,0(sp)
   19c1c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
   19c20:	d028070d 	sth	zero,-24548(gp)
#endif
}
   19c24:	0001883a 	nop
   19c28:	e037883a 	mov	sp,fp
   19c2c:	df000017 	ldw	fp,0(sp)
   19c30:	dec00104 	addi	sp,sp,4
   19c34:	f800283a 	ret

00019c38 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   19c38:	deffff04 	addi	sp,sp,-4
   19c3c:	df000015 	stw	fp,0(sp)
   19c40:	d839883a 	mov	fp,sp
}
   19c44:	0001883a 	nop
   19c48:	e037883a 	mov	sp,fp
   19c4c:	df000017 	ldw	fp,0(sp)
   19c50:	dec00104 	addi	sp,sp,4
   19c54:	f800283a 	ret

00019c58 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   19c58:	deffff04 	addi	sp,sp,-4
   19c5c:	df000015 	stw	fp,0(sp)
   19c60:	d839883a 	mov	fp,sp
}
   19c64:	0001883a 	nop
   19c68:	e037883a 	mov	sp,fp
   19c6c:	df000017 	ldw	fp,0(sp)
   19c70:	dec00104 	addi	sp,sp,4
   19c74:	f800283a 	ret

00019c78 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   19c78:	defffe04 	addi	sp,sp,-8
   19c7c:	df000115 	stw	fp,4(sp)
   19c80:	df000104 	addi	fp,sp,4
   19c84:	e13fff15 	stw	r4,-4(fp)
}
   19c88:	0001883a 	nop
   19c8c:	e037883a 	mov	sp,fp
   19c90:	df000017 	ldw	fp,0(sp)
   19c94:	dec00104 	addi	sp,sp,4
   19c98:	f800283a 	ret

00019c9c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   19c9c:	defffb04 	addi	sp,sp,-20
   19ca0:	dfc00415 	stw	ra,16(sp)
   19ca4:	df000315 	stw	fp,12(sp)
   19ca8:	df000304 	addi	fp,sp,12
   19cac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   19cb0:	d0a02517 	ldw	r2,-32620(gp)
   19cb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   19cb8:	00003106 	br	19d80 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   19cbc:	e0bffd17 	ldw	r2,-12(fp)
   19cc0:	10800217 	ldw	r2,8(r2)
   19cc4:	1009883a 	mov	r4,r2
   19cc8:	00074bc0 	call	74bc <strlen>
   19ccc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   19cd0:	e0bffd17 	ldw	r2,-12(fp)
   19cd4:	10c00217 	ldw	r3,8(r2)
   19cd8:	e0bffe17 	ldw	r2,-8(fp)
   19cdc:	10bfffc4 	addi	r2,r2,-1
   19ce0:	1885883a 	add	r2,r3,r2
   19ce4:	10800003 	ldbu	r2,0(r2)
   19ce8:	10803fcc 	andi	r2,r2,255
   19cec:	1080201c 	xori	r2,r2,128
   19cf0:	10bfe004 	addi	r2,r2,-128
   19cf4:	10800bd8 	cmpnei	r2,r2,47
   19cf8:	1000031e 	bne	r2,zero,19d08 <alt_find_file+0x6c>
    {
      len -= 1;
   19cfc:	e0bffe17 	ldw	r2,-8(fp)
   19d00:	10bfffc4 	addi	r2,r2,-1
   19d04:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   19d08:	e0bffe17 	ldw	r2,-8(fp)
   19d0c:	e0ffff17 	ldw	r3,-4(fp)
   19d10:	1885883a 	add	r2,r3,r2
   19d14:	10800003 	ldbu	r2,0(r2)
   19d18:	10803fcc 	andi	r2,r2,255
   19d1c:	1080201c 	xori	r2,r2,128
   19d20:	10bfe004 	addi	r2,r2,-128
   19d24:	10800be0 	cmpeqi	r2,r2,47
   19d28:	1000081e 	bne	r2,zero,19d4c <alt_find_file+0xb0>
   19d2c:	e0bffe17 	ldw	r2,-8(fp)
   19d30:	e0ffff17 	ldw	r3,-4(fp)
   19d34:	1885883a 	add	r2,r3,r2
   19d38:	10800003 	ldbu	r2,0(r2)
   19d3c:	10803fcc 	andi	r2,r2,255
   19d40:	1080201c 	xori	r2,r2,128
   19d44:	10bfe004 	addi	r2,r2,-128
   19d48:	10000a1e 	bne	r2,zero,19d74 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   19d4c:	e0bffd17 	ldw	r2,-12(fp)
   19d50:	10800217 	ldw	r2,8(r2)
   19d54:	e0fffe17 	ldw	r3,-8(fp)
   19d58:	180d883a 	mov	r6,r3
   19d5c:	e17fff17 	ldw	r5,-4(fp)
   19d60:	1009883a 	mov	r4,r2
   19d64:	0019ff80 	call	19ff8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   19d68:	1000021e 	bne	r2,zero,19d74 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   19d6c:	e0bffd17 	ldw	r2,-12(fp)
   19d70:	00000706 	br	19d90 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   19d74:	e0bffd17 	ldw	r2,-12(fp)
   19d78:	10800017 	ldw	r2,0(r2)
   19d7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   19d80:	e0fffd17 	ldw	r3,-12(fp)
   19d84:	d0a02504 	addi	r2,gp,-32620
   19d88:	18bfcc1e 	bne	r3,r2,19cbc <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   19d8c:	0005883a 	mov	r2,zero
}
   19d90:	e037883a 	mov	sp,fp
   19d94:	dfc00117 	ldw	ra,4(sp)
   19d98:	df000017 	ldw	fp,0(sp)
   19d9c:	dec00204 	addi	sp,sp,8
   19da0:	f800283a 	ret

00019da4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   19da4:	defff904 	addi	sp,sp,-28
   19da8:	dfc00615 	stw	ra,24(sp)
   19dac:	df000515 	stw	fp,20(sp)
   19db0:	df000504 	addi	fp,sp,20
   19db4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   19db8:	00bffa04 	movi	r2,-24
   19dbc:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   19dc0:	d0a80317 	ldw	r2,-24564(gp)
   19dc4:	e0bffd15 	stw	r2,-12(fp)
   19dc8:	e03ffe0d 	sth	zero,-8(fp)
   19dcc:	e0bffe0b 	ldhu	r2,-8(fp)
   19dd0:	e0fffe84 	addi	r3,fp,-6
   19dd4:	180d883a 	mov	r6,r3
   19dd8:	100b883a 	mov	r5,r2
   19ddc:	e13ffd17 	ldw	r4,-12(fp)
   19de0:	0012e880 	call	12e88 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   19de4:	e03ffb15 	stw	zero,-20(fp)
   19de8:	00001906 	br	19e50 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   19dec:	008000b4 	movhi	r2,2
   19df0:	10b24104 	addi	r2,r2,-14076
   19df4:	e0fffb17 	ldw	r3,-20(fp)
   19df8:	18c00324 	muli	r3,r3,12
   19dfc:	10c5883a 	add	r2,r2,r3
   19e00:	10800017 	ldw	r2,0(r2)
   19e04:	10000f1e 	bne	r2,zero,19e44 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   19e08:	008000b4 	movhi	r2,2
   19e0c:	10b24104 	addi	r2,r2,-14076
   19e10:	e0fffb17 	ldw	r3,-20(fp)
   19e14:	18c00324 	muli	r3,r3,12
   19e18:	10c5883a 	add	r2,r2,r3
   19e1c:	e0ffff17 	ldw	r3,-4(fp)
   19e20:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   19e24:	d0e02917 	ldw	r3,-32604(gp)
   19e28:	e0bffb17 	ldw	r2,-20(fp)
   19e2c:	1880020e 	bge	r3,r2,19e38 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   19e30:	e0bffb17 	ldw	r2,-20(fp)
   19e34:	d0a02915 	stw	r2,-32604(gp)
      }
      rc = i;
   19e38:	e0bffb17 	ldw	r2,-20(fp)
   19e3c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   19e40:	00000606 	br	19e5c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   19e44:	e0bffb17 	ldw	r2,-20(fp)
   19e48:	10800044 	addi	r2,r2,1
   19e4c:	e0bffb15 	stw	r2,-20(fp)
   19e50:	e0bffb17 	ldw	r2,-20(fp)
   19e54:	10800810 	cmplti	r2,r2,32
   19e58:	103fe41e 	bne	r2,zero,19dec <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   19e5c:	d0a80317 	ldw	r2,-24564(gp)
   19e60:	1009883a 	mov	r4,r2
   19e64:	00132000 	call	13200 <OSSemPost>

  return rc;
   19e68:	e0bffc17 	ldw	r2,-16(fp)
}
   19e6c:	e037883a 	mov	sp,fp
   19e70:	dfc00117 	ldw	ra,4(sp)
   19e74:	df000017 	ldw	fp,0(sp)
   19e78:	dec00204 	addi	sp,sp,8
   19e7c:	f800283a 	ret

00019e80 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   19e80:	defffb04 	addi	sp,sp,-20
   19e84:	df000415 	stw	fp,16(sp)
   19e88:	df000404 	addi	fp,sp,16
   19e8c:	e13ffe15 	stw	r4,-8(fp)
   19e90:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   19e94:	e0bfff17 	ldw	r2,-4(fp)
   19e98:	10840070 	cmpltui	r2,r2,4097
   19e9c:	1000021e 	bne	r2,zero,19ea8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   19ea0:	00840004 	movi	r2,4096
   19ea4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   19ea8:	e0fffe17 	ldw	r3,-8(fp)
   19eac:	e0bfff17 	ldw	r2,-4(fp)
   19eb0:	1885883a 	add	r2,r3,r2
   19eb4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   19eb8:	e0bffe17 	ldw	r2,-8(fp)
   19ebc:	e0bffc15 	stw	r2,-16(fp)
   19ec0:	00000506 	br	19ed8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   19ec4:	e0bffc17 	ldw	r2,-16(fp)
   19ec8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   19ecc:	e0bffc17 	ldw	r2,-16(fp)
   19ed0:	10800804 	addi	r2,r2,32
   19ed4:	e0bffc15 	stw	r2,-16(fp)
   19ed8:	e0fffc17 	ldw	r3,-16(fp)
   19edc:	e0bffd17 	ldw	r2,-12(fp)
   19ee0:	18bff836 	bltu	r3,r2,19ec4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   19ee4:	e0bffe17 	ldw	r2,-8(fp)
   19ee8:	108007cc 	andi	r2,r2,31
   19eec:	10000226 	beq	r2,zero,19ef8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   19ef0:	e0bffc17 	ldw	r2,-16(fp)
   19ef4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   19ef8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   19efc:	0001883a 	nop
   19f00:	e037883a 	mov	sp,fp
   19f04:	df000017 	ldw	fp,0(sp)
   19f08:	dec00104 	addi	sp,sp,4
   19f0c:	f800283a 	ret

00019f10 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   19f10:	defffe04 	addi	sp,sp,-8
   19f14:	df000115 	stw	fp,4(sp)
   19f18:	df000104 	addi	fp,sp,4
   19f1c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   19f20:	e0bfff17 	ldw	r2,-4(fp)
   19f24:	10bffe84 	addi	r2,r2,-6
   19f28:	10c00428 	cmpgeui	r3,r2,16
   19f2c:	18001a1e 	bne	r3,zero,19f98 <alt_exception_cause_generated_bad_addr+0x88>
   19f30:	100690ba 	slli	r3,r2,2
   19f34:	008000b4 	movhi	r2,2
   19f38:	10a7d204 	addi	r2,r2,-24760
   19f3c:	1885883a 	add	r2,r3,r2
   19f40:	10800017 	ldw	r2,0(r2)
   19f44:	1000683a 	jmp	r2
   19f48:	00019f88 	cmpgei	zero,zero,1662
   19f4c:	00019f88 	cmpgei	zero,zero,1662
   19f50:	00019f98 	cmpnei	zero,zero,1662
   19f54:	00019f98 	cmpnei	zero,zero,1662
   19f58:	00019f98 	cmpnei	zero,zero,1662
   19f5c:	00019f88 	cmpgei	zero,zero,1662
   19f60:	00019f90 	cmplti	zero,zero,1662
   19f64:	00019f98 	cmpnei	zero,zero,1662
   19f68:	00019f88 	cmpgei	zero,zero,1662
   19f6c:	00019f88 	cmpgei	zero,zero,1662
   19f70:	00019f98 	cmpnei	zero,zero,1662
   19f74:	00019f88 	cmpgei	zero,zero,1662
   19f78:	00019f90 	cmplti	zero,zero,1662
   19f7c:	00019f98 	cmpnei	zero,zero,1662
   19f80:	00019f98 	cmpnei	zero,zero,1662
   19f84:	00019f88 	cmpgei	zero,zero,1662
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   19f88:	00800044 	movi	r2,1
   19f8c:	00000306 	br	19f9c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   19f90:	0005883a 	mov	r2,zero
   19f94:	00000106 	br	19f9c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   19f98:	0005883a 	mov	r2,zero
  }
}
   19f9c:	e037883a 	mov	sp,fp
   19fa0:	df000017 	ldw	fp,0(sp)
   19fa4:	dec00104 	addi	sp,sp,4
   19fa8:	f800283a 	ret

00019fac <atexit>:
   19fac:	200b883a 	mov	r5,r4
   19fb0:	000f883a 	mov	r7,zero
   19fb4:	000d883a 	mov	r6,zero
   19fb8:	0009883a 	mov	r4,zero
   19fbc:	001a0741 	jmpi	1a074 <__register_exitproc>

00019fc0 <exit>:
   19fc0:	defffe04 	addi	sp,sp,-8
   19fc4:	000b883a 	mov	r5,zero
   19fc8:	dc000015 	stw	r16,0(sp)
   19fcc:	dfc00115 	stw	ra,4(sp)
   19fd0:	2021883a 	mov	r16,r4
   19fd4:	001a18c0 	call	1a18c <__call_exitprocs>
   19fd8:	008000b4 	movhi	r2,2
   19fdc:	10b2a104 	addi	r2,r2,-13692
   19fe0:	11000017 	ldw	r4,0(r2)
   19fe4:	20800f17 	ldw	r2,60(r4)
   19fe8:	10000126 	beq	r2,zero,19ff0 <exit+0x30>
   19fec:	103ee83a 	callr	r2
   19ff0:	8009883a 	mov	r4,r16
   19ff4:	001a30c0 	call	1a30c <_exit>

00019ff8 <memcmp>:
   19ff8:	01c000c4 	movi	r7,3
   19ffc:	3980192e 	bgeu	r7,r6,1a064 <memcmp+0x6c>
   1a000:	2144b03a 	or	r2,r4,r5
   1a004:	11c4703a 	and	r2,r2,r7
   1a008:	10000f26 	beq	r2,zero,1a048 <memcmp+0x50>
   1a00c:	20800003 	ldbu	r2,0(r4)
   1a010:	28c00003 	ldbu	r3,0(r5)
   1a014:	10c0151e 	bne	r2,r3,1a06c <memcmp+0x74>
   1a018:	31bfff84 	addi	r6,r6,-2
   1a01c:	01ffffc4 	movi	r7,-1
   1a020:	00000406 	br	1a034 <memcmp+0x3c>
   1a024:	20800003 	ldbu	r2,0(r4)
   1a028:	28c00003 	ldbu	r3,0(r5)
   1a02c:	31bfffc4 	addi	r6,r6,-1
   1a030:	10c00e1e 	bne	r2,r3,1a06c <memcmp+0x74>
   1a034:	21000044 	addi	r4,r4,1
   1a038:	29400044 	addi	r5,r5,1
   1a03c:	31fff91e 	bne	r6,r7,1a024 <memcmp+0x2c>
   1a040:	0005883a 	mov	r2,zero
   1a044:	f800283a 	ret
   1a048:	20c00017 	ldw	r3,0(r4)
   1a04c:	28800017 	ldw	r2,0(r5)
   1a050:	18bfee1e 	bne	r3,r2,1a00c <memcmp+0x14>
   1a054:	31bfff04 	addi	r6,r6,-4
   1a058:	21000104 	addi	r4,r4,4
   1a05c:	29400104 	addi	r5,r5,4
   1a060:	39bff936 	bltu	r7,r6,1a048 <memcmp+0x50>
   1a064:	303fe91e 	bne	r6,zero,1a00c <memcmp+0x14>
   1a068:	003ff506 	br	1a040 <memcmp+0x48>
   1a06c:	10c5c83a 	sub	r2,r2,r3
   1a070:	f800283a 	ret

0001a074 <__register_exitproc>:
   1a074:	defffa04 	addi	sp,sp,-24
   1a078:	dc000315 	stw	r16,12(sp)
   1a07c:	040000b4 	movhi	r16,2
   1a080:	8432a104 	addi	r16,r16,-13692
   1a084:	80c00017 	ldw	r3,0(r16)
   1a088:	dc400415 	stw	r17,16(sp)
   1a08c:	dfc00515 	stw	ra,20(sp)
   1a090:	18805217 	ldw	r2,328(r3)
   1a094:	2023883a 	mov	r17,r4
   1a098:	10003726 	beq	r2,zero,1a178 <__register_exitproc+0x104>
   1a09c:	10c00117 	ldw	r3,4(r2)
   1a0a0:	010007c4 	movi	r4,31
   1a0a4:	20c00e16 	blt	r4,r3,1a0e0 <__register_exitproc+0x6c>
   1a0a8:	1a000044 	addi	r8,r3,1
   1a0ac:	8800221e 	bne	r17,zero,1a138 <__register_exitproc+0xc4>
   1a0b0:	18c00084 	addi	r3,r3,2
   1a0b4:	18c7883a 	add	r3,r3,r3
   1a0b8:	18c7883a 	add	r3,r3,r3
   1a0bc:	12000115 	stw	r8,4(r2)
   1a0c0:	10c7883a 	add	r3,r2,r3
   1a0c4:	19400015 	stw	r5,0(r3)
   1a0c8:	0005883a 	mov	r2,zero
   1a0cc:	dfc00517 	ldw	ra,20(sp)
   1a0d0:	dc400417 	ldw	r17,16(sp)
   1a0d4:	dc000317 	ldw	r16,12(sp)
   1a0d8:	dec00604 	addi	sp,sp,24
   1a0dc:	f800283a 	ret
   1a0e0:	00800034 	movhi	r2,0
   1a0e4:	10800004 	addi	r2,r2,0
   1a0e8:	10002626 	beq	r2,zero,1a184 <__register_exitproc+0x110>
   1a0ec:	01006404 	movi	r4,400
   1a0f0:	d9400015 	stw	r5,0(sp)
   1a0f4:	d9800115 	stw	r6,4(sp)
   1a0f8:	d9c00215 	stw	r7,8(sp)
   1a0fc:	00000000 	call	0 <__alt_mem_SDRAM>
   1a100:	d9400017 	ldw	r5,0(sp)
   1a104:	d9800117 	ldw	r6,4(sp)
   1a108:	d9c00217 	ldw	r7,8(sp)
   1a10c:	10001d26 	beq	r2,zero,1a184 <__register_exitproc+0x110>
   1a110:	81000017 	ldw	r4,0(r16)
   1a114:	10000115 	stw	zero,4(r2)
   1a118:	02000044 	movi	r8,1
   1a11c:	22405217 	ldw	r9,328(r4)
   1a120:	0007883a 	mov	r3,zero
   1a124:	12400015 	stw	r9,0(r2)
   1a128:	20805215 	stw	r2,328(r4)
   1a12c:	10006215 	stw	zero,392(r2)
   1a130:	10006315 	stw	zero,396(r2)
   1a134:	883fde26 	beq	r17,zero,1a0b0 <__register_exitproc+0x3c>
   1a138:	18c9883a 	add	r4,r3,r3
   1a13c:	2109883a 	add	r4,r4,r4
   1a140:	1109883a 	add	r4,r2,r4
   1a144:	21802215 	stw	r6,136(r4)
   1a148:	01800044 	movi	r6,1
   1a14c:	12406217 	ldw	r9,392(r2)
   1a150:	30cc983a 	sll	r6,r6,r3
   1a154:	4992b03a 	or	r9,r9,r6
   1a158:	12406215 	stw	r9,392(r2)
   1a15c:	21c04215 	stw	r7,264(r4)
   1a160:	01000084 	movi	r4,2
   1a164:	893fd21e 	bne	r17,r4,1a0b0 <__register_exitproc+0x3c>
   1a168:	11006317 	ldw	r4,396(r2)
   1a16c:	218cb03a 	or	r6,r4,r6
   1a170:	11806315 	stw	r6,396(r2)
   1a174:	003fce06 	br	1a0b0 <__register_exitproc+0x3c>
   1a178:	18805304 	addi	r2,r3,332
   1a17c:	18805215 	stw	r2,328(r3)
   1a180:	003fc606 	br	1a09c <__register_exitproc+0x28>
   1a184:	00bfffc4 	movi	r2,-1
   1a188:	003fd006 	br	1a0cc <__register_exitproc+0x58>

0001a18c <__call_exitprocs>:
   1a18c:	defff504 	addi	sp,sp,-44
   1a190:	df000915 	stw	fp,36(sp)
   1a194:	dd400615 	stw	r21,24(sp)
   1a198:	dc800315 	stw	r18,12(sp)
   1a19c:	dfc00a15 	stw	ra,40(sp)
   1a1a0:	ddc00815 	stw	r23,32(sp)
   1a1a4:	dd800715 	stw	r22,28(sp)
   1a1a8:	dd000515 	stw	r20,20(sp)
   1a1ac:	dcc00415 	stw	r19,16(sp)
   1a1b0:	dc400215 	stw	r17,8(sp)
   1a1b4:	dc000115 	stw	r16,4(sp)
   1a1b8:	d9000015 	stw	r4,0(sp)
   1a1bc:	2839883a 	mov	fp,r5
   1a1c0:	04800044 	movi	r18,1
   1a1c4:	057fffc4 	movi	r21,-1
   1a1c8:	008000b4 	movhi	r2,2
   1a1cc:	10b2a104 	addi	r2,r2,-13692
   1a1d0:	12000017 	ldw	r8,0(r2)
   1a1d4:	45005217 	ldw	r20,328(r8)
   1a1d8:	44c05204 	addi	r19,r8,328
   1a1dc:	a0001c26 	beq	r20,zero,1a250 <__call_exitprocs+0xc4>
   1a1e0:	a0800117 	ldw	r2,4(r20)
   1a1e4:	15ffffc4 	addi	r23,r2,-1
   1a1e8:	b8000d16 	blt	r23,zero,1a220 <__call_exitprocs+0x94>
   1a1ec:	14000044 	addi	r16,r2,1
   1a1f0:	8421883a 	add	r16,r16,r16
   1a1f4:	8421883a 	add	r16,r16,r16
   1a1f8:	84402004 	addi	r17,r16,128
   1a1fc:	a463883a 	add	r17,r20,r17
   1a200:	a421883a 	add	r16,r20,r16
   1a204:	e0001e26 	beq	fp,zero,1a280 <__call_exitprocs+0xf4>
   1a208:	80804017 	ldw	r2,256(r16)
   1a20c:	e0801c26 	beq	fp,r2,1a280 <__call_exitprocs+0xf4>
   1a210:	bdffffc4 	addi	r23,r23,-1
   1a214:	843fff04 	addi	r16,r16,-4
   1a218:	8c7fff04 	addi	r17,r17,-4
   1a21c:	bd7ff91e 	bne	r23,r21,1a204 <__call_exitprocs+0x78>
   1a220:	00800034 	movhi	r2,0
   1a224:	10800004 	addi	r2,r2,0
   1a228:	10000926 	beq	r2,zero,1a250 <__call_exitprocs+0xc4>
   1a22c:	a0800117 	ldw	r2,4(r20)
   1a230:	1000301e 	bne	r2,zero,1a2f4 <__call_exitprocs+0x168>
   1a234:	a0800017 	ldw	r2,0(r20)
   1a238:	10003226 	beq	r2,zero,1a304 <__call_exitprocs+0x178>
   1a23c:	a009883a 	mov	r4,r20
   1a240:	98800015 	stw	r2,0(r19)
   1a244:	00000000 	call	0 <__alt_mem_SDRAM>
   1a248:	9d000017 	ldw	r20,0(r19)
   1a24c:	a03fe41e 	bne	r20,zero,1a1e0 <__call_exitprocs+0x54>
   1a250:	dfc00a17 	ldw	ra,40(sp)
   1a254:	df000917 	ldw	fp,36(sp)
   1a258:	ddc00817 	ldw	r23,32(sp)
   1a25c:	dd800717 	ldw	r22,28(sp)
   1a260:	dd400617 	ldw	r21,24(sp)
   1a264:	dd000517 	ldw	r20,20(sp)
   1a268:	dcc00417 	ldw	r19,16(sp)
   1a26c:	dc800317 	ldw	r18,12(sp)
   1a270:	dc400217 	ldw	r17,8(sp)
   1a274:	dc000117 	ldw	r16,4(sp)
   1a278:	dec00b04 	addi	sp,sp,44
   1a27c:	f800283a 	ret
   1a280:	a0800117 	ldw	r2,4(r20)
   1a284:	80c00017 	ldw	r3,0(r16)
   1a288:	10bfffc4 	addi	r2,r2,-1
   1a28c:	15c01426 	beq	r2,r23,1a2e0 <__call_exitprocs+0x154>
   1a290:	80000015 	stw	zero,0(r16)
   1a294:	183fde26 	beq	r3,zero,1a210 <__call_exitprocs+0x84>
   1a298:	95c8983a 	sll	r4,r18,r23
   1a29c:	a0806217 	ldw	r2,392(r20)
   1a2a0:	a5800117 	ldw	r22,4(r20)
   1a2a4:	2084703a 	and	r2,r4,r2
   1a2a8:	10000b26 	beq	r2,zero,1a2d8 <__call_exitprocs+0x14c>
   1a2ac:	a0806317 	ldw	r2,396(r20)
   1a2b0:	2088703a 	and	r4,r4,r2
   1a2b4:	20000c1e 	bne	r4,zero,1a2e8 <__call_exitprocs+0x15c>
   1a2b8:	89400017 	ldw	r5,0(r17)
   1a2bc:	d9000017 	ldw	r4,0(sp)
   1a2c0:	183ee83a 	callr	r3
   1a2c4:	a0800117 	ldw	r2,4(r20)
   1a2c8:	15bfbf1e 	bne	r2,r22,1a1c8 <__call_exitprocs+0x3c>
   1a2cc:	98800017 	ldw	r2,0(r19)
   1a2d0:	153fcf26 	beq	r2,r20,1a210 <__call_exitprocs+0x84>
   1a2d4:	003fbc06 	br	1a1c8 <__call_exitprocs+0x3c>
   1a2d8:	183ee83a 	callr	r3
   1a2dc:	003ff906 	br	1a2c4 <__call_exitprocs+0x138>
   1a2e0:	a5c00115 	stw	r23,4(r20)
   1a2e4:	003feb06 	br	1a294 <__call_exitprocs+0x108>
   1a2e8:	89000017 	ldw	r4,0(r17)
   1a2ec:	183ee83a 	callr	r3
   1a2f0:	003ff406 	br	1a2c4 <__call_exitprocs+0x138>
   1a2f4:	a0800017 	ldw	r2,0(r20)
   1a2f8:	a027883a 	mov	r19,r20
   1a2fc:	1029883a 	mov	r20,r2
   1a300:	003fb606 	br	1a1dc <__call_exitprocs+0x50>
   1a304:	0005883a 	mov	r2,zero
   1a308:	003ffb06 	br	1a2f8 <__call_exitprocs+0x16c>

0001a30c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1a30c:	defffd04 	addi	sp,sp,-12
   1a310:	df000215 	stw	fp,8(sp)
   1a314:	df000204 	addi	fp,sp,8
   1a318:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1a31c:	d027eb05 	stb	zero,-24660(gp)
   1a320:	e0bfff17 	ldw	r2,-4(fp)
   1a324:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1a328:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1a32c:	10000226 	beq	r2,zero,1a338 <_exit+0x2c>
    ALT_SIM_FAIL();
   1a330:	002af070 	cmpltui	zero,zero,43969
   1a334:	00000106 	br	1a33c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1a338:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1a33c:	003fff06 	br	1a33c <_exit+0x30>
